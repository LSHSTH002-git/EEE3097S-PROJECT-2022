
IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aee4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  0800afa8  0800afa8  0001afa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5d4  0800b5d4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b5d4  0800b5d4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b5d4  0800b5d4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5d4  0800b5d4  0001b5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5d8  0800b5d8  0001b5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b5dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200001e0  0800b7bc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  0800b7bc  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a676  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018d3  00000000  00000000  0002a87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002c158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002cb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012d7d  00000000  00000000  0002d420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4da  00000000  00000000  0004019d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d44e  00000000  00000000  0004b677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b8ac5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000383c  00000000  00000000  000b8b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800af8c 	.word	0x0800af8c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800af8c 	.word	0x0800af8c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 faa1 	bl	8001984 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9f1 	bl	8001834 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa93 	bl	8001984 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa89 	bl	8001984 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa19 	bl	80018b8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa0f 	bl	80018b8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f002 f8e1 	bl	8002684 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fd2a 	bl	8001f24 <__aeabi_dsub>
 80004d0:	f002 f8d8 	bl	8002684 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f001 fa8f 	bl	8001a4c <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f002 f90c 	bl	8002750 <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f001 fa86 	bl	8001a4c <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fcec 	bl	8001f24 <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f002 f8c5 	bl	80026f0 <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f001 fa6f 	bl	8001a4c <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f002 f8ec 	bl	8002750 <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 fb28 	bl	8000bd0 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_fadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	46c6      	mov	lr, r8
 800058c:	0243      	lsls	r3, r0, #9
 800058e:	0a5b      	lsrs	r3, r3, #9
 8000590:	024e      	lsls	r6, r1, #9
 8000592:	0045      	lsls	r5, r0, #1
 8000594:	004f      	lsls	r7, r1, #1
 8000596:	00da      	lsls	r2, r3, #3
 8000598:	0fc4      	lsrs	r4, r0, #31
 800059a:	469c      	mov	ip, r3
 800059c:	0a70      	lsrs	r0, r6, #9
 800059e:	4690      	mov	r8, r2
 80005a0:	b500      	push	{lr}
 80005a2:	0e2d      	lsrs	r5, r5, #24
 80005a4:	0e3f      	lsrs	r7, r7, #24
 80005a6:	0fc9      	lsrs	r1, r1, #31
 80005a8:	09b6      	lsrs	r6, r6, #6
 80005aa:	428c      	cmp	r4, r1
 80005ac:	d04b      	beq.n	8000646 <__aeabi_fadd+0xbe>
 80005ae:	1bea      	subs	r2, r5, r7
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	dd36      	ble.n	8000622 <__aeabi_fadd+0x9a>
 80005b4:	2f00      	cmp	r7, #0
 80005b6:	d061      	beq.n	800067c <__aeabi_fadd+0xf4>
 80005b8:	2dff      	cmp	r5, #255	; 0xff
 80005ba:	d100      	bne.n	80005be <__aeabi_fadd+0x36>
 80005bc:	e0ad      	b.n	800071a <__aeabi_fadd+0x192>
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	04db      	lsls	r3, r3, #19
 80005c2:	431e      	orrs	r6, r3
 80005c4:	2a1b      	cmp	r2, #27
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_fadd+0x42>
 80005c8:	e0d3      	b.n	8000772 <__aeabi_fadd+0x1ea>
 80005ca:	2001      	movs	r0, #1
 80005cc:	4643      	mov	r3, r8
 80005ce:	1a18      	subs	r0, r3, r0
 80005d0:	0143      	lsls	r3, r0, #5
 80005d2:	d400      	bmi.n	80005d6 <__aeabi_fadd+0x4e>
 80005d4:	e08c      	b.n	80006f0 <__aeabi_fadd+0x168>
 80005d6:	0180      	lsls	r0, r0, #6
 80005d8:	0987      	lsrs	r7, r0, #6
 80005da:	0038      	movs	r0, r7
 80005dc:	f002 f9ae 	bl	800293c <__clzsi2>
 80005e0:	3805      	subs	r0, #5
 80005e2:	4087      	lsls	r7, r0
 80005e4:	4285      	cmp	r5, r0
 80005e6:	dc00      	bgt.n	80005ea <__aeabi_fadd+0x62>
 80005e8:	e0b6      	b.n	8000758 <__aeabi_fadd+0x1d0>
 80005ea:	1a2d      	subs	r5, r5, r0
 80005ec:	48b3      	ldr	r0, [pc, #716]	; (80008bc <__aeabi_fadd+0x334>)
 80005ee:	4038      	ands	r0, r7
 80005f0:	0743      	lsls	r3, r0, #29
 80005f2:	d004      	beq.n	80005fe <__aeabi_fadd+0x76>
 80005f4:	230f      	movs	r3, #15
 80005f6:	4003      	ands	r3, r0
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	d000      	beq.n	80005fe <__aeabi_fadd+0x76>
 80005fc:	3004      	adds	r0, #4
 80005fe:	0143      	lsls	r3, r0, #5
 8000600:	d400      	bmi.n	8000604 <__aeabi_fadd+0x7c>
 8000602:	e078      	b.n	80006f6 <__aeabi_fadd+0x16e>
 8000604:	1c6a      	adds	r2, r5, #1
 8000606:	2dfe      	cmp	r5, #254	; 0xfe
 8000608:	d065      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 800060a:	0180      	lsls	r0, r0, #6
 800060c:	0a43      	lsrs	r3, r0, #9
 800060e:	469c      	mov	ip, r3
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	4663      	mov	r3, ip
 8000614:	05d0      	lsls	r0, r2, #23
 8000616:	4318      	orrs	r0, r3
 8000618:	07e4      	lsls	r4, r4, #31
 800061a:	4320      	orrs	r0, r4
 800061c:	bc80      	pop	{r7}
 800061e:	46b8      	mov	r8, r7
 8000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000622:	2a00      	cmp	r2, #0
 8000624:	d035      	beq.n	8000692 <__aeabi_fadd+0x10a>
 8000626:	1b7a      	subs	r2, r7, r5
 8000628:	2d00      	cmp	r5, #0
 800062a:	d000      	beq.n	800062e <__aeabi_fadd+0xa6>
 800062c:	e0af      	b.n	800078e <__aeabi_fadd+0x206>
 800062e:	4643      	mov	r3, r8
 8000630:	2b00      	cmp	r3, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_fadd+0xae>
 8000634:	e0a7      	b.n	8000786 <__aeabi_fadd+0x1fe>
 8000636:	1e53      	subs	r3, r2, #1
 8000638:	2a01      	cmp	r2, #1
 800063a:	d100      	bne.n	800063e <__aeabi_fadd+0xb6>
 800063c:	e12f      	b.n	800089e <__aeabi_fadd+0x316>
 800063e:	2aff      	cmp	r2, #255	; 0xff
 8000640:	d069      	beq.n	8000716 <__aeabi_fadd+0x18e>
 8000642:	001a      	movs	r2, r3
 8000644:	e0aa      	b.n	800079c <__aeabi_fadd+0x214>
 8000646:	1be9      	subs	r1, r5, r7
 8000648:	2900      	cmp	r1, #0
 800064a:	dd70      	ble.n	800072e <__aeabi_fadd+0x1a6>
 800064c:	2f00      	cmp	r7, #0
 800064e:	d037      	beq.n	80006c0 <__aeabi_fadd+0x138>
 8000650:	2dff      	cmp	r5, #255	; 0xff
 8000652:	d062      	beq.n	800071a <__aeabi_fadd+0x192>
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	04db      	lsls	r3, r3, #19
 8000658:	431e      	orrs	r6, r3
 800065a:	291b      	cmp	r1, #27
 800065c:	dc00      	bgt.n	8000660 <__aeabi_fadd+0xd8>
 800065e:	e0b0      	b.n	80007c2 <__aeabi_fadd+0x23a>
 8000660:	2001      	movs	r0, #1
 8000662:	4440      	add	r0, r8
 8000664:	0143      	lsls	r3, r0, #5
 8000666:	d543      	bpl.n	80006f0 <__aeabi_fadd+0x168>
 8000668:	3501      	adds	r5, #1
 800066a:	2dff      	cmp	r5, #255	; 0xff
 800066c:	d033      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 800066e:	2301      	movs	r3, #1
 8000670:	4a93      	ldr	r2, [pc, #588]	; (80008c0 <__aeabi_fadd+0x338>)
 8000672:	4003      	ands	r3, r0
 8000674:	0840      	lsrs	r0, r0, #1
 8000676:	4010      	ands	r0, r2
 8000678:	4318      	orrs	r0, r3
 800067a:	e7b9      	b.n	80005f0 <__aeabi_fadd+0x68>
 800067c:	2e00      	cmp	r6, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_fadd+0xfa>
 8000680:	e083      	b.n	800078a <__aeabi_fadd+0x202>
 8000682:	1e51      	subs	r1, r2, #1
 8000684:	2a01      	cmp	r2, #1
 8000686:	d100      	bne.n	800068a <__aeabi_fadd+0x102>
 8000688:	e0d8      	b.n	800083c <__aeabi_fadd+0x2b4>
 800068a:	2aff      	cmp	r2, #255	; 0xff
 800068c:	d045      	beq.n	800071a <__aeabi_fadd+0x192>
 800068e:	000a      	movs	r2, r1
 8000690:	e798      	b.n	80005c4 <__aeabi_fadd+0x3c>
 8000692:	27fe      	movs	r7, #254	; 0xfe
 8000694:	1c6a      	adds	r2, r5, #1
 8000696:	4217      	tst	r7, r2
 8000698:	d000      	beq.n	800069c <__aeabi_fadd+0x114>
 800069a:	e086      	b.n	80007aa <__aeabi_fadd+0x222>
 800069c:	2d00      	cmp	r5, #0
 800069e:	d000      	beq.n	80006a2 <__aeabi_fadd+0x11a>
 80006a0:	e0b7      	b.n	8000812 <__aeabi_fadd+0x28a>
 80006a2:	4643      	mov	r3, r8
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_fadd+0x122>
 80006a8:	e0f3      	b.n	8000892 <__aeabi_fadd+0x30a>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2e00      	cmp	r6, #0
 80006ae:	d0b0      	beq.n	8000612 <__aeabi_fadd+0x8a>
 80006b0:	1b98      	subs	r0, r3, r6
 80006b2:	0143      	lsls	r3, r0, #5
 80006b4:	d400      	bmi.n	80006b8 <__aeabi_fadd+0x130>
 80006b6:	e0fa      	b.n	80008ae <__aeabi_fadd+0x326>
 80006b8:	4643      	mov	r3, r8
 80006ba:	000c      	movs	r4, r1
 80006bc:	1af0      	subs	r0, r6, r3
 80006be:	e797      	b.n	80005f0 <__aeabi_fadd+0x68>
 80006c0:	2e00      	cmp	r6, #0
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fadd+0x13e>
 80006c4:	e0c8      	b.n	8000858 <__aeabi_fadd+0x2d0>
 80006c6:	1e4a      	subs	r2, r1, #1
 80006c8:	2901      	cmp	r1, #1
 80006ca:	d100      	bne.n	80006ce <__aeabi_fadd+0x146>
 80006cc:	e0ae      	b.n	800082c <__aeabi_fadd+0x2a4>
 80006ce:	29ff      	cmp	r1, #255	; 0xff
 80006d0:	d023      	beq.n	800071a <__aeabi_fadd+0x192>
 80006d2:	0011      	movs	r1, r2
 80006d4:	e7c1      	b.n	800065a <__aeabi_fadd+0xd2>
 80006d6:	2300      	movs	r3, #0
 80006d8:	22ff      	movs	r2, #255	; 0xff
 80006da:	469c      	mov	ip, r3
 80006dc:	e799      	b.n	8000612 <__aeabi_fadd+0x8a>
 80006de:	21fe      	movs	r1, #254	; 0xfe
 80006e0:	1c6a      	adds	r2, r5, #1
 80006e2:	4211      	tst	r1, r2
 80006e4:	d077      	beq.n	80007d6 <__aeabi_fadd+0x24e>
 80006e6:	2aff      	cmp	r2, #255	; 0xff
 80006e8:	d0f5      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 80006ea:	0015      	movs	r5, r2
 80006ec:	4446      	add	r6, r8
 80006ee:	0870      	lsrs	r0, r6, #1
 80006f0:	0743      	lsls	r3, r0, #29
 80006f2:	d000      	beq.n	80006f6 <__aeabi_fadd+0x16e>
 80006f4:	e77e      	b.n	80005f4 <__aeabi_fadd+0x6c>
 80006f6:	08c3      	lsrs	r3, r0, #3
 80006f8:	2dff      	cmp	r5, #255	; 0xff
 80006fa:	d00e      	beq.n	800071a <__aeabi_fadd+0x192>
 80006fc:	025b      	lsls	r3, r3, #9
 80006fe:	0a5b      	lsrs	r3, r3, #9
 8000700:	469c      	mov	ip, r3
 8000702:	b2ea      	uxtb	r2, r5
 8000704:	e785      	b.n	8000612 <__aeabi_fadd+0x8a>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d007      	beq.n	800071a <__aeabi_fadd+0x192>
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	03d2      	lsls	r2, r2, #15
 800070e:	4213      	tst	r3, r2
 8000710:	d003      	beq.n	800071a <__aeabi_fadd+0x192>
 8000712:	4210      	tst	r0, r2
 8000714:	d101      	bne.n	800071a <__aeabi_fadd+0x192>
 8000716:	000c      	movs	r4, r1
 8000718:	0003      	movs	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d0db      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 800071e:	2080      	movs	r0, #128	; 0x80
 8000720:	03c0      	lsls	r0, r0, #15
 8000722:	4318      	orrs	r0, r3
 8000724:	0240      	lsls	r0, r0, #9
 8000726:	0a43      	lsrs	r3, r0, #9
 8000728:	469c      	mov	ip, r3
 800072a:	22ff      	movs	r2, #255	; 0xff
 800072c:	e771      	b.n	8000612 <__aeabi_fadd+0x8a>
 800072e:	2900      	cmp	r1, #0
 8000730:	d0d5      	beq.n	80006de <__aeabi_fadd+0x156>
 8000732:	1b7a      	subs	r2, r7, r5
 8000734:	2d00      	cmp	r5, #0
 8000736:	d160      	bne.n	80007fa <__aeabi_fadd+0x272>
 8000738:	4643      	mov	r3, r8
 800073a:	2b00      	cmp	r3, #0
 800073c:	d024      	beq.n	8000788 <__aeabi_fadd+0x200>
 800073e:	1e53      	subs	r3, r2, #1
 8000740:	2a01      	cmp	r2, #1
 8000742:	d073      	beq.n	800082c <__aeabi_fadd+0x2a4>
 8000744:	2aff      	cmp	r2, #255	; 0xff
 8000746:	d0e7      	beq.n	8000718 <__aeabi_fadd+0x190>
 8000748:	001a      	movs	r2, r3
 800074a:	2a1b      	cmp	r2, #27
 800074c:	dc00      	bgt.n	8000750 <__aeabi_fadd+0x1c8>
 800074e:	e085      	b.n	800085c <__aeabi_fadd+0x2d4>
 8000750:	2001      	movs	r0, #1
 8000752:	003d      	movs	r5, r7
 8000754:	1980      	adds	r0, r0, r6
 8000756:	e785      	b.n	8000664 <__aeabi_fadd+0xdc>
 8000758:	2320      	movs	r3, #32
 800075a:	003a      	movs	r2, r7
 800075c:	1b45      	subs	r5, r0, r5
 800075e:	0038      	movs	r0, r7
 8000760:	3501      	adds	r5, #1
 8000762:	40ea      	lsrs	r2, r5
 8000764:	1b5d      	subs	r5, r3, r5
 8000766:	40a8      	lsls	r0, r5
 8000768:	1e43      	subs	r3, r0, #1
 800076a:	4198      	sbcs	r0, r3
 800076c:	2500      	movs	r5, #0
 800076e:	4310      	orrs	r0, r2
 8000770:	e73e      	b.n	80005f0 <__aeabi_fadd+0x68>
 8000772:	2320      	movs	r3, #32
 8000774:	0030      	movs	r0, r6
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	0031      	movs	r1, r6
 800077a:	4098      	lsls	r0, r3
 800077c:	40d1      	lsrs	r1, r2
 800077e:	1e43      	subs	r3, r0, #1
 8000780:	4198      	sbcs	r0, r3
 8000782:	4308      	orrs	r0, r1
 8000784:	e722      	b.n	80005cc <__aeabi_fadd+0x44>
 8000786:	000c      	movs	r4, r1
 8000788:	0003      	movs	r3, r0
 800078a:	0015      	movs	r5, r2
 800078c:	e7b4      	b.n	80006f8 <__aeabi_fadd+0x170>
 800078e:	2fff      	cmp	r7, #255	; 0xff
 8000790:	d0c1      	beq.n	8000716 <__aeabi_fadd+0x18e>
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	4640      	mov	r0, r8
 8000796:	04db      	lsls	r3, r3, #19
 8000798:	4318      	orrs	r0, r3
 800079a:	4680      	mov	r8, r0
 800079c:	2a1b      	cmp	r2, #27
 800079e:	dd51      	ble.n	8000844 <__aeabi_fadd+0x2bc>
 80007a0:	2001      	movs	r0, #1
 80007a2:	000c      	movs	r4, r1
 80007a4:	003d      	movs	r5, r7
 80007a6:	1a30      	subs	r0, r6, r0
 80007a8:	e712      	b.n	80005d0 <__aeabi_fadd+0x48>
 80007aa:	4643      	mov	r3, r8
 80007ac:	1b9f      	subs	r7, r3, r6
 80007ae:	017b      	lsls	r3, r7, #5
 80007b0:	d42b      	bmi.n	800080a <__aeabi_fadd+0x282>
 80007b2:	2f00      	cmp	r7, #0
 80007b4:	d000      	beq.n	80007b8 <__aeabi_fadd+0x230>
 80007b6:	e710      	b.n	80005da <__aeabi_fadd+0x52>
 80007b8:	2300      	movs	r3, #0
 80007ba:	2400      	movs	r4, #0
 80007bc:	2200      	movs	r2, #0
 80007be:	469c      	mov	ip, r3
 80007c0:	e727      	b.n	8000612 <__aeabi_fadd+0x8a>
 80007c2:	2320      	movs	r3, #32
 80007c4:	0032      	movs	r2, r6
 80007c6:	0030      	movs	r0, r6
 80007c8:	40ca      	lsrs	r2, r1
 80007ca:	1a59      	subs	r1, r3, r1
 80007cc:	4088      	lsls	r0, r1
 80007ce:	1e43      	subs	r3, r0, #1
 80007d0:	4198      	sbcs	r0, r3
 80007d2:	4310      	orrs	r0, r2
 80007d4:	e745      	b.n	8000662 <__aeabi_fadd+0xda>
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	d14a      	bne.n	8000870 <__aeabi_fadd+0x2e8>
 80007da:	4643      	mov	r3, r8
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d063      	beq.n	80008a8 <__aeabi_fadd+0x320>
 80007e0:	2200      	movs	r2, #0
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fadd+0x260>
 80007e6:	e714      	b.n	8000612 <__aeabi_fadd+0x8a>
 80007e8:	0030      	movs	r0, r6
 80007ea:	4440      	add	r0, r8
 80007ec:	0143      	lsls	r3, r0, #5
 80007ee:	d400      	bmi.n	80007f2 <__aeabi_fadd+0x26a>
 80007f0:	e77e      	b.n	80006f0 <__aeabi_fadd+0x168>
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <__aeabi_fadd+0x334>)
 80007f4:	3501      	adds	r5, #1
 80007f6:	4018      	ands	r0, r3
 80007f8:	e77a      	b.n	80006f0 <__aeabi_fadd+0x168>
 80007fa:	2fff      	cmp	r7, #255	; 0xff
 80007fc:	d08c      	beq.n	8000718 <__aeabi_fadd+0x190>
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	4641      	mov	r1, r8
 8000802:	04db      	lsls	r3, r3, #19
 8000804:	4319      	orrs	r1, r3
 8000806:	4688      	mov	r8, r1
 8000808:	e79f      	b.n	800074a <__aeabi_fadd+0x1c2>
 800080a:	4643      	mov	r3, r8
 800080c:	000c      	movs	r4, r1
 800080e:	1af7      	subs	r7, r6, r3
 8000810:	e6e3      	b.n	80005da <__aeabi_fadd+0x52>
 8000812:	4642      	mov	r2, r8
 8000814:	2a00      	cmp	r2, #0
 8000816:	d000      	beq.n	800081a <__aeabi_fadd+0x292>
 8000818:	e775      	b.n	8000706 <__aeabi_fadd+0x17e>
 800081a:	2e00      	cmp	r6, #0
 800081c:	d000      	beq.n	8000820 <__aeabi_fadd+0x298>
 800081e:	e77a      	b.n	8000716 <__aeabi_fadd+0x18e>
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	03db      	lsls	r3, r3, #15
 8000824:	2400      	movs	r4, #0
 8000826:	469c      	mov	ip, r3
 8000828:	22ff      	movs	r2, #255	; 0xff
 800082a:	e6f2      	b.n	8000612 <__aeabi_fadd+0x8a>
 800082c:	0030      	movs	r0, r6
 800082e:	4440      	add	r0, r8
 8000830:	2501      	movs	r5, #1
 8000832:	0143      	lsls	r3, r0, #5
 8000834:	d400      	bmi.n	8000838 <__aeabi_fadd+0x2b0>
 8000836:	e75b      	b.n	80006f0 <__aeabi_fadd+0x168>
 8000838:	2502      	movs	r5, #2
 800083a:	e718      	b.n	800066e <__aeabi_fadd+0xe6>
 800083c:	4643      	mov	r3, r8
 800083e:	2501      	movs	r5, #1
 8000840:	1b98      	subs	r0, r3, r6
 8000842:	e6c5      	b.n	80005d0 <__aeabi_fadd+0x48>
 8000844:	2320      	movs	r3, #32
 8000846:	4644      	mov	r4, r8
 8000848:	4640      	mov	r0, r8
 800084a:	40d4      	lsrs	r4, r2
 800084c:	1a9a      	subs	r2, r3, r2
 800084e:	4090      	lsls	r0, r2
 8000850:	1e43      	subs	r3, r0, #1
 8000852:	4198      	sbcs	r0, r3
 8000854:	4320      	orrs	r0, r4
 8000856:	e7a4      	b.n	80007a2 <__aeabi_fadd+0x21a>
 8000858:	000d      	movs	r5, r1
 800085a:	e74d      	b.n	80006f8 <__aeabi_fadd+0x170>
 800085c:	2320      	movs	r3, #32
 800085e:	4641      	mov	r1, r8
 8000860:	4640      	mov	r0, r8
 8000862:	40d1      	lsrs	r1, r2
 8000864:	1a9a      	subs	r2, r3, r2
 8000866:	4090      	lsls	r0, r2
 8000868:	1e43      	subs	r3, r0, #1
 800086a:	4198      	sbcs	r0, r3
 800086c:	4308      	orrs	r0, r1
 800086e:	e770      	b.n	8000752 <__aeabi_fadd+0x1ca>
 8000870:	4642      	mov	r2, r8
 8000872:	2a00      	cmp	r2, #0
 8000874:	d100      	bne.n	8000878 <__aeabi_fadd+0x2f0>
 8000876:	e74f      	b.n	8000718 <__aeabi_fadd+0x190>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d100      	bne.n	800087e <__aeabi_fadd+0x2f6>
 800087c:	e74d      	b.n	800071a <__aeabi_fadd+0x192>
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	03d2      	lsls	r2, r2, #15
 8000882:	4213      	tst	r3, r2
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x300>
 8000886:	e748      	b.n	800071a <__aeabi_fadd+0x192>
 8000888:	4210      	tst	r0, r2
 800088a:	d000      	beq.n	800088e <__aeabi_fadd+0x306>
 800088c:	e745      	b.n	800071a <__aeabi_fadd+0x192>
 800088e:	0003      	movs	r3, r0
 8000890:	e743      	b.n	800071a <__aeabi_fadd+0x192>
 8000892:	2e00      	cmp	r6, #0
 8000894:	d090      	beq.n	80007b8 <__aeabi_fadd+0x230>
 8000896:	000c      	movs	r4, r1
 8000898:	4684      	mov	ip, r0
 800089a:	2200      	movs	r2, #0
 800089c:	e6b9      	b.n	8000612 <__aeabi_fadd+0x8a>
 800089e:	4643      	mov	r3, r8
 80008a0:	000c      	movs	r4, r1
 80008a2:	1af0      	subs	r0, r6, r3
 80008a4:	3501      	adds	r5, #1
 80008a6:	e693      	b.n	80005d0 <__aeabi_fadd+0x48>
 80008a8:	4684      	mov	ip, r0
 80008aa:	2200      	movs	r2, #0
 80008ac:	e6b1      	b.n	8000612 <__aeabi_fadd+0x8a>
 80008ae:	2800      	cmp	r0, #0
 80008b0:	d000      	beq.n	80008b4 <__aeabi_fadd+0x32c>
 80008b2:	e71d      	b.n	80006f0 <__aeabi_fadd+0x168>
 80008b4:	2300      	movs	r3, #0
 80008b6:	2400      	movs	r4, #0
 80008b8:	469c      	mov	ip, r3
 80008ba:	e6aa      	b.n	8000612 <__aeabi_fadd+0x8a>
 80008bc:	fbffffff 	.word	0xfbffffff
 80008c0:	7dffffff 	.word	0x7dffffff

080008c4 <__aeabi_fdiv>:
 80008c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c6:	464f      	mov	r7, r9
 80008c8:	4646      	mov	r6, r8
 80008ca:	46d6      	mov	lr, sl
 80008cc:	0245      	lsls	r5, r0, #9
 80008ce:	b5c0      	push	{r6, r7, lr}
 80008d0:	0047      	lsls	r7, r0, #1
 80008d2:	1c0c      	adds	r4, r1, #0
 80008d4:	0a6d      	lsrs	r5, r5, #9
 80008d6:	0e3f      	lsrs	r7, r7, #24
 80008d8:	0fc6      	lsrs	r6, r0, #31
 80008da:	2f00      	cmp	r7, #0
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fdiv+0x1c>
 80008de:	e070      	b.n	80009c2 <__aeabi_fdiv+0xfe>
 80008e0:	2fff      	cmp	r7, #255	; 0xff
 80008e2:	d100      	bne.n	80008e6 <__aeabi_fdiv+0x22>
 80008e4:	e075      	b.n	80009d2 <__aeabi_fdiv+0x10e>
 80008e6:	00eb      	lsls	r3, r5, #3
 80008e8:	2580      	movs	r5, #128	; 0x80
 80008ea:	04ed      	lsls	r5, r5, #19
 80008ec:	431d      	orrs	r5, r3
 80008ee:	2300      	movs	r3, #0
 80008f0:	4699      	mov	r9, r3
 80008f2:	469a      	mov	sl, r3
 80008f4:	3f7f      	subs	r7, #127	; 0x7f
 80008f6:	0260      	lsls	r0, r4, #9
 80008f8:	0a43      	lsrs	r3, r0, #9
 80008fa:	4698      	mov	r8, r3
 80008fc:	0063      	lsls	r3, r4, #1
 80008fe:	0e1b      	lsrs	r3, r3, #24
 8000900:	0fe4      	lsrs	r4, r4, #31
 8000902:	2b00      	cmp	r3, #0
 8000904:	d04e      	beq.n	80009a4 <__aeabi_fdiv+0xe0>
 8000906:	2bff      	cmp	r3, #255	; 0xff
 8000908:	d046      	beq.n	8000998 <__aeabi_fdiv+0xd4>
 800090a:	4642      	mov	r2, r8
 800090c:	00d0      	lsls	r0, r2, #3
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	04d2      	lsls	r2, r2, #19
 8000912:	4302      	orrs	r2, r0
 8000914:	4690      	mov	r8, r2
 8000916:	2200      	movs	r2, #0
 8000918:	3b7f      	subs	r3, #127	; 0x7f
 800091a:	0031      	movs	r1, r6
 800091c:	1aff      	subs	r7, r7, r3
 800091e:	464b      	mov	r3, r9
 8000920:	4061      	eors	r1, r4
 8000922:	b2c9      	uxtb	r1, r1
 8000924:	4313      	orrs	r3, r2
 8000926:	2b0f      	cmp	r3, #15
 8000928:	d900      	bls.n	800092c <__aeabi_fdiv+0x68>
 800092a:	e0b5      	b.n	8000a98 <__aeabi_fdiv+0x1d4>
 800092c:	486e      	ldr	r0, [pc, #440]	; (8000ae8 <__aeabi_fdiv+0x224>)
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	58c3      	ldr	r3, [r0, r3]
 8000932:	469f      	mov	pc, r3
 8000934:	2300      	movs	r3, #0
 8000936:	4698      	mov	r8, r3
 8000938:	0026      	movs	r6, r4
 800093a:	4645      	mov	r5, r8
 800093c:	4692      	mov	sl, r2
 800093e:	4653      	mov	r3, sl
 8000940:	2b02      	cmp	r3, #2
 8000942:	d100      	bne.n	8000946 <__aeabi_fdiv+0x82>
 8000944:	e089      	b.n	8000a5a <__aeabi_fdiv+0x196>
 8000946:	2b03      	cmp	r3, #3
 8000948:	d100      	bne.n	800094c <__aeabi_fdiv+0x88>
 800094a:	e09e      	b.n	8000a8a <__aeabi_fdiv+0x1c6>
 800094c:	2b01      	cmp	r3, #1
 800094e:	d018      	beq.n	8000982 <__aeabi_fdiv+0xbe>
 8000950:	003b      	movs	r3, r7
 8000952:	337f      	adds	r3, #127	; 0x7f
 8000954:	2b00      	cmp	r3, #0
 8000956:	dd69      	ble.n	8000a2c <__aeabi_fdiv+0x168>
 8000958:	076a      	lsls	r2, r5, #29
 800095a:	d004      	beq.n	8000966 <__aeabi_fdiv+0xa2>
 800095c:	220f      	movs	r2, #15
 800095e:	402a      	ands	r2, r5
 8000960:	2a04      	cmp	r2, #4
 8000962:	d000      	beq.n	8000966 <__aeabi_fdiv+0xa2>
 8000964:	3504      	adds	r5, #4
 8000966:	012a      	lsls	r2, r5, #4
 8000968:	d503      	bpl.n	8000972 <__aeabi_fdiv+0xae>
 800096a:	4b60      	ldr	r3, [pc, #384]	; (8000aec <__aeabi_fdiv+0x228>)
 800096c:	401d      	ands	r5, r3
 800096e:	003b      	movs	r3, r7
 8000970:	3380      	adds	r3, #128	; 0x80
 8000972:	2bfe      	cmp	r3, #254	; 0xfe
 8000974:	dd00      	ble.n	8000978 <__aeabi_fdiv+0xb4>
 8000976:	e070      	b.n	8000a5a <__aeabi_fdiv+0x196>
 8000978:	01ad      	lsls	r5, r5, #6
 800097a:	0a6d      	lsrs	r5, r5, #9
 800097c:	b2d8      	uxtb	r0, r3
 800097e:	e002      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000980:	000e      	movs	r6, r1
 8000982:	2000      	movs	r0, #0
 8000984:	2500      	movs	r5, #0
 8000986:	05c0      	lsls	r0, r0, #23
 8000988:	4328      	orrs	r0, r5
 800098a:	07f6      	lsls	r6, r6, #31
 800098c:	4330      	orrs	r0, r6
 800098e:	bce0      	pop	{r5, r6, r7}
 8000990:	46ba      	mov	sl, r7
 8000992:	46b1      	mov	r9, r6
 8000994:	46a8      	mov	r8, r5
 8000996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000998:	4643      	mov	r3, r8
 800099a:	2b00      	cmp	r3, #0
 800099c:	d13f      	bne.n	8000a1e <__aeabi_fdiv+0x15a>
 800099e:	2202      	movs	r2, #2
 80009a0:	3fff      	subs	r7, #255	; 0xff
 80009a2:	e003      	b.n	80009ac <__aeabi_fdiv+0xe8>
 80009a4:	4643      	mov	r3, r8
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d12d      	bne.n	8000a06 <__aeabi_fdiv+0x142>
 80009aa:	2201      	movs	r2, #1
 80009ac:	0031      	movs	r1, r6
 80009ae:	464b      	mov	r3, r9
 80009b0:	4061      	eors	r1, r4
 80009b2:	b2c9      	uxtb	r1, r1
 80009b4:	4313      	orrs	r3, r2
 80009b6:	2b0f      	cmp	r3, #15
 80009b8:	d834      	bhi.n	8000a24 <__aeabi_fdiv+0x160>
 80009ba:	484d      	ldr	r0, [pc, #308]	; (8000af0 <__aeabi_fdiv+0x22c>)
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	58c3      	ldr	r3, [r0, r3]
 80009c0:	469f      	mov	pc, r3
 80009c2:	2d00      	cmp	r5, #0
 80009c4:	d113      	bne.n	80009ee <__aeabi_fdiv+0x12a>
 80009c6:	2304      	movs	r3, #4
 80009c8:	4699      	mov	r9, r3
 80009ca:	3b03      	subs	r3, #3
 80009cc:	2700      	movs	r7, #0
 80009ce:	469a      	mov	sl, r3
 80009d0:	e791      	b.n	80008f6 <__aeabi_fdiv+0x32>
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d105      	bne.n	80009e2 <__aeabi_fdiv+0x11e>
 80009d6:	2308      	movs	r3, #8
 80009d8:	4699      	mov	r9, r3
 80009da:	3b06      	subs	r3, #6
 80009dc:	27ff      	movs	r7, #255	; 0xff
 80009de:	469a      	mov	sl, r3
 80009e0:	e789      	b.n	80008f6 <__aeabi_fdiv+0x32>
 80009e2:	230c      	movs	r3, #12
 80009e4:	4699      	mov	r9, r3
 80009e6:	3b09      	subs	r3, #9
 80009e8:	27ff      	movs	r7, #255	; 0xff
 80009ea:	469a      	mov	sl, r3
 80009ec:	e783      	b.n	80008f6 <__aeabi_fdiv+0x32>
 80009ee:	0028      	movs	r0, r5
 80009f0:	f001 ffa4 	bl	800293c <__clzsi2>
 80009f4:	2776      	movs	r7, #118	; 0x76
 80009f6:	1f43      	subs	r3, r0, #5
 80009f8:	409d      	lsls	r5, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	427f      	negs	r7, r7
 80009fe:	4699      	mov	r9, r3
 8000a00:	469a      	mov	sl, r3
 8000a02:	1a3f      	subs	r7, r7, r0
 8000a04:	e777      	b.n	80008f6 <__aeabi_fdiv+0x32>
 8000a06:	4640      	mov	r0, r8
 8000a08:	f001 ff98 	bl	800293c <__clzsi2>
 8000a0c:	4642      	mov	r2, r8
 8000a0e:	1f43      	subs	r3, r0, #5
 8000a10:	409a      	lsls	r2, r3
 8000a12:	2376      	movs	r3, #118	; 0x76
 8000a14:	425b      	negs	r3, r3
 8000a16:	4690      	mov	r8, r2
 8000a18:	1a1b      	subs	r3, r3, r0
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	e77d      	b.n	800091a <__aeabi_fdiv+0x56>
 8000a1e:	23ff      	movs	r3, #255	; 0xff
 8000a20:	2203      	movs	r2, #3
 8000a22:	e77a      	b.n	800091a <__aeabi_fdiv+0x56>
 8000a24:	000e      	movs	r6, r1
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	2500      	movs	r5, #0
 8000a2a:	e7ac      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	1ac0      	subs	r0, r0, r3
 8000a30:	281b      	cmp	r0, #27
 8000a32:	dca6      	bgt.n	8000982 <__aeabi_fdiv+0xbe>
 8000a34:	379e      	adds	r7, #158	; 0x9e
 8000a36:	002a      	movs	r2, r5
 8000a38:	40bd      	lsls	r5, r7
 8000a3a:	40c2      	lsrs	r2, r0
 8000a3c:	1e6b      	subs	r3, r5, #1
 8000a3e:	419d      	sbcs	r5, r3
 8000a40:	4315      	orrs	r5, r2
 8000a42:	076b      	lsls	r3, r5, #29
 8000a44:	d004      	beq.n	8000a50 <__aeabi_fdiv+0x18c>
 8000a46:	230f      	movs	r3, #15
 8000a48:	402b      	ands	r3, r5
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_fdiv+0x18c>
 8000a4e:	3504      	adds	r5, #4
 8000a50:	016b      	lsls	r3, r5, #5
 8000a52:	d544      	bpl.n	8000ade <__aeabi_fdiv+0x21a>
 8000a54:	2001      	movs	r0, #1
 8000a56:	2500      	movs	r5, #0
 8000a58:	e795      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000a5a:	20ff      	movs	r0, #255	; 0xff
 8000a5c:	2500      	movs	r5, #0
 8000a5e:	e792      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000a60:	2580      	movs	r5, #128	; 0x80
 8000a62:	2600      	movs	r6, #0
 8000a64:	20ff      	movs	r0, #255	; 0xff
 8000a66:	03ed      	lsls	r5, r5, #15
 8000a68:	e78d      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	4698      	mov	r8, r3
 8000a6e:	2080      	movs	r0, #128	; 0x80
 8000a70:	03c0      	lsls	r0, r0, #15
 8000a72:	4205      	tst	r5, r0
 8000a74:	d009      	beq.n	8000a8a <__aeabi_fdiv+0x1c6>
 8000a76:	4643      	mov	r3, r8
 8000a78:	4203      	tst	r3, r0
 8000a7a:	d106      	bne.n	8000a8a <__aeabi_fdiv+0x1c6>
 8000a7c:	4645      	mov	r5, r8
 8000a7e:	4305      	orrs	r5, r0
 8000a80:	026d      	lsls	r5, r5, #9
 8000a82:	0026      	movs	r6, r4
 8000a84:	20ff      	movs	r0, #255	; 0xff
 8000a86:	0a6d      	lsrs	r5, r5, #9
 8000a88:	e77d      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000a8a:	2080      	movs	r0, #128	; 0x80
 8000a8c:	03c0      	lsls	r0, r0, #15
 8000a8e:	4305      	orrs	r5, r0
 8000a90:	026d      	lsls	r5, r5, #9
 8000a92:	20ff      	movs	r0, #255	; 0xff
 8000a94:	0a6d      	lsrs	r5, r5, #9
 8000a96:	e776      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000a98:	4642      	mov	r2, r8
 8000a9a:	016b      	lsls	r3, r5, #5
 8000a9c:	0150      	lsls	r0, r2, #5
 8000a9e:	4283      	cmp	r3, r0
 8000aa0:	d219      	bcs.n	8000ad6 <__aeabi_fdiv+0x212>
 8000aa2:	221b      	movs	r2, #27
 8000aa4:	2500      	movs	r5, #0
 8000aa6:	3f01      	subs	r7, #1
 8000aa8:	2601      	movs	r6, #1
 8000aaa:	001c      	movs	r4, r3
 8000aac:	006d      	lsls	r5, r5, #1
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	2c00      	cmp	r4, #0
 8000ab2:	db01      	blt.n	8000ab8 <__aeabi_fdiv+0x1f4>
 8000ab4:	4298      	cmp	r0, r3
 8000ab6:	d801      	bhi.n	8000abc <__aeabi_fdiv+0x1f8>
 8000ab8:	1a1b      	subs	r3, r3, r0
 8000aba:	4335      	orrs	r5, r6
 8000abc:	3a01      	subs	r2, #1
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	d1f3      	bne.n	8000aaa <__aeabi_fdiv+0x1e6>
 8000ac2:	1e5a      	subs	r2, r3, #1
 8000ac4:	4193      	sbcs	r3, r2
 8000ac6:	431d      	orrs	r5, r3
 8000ac8:	003b      	movs	r3, r7
 8000aca:	337f      	adds	r3, #127	; 0x7f
 8000acc:	000e      	movs	r6, r1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	dd00      	ble.n	8000ad4 <__aeabi_fdiv+0x210>
 8000ad2:	e741      	b.n	8000958 <__aeabi_fdiv+0x94>
 8000ad4:	e7aa      	b.n	8000a2c <__aeabi_fdiv+0x168>
 8000ad6:	221a      	movs	r2, #26
 8000ad8:	2501      	movs	r5, #1
 8000ada:	1a1b      	subs	r3, r3, r0
 8000adc:	e7e4      	b.n	8000aa8 <__aeabi_fdiv+0x1e4>
 8000ade:	01ad      	lsls	r5, r5, #6
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	0a6d      	lsrs	r5, r5, #9
 8000ae4:	e74f      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	0800b018 	.word	0x0800b018
 8000aec:	f7ffffff 	.word	0xf7ffffff
 8000af0:	0800b058 	.word	0x0800b058

08000af4 <__aeabi_f2iz>:
 8000af4:	0241      	lsls	r1, r0, #9
 8000af6:	0042      	lsls	r2, r0, #1
 8000af8:	0fc3      	lsrs	r3, r0, #31
 8000afa:	0a49      	lsrs	r1, r1, #9
 8000afc:	2000      	movs	r0, #0
 8000afe:	0e12      	lsrs	r2, r2, #24
 8000b00:	2a7e      	cmp	r2, #126	; 0x7e
 8000b02:	dd03      	ble.n	8000b0c <__aeabi_f2iz+0x18>
 8000b04:	2a9d      	cmp	r2, #157	; 0x9d
 8000b06:	dd02      	ble.n	8000b0e <__aeabi_f2iz+0x1a>
 8000b08:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <__aeabi_f2iz+0x3c>)
 8000b0a:	1898      	adds	r0, r3, r2
 8000b0c:	4770      	bx	lr
 8000b0e:	2080      	movs	r0, #128	; 0x80
 8000b10:	0400      	lsls	r0, r0, #16
 8000b12:	4301      	orrs	r1, r0
 8000b14:	2a95      	cmp	r2, #149	; 0x95
 8000b16:	dc07      	bgt.n	8000b28 <__aeabi_f2iz+0x34>
 8000b18:	2096      	movs	r0, #150	; 0x96
 8000b1a:	1a82      	subs	r2, r0, r2
 8000b1c:	40d1      	lsrs	r1, r2
 8000b1e:	4248      	negs	r0, r1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1f3      	bne.n	8000b0c <__aeabi_f2iz+0x18>
 8000b24:	0008      	movs	r0, r1
 8000b26:	e7f1      	b.n	8000b0c <__aeabi_f2iz+0x18>
 8000b28:	3a96      	subs	r2, #150	; 0x96
 8000b2a:	4091      	lsls	r1, r2
 8000b2c:	e7f7      	b.n	8000b1e <__aeabi_f2iz+0x2a>
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	7fffffff 	.word	0x7fffffff

08000b34 <__aeabi_i2f>:
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b36:	2800      	cmp	r0, #0
 8000b38:	d013      	beq.n	8000b62 <__aeabi_i2f+0x2e>
 8000b3a:	17c3      	asrs	r3, r0, #31
 8000b3c:	18c6      	adds	r6, r0, r3
 8000b3e:	405e      	eors	r6, r3
 8000b40:	0fc4      	lsrs	r4, r0, #31
 8000b42:	0030      	movs	r0, r6
 8000b44:	f001 fefa 	bl	800293c <__clzsi2>
 8000b48:	239e      	movs	r3, #158	; 0x9e
 8000b4a:	0005      	movs	r5, r0
 8000b4c:	1a1b      	subs	r3, r3, r0
 8000b4e:	2b96      	cmp	r3, #150	; 0x96
 8000b50:	dc0f      	bgt.n	8000b72 <__aeabi_i2f+0x3e>
 8000b52:	2808      	cmp	r0, #8
 8000b54:	dd01      	ble.n	8000b5a <__aeabi_i2f+0x26>
 8000b56:	3d08      	subs	r5, #8
 8000b58:	40ae      	lsls	r6, r5
 8000b5a:	0276      	lsls	r6, r6, #9
 8000b5c:	0a76      	lsrs	r6, r6, #9
 8000b5e:	b2d8      	uxtb	r0, r3
 8000b60:	e002      	b.n	8000b68 <__aeabi_i2f+0x34>
 8000b62:	2400      	movs	r4, #0
 8000b64:	2000      	movs	r0, #0
 8000b66:	2600      	movs	r6, #0
 8000b68:	05c0      	lsls	r0, r0, #23
 8000b6a:	4330      	orrs	r0, r6
 8000b6c:	07e4      	lsls	r4, r4, #31
 8000b6e:	4320      	orrs	r0, r4
 8000b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b72:	2b99      	cmp	r3, #153	; 0x99
 8000b74:	dd0c      	ble.n	8000b90 <__aeabi_i2f+0x5c>
 8000b76:	2205      	movs	r2, #5
 8000b78:	0031      	movs	r1, r6
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	40d1      	lsrs	r1, r2
 8000b7e:	000a      	movs	r2, r1
 8000b80:	0001      	movs	r1, r0
 8000b82:	0030      	movs	r0, r6
 8000b84:	311b      	adds	r1, #27
 8000b86:	4088      	lsls	r0, r1
 8000b88:	1e41      	subs	r1, r0, #1
 8000b8a:	4188      	sbcs	r0, r1
 8000b8c:	4302      	orrs	r2, r0
 8000b8e:	0016      	movs	r6, r2
 8000b90:	2d05      	cmp	r5, #5
 8000b92:	dc12      	bgt.n	8000bba <__aeabi_i2f+0x86>
 8000b94:	0031      	movs	r1, r6
 8000b96:	4f0d      	ldr	r7, [pc, #52]	; (8000bcc <__aeabi_i2f+0x98>)
 8000b98:	4039      	ands	r1, r7
 8000b9a:	0772      	lsls	r2, r6, #29
 8000b9c:	d009      	beq.n	8000bb2 <__aeabi_i2f+0x7e>
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	4030      	ands	r0, r6
 8000ba2:	2804      	cmp	r0, #4
 8000ba4:	d005      	beq.n	8000bb2 <__aeabi_i2f+0x7e>
 8000ba6:	3104      	adds	r1, #4
 8000ba8:	014a      	lsls	r2, r1, #5
 8000baa:	d502      	bpl.n	8000bb2 <__aeabi_i2f+0x7e>
 8000bac:	239f      	movs	r3, #159	; 0x9f
 8000bae:	4039      	ands	r1, r7
 8000bb0:	1b5b      	subs	r3, r3, r5
 8000bb2:	0189      	lsls	r1, r1, #6
 8000bb4:	0a4e      	lsrs	r6, r1, #9
 8000bb6:	b2d8      	uxtb	r0, r3
 8000bb8:	e7d6      	b.n	8000b68 <__aeabi_i2f+0x34>
 8000bba:	1f6a      	subs	r2, r5, #5
 8000bbc:	4096      	lsls	r6, r2
 8000bbe:	0031      	movs	r1, r6
 8000bc0:	4f02      	ldr	r7, [pc, #8]	; (8000bcc <__aeabi_i2f+0x98>)
 8000bc2:	4039      	ands	r1, r7
 8000bc4:	0772      	lsls	r2, r6, #29
 8000bc6:	d0f4      	beq.n	8000bb2 <__aeabi_i2f+0x7e>
 8000bc8:	e7e9      	b.n	8000b9e <__aeabi_i2f+0x6a>
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff

08000bd0 <__aeabi_dadd>:
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd2:	464f      	mov	r7, r9
 8000bd4:	4646      	mov	r6, r8
 8000bd6:	46d6      	mov	lr, sl
 8000bd8:	000d      	movs	r5, r1
 8000bda:	0004      	movs	r4, r0
 8000bdc:	b5c0      	push	{r6, r7, lr}
 8000bde:	001f      	movs	r7, r3
 8000be0:	0011      	movs	r1, r2
 8000be2:	0328      	lsls	r0, r5, #12
 8000be4:	0f62      	lsrs	r2, r4, #29
 8000be6:	0a40      	lsrs	r0, r0, #9
 8000be8:	4310      	orrs	r0, r2
 8000bea:	007a      	lsls	r2, r7, #1
 8000bec:	0d52      	lsrs	r2, r2, #21
 8000bee:	00e3      	lsls	r3, r4, #3
 8000bf0:	033c      	lsls	r4, r7, #12
 8000bf2:	4691      	mov	r9, r2
 8000bf4:	0a64      	lsrs	r4, r4, #9
 8000bf6:	0ffa      	lsrs	r2, r7, #31
 8000bf8:	0f4f      	lsrs	r7, r1, #29
 8000bfa:	006e      	lsls	r6, r5, #1
 8000bfc:	4327      	orrs	r7, r4
 8000bfe:	4692      	mov	sl, r2
 8000c00:	46b8      	mov	r8, r7
 8000c02:	0d76      	lsrs	r6, r6, #21
 8000c04:	0fed      	lsrs	r5, r5, #31
 8000c06:	00c9      	lsls	r1, r1, #3
 8000c08:	4295      	cmp	r5, r2
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_dadd+0x3e>
 8000c0c:	e099      	b.n	8000d42 <__aeabi_dadd+0x172>
 8000c0e:	464c      	mov	r4, r9
 8000c10:	1b34      	subs	r4, r6, r4
 8000c12:	46a4      	mov	ip, r4
 8000c14:	2c00      	cmp	r4, #0
 8000c16:	dc00      	bgt.n	8000c1a <__aeabi_dadd+0x4a>
 8000c18:	e07c      	b.n	8000d14 <__aeabi_dadd+0x144>
 8000c1a:	464a      	mov	r2, r9
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_dadd+0x52>
 8000c20:	e0b8      	b.n	8000d94 <__aeabi_dadd+0x1c4>
 8000c22:	4ac5      	ldr	r2, [pc, #788]	; (8000f38 <__aeabi_dadd+0x368>)
 8000c24:	4296      	cmp	r6, r2
 8000c26:	d100      	bne.n	8000c2a <__aeabi_dadd+0x5a>
 8000c28:	e11c      	b.n	8000e64 <__aeabi_dadd+0x294>
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	003c      	movs	r4, r7
 8000c2e:	0412      	lsls	r2, r2, #16
 8000c30:	4314      	orrs	r4, r2
 8000c32:	46a0      	mov	r8, r4
 8000c34:	4662      	mov	r2, ip
 8000c36:	2a38      	cmp	r2, #56	; 0x38
 8000c38:	dd00      	ble.n	8000c3c <__aeabi_dadd+0x6c>
 8000c3a:	e161      	b.n	8000f00 <__aeabi_dadd+0x330>
 8000c3c:	2a1f      	cmp	r2, #31
 8000c3e:	dd00      	ble.n	8000c42 <__aeabi_dadd+0x72>
 8000c40:	e1cc      	b.n	8000fdc <__aeabi_dadd+0x40c>
 8000c42:	4664      	mov	r4, ip
 8000c44:	2220      	movs	r2, #32
 8000c46:	1b12      	subs	r2, r2, r4
 8000c48:	4644      	mov	r4, r8
 8000c4a:	4094      	lsls	r4, r2
 8000c4c:	000f      	movs	r7, r1
 8000c4e:	46a1      	mov	r9, r4
 8000c50:	4664      	mov	r4, ip
 8000c52:	4091      	lsls	r1, r2
 8000c54:	40e7      	lsrs	r7, r4
 8000c56:	464c      	mov	r4, r9
 8000c58:	1e4a      	subs	r2, r1, #1
 8000c5a:	4191      	sbcs	r1, r2
 8000c5c:	433c      	orrs	r4, r7
 8000c5e:	4642      	mov	r2, r8
 8000c60:	4321      	orrs	r1, r4
 8000c62:	4664      	mov	r4, ip
 8000c64:	40e2      	lsrs	r2, r4
 8000c66:	1a80      	subs	r0, r0, r2
 8000c68:	1a5c      	subs	r4, r3, r1
 8000c6a:	42a3      	cmp	r3, r4
 8000c6c:	419b      	sbcs	r3, r3
 8000c6e:	425f      	negs	r7, r3
 8000c70:	1bc7      	subs	r7, r0, r7
 8000c72:	023b      	lsls	r3, r7, #8
 8000c74:	d400      	bmi.n	8000c78 <__aeabi_dadd+0xa8>
 8000c76:	e0d0      	b.n	8000e1a <__aeabi_dadd+0x24a>
 8000c78:	027f      	lsls	r7, r7, #9
 8000c7a:	0a7f      	lsrs	r7, r7, #9
 8000c7c:	2f00      	cmp	r7, #0
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_dadd+0xb2>
 8000c80:	e0ff      	b.n	8000e82 <__aeabi_dadd+0x2b2>
 8000c82:	0038      	movs	r0, r7
 8000c84:	f001 fe5a 	bl	800293c <__clzsi2>
 8000c88:	0001      	movs	r1, r0
 8000c8a:	3908      	subs	r1, #8
 8000c8c:	2320      	movs	r3, #32
 8000c8e:	0022      	movs	r2, r4
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	408f      	lsls	r7, r1
 8000c94:	40da      	lsrs	r2, r3
 8000c96:	408c      	lsls	r4, r1
 8000c98:	4317      	orrs	r7, r2
 8000c9a:	42b1      	cmp	r1, r6
 8000c9c:	da00      	bge.n	8000ca0 <__aeabi_dadd+0xd0>
 8000c9e:	e0ff      	b.n	8000ea0 <__aeabi_dadd+0x2d0>
 8000ca0:	1b89      	subs	r1, r1, r6
 8000ca2:	1c4b      	adds	r3, r1, #1
 8000ca4:	2b1f      	cmp	r3, #31
 8000ca6:	dd00      	ble.n	8000caa <__aeabi_dadd+0xda>
 8000ca8:	e0a8      	b.n	8000dfc <__aeabi_dadd+0x22c>
 8000caa:	2220      	movs	r2, #32
 8000cac:	0039      	movs	r1, r7
 8000cae:	1ad2      	subs	r2, r2, r3
 8000cb0:	0020      	movs	r0, r4
 8000cb2:	4094      	lsls	r4, r2
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	40d8      	lsrs	r0, r3
 8000cb8:	1e62      	subs	r2, r4, #1
 8000cba:	4194      	sbcs	r4, r2
 8000cbc:	40df      	lsrs	r7, r3
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4301      	orrs	r1, r0
 8000cc2:	430c      	orrs	r4, r1
 8000cc4:	0763      	lsls	r3, r4, #29
 8000cc6:	d009      	beq.n	8000cdc <__aeabi_dadd+0x10c>
 8000cc8:	230f      	movs	r3, #15
 8000cca:	4023      	ands	r3, r4
 8000ccc:	2b04      	cmp	r3, #4
 8000cce:	d005      	beq.n	8000cdc <__aeabi_dadd+0x10c>
 8000cd0:	1d23      	adds	r3, r4, #4
 8000cd2:	42a3      	cmp	r3, r4
 8000cd4:	41a4      	sbcs	r4, r4
 8000cd6:	4264      	negs	r4, r4
 8000cd8:	193f      	adds	r7, r7, r4
 8000cda:	001c      	movs	r4, r3
 8000cdc:	023b      	lsls	r3, r7, #8
 8000cde:	d400      	bmi.n	8000ce2 <__aeabi_dadd+0x112>
 8000ce0:	e09e      	b.n	8000e20 <__aeabi_dadd+0x250>
 8000ce2:	4b95      	ldr	r3, [pc, #596]	; (8000f38 <__aeabi_dadd+0x368>)
 8000ce4:	3601      	adds	r6, #1
 8000ce6:	429e      	cmp	r6, r3
 8000ce8:	d100      	bne.n	8000cec <__aeabi_dadd+0x11c>
 8000cea:	e0b7      	b.n	8000e5c <__aeabi_dadd+0x28c>
 8000cec:	4a93      	ldr	r2, [pc, #588]	; (8000f3c <__aeabi_dadd+0x36c>)
 8000cee:	08e4      	lsrs	r4, r4, #3
 8000cf0:	4017      	ands	r7, r2
 8000cf2:	077b      	lsls	r3, r7, #29
 8000cf4:	0571      	lsls	r1, r6, #21
 8000cf6:	027f      	lsls	r7, r7, #9
 8000cf8:	4323      	orrs	r3, r4
 8000cfa:	0b3f      	lsrs	r7, r7, #12
 8000cfc:	0d4a      	lsrs	r2, r1, #21
 8000cfe:	0512      	lsls	r2, r2, #20
 8000d00:	433a      	orrs	r2, r7
 8000d02:	07ed      	lsls	r5, r5, #31
 8000d04:	432a      	orrs	r2, r5
 8000d06:	0018      	movs	r0, r3
 8000d08:	0011      	movs	r1, r2
 8000d0a:	bce0      	pop	{r5, r6, r7}
 8000d0c:	46ba      	mov	sl, r7
 8000d0e:	46b1      	mov	r9, r6
 8000d10:	46a8      	mov	r8, r5
 8000d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d14:	2c00      	cmp	r4, #0
 8000d16:	d04b      	beq.n	8000db0 <__aeabi_dadd+0x1e0>
 8000d18:	464c      	mov	r4, r9
 8000d1a:	1ba4      	subs	r4, r4, r6
 8000d1c:	46a4      	mov	ip, r4
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d000      	beq.n	8000d24 <__aeabi_dadd+0x154>
 8000d22:	e123      	b.n	8000f6c <__aeabi_dadd+0x39c>
 8000d24:	0004      	movs	r4, r0
 8000d26:	431c      	orrs	r4, r3
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dadd+0x15c>
 8000d2a:	e1af      	b.n	800108c <__aeabi_dadd+0x4bc>
 8000d2c:	4662      	mov	r2, ip
 8000d2e:	1e54      	subs	r4, r2, #1
 8000d30:	2a01      	cmp	r2, #1
 8000d32:	d100      	bne.n	8000d36 <__aeabi_dadd+0x166>
 8000d34:	e215      	b.n	8001162 <__aeabi_dadd+0x592>
 8000d36:	4d80      	ldr	r5, [pc, #512]	; (8000f38 <__aeabi_dadd+0x368>)
 8000d38:	45ac      	cmp	ip, r5
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_dadd+0x16e>
 8000d3c:	e1c8      	b.n	80010d0 <__aeabi_dadd+0x500>
 8000d3e:	46a4      	mov	ip, r4
 8000d40:	e11b      	b.n	8000f7a <__aeabi_dadd+0x3aa>
 8000d42:	464a      	mov	r2, r9
 8000d44:	1ab2      	subs	r2, r6, r2
 8000d46:	4694      	mov	ip, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	dc00      	bgt.n	8000d4e <__aeabi_dadd+0x17e>
 8000d4c:	e0ac      	b.n	8000ea8 <__aeabi_dadd+0x2d8>
 8000d4e:	464a      	mov	r2, r9
 8000d50:	2a00      	cmp	r2, #0
 8000d52:	d043      	beq.n	8000ddc <__aeabi_dadd+0x20c>
 8000d54:	4a78      	ldr	r2, [pc, #480]	; (8000f38 <__aeabi_dadd+0x368>)
 8000d56:	4296      	cmp	r6, r2
 8000d58:	d100      	bne.n	8000d5c <__aeabi_dadd+0x18c>
 8000d5a:	e1af      	b.n	80010bc <__aeabi_dadd+0x4ec>
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	003c      	movs	r4, r7
 8000d60:	0412      	lsls	r2, r2, #16
 8000d62:	4314      	orrs	r4, r2
 8000d64:	46a0      	mov	r8, r4
 8000d66:	4662      	mov	r2, ip
 8000d68:	2a38      	cmp	r2, #56	; 0x38
 8000d6a:	dc67      	bgt.n	8000e3c <__aeabi_dadd+0x26c>
 8000d6c:	2a1f      	cmp	r2, #31
 8000d6e:	dc00      	bgt.n	8000d72 <__aeabi_dadd+0x1a2>
 8000d70:	e15f      	b.n	8001032 <__aeabi_dadd+0x462>
 8000d72:	4647      	mov	r7, r8
 8000d74:	3a20      	subs	r2, #32
 8000d76:	40d7      	lsrs	r7, r2
 8000d78:	4662      	mov	r2, ip
 8000d7a:	2a20      	cmp	r2, #32
 8000d7c:	d005      	beq.n	8000d8a <__aeabi_dadd+0x1ba>
 8000d7e:	4664      	mov	r4, ip
 8000d80:	2240      	movs	r2, #64	; 0x40
 8000d82:	1b12      	subs	r2, r2, r4
 8000d84:	4644      	mov	r4, r8
 8000d86:	4094      	lsls	r4, r2
 8000d88:	4321      	orrs	r1, r4
 8000d8a:	1e4a      	subs	r2, r1, #1
 8000d8c:	4191      	sbcs	r1, r2
 8000d8e:	000c      	movs	r4, r1
 8000d90:	433c      	orrs	r4, r7
 8000d92:	e057      	b.n	8000e44 <__aeabi_dadd+0x274>
 8000d94:	003a      	movs	r2, r7
 8000d96:	430a      	orrs	r2, r1
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dadd+0x1cc>
 8000d9a:	e105      	b.n	8000fa8 <__aeabi_dadd+0x3d8>
 8000d9c:	0022      	movs	r2, r4
 8000d9e:	3a01      	subs	r2, #1
 8000da0:	2c01      	cmp	r4, #1
 8000da2:	d100      	bne.n	8000da6 <__aeabi_dadd+0x1d6>
 8000da4:	e182      	b.n	80010ac <__aeabi_dadd+0x4dc>
 8000da6:	4c64      	ldr	r4, [pc, #400]	; (8000f38 <__aeabi_dadd+0x368>)
 8000da8:	45a4      	cmp	ip, r4
 8000daa:	d05b      	beq.n	8000e64 <__aeabi_dadd+0x294>
 8000dac:	4694      	mov	ip, r2
 8000dae:	e741      	b.n	8000c34 <__aeabi_dadd+0x64>
 8000db0:	4c63      	ldr	r4, [pc, #396]	; (8000f40 <__aeabi_dadd+0x370>)
 8000db2:	1c77      	adds	r7, r6, #1
 8000db4:	4227      	tst	r7, r4
 8000db6:	d000      	beq.n	8000dba <__aeabi_dadd+0x1ea>
 8000db8:	e0c4      	b.n	8000f44 <__aeabi_dadd+0x374>
 8000dba:	0004      	movs	r4, r0
 8000dbc:	431c      	orrs	r4, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_dadd+0x1f4>
 8000dc2:	e169      	b.n	8001098 <__aeabi_dadd+0x4c8>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d100      	bne.n	8000dca <__aeabi_dadd+0x1fa>
 8000dc8:	e1bf      	b.n	800114a <__aeabi_dadd+0x57a>
 8000dca:	4644      	mov	r4, r8
 8000dcc:	430c      	orrs	r4, r1
 8000dce:	d000      	beq.n	8000dd2 <__aeabi_dadd+0x202>
 8000dd0:	e1d0      	b.n	8001174 <__aeabi_dadd+0x5a4>
 8000dd2:	0742      	lsls	r2, r0, #29
 8000dd4:	08db      	lsrs	r3, r3, #3
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	08c0      	lsrs	r0, r0, #3
 8000dda:	e029      	b.n	8000e30 <__aeabi_dadd+0x260>
 8000ddc:	003a      	movs	r2, r7
 8000dde:	430a      	orrs	r2, r1
 8000de0:	d100      	bne.n	8000de4 <__aeabi_dadd+0x214>
 8000de2:	e170      	b.n	80010c6 <__aeabi_dadd+0x4f6>
 8000de4:	4662      	mov	r2, ip
 8000de6:	4664      	mov	r4, ip
 8000de8:	3a01      	subs	r2, #1
 8000dea:	2c01      	cmp	r4, #1
 8000dec:	d100      	bne.n	8000df0 <__aeabi_dadd+0x220>
 8000dee:	e0e0      	b.n	8000fb2 <__aeabi_dadd+0x3e2>
 8000df0:	4c51      	ldr	r4, [pc, #324]	; (8000f38 <__aeabi_dadd+0x368>)
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d100      	bne.n	8000df8 <__aeabi_dadd+0x228>
 8000df6:	e161      	b.n	80010bc <__aeabi_dadd+0x4ec>
 8000df8:	4694      	mov	ip, r2
 8000dfa:	e7b4      	b.n	8000d66 <__aeabi_dadd+0x196>
 8000dfc:	003a      	movs	r2, r7
 8000dfe:	391f      	subs	r1, #31
 8000e00:	40ca      	lsrs	r2, r1
 8000e02:	0011      	movs	r1, r2
 8000e04:	2b20      	cmp	r3, #32
 8000e06:	d003      	beq.n	8000e10 <__aeabi_dadd+0x240>
 8000e08:	2240      	movs	r2, #64	; 0x40
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	409f      	lsls	r7, r3
 8000e0e:	433c      	orrs	r4, r7
 8000e10:	1e63      	subs	r3, r4, #1
 8000e12:	419c      	sbcs	r4, r3
 8000e14:	2700      	movs	r7, #0
 8000e16:	2600      	movs	r6, #0
 8000e18:	430c      	orrs	r4, r1
 8000e1a:	0763      	lsls	r3, r4, #29
 8000e1c:	d000      	beq.n	8000e20 <__aeabi_dadd+0x250>
 8000e1e:	e753      	b.n	8000cc8 <__aeabi_dadd+0xf8>
 8000e20:	46b4      	mov	ip, r6
 8000e22:	08e4      	lsrs	r4, r4, #3
 8000e24:	077b      	lsls	r3, r7, #29
 8000e26:	4323      	orrs	r3, r4
 8000e28:	08f8      	lsrs	r0, r7, #3
 8000e2a:	4a43      	ldr	r2, [pc, #268]	; (8000f38 <__aeabi_dadd+0x368>)
 8000e2c:	4594      	cmp	ip, r2
 8000e2e:	d01d      	beq.n	8000e6c <__aeabi_dadd+0x29c>
 8000e30:	4662      	mov	r2, ip
 8000e32:	0307      	lsls	r7, r0, #12
 8000e34:	0552      	lsls	r2, r2, #21
 8000e36:	0b3f      	lsrs	r7, r7, #12
 8000e38:	0d52      	lsrs	r2, r2, #21
 8000e3a:	e760      	b.n	8000cfe <__aeabi_dadd+0x12e>
 8000e3c:	4644      	mov	r4, r8
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	1e62      	subs	r2, r4, #1
 8000e42:	4194      	sbcs	r4, r2
 8000e44:	18e4      	adds	r4, r4, r3
 8000e46:	429c      	cmp	r4, r3
 8000e48:	419b      	sbcs	r3, r3
 8000e4a:	425f      	negs	r7, r3
 8000e4c:	183f      	adds	r7, r7, r0
 8000e4e:	023b      	lsls	r3, r7, #8
 8000e50:	d5e3      	bpl.n	8000e1a <__aeabi_dadd+0x24a>
 8000e52:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <__aeabi_dadd+0x368>)
 8000e54:	3601      	adds	r6, #1
 8000e56:	429e      	cmp	r6, r3
 8000e58:	d000      	beq.n	8000e5c <__aeabi_dadd+0x28c>
 8000e5a:	e0b5      	b.n	8000fc8 <__aeabi_dadd+0x3f8>
 8000e5c:	0032      	movs	r2, r6
 8000e5e:	2700      	movs	r7, #0
 8000e60:	2300      	movs	r3, #0
 8000e62:	e74c      	b.n	8000cfe <__aeabi_dadd+0x12e>
 8000e64:	0742      	lsls	r2, r0, #29
 8000e66:	08db      	lsrs	r3, r3, #3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	08c0      	lsrs	r0, r0, #3
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	4302      	orrs	r2, r0
 8000e70:	d100      	bne.n	8000e74 <__aeabi_dadd+0x2a4>
 8000e72:	e1e1      	b.n	8001238 <__aeabi_dadd+0x668>
 8000e74:	2780      	movs	r7, #128	; 0x80
 8000e76:	033f      	lsls	r7, r7, #12
 8000e78:	4307      	orrs	r7, r0
 8000e7a:	033f      	lsls	r7, r7, #12
 8000e7c:	4a2e      	ldr	r2, [pc, #184]	; (8000f38 <__aeabi_dadd+0x368>)
 8000e7e:	0b3f      	lsrs	r7, r7, #12
 8000e80:	e73d      	b.n	8000cfe <__aeabi_dadd+0x12e>
 8000e82:	0020      	movs	r0, r4
 8000e84:	f001 fd5a 	bl	800293c <__clzsi2>
 8000e88:	0001      	movs	r1, r0
 8000e8a:	3118      	adds	r1, #24
 8000e8c:	291f      	cmp	r1, #31
 8000e8e:	dc00      	bgt.n	8000e92 <__aeabi_dadd+0x2c2>
 8000e90:	e6fc      	b.n	8000c8c <__aeabi_dadd+0xbc>
 8000e92:	3808      	subs	r0, #8
 8000e94:	4084      	lsls	r4, r0
 8000e96:	0027      	movs	r7, r4
 8000e98:	2400      	movs	r4, #0
 8000e9a:	42b1      	cmp	r1, r6
 8000e9c:	db00      	blt.n	8000ea0 <__aeabi_dadd+0x2d0>
 8000e9e:	e6ff      	b.n	8000ca0 <__aeabi_dadd+0xd0>
 8000ea0:	4a26      	ldr	r2, [pc, #152]	; (8000f3c <__aeabi_dadd+0x36c>)
 8000ea2:	1a76      	subs	r6, r6, r1
 8000ea4:	4017      	ands	r7, r2
 8000ea6:	e70d      	b.n	8000cc4 <__aeabi_dadd+0xf4>
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	d02f      	beq.n	8000f0c <__aeabi_dadd+0x33c>
 8000eac:	464a      	mov	r2, r9
 8000eae:	1b92      	subs	r2, r2, r6
 8000eb0:	4694      	mov	ip, r2
 8000eb2:	2e00      	cmp	r6, #0
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_dadd+0x2e8>
 8000eb6:	e0ad      	b.n	8001014 <__aeabi_dadd+0x444>
 8000eb8:	4a1f      	ldr	r2, [pc, #124]	; (8000f38 <__aeabi_dadd+0x368>)
 8000eba:	4591      	cmp	r9, r2
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_dadd+0x2f0>
 8000ebe:	e10f      	b.n	80010e0 <__aeabi_dadd+0x510>
 8000ec0:	2280      	movs	r2, #128	; 0x80
 8000ec2:	0412      	lsls	r2, r2, #16
 8000ec4:	4310      	orrs	r0, r2
 8000ec6:	4662      	mov	r2, ip
 8000ec8:	2a38      	cmp	r2, #56	; 0x38
 8000eca:	dd00      	ble.n	8000ece <__aeabi_dadd+0x2fe>
 8000ecc:	e10f      	b.n	80010ee <__aeabi_dadd+0x51e>
 8000ece:	2a1f      	cmp	r2, #31
 8000ed0:	dd00      	ble.n	8000ed4 <__aeabi_dadd+0x304>
 8000ed2:	e180      	b.n	80011d6 <__aeabi_dadd+0x606>
 8000ed4:	4664      	mov	r4, ip
 8000ed6:	2220      	movs	r2, #32
 8000ed8:	001e      	movs	r6, r3
 8000eda:	1b12      	subs	r2, r2, r4
 8000edc:	4667      	mov	r7, ip
 8000ede:	0004      	movs	r4, r0
 8000ee0:	4093      	lsls	r3, r2
 8000ee2:	4094      	lsls	r4, r2
 8000ee4:	40fe      	lsrs	r6, r7
 8000ee6:	1e5a      	subs	r2, r3, #1
 8000ee8:	4193      	sbcs	r3, r2
 8000eea:	40f8      	lsrs	r0, r7
 8000eec:	4334      	orrs	r4, r6
 8000eee:	431c      	orrs	r4, r3
 8000ef0:	4480      	add	r8, r0
 8000ef2:	1864      	adds	r4, r4, r1
 8000ef4:	428c      	cmp	r4, r1
 8000ef6:	41bf      	sbcs	r7, r7
 8000ef8:	427f      	negs	r7, r7
 8000efa:	464e      	mov	r6, r9
 8000efc:	4447      	add	r7, r8
 8000efe:	e7a6      	b.n	8000e4e <__aeabi_dadd+0x27e>
 8000f00:	4642      	mov	r2, r8
 8000f02:	430a      	orrs	r2, r1
 8000f04:	0011      	movs	r1, r2
 8000f06:	1e4a      	subs	r2, r1, #1
 8000f08:	4191      	sbcs	r1, r2
 8000f0a:	e6ad      	b.n	8000c68 <__aeabi_dadd+0x98>
 8000f0c:	4c0c      	ldr	r4, [pc, #48]	; (8000f40 <__aeabi_dadd+0x370>)
 8000f0e:	1c72      	adds	r2, r6, #1
 8000f10:	4222      	tst	r2, r4
 8000f12:	d000      	beq.n	8000f16 <__aeabi_dadd+0x346>
 8000f14:	e0a1      	b.n	800105a <__aeabi_dadd+0x48a>
 8000f16:	0002      	movs	r2, r0
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	2e00      	cmp	r6, #0
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_dadd+0x350>
 8000f1e:	e0fa      	b.n	8001116 <__aeabi_dadd+0x546>
 8000f20:	2a00      	cmp	r2, #0
 8000f22:	d100      	bne.n	8000f26 <__aeabi_dadd+0x356>
 8000f24:	e145      	b.n	80011b2 <__aeabi_dadd+0x5e2>
 8000f26:	003a      	movs	r2, r7
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_dadd+0x35e>
 8000f2c:	e146      	b.n	80011bc <__aeabi_dadd+0x5ec>
 8000f2e:	0742      	lsls	r2, r0, #29
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	4313      	orrs	r3, r2
 8000f34:	08c0      	lsrs	r0, r0, #3
 8000f36:	e77b      	b.n	8000e30 <__aeabi_dadd+0x260>
 8000f38:	000007ff 	.word	0x000007ff
 8000f3c:	ff7fffff 	.word	0xff7fffff
 8000f40:	000007fe 	.word	0x000007fe
 8000f44:	4647      	mov	r7, r8
 8000f46:	1a5c      	subs	r4, r3, r1
 8000f48:	1bc2      	subs	r2, r0, r7
 8000f4a:	42a3      	cmp	r3, r4
 8000f4c:	41bf      	sbcs	r7, r7
 8000f4e:	427f      	negs	r7, r7
 8000f50:	46b9      	mov	r9, r7
 8000f52:	0017      	movs	r7, r2
 8000f54:	464a      	mov	r2, r9
 8000f56:	1abf      	subs	r7, r7, r2
 8000f58:	023a      	lsls	r2, r7, #8
 8000f5a:	d500      	bpl.n	8000f5e <__aeabi_dadd+0x38e>
 8000f5c:	e08d      	b.n	800107a <__aeabi_dadd+0x4aa>
 8000f5e:	0023      	movs	r3, r4
 8000f60:	433b      	orrs	r3, r7
 8000f62:	d000      	beq.n	8000f66 <__aeabi_dadd+0x396>
 8000f64:	e68a      	b.n	8000c7c <__aeabi_dadd+0xac>
 8000f66:	2000      	movs	r0, #0
 8000f68:	2500      	movs	r5, #0
 8000f6a:	e761      	b.n	8000e30 <__aeabi_dadd+0x260>
 8000f6c:	4cb4      	ldr	r4, [pc, #720]	; (8001240 <__aeabi_dadd+0x670>)
 8000f6e:	45a1      	cmp	r9, r4
 8000f70:	d100      	bne.n	8000f74 <__aeabi_dadd+0x3a4>
 8000f72:	e0ad      	b.n	80010d0 <__aeabi_dadd+0x500>
 8000f74:	2480      	movs	r4, #128	; 0x80
 8000f76:	0424      	lsls	r4, r4, #16
 8000f78:	4320      	orrs	r0, r4
 8000f7a:	4664      	mov	r4, ip
 8000f7c:	2c38      	cmp	r4, #56	; 0x38
 8000f7e:	dc3d      	bgt.n	8000ffc <__aeabi_dadd+0x42c>
 8000f80:	4662      	mov	r2, ip
 8000f82:	2c1f      	cmp	r4, #31
 8000f84:	dd00      	ble.n	8000f88 <__aeabi_dadd+0x3b8>
 8000f86:	e0b7      	b.n	80010f8 <__aeabi_dadd+0x528>
 8000f88:	2520      	movs	r5, #32
 8000f8a:	001e      	movs	r6, r3
 8000f8c:	1b2d      	subs	r5, r5, r4
 8000f8e:	0004      	movs	r4, r0
 8000f90:	40ab      	lsls	r3, r5
 8000f92:	40ac      	lsls	r4, r5
 8000f94:	40d6      	lsrs	r6, r2
 8000f96:	40d0      	lsrs	r0, r2
 8000f98:	4642      	mov	r2, r8
 8000f9a:	1e5d      	subs	r5, r3, #1
 8000f9c:	41ab      	sbcs	r3, r5
 8000f9e:	4334      	orrs	r4, r6
 8000fa0:	1a12      	subs	r2, r2, r0
 8000fa2:	4690      	mov	r8, r2
 8000fa4:	4323      	orrs	r3, r4
 8000fa6:	e02c      	b.n	8001002 <__aeabi_dadd+0x432>
 8000fa8:	0742      	lsls	r2, r0, #29
 8000faa:	08db      	lsrs	r3, r3, #3
 8000fac:	4313      	orrs	r3, r2
 8000fae:	08c0      	lsrs	r0, r0, #3
 8000fb0:	e73b      	b.n	8000e2a <__aeabi_dadd+0x25a>
 8000fb2:	185c      	adds	r4, r3, r1
 8000fb4:	429c      	cmp	r4, r3
 8000fb6:	419b      	sbcs	r3, r3
 8000fb8:	4440      	add	r0, r8
 8000fba:	425b      	negs	r3, r3
 8000fbc:	18c7      	adds	r7, r0, r3
 8000fbe:	2601      	movs	r6, #1
 8000fc0:	023b      	lsls	r3, r7, #8
 8000fc2:	d400      	bmi.n	8000fc6 <__aeabi_dadd+0x3f6>
 8000fc4:	e729      	b.n	8000e1a <__aeabi_dadd+0x24a>
 8000fc6:	2602      	movs	r6, #2
 8000fc8:	4a9e      	ldr	r2, [pc, #632]	; (8001244 <__aeabi_dadd+0x674>)
 8000fca:	0863      	lsrs	r3, r4, #1
 8000fcc:	4017      	ands	r7, r2
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4014      	ands	r4, r2
 8000fd2:	431c      	orrs	r4, r3
 8000fd4:	07fb      	lsls	r3, r7, #31
 8000fd6:	431c      	orrs	r4, r3
 8000fd8:	087f      	lsrs	r7, r7, #1
 8000fda:	e673      	b.n	8000cc4 <__aeabi_dadd+0xf4>
 8000fdc:	4644      	mov	r4, r8
 8000fde:	3a20      	subs	r2, #32
 8000fe0:	40d4      	lsrs	r4, r2
 8000fe2:	4662      	mov	r2, ip
 8000fe4:	2a20      	cmp	r2, #32
 8000fe6:	d005      	beq.n	8000ff4 <__aeabi_dadd+0x424>
 8000fe8:	4667      	mov	r7, ip
 8000fea:	2240      	movs	r2, #64	; 0x40
 8000fec:	1bd2      	subs	r2, r2, r7
 8000fee:	4647      	mov	r7, r8
 8000ff0:	4097      	lsls	r7, r2
 8000ff2:	4339      	orrs	r1, r7
 8000ff4:	1e4a      	subs	r2, r1, #1
 8000ff6:	4191      	sbcs	r1, r2
 8000ff8:	4321      	orrs	r1, r4
 8000ffa:	e635      	b.n	8000c68 <__aeabi_dadd+0x98>
 8000ffc:	4303      	orrs	r3, r0
 8000ffe:	1e58      	subs	r0, r3, #1
 8001000:	4183      	sbcs	r3, r0
 8001002:	1acc      	subs	r4, r1, r3
 8001004:	42a1      	cmp	r1, r4
 8001006:	41bf      	sbcs	r7, r7
 8001008:	4643      	mov	r3, r8
 800100a:	427f      	negs	r7, r7
 800100c:	4655      	mov	r5, sl
 800100e:	464e      	mov	r6, r9
 8001010:	1bdf      	subs	r7, r3, r7
 8001012:	e62e      	b.n	8000c72 <__aeabi_dadd+0xa2>
 8001014:	0002      	movs	r2, r0
 8001016:	431a      	orrs	r2, r3
 8001018:	d100      	bne.n	800101c <__aeabi_dadd+0x44c>
 800101a:	e0bd      	b.n	8001198 <__aeabi_dadd+0x5c8>
 800101c:	4662      	mov	r2, ip
 800101e:	4664      	mov	r4, ip
 8001020:	3a01      	subs	r2, #1
 8001022:	2c01      	cmp	r4, #1
 8001024:	d100      	bne.n	8001028 <__aeabi_dadd+0x458>
 8001026:	e0e5      	b.n	80011f4 <__aeabi_dadd+0x624>
 8001028:	4c85      	ldr	r4, [pc, #532]	; (8001240 <__aeabi_dadd+0x670>)
 800102a:	45a4      	cmp	ip, r4
 800102c:	d058      	beq.n	80010e0 <__aeabi_dadd+0x510>
 800102e:	4694      	mov	ip, r2
 8001030:	e749      	b.n	8000ec6 <__aeabi_dadd+0x2f6>
 8001032:	4664      	mov	r4, ip
 8001034:	2220      	movs	r2, #32
 8001036:	1b12      	subs	r2, r2, r4
 8001038:	4644      	mov	r4, r8
 800103a:	4094      	lsls	r4, r2
 800103c:	000f      	movs	r7, r1
 800103e:	46a1      	mov	r9, r4
 8001040:	4664      	mov	r4, ip
 8001042:	4091      	lsls	r1, r2
 8001044:	40e7      	lsrs	r7, r4
 8001046:	464c      	mov	r4, r9
 8001048:	1e4a      	subs	r2, r1, #1
 800104a:	4191      	sbcs	r1, r2
 800104c:	433c      	orrs	r4, r7
 800104e:	4642      	mov	r2, r8
 8001050:	430c      	orrs	r4, r1
 8001052:	4661      	mov	r1, ip
 8001054:	40ca      	lsrs	r2, r1
 8001056:	1880      	adds	r0, r0, r2
 8001058:	e6f4      	b.n	8000e44 <__aeabi_dadd+0x274>
 800105a:	4c79      	ldr	r4, [pc, #484]	; (8001240 <__aeabi_dadd+0x670>)
 800105c:	42a2      	cmp	r2, r4
 800105e:	d100      	bne.n	8001062 <__aeabi_dadd+0x492>
 8001060:	e6fd      	b.n	8000e5e <__aeabi_dadd+0x28e>
 8001062:	1859      	adds	r1, r3, r1
 8001064:	4299      	cmp	r1, r3
 8001066:	419b      	sbcs	r3, r3
 8001068:	4440      	add	r0, r8
 800106a:	425f      	negs	r7, r3
 800106c:	19c7      	adds	r7, r0, r7
 800106e:	07fc      	lsls	r4, r7, #31
 8001070:	0849      	lsrs	r1, r1, #1
 8001072:	0016      	movs	r6, r2
 8001074:	430c      	orrs	r4, r1
 8001076:	087f      	lsrs	r7, r7, #1
 8001078:	e6cf      	b.n	8000e1a <__aeabi_dadd+0x24a>
 800107a:	1acc      	subs	r4, r1, r3
 800107c:	42a1      	cmp	r1, r4
 800107e:	41bf      	sbcs	r7, r7
 8001080:	4643      	mov	r3, r8
 8001082:	427f      	negs	r7, r7
 8001084:	1a18      	subs	r0, r3, r0
 8001086:	4655      	mov	r5, sl
 8001088:	1bc7      	subs	r7, r0, r7
 800108a:	e5f7      	b.n	8000c7c <__aeabi_dadd+0xac>
 800108c:	08c9      	lsrs	r1, r1, #3
 800108e:	077b      	lsls	r3, r7, #29
 8001090:	4655      	mov	r5, sl
 8001092:	430b      	orrs	r3, r1
 8001094:	08f8      	lsrs	r0, r7, #3
 8001096:	e6c8      	b.n	8000e2a <__aeabi_dadd+0x25a>
 8001098:	2c00      	cmp	r4, #0
 800109a:	d000      	beq.n	800109e <__aeabi_dadd+0x4ce>
 800109c:	e081      	b.n	80011a2 <__aeabi_dadd+0x5d2>
 800109e:	4643      	mov	r3, r8
 80010a0:	430b      	orrs	r3, r1
 80010a2:	d115      	bne.n	80010d0 <__aeabi_dadd+0x500>
 80010a4:	2080      	movs	r0, #128	; 0x80
 80010a6:	2500      	movs	r5, #0
 80010a8:	0300      	lsls	r0, r0, #12
 80010aa:	e6e3      	b.n	8000e74 <__aeabi_dadd+0x2a4>
 80010ac:	1a5c      	subs	r4, r3, r1
 80010ae:	42a3      	cmp	r3, r4
 80010b0:	419b      	sbcs	r3, r3
 80010b2:	1bc7      	subs	r7, r0, r7
 80010b4:	425b      	negs	r3, r3
 80010b6:	2601      	movs	r6, #1
 80010b8:	1aff      	subs	r7, r7, r3
 80010ba:	e5da      	b.n	8000c72 <__aeabi_dadd+0xa2>
 80010bc:	0742      	lsls	r2, r0, #29
 80010be:	08db      	lsrs	r3, r3, #3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	08c0      	lsrs	r0, r0, #3
 80010c4:	e6d2      	b.n	8000e6c <__aeabi_dadd+0x29c>
 80010c6:	0742      	lsls	r2, r0, #29
 80010c8:	08db      	lsrs	r3, r3, #3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	08c0      	lsrs	r0, r0, #3
 80010ce:	e6ac      	b.n	8000e2a <__aeabi_dadd+0x25a>
 80010d0:	4643      	mov	r3, r8
 80010d2:	4642      	mov	r2, r8
 80010d4:	08c9      	lsrs	r1, r1, #3
 80010d6:	075b      	lsls	r3, r3, #29
 80010d8:	4655      	mov	r5, sl
 80010da:	430b      	orrs	r3, r1
 80010dc:	08d0      	lsrs	r0, r2, #3
 80010de:	e6c5      	b.n	8000e6c <__aeabi_dadd+0x29c>
 80010e0:	4643      	mov	r3, r8
 80010e2:	4642      	mov	r2, r8
 80010e4:	075b      	lsls	r3, r3, #29
 80010e6:	08c9      	lsrs	r1, r1, #3
 80010e8:	430b      	orrs	r3, r1
 80010ea:	08d0      	lsrs	r0, r2, #3
 80010ec:	e6be      	b.n	8000e6c <__aeabi_dadd+0x29c>
 80010ee:	4303      	orrs	r3, r0
 80010f0:	001c      	movs	r4, r3
 80010f2:	1e63      	subs	r3, r4, #1
 80010f4:	419c      	sbcs	r4, r3
 80010f6:	e6fc      	b.n	8000ef2 <__aeabi_dadd+0x322>
 80010f8:	0002      	movs	r2, r0
 80010fa:	3c20      	subs	r4, #32
 80010fc:	40e2      	lsrs	r2, r4
 80010fe:	0014      	movs	r4, r2
 8001100:	4662      	mov	r2, ip
 8001102:	2a20      	cmp	r2, #32
 8001104:	d003      	beq.n	800110e <__aeabi_dadd+0x53e>
 8001106:	2540      	movs	r5, #64	; 0x40
 8001108:	1aad      	subs	r5, r5, r2
 800110a:	40a8      	lsls	r0, r5
 800110c:	4303      	orrs	r3, r0
 800110e:	1e58      	subs	r0, r3, #1
 8001110:	4183      	sbcs	r3, r0
 8001112:	4323      	orrs	r3, r4
 8001114:	e775      	b.n	8001002 <__aeabi_dadd+0x432>
 8001116:	2a00      	cmp	r2, #0
 8001118:	d0e2      	beq.n	80010e0 <__aeabi_dadd+0x510>
 800111a:	003a      	movs	r2, r7
 800111c:	430a      	orrs	r2, r1
 800111e:	d0cd      	beq.n	80010bc <__aeabi_dadd+0x4ec>
 8001120:	0742      	lsls	r2, r0, #29
 8001122:	08db      	lsrs	r3, r3, #3
 8001124:	4313      	orrs	r3, r2
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	08c0      	lsrs	r0, r0, #3
 800112a:	0312      	lsls	r2, r2, #12
 800112c:	4210      	tst	r0, r2
 800112e:	d006      	beq.n	800113e <__aeabi_dadd+0x56e>
 8001130:	08fc      	lsrs	r4, r7, #3
 8001132:	4214      	tst	r4, r2
 8001134:	d103      	bne.n	800113e <__aeabi_dadd+0x56e>
 8001136:	0020      	movs	r0, r4
 8001138:	08cb      	lsrs	r3, r1, #3
 800113a:	077a      	lsls	r2, r7, #29
 800113c:	4313      	orrs	r3, r2
 800113e:	0f5a      	lsrs	r2, r3, #29
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	0752      	lsls	r2, r2, #29
 8001144:	08db      	lsrs	r3, r3, #3
 8001146:	4313      	orrs	r3, r2
 8001148:	e690      	b.n	8000e6c <__aeabi_dadd+0x29c>
 800114a:	4643      	mov	r3, r8
 800114c:	430b      	orrs	r3, r1
 800114e:	d100      	bne.n	8001152 <__aeabi_dadd+0x582>
 8001150:	e709      	b.n	8000f66 <__aeabi_dadd+0x396>
 8001152:	4643      	mov	r3, r8
 8001154:	4642      	mov	r2, r8
 8001156:	08c9      	lsrs	r1, r1, #3
 8001158:	075b      	lsls	r3, r3, #29
 800115a:	4655      	mov	r5, sl
 800115c:	430b      	orrs	r3, r1
 800115e:	08d0      	lsrs	r0, r2, #3
 8001160:	e666      	b.n	8000e30 <__aeabi_dadd+0x260>
 8001162:	1acc      	subs	r4, r1, r3
 8001164:	42a1      	cmp	r1, r4
 8001166:	4189      	sbcs	r1, r1
 8001168:	1a3f      	subs	r7, r7, r0
 800116a:	4249      	negs	r1, r1
 800116c:	4655      	mov	r5, sl
 800116e:	2601      	movs	r6, #1
 8001170:	1a7f      	subs	r7, r7, r1
 8001172:	e57e      	b.n	8000c72 <__aeabi_dadd+0xa2>
 8001174:	4642      	mov	r2, r8
 8001176:	1a5c      	subs	r4, r3, r1
 8001178:	1a87      	subs	r7, r0, r2
 800117a:	42a3      	cmp	r3, r4
 800117c:	4192      	sbcs	r2, r2
 800117e:	4252      	negs	r2, r2
 8001180:	1abf      	subs	r7, r7, r2
 8001182:	023a      	lsls	r2, r7, #8
 8001184:	d53d      	bpl.n	8001202 <__aeabi_dadd+0x632>
 8001186:	1acc      	subs	r4, r1, r3
 8001188:	42a1      	cmp	r1, r4
 800118a:	4189      	sbcs	r1, r1
 800118c:	4643      	mov	r3, r8
 800118e:	4249      	negs	r1, r1
 8001190:	1a1f      	subs	r7, r3, r0
 8001192:	4655      	mov	r5, sl
 8001194:	1a7f      	subs	r7, r7, r1
 8001196:	e595      	b.n	8000cc4 <__aeabi_dadd+0xf4>
 8001198:	077b      	lsls	r3, r7, #29
 800119a:	08c9      	lsrs	r1, r1, #3
 800119c:	430b      	orrs	r3, r1
 800119e:	08f8      	lsrs	r0, r7, #3
 80011a0:	e643      	b.n	8000e2a <__aeabi_dadd+0x25a>
 80011a2:	4644      	mov	r4, r8
 80011a4:	08db      	lsrs	r3, r3, #3
 80011a6:	430c      	orrs	r4, r1
 80011a8:	d130      	bne.n	800120c <__aeabi_dadd+0x63c>
 80011aa:	0742      	lsls	r2, r0, #29
 80011ac:	4313      	orrs	r3, r2
 80011ae:	08c0      	lsrs	r0, r0, #3
 80011b0:	e65c      	b.n	8000e6c <__aeabi_dadd+0x29c>
 80011b2:	077b      	lsls	r3, r7, #29
 80011b4:	08c9      	lsrs	r1, r1, #3
 80011b6:	430b      	orrs	r3, r1
 80011b8:	08f8      	lsrs	r0, r7, #3
 80011ba:	e639      	b.n	8000e30 <__aeabi_dadd+0x260>
 80011bc:	185c      	adds	r4, r3, r1
 80011be:	429c      	cmp	r4, r3
 80011c0:	419b      	sbcs	r3, r3
 80011c2:	4440      	add	r0, r8
 80011c4:	425b      	negs	r3, r3
 80011c6:	18c7      	adds	r7, r0, r3
 80011c8:	023b      	lsls	r3, r7, #8
 80011ca:	d400      	bmi.n	80011ce <__aeabi_dadd+0x5fe>
 80011cc:	e625      	b.n	8000e1a <__aeabi_dadd+0x24a>
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <__aeabi_dadd+0x674>)
 80011d0:	2601      	movs	r6, #1
 80011d2:	401f      	ands	r7, r3
 80011d4:	e621      	b.n	8000e1a <__aeabi_dadd+0x24a>
 80011d6:	0004      	movs	r4, r0
 80011d8:	3a20      	subs	r2, #32
 80011da:	40d4      	lsrs	r4, r2
 80011dc:	4662      	mov	r2, ip
 80011de:	2a20      	cmp	r2, #32
 80011e0:	d004      	beq.n	80011ec <__aeabi_dadd+0x61c>
 80011e2:	2240      	movs	r2, #64	; 0x40
 80011e4:	4666      	mov	r6, ip
 80011e6:	1b92      	subs	r2, r2, r6
 80011e8:	4090      	lsls	r0, r2
 80011ea:	4303      	orrs	r3, r0
 80011ec:	1e5a      	subs	r2, r3, #1
 80011ee:	4193      	sbcs	r3, r2
 80011f0:	431c      	orrs	r4, r3
 80011f2:	e67e      	b.n	8000ef2 <__aeabi_dadd+0x322>
 80011f4:	185c      	adds	r4, r3, r1
 80011f6:	428c      	cmp	r4, r1
 80011f8:	4189      	sbcs	r1, r1
 80011fa:	4440      	add	r0, r8
 80011fc:	4249      	negs	r1, r1
 80011fe:	1847      	adds	r7, r0, r1
 8001200:	e6dd      	b.n	8000fbe <__aeabi_dadd+0x3ee>
 8001202:	0023      	movs	r3, r4
 8001204:	433b      	orrs	r3, r7
 8001206:	d100      	bne.n	800120a <__aeabi_dadd+0x63a>
 8001208:	e6ad      	b.n	8000f66 <__aeabi_dadd+0x396>
 800120a:	e606      	b.n	8000e1a <__aeabi_dadd+0x24a>
 800120c:	0744      	lsls	r4, r0, #29
 800120e:	4323      	orrs	r3, r4
 8001210:	2480      	movs	r4, #128	; 0x80
 8001212:	08c0      	lsrs	r0, r0, #3
 8001214:	0324      	lsls	r4, r4, #12
 8001216:	4220      	tst	r0, r4
 8001218:	d008      	beq.n	800122c <__aeabi_dadd+0x65c>
 800121a:	4642      	mov	r2, r8
 800121c:	08d6      	lsrs	r6, r2, #3
 800121e:	4226      	tst	r6, r4
 8001220:	d104      	bne.n	800122c <__aeabi_dadd+0x65c>
 8001222:	4655      	mov	r5, sl
 8001224:	0030      	movs	r0, r6
 8001226:	08cb      	lsrs	r3, r1, #3
 8001228:	0751      	lsls	r1, r2, #29
 800122a:	430b      	orrs	r3, r1
 800122c:	0f5a      	lsrs	r2, r3, #29
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	08db      	lsrs	r3, r3, #3
 8001232:	0752      	lsls	r2, r2, #29
 8001234:	4313      	orrs	r3, r2
 8001236:	e619      	b.n	8000e6c <__aeabi_dadd+0x29c>
 8001238:	2300      	movs	r3, #0
 800123a:	4a01      	ldr	r2, [pc, #4]	; (8001240 <__aeabi_dadd+0x670>)
 800123c:	001f      	movs	r7, r3
 800123e:	e55e      	b.n	8000cfe <__aeabi_dadd+0x12e>
 8001240:	000007ff 	.word	0x000007ff
 8001244:	ff7fffff 	.word	0xff7fffff

08001248 <__aeabi_ddiv>:
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	4657      	mov	r7, sl
 800124c:	464e      	mov	r6, r9
 800124e:	4645      	mov	r5, r8
 8001250:	46de      	mov	lr, fp
 8001252:	b5e0      	push	{r5, r6, r7, lr}
 8001254:	4681      	mov	r9, r0
 8001256:	0005      	movs	r5, r0
 8001258:	030c      	lsls	r4, r1, #12
 800125a:	0048      	lsls	r0, r1, #1
 800125c:	4692      	mov	sl, r2
 800125e:	001f      	movs	r7, r3
 8001260:	b085      	sub	sp, #20
 8001262:	0b24      	lsrs	r4, r4, #12
 8001264:	0d40      	lsrs	r0, r0, #21
 8001266:	0fce      	lsrs	r6, r1, #31
 8001268:	2800      	cmp	r0, #0
 800126a:	d100      	bne.n	800126e <__aeabi_ddiv+0x26>
 800126c:	e156      	b.n	800151c <__aeabi_ddiv+0x2d4>
 800126e:	4bd4      	ldr	r3, [pc, #848]	; (80015c0 <__aeabi_ddiv+0x378>)
 8001270:	4298      	cmp	r0, r3
 8001272:	d100      	bne.n	8001276 <__aeabi_ddiv+0x2e>
 8001274:	e172      	b.n	800155c <__aeabi_ddiv+0x314>
 8001276:	0f6b      	lsrs	r3, r5, #29
 8001278:	00e4      	lsls	r4, r4, #3
 800127a:	431c      	orrs	r4, r3
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	041b      	lsls	r3, r3, #16
 8001280:	4323      	orrs	r3, r4
 8001282:	4698      	mov	r8, r3
 8001284:	4bcf      	ldr	r3, [pc, #828]	; (80015c4 <__aeabi_ddiv+0x37c>)
 8001286:	00ed      	lsls	r5, r5, #3
 8001288:	469b      	mov	fp, r3
 800128a:	2300      	movs	r3, #0
 800128c:	4699      	mov	r9, r3
 800128e:	4483      	add	fp, r0
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	033c      	lsls	r4, r7, #12
 8001294:	007b      	lsls	r3, r7, #1
 8001296:	4650      	mov	r0, sl
 8001298:	0b24      	lsrs	r4, r4, #12
 800129a:	0d5b      	lsrs	r3, r3, #21
 800129c:	0fff      	lsrs	r7, r7, #31
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d100      	bne.n	80012a4 <__aeabi_ddiv+0x5c>
 80012a2:	e11f      	b.n	80014e4 <__aeabi_ddiv+0x29c>
 80012a4:	4ac6      	ldr	r2, [pc, #792]	; (80015c0 <__aeabi_ddiv+0x378>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d100      	bne.n	80012ac <__aeabi_ddiv+0x64>
 80012aa:	e162      	b.n	8001572 <__aeabi_ddiv+0x32a>
 80012ac:	49c5      	ldr	r1, [pc, #788]	; (80015c4 <__aeabi_ddiv+0x37c>)
 80012ae:	0f42      	lsrs	r2, r0, #29
 80012b0:	468c      	mov	ip, r1
 80012b2:	00e4      	lsls	r4, r4, #3
 80012b4:	4659      	mov	r1, fp
 80012b6:	4314      	orrs	r4, r2
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	4463      	add	r3, ip
 80012bc:	0412      	lsls	r2, r2, #16
 80012be:	1acb      	subs	r3, r1, r3
 80012c0:	4314      	orrs	r4, r2
 80012c2:	469b      	mov	fp, r3
 80012c4:	00c2      	lsls	r2, r0, #3
 80012c6:	2000      	movs	r0, #0
 80012c8:	0033      	movs	r3, r6
 80012ca:	407b      	eors	r3, r7
 80012cc:	469a      	mov	sl, r3
 80012ce:	464b      	mov	r3, r9
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	d827      	bhi.n	8001324 <__aeabi_ddiv+0xdc>
 80012d4:	49bc      	ldr	r1, [pc, #752]	; (80015c8 <__aeabi_ddiv+0x380>)
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	58cb      	ldr	r3, [r1, r3]
 80012da:	469f      	mov	pc, r3
 80012dc:	46b2      	mov	sl, r6
 80012de:	9b00      	ldr	r3, [sp, #0]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d016      	beq.n	8001312 <__aeabi_ddiv+0xca>
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d100      	bne.n	80012ea <__aeabi_ddiv+0xa2>
 80012e8:	e28e      	b.n	8001808 <__aeabi_ddiv+0x5c0>
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d000      	beq.n	80012f0 <__aeabi_ddiv+0xa8>
 80012ee:	e0d9      	b.n	80014a4 <__aeabi_ddiv+0x25c>
 80012f0:	2300      	movs	r3, #0
 80012f2:	2400      	movs	r4, #0
 80012f4:	2500      	movs	r5, #0
 80012f6:	4652      	mov	r2, sl
 80012f8:	051b      	lsls	r3, r3, #20
 80012fa:	4323      	orrs	r3, r4
 80012fc:	07d2      	lsls	r2, r2, #31
 80012fe:	4313      	orrs	r3, r2
 8001300:	0028      	movs	r0, r5
 8001302:	0019      	movs	r1, r3
 8001304:	b005      	add	sp, #20
 8001306:	bcf0      	pop	{r4, r5, r6, r7}
 8001308:	46bb      	mov	fp, r7
 800130a:	46b2      	mov	sl, r6
 800130c:	46a9      	mov	r9, r5
 800130e:	46a0      	mov	r8, r4
 8001310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001312:	2400      	movs	r4, #0
 8001314:	2500      	movs	r5, #0
 8001316:	4baa      	ldr	r3, [pc, #680]	; (80015c0 <__aeabi_ddiv+0x378>)
 8001318:	e7ed      	b.n	80012f6 <__aeabi_ddiv+0xae>
 800131a:	46ba      	mov	sl, r7
 800131c:	46a0      	mov	r8, r4
 800131e:	0015      	movs	r5, r2
 8001320:	9000      	str	r0, [sp, #0]
 8001322:	e7dc      	b.n	80012de <__aeabi_ddiv+0x96>
 8001324:	4544      	cmp	r4, r8
 8001326:	d200      	bcs.n	800132a <__aeabi_ddiv+0xe2>
 8001328:	e1c7      	b.n	80016ba <__aeabi_ddiv+0x472>
 800132a:	d100      	bne.n	800132e <__aeabi_ddiv+0xe6>
 800132c:	e1c2      	b.n	80016b4 <__aeabi_ddiv+0x46c>
 800132e:	2301      	movs	r3, #1
 8001330:	425b      	negs	r3, r3
 8001332:	469c      	mov	ip, r3
 8001334:	002e      	movs	r6, r5
 8001336:	4640      	mov	r0, r8
 8001338:	2500      	movs	r5, #0
 800133a:	44e3      	add	fp, ip
 800133c:	0223      	lsls	r3, r4, #8
 800133e:	0e14      	lsrs	r4, r2, #24
 8001340:	431c      	orrs	r4, r3
 8001342:	0c1b      	lsrs	r3, r3, #16
 8001344:	4699      	mov	r9, r3
 8001346:	0423      	lsls	r3, r4, #16
 8001348:	0c1f      	lsrs	r7, r3, #16
 800134a:	0212      	lsls	r2, r2, #8
 800134c:	4649      	mov	r1, r9
 800134e:	9200      	str	r2, [sp, #0]
 8001350:	9701      	str	r7, [sp, #4]
 8001352:	f7fe ff7b 	bl	800024c <__aeabi_uidivmod>
 8001356:	0002      	movs	r2, r0
 8001358:	437a      	muls	r2, r7
 800135a:	040b      	lsls	r3, r1, #16
 800135c:	0c31      	lsrs	r1, r6, #16
 800135e:	4680      	mov	r8, r0
 8001360:	4319      	orrs	r1, r3
 8001362:	428a      	cmp	r2, r1
 8001364:	d907      	bls.n	8001376 <__aeabi_ddiv+0x12e>
 8001366:	2301      	movs	r3, #1
 8001368:	425b      	negs	r3, r3
 800136a:	469c      	mov	ip, r3
 800136c:	1909      	adds	r1, r1, r4
 800136e:	44e0      	add	r8, ip
 8001370:	428c      	cmp	r4, r1
 8001372:	d800      	bhi.n	8001376 <__aeabi_ddiv+0x12e>
 8001374:	e207      	b.n	8001786 <__aeabi_ddiv+0x53e>
 8001376:	1a88      	subs	r0, r1, r2
 8001378:	4649      	mov	r1, r9
 800137a:	f7fe ff67 	bl	800024c <__aeabi_uidivmod>
 800137e:	0409      	lsls	r1, r1, #16
 8001380:	468c      	mov	ip, r1
 8001382:	0431      	lsls	r1, r6, #16
 8001384:	4666      	mov	r6, ip
 8001386:	9a01      	ldr	r2, [sp, #4]
 8001388:	0c09      	lsrs	r1, r1, #16
 800138a:	4342      	muls	r2, r0
 800138c:	0003      	movs	r3, r0
 800138e:	4331      	orrs	r1, r6
 8001390:	428a      	cmp	r2, r1
 8001392:	d904      	bls.n	800139e <__aeabi_ddiv+0x156>
 8001394:	1909      	adds	r1, r1, r4
 8001396:	3b01      	subs	r3, #1
 8001398:	428c      	cmp	r4, r1
 800139a:	d800      	bhi.n	800139e <__aeabi_ddiv+0x156>
 800139c:	e1ed      	b.n	800177a <__aeabi_ddiv+0x532>
 800139e:	1a88      	subs	r0, r1, r2
 80013a0:	4642      	mov	r2, r8
 80013a2:	0412      	lsls	r2, r2, #16
 80013a4:	431a      	orrs	r2, r3
 80013a6:	4690      	mov	r8, r2
 80013a8:	4641      	mov	r1, r8
 80013aa:	9b00      	ldr	r3, [sp, #0]
 80013ac:	040e      	lsls	r6, r1, #16
 80013ae:	0c1b      	lsrs	r3, r3, #16
 80013b0:	001f      	movs	r7, r3
 80013b2:	9302      	str	r3, [sp, #8]
 80013b4:	9b00      	ldr	r3, [sp, #0]
 80013b6:	0c36      	lsrs	r6, r6, #16
 80013b8:	041b      	lsls	r3, r3, #16
 80013ba:	0c19      	lsrs	r1, r3, #16
 80013bc:	000b      	movs	r3, r1
 80013be:	4373      	muls	r3, r6
 80013c0:	0c12      	lsrs	r2, r2, #16
 80013c2:	437e      	muls	r6, r7
 80013c4:	9103      	str	r1, [sp, #12]
 80013c6:	4351      	muls	r1, r2
 80013c8:	437a      	muls	r2, r7
 80013ca:	0c1f      	lsrs	r7, r3, #16
 80013cc:	46bc      	mov	ip, r7
 80013ce:	1876      	adds	r6, r6, r1
 80013d0:	4466      	add	r6, ip
 80013d2:	42b1      	cmp	r1, r6
 80013d4:	d903      	bls.n	80013de <__aeabi_ddiv+0x196>
 80013d6:	2180      	movs	r1, #128	; 0x80
 80013d8:	0249      	lsls	r1, r1, #9
 80013da:	468c      	mov	ip, r1
 80013dc:	4462      	add	r2, ip
 80013de:	0c31      	lsrs	r1, r6, #16
 80013e0:	188a      	adds	r2, r1, r2
 80013e2:	0431      	lsls	r1, r6, #16
 80013e4:	041e      	lsls	r6, r3, #16
 80013e6:	0c36      	lsrs	r6, r6, #16
 80013e8:	198e      	adds	r6, r1, r6
 80013ea:	4290      	cmp	r0, r2
 80013ec:	d302      	bcc.n	80013f4 <__aeabi_ddiv+0x1ac>
 80013ee:	d112      	bne.n	8001416 <__aeabi_ddiv+0x1ce>
 80013f0:	42b5      	cmp	r5, r6
 80013f2:	d210      	bcs.n	8001416 <__aeabi_ddiv+0x1ce>
 80013f4:	4643      	mov	r3, r8
 80013f6:	1e59      	subs	r1, r3, #1
 80013f8:	9b00      	ldr	r3, [sp, #0]
 80013fa:	469c      	mov	ip, r3
 80013fc:	4465      	add	r5, ip
 80013fe:	001f      	movs	r7, r3
 8001400:	429d      	cmp	r5, r3
 8001402:	419b      	sbcs	r3, r3
 8001404:	425b      	negs	r3, r3
 8001406:	191b      	adds	r3, r3, r4
 8001408:	18c0      	adds	r0, r0, r3
 800140a:	4284      	cmp	r4, r0
 800140c:	d200      	bcs.n	8001410 <__aeabi_ddiv+0x1c8>
 800140e:	e1a0      	b.n	8001752 <__aeabi_ddiv+0x50a>
 8001410:	d100      	bne.n	8001414 <__aeabi_ddiv+0x1cc>
 8001412:	e19b      	b.n	800174c <__aeabi_ddiv+0x504>
 8001414:	4688      	mov	r8, r1
 8001416:	1bae      	subs	r6, r5, r6
 8001418:	42b5      	cmp	r5, r6
 800141a:	41ad      	sbcs	r5, r5
 800141c:	1a80      	subs	r0, r0, r2
 800141e:	426d      	negs	r5, r5
 8001420:	1b40      	subs	r0, r0, r5
 8001422:	4284      	cmp	r4, r0
 8001424:	d100      	bne.n	8001428 <__aeabi_ddiv+0x1e0>
 8001426:	e1d5      	b.n	80017d4 <__aeabi_ddiv+0x58c>
 8001428:	4649      	mov	r1, r9
 800142a:	f7fe ff0f 	bl	800024c <__aeabi_uidivmod>
 800142e:	9a01      	ldr	r2, [sp, #4]
 8001430:	040b      	lsls	r3, r1, #16
 8001432:	4342      	muls	r2, r0
 8001434:	0c31      	lsrs	r1, r6, #16
 8001436:	0005      	movs	r5, r0
 8001438:	4319      	orrs	r1, r3
 800143a:	428a      	cmp	r2, r1
 800143c:	d900      	bls.n	8001440 <__aeabi_ddiv+0x1f8>
 800143e:	e16c      	b.n	800171a <__aeabi_ddiv+0x4d2>
 8001440:	1a88      	subs	r0, r1, r2
 8001442:	4649      	mov	r1, r9
 8001444:	f7fe ff02 	bl	800024c <__aeabi_uidivmod>
 8001448:	9a01      	ldr	r2, [sp, #4]
 800144a:	0436      	lsls	r6, r6, #16
 800144c:	4342      	muls	r2, r0
 800144e:	0409      	lsls	r1, r1, #16
 8001450:	0c36      	lsrs	r6, r6, #16
 8001452:	0003      	movs	r3, r0
 8001454:	430e      	orrs	r6, r1
 8001456:	42b2      	cmp	r2, r6
 8001458:	d900      	bls.n	800145c <__aeabi_ddiv+0x214>
 800145a:	e153      	b.n	8001704 <__aeabi_ddiv+0x4bc>
 800145c:	9803      	ldr	r0, [sp, #12]
 800145e:	1ab6      	subs	r6, r6, r2
 8001460:	0002      	movs	r2, r0
 8001462:	042d      	lsls	r5, r5, #16
 8001464:	431d      	orrs	r5, r3
 8001466:	9f02      	ldr	r7, [sp, #8]
 8001468:	042b      	lsls	r3, r5, #16
 800146a:	0c1b      	lsrs	r3, r3, #16
 800146c:	435a      	muls	r2, r3
 800146e:	437b      	muls	r3, r7
 8001470:	469c      	mov	ip, r3
 8001472:	0c29      	lsrs	r1, r5, #16
 8001474:	4348      	muls	r0, r1
 8001476:	0c13      	lsrs	r3, r2, #16
 8001478:	4484      	add	ip, r0
 800147a:	4463      	add	r3, ip
 800147c:	4379      	muls	r1, r7
 800147e:	4298      	cmp	r0, r3
 8001480:	d903      	bls.n	800148a <__aeabi_ddiv+0x242>
 8001482:	2080      	movs	r0, #128	; 0x80
 8001484:	0240      	lsls	r0, r0, #9
 8001486:	4684      	mov	ip, r0
 8001488:	4461      	add	r1, ip
 800148a:	0c18      	lsrs	r0, r3, #16
 800148c:	0412      	lsls	r2, r2, #16
 800148e:	041b      	lsls	r3, r3, #16
 8001490:	0c12      	lsrs	r2, r2, #16
 8001492:	1841      	adds	r1, r0, r1
 8001494:	189b      	adds	r3, r3, r2
 8001496:	428e      	cmp	r6, r1
 8001498:	d200      	bcs.n	800149c <__aeabi_ddiv+0x254>
 800149a:	e0ff      	b.n	800169c <__aeabi_ddiv+0x454>
 800149c:	d100      	bne.n	80014a0 <__aeabi_ddiv+0x258>
 800149e:	e0fa      	b.n	8001696 <__aeabi_ddiv+0x44e>
 80014a0:	2301      	movs	r3, #1
 80014a2:	431d      	orrs	r5, r3
 80014a4:	4a49      	ldr	r2, [pc, #292]	; (80015cc <__aeabi_ddiv+0x384>)
 80014a6:	445a      	add	r2, fp
 80014a8:	2a00      	cmp	r2, #0
 80014aa:	dc00      	bgt.n	80014ae <__aeabi_ddiv+0x266>
 80014ac:	e0aa      	b.n	8001604 <__aeabi_ddiv+0x3bc>
 80014ae:	076b      	lsls	r3, r5, #29
 80014b0:	d000      	beq.n	80014b4 <__aeabi_ddiv+0x26c>
 80014b2:	e13d      	b.n	8001730 <__aeabi_ddiv+0x4e8>
 80014b4:	08ed      	lsrs	r5, r5, #3
 80014b6:	4643      	mov	r3, r8
 80014b8:	01db      	lsls	r3, r3, #7
 80014ba:	d506      	bpl.n	80014ca <__aeabi_ddiv+0x282>
 80014bc:	4642      	mov	r2, r8
 80014be:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <__aeabi_ddiv+0x388>)
 80014c0:	401a      	ands	r2, r3
 80014c2:	4690      	mov	r8, r2
 80014c4:	2280      	movs	r2, #128	; 0x80
 80014c6:	00d2      	lsls	r2, r2, #3
 80014c8:	445a      	add	r2, fp
 80014ca:	4b42      	ldr	r3, [pc, #264]	; (80015d4 <__aeabi_ddiv+0x38c>)
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dd00      	ble.n	80014d2 <__aeabi_ddiv+0x28a>
 80014d0:	e71f      	b.n	8001312 <__aeabi_ddiv+0xca>
 80014d2:	4643      	mov	r3, r8
 80014d4:	075b      	lsls	r3, r3, #29
 80014d6:	431d      	orrs	r5, r3
 80014d8:	4643      	mov	r3, r8
 80014da:	0552      	lsls	r2, r2, #21
 80014dc:	025c      	lsls	r4, r3, #9
 80014de:	0b24      	lsrs	r4, r4, #12
 80014e0:	0d53      	lsrs	r3, r2, #21
 80014e2:	e708      	b.n	80012f6 <__aeabi_ddiv+0xae>
 80014e4:	4652      	mov	r2, sl
 80014e6:	4322      	orrs	r2, r4
 80014e8:	d100      	bne.n	80014ec <__aeabi_ddiv+0x2a4>
 80014ea:	e07b      	b.n	80015e4 <__aeabi_ddiv+0x39c>
 80014ec:	2c00      	cmp	r4, #0
 80014ee:	d100      	bne.n	80014f2 <__aeabi_ddiv+0x2aa>
 80014f0:	e0fa      	b.n	80016e8 <__aeabi_ddiv+0x4a0>
 80014f2:	0020      	movs	r0, r4
 80014f4:	f001 fa22 	bl	800293c <__clzsi2>
 80014f8:	0002      	movs	r2, r0
 80014fa:	3a0b      	subs	r2, #11
 80014fc:	231d      	movs	r3, #29
 80014fe:	0001      	movs	r1, r0
 8001500:	1a9b      	subs	r3, r3, r2
 8001502:	4652      	mov	r2, sl
 8001504:	3908      	subs	r1, #8
 8001506:	40da      	lsrs	r2, r3
 8001508:	408c      	lsls	r4, r1
 800150a:	4314      	orrs	r4, r2
 800150c:	4652      	mov	r2, sl
 800150e:	408a      	lsls	r2, r1
 8001510:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <__aeabi_ddiv+0x390>)
 8001512:	4458      	add	r0, fp
 8001514:	469b      	mov	fp, r3
 8001516:	4483      	add	fp, r0
 8001518:	2000      	movs	r0, #0
 800151a:	e6d5      	b.n	80012c8 <__aeabi_ddiv+0x80>
 800151c:	464b      	mov	r3, r9
 800151e:	4323      	orrs	r3, r4
 8001520:	4698      	mov	r8, r3
 8001522:	d044      	beq.n	80015ae <__aeabi_ddiv+0x366>
 8001524:	2c00      	cmp	r4, #0
 8001526:	d100      	bne.n	800152a <__aeabi_ddiv+0x2e2>
 8001528:	e0ce      	b.n	80016c8 <__aeabi_ddiv+0x480>
 800152a:	0020      	movs	r0, r4
 800152c:	f001 fa06 	bl	800293c <__clzsi2>
 8001530:	0001      	movs	r1, r0
 8001532:	0002      	movs	r2, r0
 8001534:	390b      	subs	r1, #11
 8001536:	231d      	movs	r3, #29
 8001538:	1a5b      	subs	r3, r3, r1
 800153a:	4649      	mov	r1, r9
 800153c:	0010      	movs	r0, r2
 800153e:	40d9      	lsrs	r1, r3
 8001540:	3808      	subs	r0, #8
 8001542:	4084      	lsls	r4, r0
 8001544:	000b      	movs	r3, r1
 8001546:	464d      	mov	r5, r9
 8001548:	4323      	orrs	r3, r4
 800154a:	4698      	mov	r8, r3
 800154c:	4085      	lsls	r5, r0
 800154e:	4823      	ldr	r0, [pc, #140]	; (80015dc <__aeabi_ddiv+0x394>)
 8001550:	1a83      	subs	r3, r0, r2
 8001552:	469b      	mov	fp, r3
 8001554:	2300      	movs	r3, #0
 8001556:	4699      	mov	r9, r3
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	e69a      	b.n	8001292 <__aeabi_ddiv+0x4a>
 800155c:	464b      	mov	r3, r9
 800155e:	4323      	orrs	r3, r4
 8001560:	4698      	mov	r8, r3
 8001562:	d11d      	bne.n	80015a0 <__aeabi_ddiv+0x358>
 8001564:	2308      	movs	r3, #8
 8001566:	4699      	mov	r9, r3
 8001568:	3b06      	subs	r3, #6
 800156a:	2500      	movs	r5, #0
 800156c:	4683      	mov	fp, r0
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	e68f      	b.n	8001292 <__aeabi_ddiv+0x4a>
 8001572:	4652      	mov	r2, sl
 8001574:	4322      	orrs	r2, r4
 8001576:	d109      	bne.n	800158c <__aeabi_ddiv+0x344>
 8001578:	2302      	movs	r3, #2
 800157a:	4649      	mov	r1, r9
 800157c:	4319      	orrs	r1, r3
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <__aeabi_ddiv+0x398>)
 8001580:	4689      	mov	r9, r1
 8001582:	469c      	mov	ip, r3
 8001584:	2400      	movs	r4, #0
 8001586:	2002      	movs	r0, #2
 8001588:	44e3      	add	fp, ip
 800158a:	e69d      	b.n	80012c8 <__aeabi_ddiv+0x80>
 800158c:	2303      	movs	r3, #3
 800158e:	464a      	mov	r2, r9
 8001590:	431a      	orrs	r2, r3
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <__aeabi_ddiv+0x398>)
 8001594:	4691      	mov	r9, r2
 8001596:	469c      	mov	ip, r3
 8001598:	4652      	mov	r2, sl
 800159a:	2003      	movs	r0, #3
 800159c:	44e3      	add	fp, ip
 800159e:	e693      	b.n	80012c8 <__aeabi_ddiv+0x80>
 80015a0:	230c      	movs	r3, #12
 80015a2:	4699      	mov	r9, r3
 80015a4:	3b09      	subs	r3, #9
 80015a6:	46a0      	mov	r8, r4
 80015a8:	4683      	mov	fp, r0
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	e671      	b.n	8001292 <__aeabi_ddiv+0x4a>
 80015ae:	2304      	movs	r3, #4
 80015b0:	4699      	mov	r9, r3
 80015b2:	2300      	movs	r3, #0
 80015b4:	469b      	mov	fp, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	2500      	movs	r5, #0
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	e669      	b.n	8001292 <__aeabi_ddiv+0x4a>
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	000007ff 	.word	0x000007ff
 80015c4:	fffffc01 	.word	0xfffffc01
 80015c8:	0800b098 	.word	0x0800b098
 80015cc:	000003ff 	.word	0x000003ff
 80015d0:	feffffff 	.word	0xfeffffff
 80015d4:	000007fe 	.word	0x000007fe
 80015d8:	000003f3 	.word	0x000003f3
 80015dc:	fffffc0d 	.word	0xfffffc0d
 80015e0:	fffff801 	.word	0xfffff801
 80015e4:	4649      	mov	r1, r9
 80015e6:	2301      	movs	r3, #1
 80015e8:	4319      	orrs	r1, r3
 80015ea:	4689      	mov	r9, r1
 80015ec:	2400      	movs	r4, #0
 80015ee:	2001      	movs	r0, #1
 80015f0:	e66a      	b.n	80012c8 <__aeabi_ddiv+0x80>
 80015f2:	2300      	movs	r3, #0
 80015f4:	2480      	movs	r4, #128	; 0x80
 80015f6:	469a      	mov	sl, r3
 80015f8:	2500      	movs	r5, #0
 80015fa:	4b8a      	ldr	r3, [pc, #552]	; (8001824 <__aeabi_ddiv+0x5dc>)
 80015fc:	0324      	lsls	r4, r4, #12
 80015fe:	e67a      	b.n	80012f6 <__aeabi_ddiv+0xae>
 8001600:	2501      	movs	r5, #1
 8001602:	426d      	negs	r5, r5
 8001604:	2301      	movs	r3, #1
 8001606:	1a9b      	subs	r3, r3, r2
 8001608:	2b38      	cmp	r3, #56	; 0x38
 800160a:	dd00      	ble.n	800160e <__aeabi_ddiv+0x3c6>
 800160c:	e670      	b.n	80012f0 <__aeabi_ddiv+0xa8>
 800160e:	2b1f      	cmp	r3, #31
 8001610:	dc00      	bgt.n	8001614 <__aeabi_ddiv+0x3cc>
 8001612:	e0bf      	b.n	8001794 <__aeabi_ddiv+0x54c>
 8001614:	211f      	movs	r1, #31
 8001616:	4249      	negs	r1, r1
 8001618:	1a8a      	subs	r2, r1, r2
 800161a:	4641      	mov	r1, r8
 800161c:	40d1      	lsrs	r1, r2
 800161e:	000a      	movs	r2, r1
 8001620:	2b20      	cmp	r3, #32
 8001622:	d004      	beq.n	800162e <__aeabi_ddiv+0x3e6>
 8001624:	4641      	mov	r1, r8
 8001626:	4b80      	ldr	r3, [pc, #512]	; (8001828 <__aeabi_ddiv+0x5e0>)
 8001628:	445b      	add	r3, fp
 800162a:	4099      	lsls	r1, r3
 800162c:	430d      	orrs	r5, r1
 800162e:	1e6b      	subs	r3, r5, #1
 8001630:	419d      	sbcs	r5, r3
 8001632:	2307      	movs	r3, #7
 8001634:	432a      	orrs	r2, r5
 8001636:	001d      	movs	r5, r3
 8001638:	2400      	movs	r4, #0
 800163a:	4015      	ands	r5, r2
 800163c:	4213      	tst	r3, r2
 800163e:	d100      	bne.n	8001642 <__aeabi_ddiv+0x3fa>
 8001640:	e0d4      	b.n	80017ec <__aeabi_ddiv+0x5a4>
 8001642:	210f      	movs	r1, #15
 8001644:	2300      	movs	r3, #0
 8001646:	4011      	ands	r1, r2
 8001648:	2904      	cmp	r1, #4
 800164a:	d100      	bne.n	800164e <__aeabi_ddiv+0x406>
 800164c:	e0cb      	b.n	80017e6 <__aeabi_ddiv+0x59e>
 800164e:	1d11      	adds	r1, r2, #4
 8001650:	4291      	cmp	r1, r2
 8001652:	4192      	sbcs	r2, r2
 8001654:	4252      	negs	r2, r2
 8001656:	189b      	adds	r3, r3, r2
 8001658:	000a      	movs	r2, r1
 800165a:	0219      	lsls	r1, r3, #8
 800165c:	d400      	bmi.n	8001660 <__aeabi_ddiv+0x418>
 800165e:	e0c2      	b.n	80017e6 <__aeabi_ddiv+0x59e>
 8001660:	2301      	movs	r3, #1
 8001662:	2400      	movs	r4, #0
 8001664:	2500      	movs	r5, #0
 8001666:	e646      	b.n	80012f6 <__aeabi_ddiv+0xae>
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	4641      	mov	r1, r8
 800166c:	031b      	lsls	r3, r3, #12
 800166e:	4219      	tst	r1, r3
 8001670:	d008      	beq.n	8001684 <__aeabi_ddiv+0x43c>
 8001672:	421c      	tst	r4, r3
 8001674:	d106      	bne.n	8001684 <__aeabi_ddiv+0x43c>
 8001676:	431c      	orrs	r4, r3
 8001678:	0324      	lsls	r4, r4, #12
 800167a:	46ba      	mov	sl, r7
 800167c:	0015      	movs	r5, r2
 800167e:	4b69      	ldr	r3, [pc, #420]	; (8001824 <__aeabi_ddiv+0x5dc>)
 8001680:	0b24      	lsrs	r4, r4, #12
 8001682:	e638      	b.n	80012f6 <__aeabi_ddiv+0xae>
 8001684:	2480      	movs	r4, #128	; 0x80
 8001686:	4643      	mov	r3, r8
 8001688:	0324      	lsls	r4, r4, #12
 800168a:	431c      	orrs	r4, r3
 800168c:	0324      	lsls	r4, r4, #12
 800168e:	46b2      	mov	sl, r6
 8001690:	4b64      	ldr	r3, [pc, #400]	; (8001824 <__aeabi_ddiv+0x5dc>)
 8001692:	0b24      	lsrs	r4, r4, #12
 8001694:	e62f      	b.n	80012f6 <__aeabi_ddiv+0xae>
 8001696:	2b00      	cmp	r3, #0
 8001698:	d100      	bne.n	800169c <__aeabi_ddiv+0x454>
 800169a:	e703      	b.n	80014a4 <__aeabi_ddiv+0x25c>
 800169c:	19a6      	adds	r6, r4, r6
 800169e:	1e68      	subs	r0, r5, #1
 80016a0:	42a6      	cmp	r6, r4
 80016a2:	d200      	bcs.n	80016a6 <__aeabi_ddiv+0x45e>
 80016a4:	e08d      	b.n	80017c2 <__aeabi_ddiv+0x57a>
 80016a6:	428e      	cmp	r6, r1
 80016a8:	d200      	bcs.n	80016ac <__aeabi_ddiv+0x464>
 80016aa:	e0a3      	b.n	80017f4 <__aeabi_ddiv+0x5ac>
 80016ac:	d100      	bne.n	80016b0 <__aeabi_ddiv+0x468>
 80016ae:	e0b3      	b.n	8001818 <__aeabi_ddiv+0x5d0>
 80016b0:	0005      	movs	r5, r0
 80016b2:	e6f5      	b.n	80014a0 <__aeabi_ddiv+0x258>
 80016b4:	42aa      	cmp	r2, r5
 80016b6:	d900      	bls.n	80016ba <__aeabi_ddiv+0x472>
 80016b8:	e639      	b.n	800132e <__aeabi_ddiv+0xe6>
 80016ba:	4643      	mov	r3, r8
 80016bc:	07de      	lsls	r6, r3, #31
 80016be:	0858      	lsrs	r0, r3, #1
 80016c0:	086b      	lsrs	r3, r5, #1
 80016c2:	431e      	orrs	r6, r3
 80016c4:	07ed      	lsls	r5, r5, #31
 80016c6:	e639      	b.n	800133c <__aeabi_ddiv+0xf4>
 80016c8:	4648      	mov	r0, r9
 80016ca:	f001 f937 	bl	800293c <__clzsi2>
 80016ce:	0001      	movs	r1, r0
 80016d0:	0002      	movs	r2, r0
 80016d2:	3115      	adds	r1, #21
 80016d4:	3220      	adds	r2, #32
 80016d6:	291c      	cmp	r1, #28
 80016d8:	dc00      	bgt.n	80016dc <__aeabi_ddiv+0x494>
 80016da:	e72c      	b.n	8001536 <__aeabi_ddiv+0x2ee>
 80016dc:	464b      	mov	r3, r9
 80016de:	3808      	subs	r0, #8
 80016e0:	4083      	lsls	r3, r0
 80016e2:	2500      	movs	r5, #0
 80016e4:	4698      	mov	r8, r3
 80016e6:	e732      	b.n	800154e <__aeabi_ddiv+0x306>
 80016e8:	f001 f928 	bl	800293c <__clzsi2>
 80016ec:	0003      	movs	r3, r0
 80016ee:	001a      	movs	r2, r3
 80016f0:	3215      	adds	r2, #21
 80016f2:	3020      	adds	r0, #32
 80016f4:	2a1c      	cmp	r2, #28
 80016f6:	dc00      	bgt.n	80016fa <__aeabi_ddiv+0x4b2>
 80016f8:	e700      	b.n	80014fc <__aeabi_ddiv+0x2b4>
 80016fa:	4654      	mov	r4, sl
 80016fc:	3b08      	subs	r3, #8
 80016fe:	2200      	movs	r2, #0
 8001700:	409c      	lsls	r4, r3
 8001702:	e705      	b.n	8001510 <__aeabi_ddiv+0x2c8>
 8001704:	1936      	adds	r6, r6, r4
 8001706:	3b01      	subs	r3, #1
 8001708:	42b4      	cmp	r4, r6
 800170a:	d900      	bls.n	800170e <__aeabi_ddiv+0x4c6>
 800170c:	e6a6      	b.n	800145c <__aeabi_ddiv+0x214>
 800170e:	42b2      	cmp	r2, r6
 8001710:	d800      	bhi.n	8001714 <__aeabi_ddiv+0x4cc>
 8001712:	e6a3      	b.n	800145c <__aeabi_ddiv+0x214>
 8001714:	1e83      	subs	r3, r0, #2
 8001716:	1936      	adds	r6, r6, r4
 8001718:	e6a0      	b.n	800145c <__aeabi_ddiv+0x214>
 800171a:	1909      	adds	r1, r1, r4
 800171c:	3d01      	subs	r5, #1
 800171e:	428c      	cmp	r4, r1
 8001720:	d900      	bls.n	8001724 <__aeabi_ddiv+0x4dc>
 8001722:	e68d      	b.n	8001440 <__aeabi_ddiv+0x1f8>
 8001724:	428a      	cmp	r2, r1
 8001726:	d800      	bhi.n	800172a <__aeabi_ddiv+0x4e2>
 8001728:	e68a      	b.n	8001440 <__aeabi_ddiv+0x1f8>
 800172a:	1e85      	subs	r5, r0, #2
 800172c:	1909      	adds	r1, r1, r4
 800172e:	e687      	b.n	8001440 <__aeabi_ddiv+0x1f8>
 8001730:	230f      	movs	r3, #15
 8001732:	402b      	ands	r3, r5
 8001734:	2b04      	cmp	r3, #4
 8001736:	d100      	bne.n	800173a <__aeabi_ddiv+0x4f2>
 8001738:	e6bc      	b.n	80014b4 <__aeabi_ddiv+0x26c>
 800173a:	2305      	movs	r3, #5
 800173c:	425b      	negs	r3, r3
 800173e:	42ab      	cmp	r3, r5
 8001740:	419b      	sbcs	r3, r3
 8001742:	3504      	adds	r5, #4
 8001744:	425b      	negs	r3, r3
 8001746:	08ed      	lsrs	r5, r5, #3
 8001748:	4498      	add	r8, r3
 800174a:	e6b4      	b.n	80014b6 <__aeabi_ddiv+0x26e>
 800174c:	42af      	cmp	r7, r5
 800174e:	d900      	bls.n	8001752 <__aeabi_ddiv+0x50a>
 8001750:	e660      	b.n	8001414 <__aeabi_ddiv+0x1cc>
 8001752:	4282      	cmp	r2, r0
 8001754:	d804      	bhi.n	8001760 <__aeabi_ddiv+0x518>
 8001756:	d000      	beq.n	800175a <__aeabi_ddiv+0x512>
 8001758:	e65c      	b.n	8001414 <__aeabi_ddiv+0x1cc>
 800175a:	42ae      	cmp	r6, r5
 800175c:	d800      	bhi.n	8001760 <__aeabi_ddiv+0x518>
 800175e:	e659      	b.n	8001414 <__aeabi_ddiv+0x1cc>
 8001760:	2302      	movs	r3, #2
 8001762:	425b      	negs	r3, r3
 8001764:	469c      	mov	ip, r3
 8001766:	9b00      	ldr	r3, [sp, #0]
 8001768:	44e0      	add	r8, ip
 800176a:	469c      	mov	ip, r3
 800176c:	4465      	add	r5, ip
 800176e:	429d      	cmp	r5, r3
 8001770:	419b      	sbcs	r3, r3
 8001772:	425b      	negs	r3, r3
 8001774:	191b      	adds	r3, r3, r4
 8001776:	18c0      	adds	r0, r0, r3
 8001778:	e64d      	b.n	8001416 <__aeabi_ddiv+0x1ce>
 800177a:	428a      	cmp	r2, r1
 800177c:	d800      	bhi.n	8001780 <__aeabi_ddiv+0x538>
 800177e:	e60e      	b.n	800139e <__aeabi_ddiv+0x156>
 8001780:	1e83      	subs	r3, r0, #2
 8001782:	1909      	adds	r1, r1, r4
 8001784:	e60b      	b.n	800139e <__aeabi_ddiv+0x156>
 8001786:	428a      	cmp	r2, r1
 8001788:	d800      	bhi.n	800178c <__aeabi_ddiv+0x544>
 800178a:	e5f4      	b.n	8001376 <__aeabi_ddiv+0x12e>
 800178c:	1e83      	subs	r3, r0, #2
 800178e:	4698      	mov	r8, r3
 8001790:	1909      	adds	r1, r1, r4
 8001792:	e5f0      	b.n	8001376 <__aeabi_ddiv+0x12e>
 8001794:	4925      	ldr	r1, [pc, #148]	; (800182c <__aeabi_ddiv+0x5e4>)
 8001796:	0028      	movs	r0, r5
 8001798:	4459      	add	r1, fp
 800179a:	408d      	lsls	r5, r1
 800179c:	4642      	mov	r2, r8
 800179e:	408a      	lsls	r2, r1
 80017a0:	1e69      	subs	r1, r5, #1
 80017a2:	418d      	sbcs	r5, r1
 80017a4:	4641      	mov	r1, r8
 80017a6:	40d8      	lsrs	r0, r3
 80017a8:	40d9      	lsrs	r1, r3
 80017aa:	4302      	orrs	r2, r0
 80017ac:	432a      	orrs	r2, r5
 80017ae:	000b      	movs	r3, r1
 80017b0:	0751      	lsls	r1, r2, #29
 80017b2:	d100      	bne.n	80017b6 <__aeabi_ddiv+0x56e>
 80017b4:	e751      	b.n	800165a <__aeabi_ddiv+0x412>
 80017b6:	210f      	movs	r1, #15
 80017b8:	4011      	ands	r1, r2
 80017ba:	2904      	cmp	r1, #4
 80017bc:	d000      	beq.n	80017c0 <__aeabi_ddiv+0x578>
 80017be:	e746      	b.n	800164e <__aeabi_ddiv+0x406>
 80017c0:	e74b      	b.n	800165a <__aeabi_ddiv+0x412>
 80017c2:	0005      	movs	r5, r0
 80017c4:	428e      	cmp	r6, r1
 80017c6:	d000      	beq.n	80017ca <__aeabi_ddiv+0x582>
 80017c8:	e66a      	b.n	80014a0 <__aeabi_ddiv+0x258>
 80017ca:	9a00      	ldr	r2, [sp, #0]
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d000      	beq.n	80017d2 <__aeabi_ddiv+0x58a>
 80017d0:	e666      	b.n	80014a0 <__aeabi_ddiv+0x258>
 80017d2:	e667      	b.n	80014a4 <__aeabi_ddiv+0x25c>
 80017d4:	4a16      	ldr	r2, [pc, #88]	; (8001830 <__aeabi_ddiv+0x5e8>)
 80017d6:	445a      	add	r2, fp
 80017d8:	2a00      	cmp	r2, #0
 80017da:	dc00      	bgt.n	80017de <__aeabi_ddiv+0x596>
 80017dc:	e710      	b.n	8001600 <__aeabi_ddiv+0x3b8>
 80017de:	2301      	movs	r3, #1
 80017e0:	2500      	movs	r5, #0
 80017e2:	4498      	add	r8, r3
 80017e4:	e667      	b.n	80014b6 <__aeabi_ddiv+0x26e>
 80017e6:	075d      	lsls	r5, r3, #29
 80017e8:	025b      	lsls	r3, r3, #9
 80017ea:	0b1c      	lsrs	r4, r3, #12
 80017ec:	08d2      	lsrs	r2, r2, #3
 80017ee:	2300      	movs	r3, #0
 80017f0:	4315      	orrs	r5, r2
 80017f2:	e580      	b.n	80012f6 <__aeabi_ddiv+0xae>
 80017f4:	9800      	ldr	r0, [sp, #0]
 80017f6:	3d02      	subs	r5, #2
 80017f8:	0042      	lsls	r2, r0, #1
 80017fa:	4282      	cmp	r2, r0
 80017fc:	41bf      	sbcs	r7, r7
 80017fe:	427f      	negs	r7, r7
 8001800:	193c      	adds	r4, r7, r4
 8001802:	1936      	adds	r6, r6, r4
 8001804:	9200      	str	r2, [sp, #0]
 8001806:	e7dd      	b.n	80017c4 <__aeabi_ddiv+0x57c>
 8001808:	2480      	movs	r4, #128	; 0x80
 800180a:	4643      	mov	r3, r8
 800180c:	0324      	lsls	r4, r4, #12
 800180e:	431c      	orrs	r4, r3
 8001810:	0324      	lsls	r4, r4, #12
 8001812:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__aeabi_ddiv+0x5dc>)
 8001814:	0b24      	lsrs	r4, r4, #12
 8001816:	e56e      	b.n	80012f6 <__aeabi_ddiv+0xae>
 8001818:	9a00      	ldr	r2, [sp, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d3ea      	bcc.n	80017f4 <__aeabi_ddiv+0x5ac>
 800181e:	0005      	movs	r5, r0
 8001820:	e7d3      	b.n	80017ca <__aeabi_ddiv+0x582>
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	000007ff 	.word	0x000007ff
 8001828:	0000043e 	.word	0x0000043e
 800182c:	0000041e 	.word	0x0000041e
 8001830:	000003ff 	.word	0x000003ff

08001834 <__eqdf2>:
 8001834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001836:	464e      	mov	r6, r9
 8001838:	4645      	mov	r5, r8
 800183a:	46de      	mov	lr, fp
 800183c:	4657      	mov	r7, sl
 800183e:	4690      	mov	r8, r2
 8001840:	b5e0      	push	{r5, r6, r7, lr}
 8001842:	0017      	movs	r7, r2
 8001844:	031a      	lsls	r2, r3, #12
 8001846:	0b12      	lsrs	r2, r2, #12
 8001848:	0005      	movs	r5, r0
 800184a:	4684      	mov	ip, r0
 800184c:	4819      	ldr	r0, [pc, #100]	; (80018b4 <__eqdf2+0x80>)
 800184e:	030e      	lsls	r6, r1, #12
 8001850:	004c      	lsls	r4, r1, #1
 8001852:	4691      	mov	r9, r2
 8001854:	005a      	lsls	r2, r3, #1
 8001856:	0fdb      	lsrs	r3, r3, #31
 8001858:	469b      	mov	fp, r3
 800185a:	0b36      	lsrs	r6, r6, #12
 800185c:	0d64      	lsrs	r4, r4, #21
 800185e:	0fc9      	lsrs	r1, r1, #31
 8001860:	0d52      	lsrs	r2, r2, #21
 8001862:	4284      	cmp	r4, r0
 8001864:	d019      	beq.n	800189a <__eqdf2+0x66>
 8001866:	4282      	cmp	r2, r0
 8001868:	d010      	beq.n	800188c <__eqdf2+0x58>
 800186a:	2001      	movs	r0, #1
 800186c:	4294      	cmp	r4, r2
 800186e:	d10e      	bne.n	800188e <__eqdf2+0x5a>
 8001870:	454e      	cmp	r6, r9
 8001872:	d10c      	bne.n	800188e <__eqdf2+0x5a>
 8001874:	2001      	movs	r0, #1
 8001876:	45c4      	cmp	ip, r8
 8001878:	d109      	bne.n	800188e <__eqdf2+0x5a>
 800187a:	4559      	cmp	r1, fp
 800187c:	d017      	beq.n	80018ae <__eqdf2+0x7a>
 800187e:	2c00      	cmp	r4, #0
 8001880:	d105      	bne.n	800188e <__eqdf2+0x5a>
 8001882:	0030      	movs	r0, r6
 8001884:	4328      	orrs	r0, r5
 8001886:	1e43      	subs	r3, r0, #1
 8001888:	4198      	sbcs	r0, r3
 800188a:	e000      	b.n	800188e <__eqdf2+0x5a>
 800188c:	2001      	movs	r0, #1
 800188e:	bcf0      	pop	{r4, r5, r6, r7}
 8001890:	46bb      	mov	fp, r7
 8001892:	46b2      	mov	sl, r6
 8001894:	46a9      	mov	r9, r5
 8001896:	46a0      	mov	r8, r4
 8001898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800189a:	0033      	movs	r3, r6
 800189c:	2001      	movs	r0, #1
 800189e:	432b      	orrs	r3, r5
 80018a0:	d1f5      	bne.n	800188e <__eqdf2+0x5a>
 80018a2:	42a2      	cmp	r2, r4
 80018a4:	d1f3      	bne.n	800188e <__eqdf2+0x5a>
 80018a6:	464b      	mov	r3, r9
 80018a8:	433b      	orrs	r3, r7
 80018aa:	d1f0      	bne.n	800188e <__eqdf2+0x5a>
 80018ac:	e7e2      	b.n	8001874 <__eqdf2+0x40>
 80018ae:	2000      	movs	r0, #0
 80018b0:	e7ed      	b.n	800188e <__eqdf2+0x5a>
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	000007ff 	.word	0x000007ff

080018b8 <__gedf2>:
 80018b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ba:	4647      	mov	r7, r8
 80018bc:	46ce      	mov	lr, r9
 80018be:	0004      	movs	r4, r0
 80018c0:	0018      	movs	r0, r3
 80018c2:	0016      	movs	r6, r2
 80018c4:	031b      	lsls	r3, r3, #12
 80018c6:	0b1b      	lsrs	r3, r3, #12
 80018c8:	4d2d      	ldr	r5, [pc, #180]	; (8001980 <__gedf2+0xc8>)
 80018ca:	004a      	lsls	r2, r1, #1
 80018cc:	4699      	mov	r9, r3
 80018ce:	b580      	push	{r7, lr}
 80018d0:	0043      	lsls	r3, r0, #1
 80018d2:	030f      	lsls	r7, r1, #12
 80018d4:	46a4      	mov	ip, r4
 80018d6:	46b0      	mov	r8, r6
 80018d8:	0b3f      	lsrs	r7, r7, #12
 80018da:	0d52      	lsrs	r2, r2, #21
 80018dc:	0fc9      	lsrs	r1, r1, #31
 80018de:	0d5b      	lsrs	r3, r3, #21
 80018e0:	0fc0      	lsrs	r0, r0, #31
 80018e2:	42aa      	cmp	r2, r5
 80018e4:	d021      	beq.n	800192a <__gedf2+0x72>
 80018e6:	42ab      	cmp	r3, r5
 80018e8:	d013      	beq.n	8001912 <__gedf2+0x5a>
 80018ea:	2a00      	cmp	r2, #0
 80018ec:	d122      	bne.n	8001934 <__gedf2+0x7c>
 80018ee:	433c      	orrs	r4, r7
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <__gedf2+0x42>
 80018f4:	464d      	mov	r5, r9
 80018f6:	432e      	orrs	r6, r5
 80018f8:	d022      	beq.n	8001940 <__gedf2+0x88>
 80018fa:	2c00      	cmp	r4, #0
 80018fc:	d010      	beq.n	8001920 <__gedf2+0x68>
 80018fe:	4281      	cmp	r1, r0
 8001900:	d022      	beq.n	8001948 <__gedf2+0x90>
 8001902:	2002      	movs	r0, #2
 8001904:	3901      	subs	r1, #1
 8001906:	4008      	ands	r0, r1
 8001908:	3801      	subs	r0, #1
 800190a:	bcc0      	pop	{r6, r7}
 800190c:	46b9      	mov	r9, r7
 800190e:	46b0      	mov	r8, r6
 8001910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001912:	464d      	mov	r5, r9
 8001914:	432e      	orrs	r6, r5
 8001916:	d129      	bne.n	800196c <__gedf2+0xb4>
 8001918:	2a00      	cmp	r2, #0
 800191a:	d1f0      	bne.n	80018fe <__gedf2+0x46>
 800191c:	433c      	orrs	r4, r7
 800191e:	d1ee      	bne.n	80018fe <__gedf2+0x46>
 8001920:	2800      	cmp	r0, #0
 8001922:	d1f2      	bne.n	800190a <__gedf2+0x52>
 8001924:	2001      	movs	r0, #1
 8001926:	4240      	negs	r0, r0
 8001928:	e7ef      	b.n	800190a <__gedf2+0x52>
 800192a:	003d      	movs	r5, r7
 800192c:	4325      	orrs	r5, r4
 800192e:	d11d      	bne.n	800196c <__gedf2+0xb4>
 8001930:	4293      	cmp	r3, r2
 8001932:	d0ee      	beq.n	8001912 <__gedf2+0x5a>
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1e2      	bne.n	80018fe <__gedf2+0x46>
 8001938:	464c      	mov	r4, r9
 800193a:	4326      	orrs	r6, r4
 800193c:	d1df      	bne.n	80018fe <__gedf2+0x46>
 800193e:	e7e0      	b.n	8001902 <__gedf2+0x4a>
 8001940:	2000      	movs	r0, #0
 8001942:	2c00      	cmp	r4, #0
 8001944:	d0e1      	beq.n	800190a <__gedf2+0x52>
 8001946:	e7dc      	b.n	8001902 <__gedf2+0x4a>
 8001948:	429a      	cmp	r2, r3
 800194a:	dc0a      	bgt.n	8001962 <__gedf2+0xaa>
 800194c:	dbe8      	blt.n	8001920 <__gedf2+0x68>
 800194e:	454f      	cmp	r7, r9
 8001950:	d8d7      	bhi.n	8001902 <__gedf2+0x4a>
 8001952:	d00e      	beq.n	8001972 <__gedf2+0xba>
 8001954:	2000      	movs	r0, #0
 8001956:	454f      	cmp	r7, r9
 8001958:	d2d7      	bcs.n	800190a <__gedf2+0x52>
 800195a:	2900      	cmp	r1, #0
 800195c:	d0e2      	beq.n	8001924 <__gedf2+0x6c>
 800195e:	0008      	movs	r0, r1
 8001960:	e7d3      	b.n	800190a <__gedf2+0x52>
 8001962:	4243      	negs	r3, r0
 8001964:	4158      	adcs	r0, r3
 8001966:	0040      	lsls	r0, r0, #1
 8001968:	3801      	subs	r0, #1
 800196a:	e7ce      	b.n	800190a <__gedf2+0x52>
 800196c:	2002      	movs	r0, #2
 800196e:	4240      	negs	r0, r0
 8001970:	e7cb      	b.n	800190a <__gedf2+0x52>
 8001972:	45c4      	cmp	ip, r8
 8001974:	d8c5      	bhi.n	8001902 <__gedf2+0x4a>
 8001976:	2000      	movs	r0, #0
 8001978:	45c4      	cmp	ip, r8
 800197a:	d2c6      	bcs.n	800190a <__gedf2+0x52>
 800197c:	e7ed      	b.n	800195a <__gedf2+0xa2>
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	000007ff 	.word	0x000007ff

08001984 <__ledf2>:
 8001984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001986:	4647      	mov	r7, r8
 8001988:	46ce      	mov	lr, r9
 800198a:	0004      	movs	r4, r0
 800198c:	0018      	movs	r0, r3
 800198e:	0016      	movs	r6, r2
 8001990:	031b      	lsls	r3, r3, #12
 8001992:	0b1b      	lsrs	r3, r3, #12
 8001994:	4d2c      	ldr	r5, [pc, #176]	; (8001a48 <__ledf2+0xc4>)
 8001996:	004a      	lsls	r2, r1, #1
 8001998:	4699      	mov	r9, r3
 800199a:	b580      	push	{r7, lr}
 800199c:	0043      	lsls	r3, r0, #1
 800199e:	030f      	lsls	r7, r1, #12
 80019a0:	46a4      	mov	ip, r4
 80019a2:	46b0      	mov	r8, r6
 80019a4:	0b3f      	lsrs	r7, r7, #12
 80019a6:	0d52      	lsrs	r2, r2, #21
 80019a8:	0fc9      	lsrs	r1, r1, #31
 80019aa:	0d5b      	lsrs	r3, r3, #21
 80019ac:	0fc0      	lsrs	r0, r0, #31
 80019ae:	42aa      	cmp	r2, r5
 80019b0:	d00d      	beq.n	80019ce <__ledf2+0x4a>
 80019b2:	42ab      	cmp	r3, r5
 80019b4:	d010      	beq.n	80019d8 <__ledf2+0x54>
 80019b6:	2a00      	cmp	r2, #0
 80019b8:	d127      	bne.n	8001a0a <__ledf2+0x86>
 80019ba:	433c      	orrs	r4, r7
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d111      	bne.n	80019e4 <__ledf2+0x60>
 80019c0:	464d      	mov	r5, r9
 80019c2:	432e      	orrs	r6, r5
 80019c4:	d10e      	bne.n	80019e4 <__ledf2+0x60>
 80019c6:	2000      	movs	r0, #0
 80019c8:	2c00      	cmp	r4, #0
 80019ca:	d015      	beq.n	80019f8 <__ledf2+0x74>
 80019cc:	e00e      	b.n	80019ec <__ledf2+0x68>
 80019ce:	003d      	movs	r5, r7
 80019d0:	4325      	orrs	r5, r4
 80019d2:	d110      	bne.n	80019f6 <__ledf2+0x72>
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d118      	bne.n	8001a0a <__ledf2+0x86>
 80019d8:	464d      	mov	r5, r9
 80019da:	432e      	orrs	r6, r5
 80019dc:	d10b      	bne.n	80019f6 <__ledf2+0x72>
 80019de:	2a00      	cmp	r2, #0
 80019e0:	d102      	bne.n	80019e8 <__ledf2+0x64>
 80019e2:	433c      	orrs	r4, r7
 80019e4:	2c00      	cmp	r4, #0
 80019e6:	d00b      	beq.n	8001a00 <__ledf2+0x7c>
 80019e8:	4281      	cmp	r1, r0
 80019ea:	d014      	beq.n	8001a16 <__ledf2+0x92>
 80019ec:	2002      	movs	r0, #2
 80019ee:	3901      	subs	r1, #1
 80019f0:	4008      	ands	r0, r1
 80019f2:	3801      	subs	r0, #1
 80019f4:	e000      	b.n	80019f8 <__ledf2+0x74>
 80019f6:	2002      	movs	r0, #2
 80019f8:	bcc0      	pop	{r6, r7}
 80019fa:	46b9      	mov	r9, r7
 80019fc:	46b0      	mov	r8, r6
 80019fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a00:	2800      	cmp	r0, #0
 8001a02:	d1f9      	bne.n	80019f8 <__ledf2+0x74>
 8001a04:	2001      	movs	r0, #1
 8001a06:	4240      	negs	r0, r0
 8001a08:	e7f6      	b.n	80019f8 <__ledf2+0x74>
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1ec      	bne.n	80019e8 <__ledf2+0x64>
 8001a0e:	464c      	mov	r4, r9
 8001a10:	4326      	orrs	r6, r4
 8001a12:	d1e9      	bne.n	80019e8 <__ledf2+0x64>
 8001a14:	e7ea      	b.n	80019ec <__ledf2+0x68>
 8001a16:	429a      	cmp	r2, r3
 8001a18:	dd04      	ble.n	8001a24 <__ledf2+0xa0>
 8001a1a:	4243      	negs	r3, r0
 8001a1c:	4158      	adcs	r0, r3
 8001a1e:	0040      	lsls	r0, r0, #1
 8001a20:	3801      	subs	r0, #1
 8001a22:	e7e9      	b.n	80019f8 <__ledf2+0x74>
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dbeb      	blt.n	8001a00 <__ledf2+0x7c>
 8001a28:	454f      	cmp	r7, r9
 8001a2a:	d8df      	bhi.n	80019ec <__ledf2+0x68>
 8001a2c:	d006      	beq.n	8001a3c <__ledf2+0xb8>
 8001a2e:	2000      	movs	r0, #0
 8001a30:	454f      	cmp	r7, r9
 8001a32:	d2e1      	bcs.n	80019f8 <__ledf2+0x74>
 8001a34:	2900      	cmp	r1, #0
 8001a36:	d0e5      	beq.n	8001a04 <__ledf2+0x80>
 8001a38:	0008      	movs	r0, r1
 8001a3a:	e7dd      	b.n	80019f8 <__ledf2+0x74>
 8001a3c:	45c4      	cmp	ip, r8
 8001a3e:	d8d5      	bhi.n	80019ec <__ledf2+0x68>
 8001a40:	2000      	movs	r0, #0
 8001a42:	45c4      	cmp	ip, r8
 8001a44:	d2d8      	bcs.n	80019f8 <__ledf2+0x74>
 8001a46:	e7f5      	b.n	8001a34 <__ledf2+0xb0>
 8001a48:	000007ff 	.word	0x000007ff

08001a4c <__aeabi_dmul>:
 8001a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4e:	4657      	mov	r7, sl
 8001a50:	464e      	mov	r6, r9
 8001a52:	4645      	mov	r5, r8
 8001a54:	46de      	mov	lr, fp
 8001a56:	b5e0      	push	{r5, r6, r7, lr}
 8001a58:	4698      	mov	r8, r3
 8001a5a:	030c      	lsls	r4, r1, #12
 8001a5c:	004b      	lsls	r3, r1, #1
 8001a5e:	0006      	movs	r6, r0
 8001a60:	4692      	mov	sl, r2
 8001a62:	b087      	sub	sp, #28
 8001a64:	0b24      	lsrs	r4, r4, #12
 8001a66:	0d5b      	lsrs	r3, r3, #21
 8001a68:	0fcf      	lsrs	r7, r1, #31
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dmul+0x24>
 8001a6e:	e15c      	b.n	8001d2a <__aeabi_dmul+0x2de>
 8001a70:	4ad9      	ldr	r2, [pc, #868]	; (8001dd8 <__aeabi_dmul+0x38c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dmul+0x2c>
 8001a76:	e175      	b.n	8001d64 <__aeabi_dmul+0x318>
 8001a78:	0f42      	lsrs	r2, r0, #29
 8001a7a:	00e4      	lsls	r4, r4, #3
 8001a7c:	4314      	orrs	r4, r2
 8001a7e:	2280      	movs	r2, #128	; 0x80
 8001a80:	0412      	lsls	r2, r2, #16
 8001a82:	4314      	orrs	r4, r2
 8001a84:	4ad5      	ldr	r2, [pc, #852]	; (8001ddc <__aeabi_dmul+0x390>)
 8001a86:	00c5      	lsls	r5, r0, #3
 8001a88:	4694      	mov	ip, r2
 8001a8a:	4463      	add	r3, ip
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	4699      	mov	r9, r3
 8001a92:	469b      	mov	fp, r3
 8001a94:	4643      	mov	r3, r8
 8001a96:	4642      	mov	r2, r8
 8001a98:	031e      	lsls	r6, r3, #12
 8001a9a:	0fd2      	lsrs	r2, r2, #31
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4650      	mov	r0, sl
 8001aa0:	4690      	mov	r8, r2
 8001aa2:	0b36      	lsrs	r6, r6, #12
 8001aa4:	0d5b      	lsrs	r3, r3, #21
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dmul+0x5e>
 8001aa8:	e120      	b.n	8001cec <__aeabi_dmul+0x2a0>
 8001aaa:	4acb      	ldr	r2, [pc, #812]	; (8001dd8 <__aeabi_dmul+0x38c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_dmul+0x66>
 8001ab0:	e162      	b.n	8001d78 <__aeabi_dmul+0x32c>
 8001ab2:	49ca      	ldr	r1, [pc, #808]	; (8001ddc <__aeabi_dmul+0x390>)
 8001ab4:	0f42      	lsrs	r2, r0, #29
 8001ab6:	468c      	mov	ip, r1
 8001ab8:	9900      	ldr	r1, [sp, #0]
 8001aba:	4463      	add	r3, ip
 8001abc:	00f6      	lsls	r6, r6, #3
 8001abe:	468c      	mov	ip, r1
 8001ac0:	4316      	orrs	r6, r2
 8001ac2:	2280      	movs	r2, #128	; 0x80
 8001ac4:	449c      	add	ip, r3
 8001ac6:	0412      	lsls	r2, r2, #16
 8001ac8:	4663      	mov	r3, ip
 8001aca:	4316      	orrs	r6, r2
 8001acc:	00c2      	lsls	r2, r0, #3
 8001ace:	2000      	movs	r0, #0
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	9900      	ldr	r1, [sp, #0]
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	3101      	adds	r1, #1
 8001ad8:	468c      	mov	ip, r1
 8001ada:	4649      	mov	r1, r9
 8001adc:	407b      	eors	r3, r7
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	290f      	cmp	r1, #15
 8001ae2:	d826      	bhi.n	8001b32 <__aeabi_dmul+0xe6>
 8001ae4:	4bbe      	ldr	r3, [pc, #760]	; (8001de0 <__aeabi_dmul+0x394>)
 8001ae6:	0089      	lsls	r1, r1, #2
 8001ae8:	5859      	ldr	r1, [r3, r1]
 8001aea:	468f      	mov	pc, r1
 8001aec:	4643      	mov	r3, r8
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	0034      	movs	r4, r6
 8001af2:	0015      	movs	r5, r2
 8001af4:	4683      	mov	fp, r0
 8001af6:	465b      	mov	r3, fp
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d016      	beq.n	8001b2a <__aeabi_dmul+0xde>
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dmul+0xb6>
 8001b00:	e203      	b.n	8001f0a <__aeabi_dmul+0x4be>
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d000      	beq.n	8001b08 <__aeabi_dmul+0xbc>
 8001b06:	e0cd      	b.n	8001ca4 <__aeabi_dmul+0x258>
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2400      	movs	r4, #0
 8001b0c:	2500      	movs	r5, #0
 8001b0e:	9b01      	ldr	r3, [sp, #4]
 8001b10:	0512      	lsls	r2, r2, #20
 8001b12:	4322      	orrs	r2, r4
 8001b14:	07db      	lsls	r3, r3, #31
 8001b16:	431a      	orrs	r2, r3
 8001b18:	0028      	movs	r0, r5
 8001b1a:	0011      	movs	r1, r2
 8001b1c:	b007      	add	sp, #28
 8001b1e:	bcf0      	pop	{r4, r5, r6, r7}
 8001b20:	46bb      	mov	fp, r7
 8001b22:	46b2      	mov	sl, r6
 8001b24:	46a9      	mov	r9, r5
 8001b26:	46a0      	mov	r8, r4
 8001b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2a:	2400      	movs	r4, #0
 8001b2c:	2500      	movs	r5, #0
 8001b2e:	4aaa      	ldr	r2, [pc, #680]	; (8001dd8 <__aeabi_dmul+0x38c>)
 8001b30:	e7ed      	b.n	8001b0e <__aeabi_dmul+0xc2>
 8001b32:	0c28      	lsrs	r0, r5, #16
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	0c2d      	lsrs	r5, r5, #16
 8001b38:	002b      	movs	r3, r5
 8001b3a:	0c11      	lsrs	r1, r2, #16
 8001b3c:	0412      	lsls	r2, r2, #16
 8001b3e:	0c12      	lsrs	r2, r2, #16
 8001b40:	4353      	muls	r3, r2
 8001b42:	4698      	mov	r8, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	002f      	movs	r7, r5
 8001b48:	4343      	muls	r3, r0
 8001b4a:	4699      	mov	r9, r3
 8001b4c:	434f      	muls	r7, r1
 8001b4e:	444f      	add	r7, r9
 8001b50:	46bb      	mov	fp, r7
 8001b52:	4647      	mov	r7, r8
 8001b54:	000b      	movs	r3, r1
 8001b56:	0c3f      	lsrs	r7, r7, #16
 8001b58:	46ba      	mov	sl, r7
 8001b5a:	4343      	muls	r3, r0
 8001b5c:	44da      	add	sl, fp
 8001b5e:	9302      	str	r3, [sp, #8]
 8001b60:	45d1      	cmp	r9, sl
 8001b62:	d904      	bls.n	8001b6e <__aeabi_dmul+0x122>
 8001b64:	2780      	movs	r7, #128	; 0x80
 8001b66:	027f      	lsls	r7, r7, #9
 8001b68:	46b9      	mov	r9, r7
 8001b6a:	444b      	add	r3, r9
 8001b6c:	9302      	str	r3, [sp, #8]
 8001b6e:	4653      	mov	r3, sl
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	469b      	mov	fp, r3
 8001b74:	4653      	mov	r3, sl
 8001b76:	041f      	lsls	r7, r3, #16
 8001b78:	4643      	mov	r3, r8
 8001b7a:	041b      	lsls	r3, r3, #16
 8001b7c:	0c1b      	lsrs	r3, r3, #16
 8001b7e:	4698      	mov	r8, r3
 8001b80:	003b      	movs	r3, r7
 8001b82:	4443      	add	r3, r8
 8001b84:	9304      	str	r3, [sp, #16]
 8001b86:	0c33      	lsrs	r3, r6, #16
 8001b88:	0436      	lsls	r6, r6, #16
 8001b8a:	0c36      	lsrs	r6, r6, #16
 8001b8c:	4698      	mov	r8, r3
 8001b8e:	0033      	movs	r3, r6
 8001b90:	4343      	muls	r3, r0
 8001b92:	4699      	mov	r9, r3
 8001b94:	4643      	mov	r3, r8
 8001b96:	4343      	muls	r3, r0
 8001b98:	002f      	movs	r7, r5
 8001b9a:	469a      	mov	sl, r3
 8001b9c:	4643      	mov	r3, r8
 8001b9e:	4377      	muls	r7, r6
 8001ba0:	435d      	muls	r5, r3
 8001ba2:	0c38      	lsrs	r0, r7, #16
 8001ba4:	444d      	add	r5, r9
 8001ba6:	1945      	adds	r5, r0, r5
 8001ba8:	45a9      	cmp	r9, r5
 8001baa:	d903      	bls.n	8001bb4 <__aeabi_dmul+0x168>
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	025b      	lsls	r3, r3, #9
 8001bb0:	4699      	mov	r9, r3
 8001bb2:	44ca      	add	sl, r9
 8001bb4:	043f      	lsls	r7, r7, #16
 8001bb6:	0c28      	lsrs	r0, r5, #16
 8001bb8:	0c3f      	lsrs	r7, r7, #16
 8001bba:	042d      	lsls	r5, r5, #16
 8001bbc:	19ed      	adds	r5, r5, r7
 8001bbe:	0c27      	lsrs	r7, r4, #16
 8001bc0:	0424      	lsls	r4, r4, #16
 8001bc2:	0c24      	lsrs	r4, r4, #16
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	0020      	movs	r0, r4
 8001bc8:	4350      	muls	r0, r2
 8001bca:	437a      	muls	r2, r7
 8001bcc:	4691      	mov	r9, r2
 8001bce:	003a      	movs	r2, r7
 8001bd0:	4453      	add	r3, sl
 8001bd2:	9305      	str	r3, [sp, #20]
 8001bd4:	0c03      	lsrs	r3, r0, #16
 8001bd6:	469a      	mov	sl, r3
 8001bd8:	434a      	muls	r2, r1
 8001bda:	4361      	muls	r1, r4
 8001bdc:	4449      	add	r1, r9
 8001bde:	4451      	add	r1, sl
 8001be0:	44ab      	add	fp, r5
 8001be2:	4589      	cmp	r9, r1
 8001be4:	d903      	bls.n	8001bee <__aeabi_dmul+0x1a2>
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	025b      	lsls	r3, r3, #9
 8001bea:	4699      	mov	r9, r3
 8001bec:	444a      	add	r2, r9
 8001bee:	0400      	lsls	r0, r0, #16
 8001bf0:	0c0b      	lsrs	r3, r1, #16
 8001bf2:	0c00      	lsrs	r0, r0, #16
 8001bf4:	0409      	lsls	r1, r1, #16
 8001bf6:	1809      	adds	r1, r1, r0
 8001bf8:	0020      	movs	r0, r4
 8001bfa:	4699      	mov	r9, r3
 8001bfc:	4643      	mov	r3, r8
 8001bfe:	4370      	muls	r0, r6
 8001c00:	435c      	muls	r4, r3
 8001c02:	437e      	muls	r6, r7
 8001c04:	435f      	muls	r7, r3
 8001c06:	0c03      	lsrs	r3, r0, #16
 8001c08:	4698      	mov	r8, r3
 8001c0a:	19a4      	adds	r4, r4, r6
 8001c0c:	4444      	add	r4, r8
 8001c0e:	444a      	add	r2, r9
 8001c10:	9703      	str	r7, [sp, #12]
 8001c12:	42a6      	cmp	r6, r4
 8001c14:	d904      	bls.n	8001c20 <__aeabi_dmul+0x1d4>
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	025b      	lsls	r3, r3, #9
 8001c1a:	4698      	mov	r8, r3
 8001c1c:	4447      	add	r7, r8
 8001c1e:	9703      	str	r7, [sp, #12]
 8001c20:	0423      	lsls	r3, r4, #16
 8001c22:	9e02      	ldr	r6, [sp, #8]
 8001c24:	469a      	mov	sl, r3
 8001c26:	9b05      	ldr	r3, [sp, #20]
 8001c28:	445e      	add	r6, fp
 8001c2a:	4698      	mov	r8, r3
 8001c2c:	42ae      	cmp	r6, r5
 8001c2e:	41ad      	sbcs	r5, r5
 8001c30:	1876      	adds	r6, r6, r1
 8001c32:	428e      	cmp	r6, r1
 8001c34:	4189      	sbcs	r1, r1
 8001c36:	0400      	lsls	r0, r0, #16
 8001c38:	0c00      	lsrs	r0, r0, #16
 8001c3a:	4450      	add	r0, sl
 8001c3c:	4440      	add	r0, r8
 8001c3e:	426d      	negs	r5, r5
 8001c40:	1947      	adds	r7, r0, r5
 8001c42:	46b8      	mov	r8, r7
 8001c44:	4693      	mov	fp, r2
 8001c46:	4249      	negs	r1, r1
 8001c48:	4689      	mov	r9, r1
 8001c4a:	44c3      	add	fp, r8
 8001c4c:	44d9      	add	r9, fp
 8001c4e:	4298      	cmp	r0, r3
 8001c50:	4180      	sbcs	r0, r0
 8001c52:	45a8      	cmp	r8, r5
 8001c54:	41ad      	sbcs	r5, r5
 8001c56:	4593      	cmp	fp, r2
 8001c58:	4192      	sbcs	r2, r2
 8001c5a:	4589      	cmp	r9, r1
 8001c5c:	4189      	sbcs	r1, r1
 8001c5e:	426d      	negs	r5, r5
 8001c60:	4240      	negs	r0, r0
 8001c62:	4328      	orrs	r0, r5
 8001c64:	0c24      	lsrs	r4, r4, #16
 8001c66:	4252      	negs	r2, r2
 8001c68:	4249      	negs	r1, r1
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	9b03      	ldr	r3, [sp, #12]
 8001c6e:	1900      	adds	r0, r0, r4
 8001c70:	1880      	adds	r0, r0, r2
 8001c72:	18c7      	adds	r7, r0, r3
 8001c74:	464b      	mov	r3, r9
 8001c76:	0ddc      	lsrs	r4, r3, #23
 8001c78:	9b04      	ldr	r3, [sp, #16]
 8001c7a:	0275      	lsls	r5, r6, #9
 8001c7c:	431d      	orrs	r5, r3
 8001c7e:	1e6a      	subs	r2, r5, #1
 8001c80:	4195      	sbcs	r5, r2
 8001c82:	464b      	mov	r3, r9
 8001c84:	0df6      	lsrs	r6, r6, #23
 8001c86:	027f      	lsls	r7, r7, #9
 8001c88:	4335      	orrs	r5, r6
 8001c8a:	025a      	lsls	r2, r3, #9
 8001c8c:	433c      	orrs	r4, r7
 8001c8e:	4315      	orrs	r5, r2
 8001c90:	01fb      	lsls	r3, r7, #7
 8001c92:	d400      	bmi.n	8001c96 <__aeabi_dmul+0x24a>
 8001c94:	e11c      	b.n	8001ed0 <__aeabi_dmul+0x484>
 8001c96:	2101      	movs	r1, #1
 8001c98:	086a      	lsrs	r2, r5, #1
 8001c9a:	400d      	ands	r5, r1
 8001c9c:	4315      	orrs	r5, r2
 8001c9e:	07e2      	lsls	r2, r4, #31
 8001ca0:	4315      	orrs	r5, r2
 8001ca2:	0864      	lsrs	r4, r4, #1
 8001ca4:	494f      	ldr	r1, [pc, #316]	; (8001de4 <__aeabi_dmul+0x398>)
 8001ca6:	4461      	add	r1, ip
 8001ca8:	2900      	cmp	r1, #0
 8001caa:	dc00      	bgt.n	8001cae <__aeabi_dmul+0x262>
 8001cac:	e0b0      	b.n	8001e10 <__aeabi_dmul+0x3c4>
 8001cae:	076b      	lsls	r3, r5, #29
 8001cb0:	d009      	beq.n	8001cc6 <__aeabi_dmul+0x27a>
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	402a      	ands	r2, r5
 8001cb6:	2a04      	cmp	r2, #4
 8001cb8:	d005      	beq.n	8001cc6 <__aeabi_dmul+0x27a>
 8001cba:	1d2a      	adds	r2, r5, #4
 8001cbc:	42aa      	cmp	r2, r5
 8001cbe:	41ad      	sbcs	r5, r5
 8001cc0:	426d      	negs	r5, r5
 8001cc2:	1964      	adds	r4, r4, r5
 8001cc4:	0015      	movs	r5, r2
 8001cc6:	01e3      	lsls	r3, r4, #7
 8001cc8:	d504      	bpl.n	8001cd4 <__aeabi_dmul+0x288>
 8001cca:	2180      	movs	r1, #128	; 0x80
 8001ccc:	4a46      	ldr	r2, [pc, #280]	; (8001de8 <__aeabi_dmul+0x39c>)
 8001cce:	00c9      	lsls	r1, r1, #3
 8001cd0:	4014      	ands	r4, r2
 8001cd2:	4461      	add	r1, ip
 8001cd4:	4a45      	ldr	r2, [pc, #276]	; (8001dec <__aeabi_dmul+0x3a0>)
 8001cd6:	4291      	cmp	r1, r2
 8001cd8:	dd00      	ble.n	8001cdc <__aeabi_dmul+0x290>
 8001cda:	e726      	b.n	8001b2a <__aeabi_dmul+0xde>
 8001cdc:	0762      	lsls	r2, r4, #29
 8001cde:	08ed      	lsrs	r5, r5, #3
 8001ce0:	0264      	lsls	r4, r4, #9
 8001ce2:	0549      	lsls	r1, r1, #21
 8001ce4:	4315      	orrs	r5, r2
 8001ce6:	0b24      	lsrs	r4, r4, #12
 8001ce8:	0d4a      	lsrs	r2, r1, #21
 8001cea:	e710      	b.n	8001b0e <__aeabi_dmul+0xc2>
 8001cec:	4652      	mov	r2, sl
 8001cee:	4332      	orrs	r2, r6
 8001cf0:	d100      	bne.n	8001cf4 <__aeabi_dmul+0x2a8>
 8001cf2:	e07f      	b.n	8001df4 <__aeabi_dmul+0x3a8>
 8001cf4:	2e00      	cmp	r6, #0
 8001cf6:	d100      	bne.n	8001cfa <__aeabi_dmul+0x2ae>
 8001cf8:	e0dc      	b.n	8001eb4 <__aeabi_dmul+0x468>
 8001cfa:	0030      	movs	r0, r6
 8001cfc:	f000 fe1e 	bl	800293c <__clzsi2>
 8001d00:	0002      	movs	r2, r0
 8001d02:	3a0b      	subs	r2, #11
 8001d04:	231d      	movs	r3, #29
 8001d06:	0001      	movs	r1, r0
 8001d08:	1a9b      	subs	r3, r3, r2
 8001d0a:	4652      	mov	r2, sl
 8001d0c:	3908      	subs	r1, #8
 8001d0e:	40da      	lsrs	r2, r3
 8001d10:	408e      	lsls	r6, r1
 8001d12:	4316      	orrs	r6, r2
 8001d14:	4652      	mov	r2, sl
 8001d16:	408a      	lsls	r2, r1
 8001d18:	9b00      	ldr	r3, [sp, #0]
 8001d1a:	4935      	ldr	r1, [pc, #212]	; (8001df0 <__aeabi_dmul+0x3a4>)
 8001d1c:	1a18      	subs	r0, r3, r0
 8001d1e:	0003      	movs	r3, r0
 8001d20:	468c      	mov	ip, r1
 8001d22:	4463      	add	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	e6d3      	b.n	8001ad2 <__aeabi_dmul+0x86>
 8001d2a:	0025      	movs	r5, r4
 8001d2c:	4305      	orrs	r5, r0
 8001d2e:	d04a      	beq.n	8001dc6 <__aeabi_dmul+0x37a>
 8001d30:	2c00      	cmp	r4, #0
 8001d32:	d100      	bne.n	8001d36 <__aeabi_dmul+0x2ea>
 8001d34:	e0b0      	b.n	8001e98 <__aeabi_dmul+0x44c>
 8001d36:	0020      	movs	r0, r4
 8001d38:	f000 fe00 	bl	800293c <__clzsi2>
 8001d3c:	0001      	movs	r1, r0
 8001d3e:	0002      	movs	r2, r0
 8001d40:	390b      	subs	r1, #11
 8001d42:	231d      	movs	r3, #29
 8001d44:	0010      	movs	r0, r2
 8001d46:	1a5b      	subs	r3, r3, r1
 8001d48:	0031      	movs	r1, r6
 8001d4a:	0035      	movs	r5, r6
 8001d4c:	3808      	subs	r0, #8
 8001d4e:	4084      	lsls	r4, r0
 8001d50:	40d9      	lsrs	r1, r3
 8001d52:	4085      	lsls	r5, r0
 8001d54:	430c      	orrs	r4, r1
 8001d56:	4826      	ldr	r0, [pc, #152]	; (8001df0 <__aeabi_dmul+0x3a4>)
 8001d58:	1a83      	subs	r3, r0, r2
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	4699      	mov	r9, r3
 8001d60:	469b      	mov	fp, r3
 8001d62:	e697      	b.n	8001a94 <__aeabi_dmul+0x48>
 8001d64:	0005      	movs	r5, r0
 8001d66:	4325      	orrs	r5, r4
 8001d68:	d126      	bne.n	8001db8 <__aeabi_dmul+0x36c>
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2302      	movs	r3, #2
 8001d70:	2400      	movs	r4, #0
 8001d72:	4691      	mov	r9, r2
 8001d74:	469b      	mov	fp, r3
 8001d76:	e68d      	b.n	8001a94 <__aeabi_dmul+0x48>
 8001d78:	4652      	mov	r2, sl
 8001d7a:	9b00      	ldr	r3, [sp, #0]
 8001d7c:	4332      	orrs	r2, r6
 8001d7e:	d110      	bne.n	8001da2 <__aeabi_dmul+0x356>
 8001d80:	4915      	ldr	r1, [pc, #84]	; (8001dd8 <__aeabi_dmul+0x38c>)
 8001d82:	2600      	movs	r6, #0
 8001d84:	468c      	mov	ip, r1
 8001d86:	4463      	add	r3, ip
 8001d88:	4649      	mov	r1, r9
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	4319      	orrs	r1, r3
 8001d90:	4689      	mov	r9, r1
 8001d92:	2002      	movs	r0, #2
 8001d94:	e69d      	b.n	8001ad2 <__aeabi_dmul+0x86>
 8001d96:	465b      	mov	r3, fp
 8001d98:	9701      	str	r7, [sp, #4]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d000      	beq.n	8001da0 <__aeabi_dmul+0x354>
 8001d9e:	e6ad      	b.n	8001afc <__aeabi_dmul+0xb0>
 8001da0:	e6c3      	b.n	8001b2a <__aeabi_dmul+0xde>
 8001da2:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <__aeabi_dmul+0x38c>)
 8001da4:	2003      	movs	r0, #3
 8001da6:	4694      	mov	ip, r2
 8001da8:	4463      	add	r3, ip
 8001daa:	464a      	mov	r2, r9
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2303      	movs	r3, #3
 8001db0:	431a      	orrs	r2, r3
 8001db2:	4691      	mov	r9, r2
 8001db4:	4652      	mov	r2, sl
 8001db6:	e68c      	b.n	8001ad2 <__aeabi_dmul+0x86>
 8001db8:	220c      	movs	r2, #12
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	0005      	movs	r5, r0
 8001dc0:	4691      	mov	r9, r2
 8001dc2:	469b      	mov	fp, r3
 8001dc4:	e666      	b.n	8001a94 <__aeabi_dmul+0x48>
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	4699      	mov	r9, r3
 8001dca:	2300      	movs	r3, #0
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	2400      	movs	r4, #0
 8001dd2:	469b      	mov	fp, r3
 8001dd4:	e65e      	b.n	8001a94 <__aeabi_dmul+0x48>
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	000007ff 	.word	0x000007ff
 8001ddc:	fffffc01 	.word	0xfffffc01
 8001de0:	0800b0d8 	.word	0x0800b0d8
 8001de4:	000003ff 	.word	0x000003ff
 8001de8:	feffffff 	.word	0xfeffffff
 8001dec:	000007fe 	.word	0x000007fe
 8001df0:	fffffc0d 	.word	0xfffffc0d
 8001df4:	4649      	mov	r1, r9
 8001df6:	2301      	movs	r3, #1
 8001df8:	4319      	orrs	r1, r3
 8001dfa:	4689      	mov	r9, r1
 8001dfc:	2600      	movs	r6, #0
 8001dfe:	2001      	movs	r0, #1
 8001e00:	e667      	b.n	8001ad2 <__aeabi_dmul+0x86>
 8001e02:	2300      	movs	r3, #0
 8001e04:	2480      	movs	r4, #128	; 0x80
 8001e06:	2500      	movs	r5, #0
 8001e08:	4a43      	ldr	r2, [pc, #268]	; (8001f18 <__aeabi_dmul+0x4cc>)
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	0324      	lsls	r4, r4, #12
 8001e0e:	e67e      	b.n	8001b0e <__aeabi_dmul+0xc2>
 8001e10:	2001      	movs	r0, #1
 8001e12:	1a40      	subs	r0, r0, r1
 8001e14:	2838      	cmp	r0, #56	; 0x38
 8001e16:	dd00      	ble.n	8001e1a <__aeabi_dmul+0x3ce>
 8001e18:	e676      	b.n	8001b08 <__aeabi_dmul+0xbc>
 8001e1a:	281f      	cmp	r0, #31
 8001e1c:	dd5b      	ble.n	8001ed6 <__aeabi_dmul+0x48a>
 8001e1e:	221f      	movs	r2, #31
 8001e20:	0023      	movs	r3, r4
 8001e22:	4252      	negs	r2, r2
 8001e24:	1a51      	subs	r1, r2, r1
 8001e26:	40cb      	lsrs	r3, r1
 8001e28:	0019      	movs	r1, r3
 8001e2a:	2820      	cmp	r0, #32
 8001e2c:	d003      	beq.n	8001e36 <__aeabi_dmul+0x3ea>
 8001e2e:	4a3b      	ldr	r2, [pc, #236]	; (8001f1c <__aeabi_dmul+0x4d0>)
 8001e30:	4462      	add	r2, ip
 8001e32:	4094      	lsls	r4, r2
 8001e34:	4325      	orrs	r5, r4
 8001e36:	1e6a      	subs	r2, r5, #1
 8001e38:	4195      	sbcs	r5, r2
 8001e3a:	002a      	movs	r2, r5
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	2107      	movs	r1, #7
 8001e40:	000d      	movs	r5, r1
 8001e42:	2400      	movs	r4, #0
 8001e44:	4015      	ands	r5, r2
 8001e46:	4211      	tst	r1, r2
 8001e48:	d05b      	beq.n	8001f02 <__aeabi_dmul+0x4b6>
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	2400      	movs	r4, #0
 8001e4e:	4011      	ands	r1, r2
 8001e50:	2904      	cmp	r1, #4
 8001e52:	d053      	beq.n	8001efc <__aeabi_dmul+0x4b0>
 8001e54:	1d11      	adds	r1, r2, #4
 8001e56:	4291      	cmp	r1, r2
 8001e58:	4192      	sbcs	r2, r2
 8001e5a:	4252      	negs	r2, r2
 8001e5c:	18a4      	adds	r4, r4, r2
 8001e5e:	000a      	movs	r2, r1
 8001e60:	0223      	lsls	r3, r4, #8
 8001e62:	d54b      	bpl.n	8001efc <__aeabi_dmul+0x4b0>
 8001e64:	2201      	movs	r2, #1
 8001e66:	2400      	movs	r4, #0
 8001e68:	2500      	movs	r5, #0
 8001e6a:	e650      	b.n	8001b0e <__aeabi_dmul+0xc2>
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	031b      	lsls	r3, r3, #12
 8001e70:	421c      	tst	r4, r3
 8001e72:	d009      	beq.n	8001e88 <__aeabi_dmul+0x43c>
 8001e74:	421e      	tst	r6, r3
 8001e76:	d107      	bne.n	8001e88 <__aeabi_dmul+0x43c>
 8001e78:	4333      	orrs	r3, r6
 8001e7a:	031c      	lsls	r4, r3, #12
 8001e7c:	4643      	mov	r3, r8
 8001e7e:	0015      	movs	r5, r2
 8001e80:	0b24      	lsrs	r4, r4, #12
 8001e82:	4a25      	ldr	r2, [pc, #148]	; (8001f18 <__aeabi_dmul+0x4cc>)
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	e642      	b.n	8001b0e <__aeabi_dmul+0xc2>
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	0312      	lsls	r2, r2, #12
 8001e8c:	4314      	orrs	r4, r2
 8001e8e:	0324      	lsls	r4, r4, #12
 8001e90:	4a21      	ldr	r2, [pc, #132]	; (8001f18 <__aeabi_dmul+0x4cc>)
 8001e92:	0b24      	lsrs	r4, r4, #12
 8001e94:	9701      	str	r7, [sp, #4]
 8001e96:	e63a      	b.n	8001b0e <__aeabi_dmul+0xc2>
 8001e98:	f000 fd50 	bl	800293c <__clzsi2>
 8001e9c:	0001      	movs	r1, r0
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	3115      	adds	r1, #21
 8001ea2:	3220      	adds	r2, #32
 8001ea4:	291c      	cmp	r1, #28
 8001ea6:	dc00      	bgt.n	8001eaa <__aeabi_dmul+0x45e>
 8001ea8:	e74b      	b.n	8001d42 <__aeabi_dmul+0x2f6>
 8001eaa:	0034      	movs	r4, r6
 8001eac:	3808      	subs	r0, #8
 8001eae:	2500      	movs	r5, #0
 8001eb0:	4084      	lsls	r4, r0
 8001eb2:	e750      	b.n	8001d56 <__aeabi_dmul+0x30a>
 8001eb4:	f000 fd42 	bl	800293c <__clzsi2>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	001a      	movs	r2, r3
 8001ebc:	3215      	adds	r2, #21
 8001ebe:	3020      	adds	r0, #32
 8001ec0:	2a1c      	cmp	r2, #28
 8001ec2:	dc00      	bgt.n	8001ec6 <__aeabi_dmul+0x47a>
 8001ec4:	e71e      	b.n	8001d04 <__aeabi_dmul+0x2b8>
 8001ec6:	4656      	mov	r6, sl
 8001ec8:	3b08      	subs	r3, #8
 8001eca:	2200      	movs	r2, #0
 8001ecc:	409e      	lsls	r6, r3
 8001ece:	e723      	b.n	8001d18 <__aeabi_dmul+0x2cc>
 8001ed0:	9b00      	ldr	r3, [sp, #0]
 8001ed2:	469c      	mov	ip, r3
 8001ed4:	e6e6      	b.n	8001ca4 <__aeabi_dmul+0x258>
 8001ed6:	4912      	ldr	r1, [pc, #72]	; (8001f20 <__aeabi_dmul+0x4d4>)
 8001ed8:	0022      	movs	r2, r4
 8001eda:	4461      	add	r1, ip
 8001edc:	002e      	movs	r6, r5
 8001ede:	408d      	lsls	r5, r1
 8001ee0:	408a      	lsls	r2, r1
 8001ee2:	40c6      	lsrs	r6, r0
 8001ee4:	1e69      	subs	r1, r5, #1
 8001ee6:	418d      	sbcs	r5, r1
 8001ee8:	4332      	orrs	r2, r6
 8001eea:	432a      	orrs	r2, r5
 8001eec:	40c4      	lsrs	r4, r0
 8001eee:	0753      	lsls	r3, r2, #29
 8001ef0:	d0b6      	beq.n	8001e60 <__aeabi_dmul+0x414>
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	4011      	ands	r1, r2
 8001ef6:	2904      	cmp	r1, #4
 8001ef8:	d1ac      	bne.n	8001e54 <__aeabi_dmul+0x408>
 8001efa:	e7b1      	b.n	8001e60 <__aeabi_dmul+0x414>
 8001efc:	0765      	lsls	r5, r4, #29
 8001efe:	0264      	lsls	r4, r4, #9
 8001f00:	0b24      	lsrs	r4, r4, #12
 8001f02:	08d2      	lsrs	r2, r2, #3
 8001f04:	4315      	orrs	r5, r2
 8001f06:	2200      	movs	r2, #0
 8001f08:	e601      	b.n	8001b0e <__aeabi_dmul+0xc2>
 8001f0a:	2280      	movs	r2, #128	; 0x80
 8001f0c:	0312      	lsls	r2, r2, #12
 8001f0e:	4314      	orrs	r4, r2
 8001f10:	0324      	lsls	r4, r4, #12
 8001f12:	4a01      	ldr	r2, [pc, #4]	; (8001f18 <__aeabi_dmul+0x4cc>)
 8001f14:	0b24      	lsrs	r4, r4, #12
 8001f16:	e5fa      	b.n	8001b0e <__aeabi_dmul+0xc2>
 8001f18:	000007ff 	.word	0x000007ff
 8001f1c:	0000043e 	.word	0x0000043e
 8001f20:	0000041e 	.word	0x0000041e

08001f24 <__aeabi_dsub>:
 8001f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f26:	4657      	mov	r7, sl
 8001f28:	464e      	mov	r6, r9
 8001f2a:	4645      	mov	r5, r8
 8001f2c:	46de      	mov	lr, fp
 8001f2e:	b5e0      	push	{r5, r6, r7, lr}
 8001f30:	001e      	movs	r6, r3
 8001f32:	0017      	movs	r7, r2
 8001f34:	004a      	lsls	r2, r1, #1
 8001f36:	030b      	lsls	r3, r1, #12
 8001f38:	0d52      	lsrs	r2, r2, #21
 8001f3a:	0a5b      	lsrs	r3, r3, #9
 8001f3c:	4690      	mov	r8, r2
 8001f3e:	0f42      	lsrs	r2, r0, #29
 8001f40:	431a      	orrs	r2, r3
 8001f42:	0fcd      	lsrs	r5, r1, #31
 8001f44:	4ccd      	ldr	r4, [pc, #820]	; (800227c <__aeabi_dsub+0x358>)
 8001f46:	0331      	lsls	r1, r6, #12
 8001f48:	00c3      	lsls	r3, r0, #3
 8001f4a:	4694      	mov	ip, r2
 8001f4c:	0070      	lsls	r0, r6, #1
 8001f4e:	0f7a      	lsrs	r2, r7, #29
 8001f50:	0a49      	lsrs	r1, r1, #9
 8001f52:	00ff      	lsls	r7, r7, #3
 8001f54:	469a      	mov	sl, r3
 8001f56:	46b9      	mov	r9, r7
 8001f58:	0d40      	lsrs	r0, r0, #21
 8001f5a:	0ff6      	lsrs	r6, r6, #31
 8001f5c:	4311      	orrs	r1, r2
 8001f5e:	42a0      	cmp	r0, r4
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x40>
 8001f62:	e0b1      	b.n	80020c8 <__aeabi_dsub+0x1a4>
 8001f64:	2201      	movs	r2, #1
 8001f66:	4056      	eors	r6, r2
 8001f68:	46b3      	mov	fp, r6
 8001f6a:	42b5      	cmp	r5, r6
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dsub+0x4c>
 8001f6e:	e088      	b.n	8002082 <__aeabi_dsub+0x15e>
 8001f70:	4642      	mov	r2, r8
 8001f72:	1a12      	subs	r2, r2, r0
 8001f74:	2a00      	cmp	r2, #0
 8001f76:	dc00      	bgt.n	8001f7a <__aeabi_dsub+0x56>
 8001f78:	e0ae      	b.n	80020d8 <__aeabi_dsub+0x1b4>
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x5c>
 8001f7e:	e0c1      	b.n	8002104 <__aeabi_dsub+0x1e0>
 8001f80:	48be      	ldr	r0, [pc, #760]	; (800227c <__aeabi_dsub+0x358>)
 8001f82:	4580      	cmp	r8, r0
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x64>
 8001f86:	e151      	b.n	800222c <__aeabi_dsub+0x308>
 8001f88:	2080      	movs	r0, #128	; 0x80
 8001f8a:	0400      	lsls	r0, r0, #16
 8001f8c:	4301      	orrs	r1, r0
 8001f8e:	2a38      	cmp	r2, #56	; 0x38
 8001f90:	dd00      	ble.n	8001f94 <__aeabi_dsub+0x70>
 8001f92:	e17b      	b.n	800228c <__aeabi_dsub+0x368>
 8001f94:	2a1f      	cmp	r2, #31
 8001f96:	dd00      	ble.n	8001f9a <__aeabi_dsub+0x76>
 8001f98:	e1ee      	b.n	8002378 <__aeabi_dsub+0x454>
 8001f9a:	2020      	movs	r0, #32
 8001f9c:	003e      	movs	r6, r7
 8001f9e:	1a80      	subs	r0, r0, r2
 8001fa0:	000c      	movs	r4, r1
 8001fa2:	40d6      	lsrs	r6, r2
 8001fa4:	40d1      	lsrs	r1, r2
 8001fa6:	4087      	lsls	r7, r0
 8001fa8:	4662      	mov	r2, ip
 8001faa:	4084      	lsls	r4, r0
 8001fac:	1a52      	subs	r2, r2, r1
 8001fae:	1e78      	subs	r0, r7, #1
 8001fb0:	4187      	sbcs	r7, r0
 8001fb2:	4694      	mov	ip, r2
 8001fb4:	4334      	orrs	r4, r6
 8001fb6:	4327      	orrs	r7, r4
 8001fb8:	1bdc      	subs	r4, r3, r7
 8001fba:	42a3      	cmp	r3, r4
 8001fbc:	419b      	sbcs	r3, r3
 8001fbe:	4662      	mov	r2, ip
 8001fc0:	425b      	negs	r3, r3
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	4699      	mov	r9, r3
 8001fc6:	464b      	mov	r3, r9
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	d400      	bmi.n	8001fce <__aeabi_dsub+0xaa>
 8001fcc:	e118      	b.n	8002200 <__aeabi_dsub+0x2dc>
 8001fce:	464b      	mov	r3, r9
 8001fd0:	0258      	lsls	r0, r3, #9
 8001fd2:	0a43      	lsrs	r3, r0, #9
 8001fd4:	4699      	mov	r9, r3
 8001fd6:	464b      	mov	r3, r9
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d100      	bne.n	8001fde <__aeabi_dsub+0xba>
 8001fdc:	e137      	b.n	800224e <__aeabi_dsub+0x32a>
 8001fde:	4648      	mov	r0, r9
 8001fe0:	f000 fcac 	bl	800293c <__clzsi2>
 8001fe4:	0001      	movs	r1, r0
 8001fe6:	3908      	subs	r1, #8
 8001fe8:	2320      	movs	r3, #32
 8001fea:	0022      	movs	r2, r4
 8001fec:	4648      	mov	r0, r9
 8001fee:	1a5b      	subs	r3, r3, r1
 8001ff0:	40da      	lsrs	r2, r3
 8001ff2:	4088      	lsls	r0, r1
 8001ff4:	408c      	lsls	r4, r1
 8001ff6:	4643      	mov	r3, r8
 8001ff8:	4310      	orrs	r0, r2
 8001ffa:	4588      	cmp	r8, r1
 8001ffc:	dd00      	ble.n	8002000 <__aeabi_dsub+0xdc>
 8001ffe:	e136      	b.n	800226e <__aeabi_dsub+0x34a>
 8002000:	1ac9      	subs	r1, r1, r3
 8002002:	1c4b      	adds	r3, r1, #1
 8002004:	2b1f      	cmp	r3, #31
 8002006:	dd00      	ble.n	800200a <__aeabi_dsub+0xe6>
 8002008:	e0ea      	b.n	80021e0 <__aeabi_dsub+0x2bc>
 800200a:	2220      	movs	r2, #32
 800200c:	0026      	movs	r6, r4
 800200e:	1ad2      	subs	r2, r2, r3
 8002010:	0001      	movs	r1, r0
 8002012:	4094      	lsls	r4, r2
 8002014:	40de      	lsrs	r6, r3
 8002016:	40d8      	lsrs	r0, r3
 8002018:	2300      	movs	r3, #0
 800201a:	4091      	lsls	r1, r2
 800201c:	1e62      	subs	r2, r4, #1
 800201e:	4194      	sbcs	r4, r2
 8002020:	4681      	mov	r9, r0
 8002022:	4698      	mov	r8, r3
 8002024:	4331      	orrs	r1, r6
 8002026:	430c      	orrs	r4, r1
 8002028:	0763      	lsls	r3, r4, #29
 800202a:	d009      	beq.n	8002040 <__aeabi_dsub+0x11c>
 800202c:	230f      	movs	r3, #15
 800202e:	4023      	ands	r3, r4
 8002030:	2b04      	cmp	r3, #4
 8002032:	d005      	beq.n	8002040 <__aeabi_dsub+0x11c>
 8002034:	1d23      	adds	r3, r4, #4
 8002036:	42a3      	cmp	r3, r4
 8002038:	41a4      	sbcs	r4, r4
 800203a:	4264      	negs	r4, r4
 800203c:	44a1      	add	r9, r4
 800203e:	001c      	movs	r4, r3
 8002040:	464b      	mov	r3, r9
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	d400      	bmi.n	8002048 <__aeabi_dsub+0x124>
 8002046:	e0de      	b.n	8002206 <__aeabi_dsub+0x2e2>
 8002048:	4641      	mov	r1, r8
 800204a:	4b8c      	ldr	r3, [pc, #560]	; (800227c <__aeabi_dsub+0x358>)
 800204c:	3101      	adds	r1, #1
 800204e:	4299      	cmp	r1, r3
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x130>
 8002052:	e0e7      	b.n	8002224 <__aeabi_dsub+0x300>
 8002054:	464b      	mov	r3, r9
 8002056:	488a      	ldr	r0, [pc, #552]	; (8002280 <__aeabi_dsub+0x35c>)
 8002058:	08e4      	lsrs	r4, r4, #3
 800205a:	4003      	ands	r3, r0
 800205c:	0018      	movs	r0, r3
 800205e:	0549      	lsls	r1, r1, #21
 8002060:	075b      	lsls	r3, r3, #29
 8002062:	0240      	lsls	r0, r0, #9
 8002064:	4323      	orrs	r3, r4
 8002066:	0d4a      	lsrs	r2, r1, #21
 8002068:	0b04      	lsrs	r4, r0, #12
 800206a:	0512      	lsls	r2, r2, #20
 800206c:	07ed      	lsls	r5, r5, #31
 800206e:	4322      	orrs	r2, r4
 8002070:	432a      	orrs	r2, r5
 8002072:	0018      	movs	r0, r3
 8002074:	0011      	movs	r1, r2
 8002076:	bcf0      	pop	{r4, r5, r6, r7}
 8002078:	46bb      	mov	fp, r7
 800207a:	46b2      	mov	sl, r6
 800207c:	46a9      	mov	r9, r5
 800207e:	46a0      	mov	r8, r4
 8002080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002082:	4642      	mov	r2, r8
 8002084:	1a12      	subs	r2, r2, r0
 8002086:	2a00      	cmp	r2, #0
 8002088:	dd52      	ble.n	8002130 <__aeabi_dsub+0x20c>
 800208a:	2800      	cmp	r0, #0
 800208c:	d100      	bne.n	8002090 <__aeabi_dsub+0x16c>
 800208e:	e09c      	b.n	80021ca <__aeabi_dsub+0x2a6>
 8002090:	45a0      	cmp	r8, r4
 8002092:	d100      	bne.n	8002096 <__aeabi_dsub+0x172>
 8002094:	e0ca      	b.n	800222c <__aeabi_dsub+0x308>
 8002096:	2080      	movs	r0, #128	; 0x80
 8002098:	0400      	lsls	r0, r0, #16
 800209a:	4301      	orrs	r1, r0
 800209c:	2a38      	cmp	r2, #56	; 0x38
 800209e:	dd00      	ble.n	80020a2 <__aeabi_dsub+0x17e>
 80020a0:	e149      	b.n	8002336 <__aeabi_dsub+0x412>
 80020a2:	2a1f      	cmp	r2, #31
 80020a4:	dc00      	bgt.n	80020a8 <__aeabi_dsub+0x184>
 80020a6:	e197      	b.n	80023d8 <__aeabi_dsub+0x4b4>
 80020a8:	0010      	movs	r0, r2
 80020aa:	000e      	movs	r6, r1
 80020ac:	3820      	subs	r0, #32
 80020ae:	40c6      	lsrs	r6, r0
 80020b0:	2a20      	cmp	r2, #32
 80020b2:	d004      	beq.n	80020be <__aeabi_dsub+0x19a>
 80020b4:	2040      	movs	r0, #64	; 0x40
 80020b6:	1a82      	subs	r2, r0, r2
 80020b8:	4091      	lsls	r1, r2
 80020ba:	430f      	orrs	r7, r1
 80020bc:	46b9      	mov	r9, r7
 80020be:	464c      	mov	r4, r9
 80020c0:	1e62      	subs	r2, r4, #1
 80020c2:	4194      	sbcs	r4, r2
 80020c4:	4334      	orrs	r4, r6
 80020c6:	e13a      	b.n	800233e <__aeabi_dsub+0x41a>
 80020c8:	000a      	movs	r2, r1
 80020ca:	433a      	orrs	r2, r7
 80020cc:	d028      	beq.n	8002120 <__aeabi_dsub+0x1fc>
 80020ce:	46b3      	mov	fp, r6
 80020d0:	42b5      	cmp	r5, r6
 80020d2:	d02b      	beq.n	800212c <__aeabi_dsub+0x208>
 80020d4:	4a6b      	ldr	r2, [pc, #428]	; (8002284 <__aeabi_dsub+0x360>)
 80020d6:	4442      	add	r2, r8
 80020d8:	2a00      	cmp	r2, #0
 80020da:	d05d      	beq.n	8002198 <__aeabi_dsub+0x274>
 80020dc:	4642      	mov	r2, r8
 80020de:	4644      	mov	r4, r8
 80020e0:	1a82      	subs	r2, r0, r2
 80020e2:	2c00      	cmp	r4, #0
 80020e4:	d000      	beq.n	80020e8 <__aeabi_dsub+0x1c4>
 80020e6:	e0f5      	b.n	80022d4 <__aeabi_dsub+0x3b0>
 80020e8:	4665      	mov	r5, ip
 80020ea:	431d      	orrs	r5, r3
 80020ec:	d100      	bne.n	80020f0 <__aeabi_dsub+0x1cc>
 80020ee:	e19c      	b.n	800242a <__aeabi_dsub+0x506>
 80020f0:	1e55      	subs	r5, r2, #1
 80020f2:	2a01      	cmp	r2, #1
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dsub+0x1d4>
 80020f6:	e1fb      	b.n	80024f0 <__aeabi_dsub+0x5cc>
 80020f8:	4c60      	ldr	r4, [pc, #384]	; (800227c <__aeabi_dsub+0x358>)
 80020fa:	42a2      	cmp	r2, r4
 80020fc:	d100      	bne.n	8002100 <__aeabi_dsub+0x1dc>
 80020fe:	e1bd      	b.n	800247c <__aeabi_dsub+0x558>
 8002100:	002a      	movs	r2, r5
 8002102:	e0f0      	b.n	80022e6 <__aeabi_dsub+0x3c2>
 8002104:	0008      	movs	r0, r1
 8002106:	4338      	orrs	r0, r7
 8002108:	d100      	bne.n	800210c <__aeabi_dsub+0x1e8>
 800210a:	e0c3      	b.n	8002294 <__aeabi_dsub+0x370>
 800210c:	1e50      	subs	r0, r2, #1
 800210e:	2a01      	cmp	r2, #1
 8002110:	d100      	bne.n	8002114 <__aeabi_dsub+0x1f0>
 8002112:	e1a8      	b.n	8002466 <__aeabi_dsub+0x542>
 8002114:	4c59      	ldr	r4, [pc, #356]	; (800227c <__aeabi_dsub+0x358>)
 8002116:	42a2      	cmp	r2, r4
 8002118:	d100      	bne.n	800211c <__aeabi_dsub+0x1f8>
 800211a:	e087      	b.n	800222c <__aeabi_dsub+0x308>
 800211c:	0002      	movs	r2, r0
 800211e:	e736      	b.n	8001f8e <__aeabi_dsub+0x6a>
 8002120:	2201      	movs	r2, #1
 8002122:	4056      	eors	r6, r2
 8002124:	46b3      	mov	fp, r6
 8002126:	42b5      	cmp	r5, r6
 8002128:	d000      	beq.n	800212c <__aeabi_dsub+0x208>
 800212a:	e721      	b.n	8001f70 <__aeabi_dsub+0x4c>
 800212c:	4a55      	ldr	r2, [pc, #340]	; (8002284 <__aeabi_dsub+0x360>)
 800212e:	4442      	add	r2, r8
 8002130:	2a00      	cmp	r2, #0
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x212>
 8002134:	e0b5      	b.n	80022a2 <__aeabi_dsub+0x37e>
 8002136:	4642      	mov	r2, r8
 8002138:	4644      	mov	r4, r8
 800213a:	1a82      	subs	r2, r0, r2
 800213c:	2c00      	cmp	r4, #0
 800213e:	d100      	bne.n	8002142 <__aeabi_dsub+0x21e>
 8002140:	e138      	b.n	80023b4 <__aeabi_dsub+0x490>
 8002142:	4e4e      	ldr	r6, [pc, #312]	; (800227c <__aeabi_dsub+0x358>)
 8002144:	42b0      	cmp	r0, r6
 8002146:	d100      	bne.n	800214a <__aeabi_dsub+0x226>
 8002148:	e1de      	b.n	8002508 <__aeabi_dsub+0x5e4>
 800214a:	2680      	movs	r6, #128	; 0x80
 800214c:	4664      	mov	r4, ip
 800214e:	0436      	lsls	r6, r6, #16
 8002150:	4334      	orrs	r4, r6
 8002152:	46a4      	mov	ip, r4
 8002154:	2a38      	cmp	r2, #56	; 0x38
 8002156:	dd00      	ble.n	800215a <__aeabi_dsub+0x236>
 8002158:	e196      	b.n	8002488 <__aeabi_dsub+0x564>
 800215a:	2a1f      	cmp	r2, #31
 800215c:	dd00      	ble.n	8002160 <__aeabi_dsub+0x23c>
 800215e:	e224      	b.n	80025aa <__aeabi_dsub+0x686>
 8002160:	2620      	movs	r6, #32
 8002162:	1ab4      	subs	r4, r6, r2
 8002164:	46a2      	mov	sl, r4
 8002166:	4664      	mov	r4, ip
 8002168:	4656      	mov	r6, sl
 800216a:	40b4      	lsls	r4, r6
 800216c:	46a1      	mov	r9, r4
 800216e:	001c      	movs	r4, r3
 8002170:	464e      	mov	r6, r9
 8002172:	40d4      	lsrs	r4, r2
 8002174:	4326      	orrs	r6, r4
 8002176:	0034      	movs	r4, r6
 8002178:	4656      	mov	r6, sl
 800217a:	40b3      	lsls	r3, r6
 800217c:	1e5e      	subs	r6, r3, #1
 800217e:	41b3      	sbcs	r3, r6
 8002180:	431c      	orrs	r4, r3
 8002182:	4663      	mov	r3, ip
 8002184:	40d3      	lsrs	r3, r2
 8002186:	18c9      	adds	r1, r1, r3
 8002188:	19e4      	adds	r4, r4, r7
 800218a:	42bc      	cmp	r4, r7
 800218c:	41bf      	sbcs	r7, r7
 800218e:	427f      	negs	r7, r7
 8002190:	46b9      	mov	r9, r7
 8002192:	4680      	mov	r8, r0
 8002194:	4489      	add	r9, r1
 8002196:	e0d8      	b.n	800234a <__aeabi_dsub+0x426>
 8002198:	4640      	mov	r0, r8
 800219a:	4c3b      	ldr	r4, [pc, #236]	; (8002288 <__aeabi_dsub+0x364>)
 800219c:	3001      	adds	r0, #1
 800219e:	4220      	tst	r0, r4
 80021a0:	d000      	beq.n	80021a4 <__aeabi_dsub+0x280>
 80021a2:	e0b4      	b.n	800230e <__aeabi_dsub+0x3ea>
 80021a4:	4640      	mov	r0, r8
 80021a6:	2800      	cmp	r0, #0
 80021a8:	d000      	beq.n	80021ac <__aeabi_dsub+0x288>
 80021aa:	e144      	b.n	8002436 <__aeabi_dsub+0x512>
 80021ac:	4660      	mov	r0, ip
 80021ae:	4318      	orrs	r0, r3
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x290>
 80021b2:	e190      	b.n	80024d6 <__aeabi_dsub+0x5b2>
 80021b4:	0008      	movs	r0, r1
 80021b6:	4338      	orrs	r0, r7
 80021b8:	d000      	beq.n	80021bc <__aeabi_dsub+0x298>
 80021ba:	e1aa      	b.n	8002512 <__aeabi_dsub+0x5ee>
 80021bc:	4661      	mov	r1, ip
 80021be:	08db      	lsrs	r3, r3, #3
 80021c0:	0749      	lsls	r1, r1, #29
 80021c2:	430b      	orrs	r3, r1
 80021c4:	4661      	mov	r1, ip
 80021c6:	08cc      	lsrs	r4, r1, #3
 80021c8:	e027      	b.n	800221a <__aeabi_dsub+0x2f6>
 80021ca:	0008      	movs	r0, r1
 80021cc:	4338      	orrs	r0, r7
 80021ce:	d061      	beq.n	8002294 <__aeabi_dsub+0x370>
 80021d0:	1e50      	subs	r0, r2, #1
 80021d2:	2a01      	cmp	r2, #1
 80021d4:	d100      	bne.n	80021d8 <__aeabi_dsub+0x2b4>
 80021d6:	e139      	b.n	800244c <__aeabi_dsub+0x528>
 80021d8:	42a2      	cmp	r2, r4
 80021da:	d027      	beq.n	800222c <__aeabi_dsub+0x308>
 80021dc:	0002      	movs	r2, r0
 80021de:	e75d      	b.n	800209c <__aeabi_dsub+0x178>
 80021e0:	0002      	movs	r2, r0
 80021e2:	391f      	subs	r1, #31
 80021e4:	40ca      	lsrs	r2, r1
 80021e6:	0011      	movs	r1, r2
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d003      	beq.n	80021f4 <__aeabi_dsub+0x2d0>
 80021ec:	2240      	movs	r2, #64	; 0x40
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	4098      	lsls	r0, r3
 80021f2:	4304      	orrs	r4, r0
 80021f4:	1e63      	subs	r3, r4, #1
 80021f6:	419c      	sbcs	r4, r3
 80021f8:	2300      	movs	r3, #0
 80021fa:	4699      	mov	r9, r3
 80021fc:	4698      	mov	r8, r3
 80021fe:	430c      	orrs	r4, r1
 8002200:	0763      	lsls	r3, r4, #29
 8002202:	d000      	beq.n	8002206 <__aeabi_dsub+0x2e2>
 8002204:	e712      	b.n	800202c <__aeabi_dsub+0x108>
 8002206:	464b      	mov	r3, r9
 8002208:	464a      	mov	r2, r9
 800220a:	08e4      	lsrs	r4, r4, #3
 800220c:	075b      	lsls	r3, r3, #29
 800220e:	4323      	orrs	r3, r4
 8002210:	08d4      	lsrs	r4, r2, #3
 8002212:	4642      	mov	r2, r8
 8002214:	4919      	ldr	r1, [pc, #100]	; (800227c <__aeabi_dsub+0x358>)
 8002216:	428a      	cmp	r2, r1
 8002218:	d00e      	beq.n	8002238 <__aeabi_dsub+0x314>
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	0552      	lsls	r2, r2, #21
 800221e:	0b24      	lsrs	r4, r4, #12
 8002220:	0d52      	lsrs	r2, r2, #21
 8002222:	e722      	b.n	800206a <__aeabi_dsub+0x146>
 8002224:	000a      	movs	r2, r1
 8002226:	2400      	movs	r4, #0
 8002228:	2300      	movs	r3, #0
 800222a:	e71e      	b.n	800206a <__aeabi_dsub+0x146>
 800222c:	08db      	lsrs	r3, r3, #3
 800222e:	4662      	mov	r2, ip
 8002230:	0752      	lsls	r2, r2, #29
 8002232:	4313      	orrs	r3, r2
 8002234:	4662      	mov	r2, ip
 8002236:	08d4      	lsrs	r4, r2, #3
 8002238:	001a      	movs	r2, r3
 800223a:	4322      	orrs	r2, r4
 800223c:	d100      	bne.n	8002240 <__aeabi_dsub+0x31c>
 800223e:	e1fc      	b.n	800263a <__aeabi_dsub+0x716>
 8002240:	2280      	movs	r2, #128	; 0x80
 8002242:	0312      	lsls	r2, r2, #12
 8002244:	4314      	orrs	r4, r2
 8002246:	0324      	lsls	r4, r4, #12
 8002248:	4a0c      	ldr	r2, [pc, #48]	; (800227c <__aeabi_dsub+0x358>)
 800224a:	0b24      	lsrs	r4, r4, #12
 800224c:	e70d      	b.n	800206a <__aeabi_dsub+0x146>
 800224e:	0020      	movs	r0, r4
 8002250:	f000 fb74 	bl	800293c <__clzsi2>
 8002254:	0001      	movs	r1, r0
 8002256:	3118      	adds	r1, #24
 8002258:	291f      	cmp	r1, #31
 800225a:	dc00      	bgt.n	800225e <__aeabi_dsub+0x33a>
 800225c:	e6c4      	b.n	8001fe8 <__aeabi_dsub+0xc4>
 800225e:	3808      	subs	r0, #8
 8002260:	4084      	lsls	r4, r0
 8002262:	4643      	mov	r3, r8
 8002264:	0020      	movs	r0, r4
 8002266:	2400      	movs	r4, #0
 8002268:	4588      	cmp	r8, r1
 800226a:	dc00      	bgt.n	800226e <__aeabi_dsub+0x34a>
 800226c:	e6c8      	b.n	8002000 <__aeabi_dsub+0xdc>
 800226e:	4a04      	ldr	r2, [pc, #16]	; (8002280 <__aeabi_dsub+0x35c>)
 8002270:	1a5b      	subs	r3, r3, r1
 8002272:	4010      	ands	r0, r2
 8002274:	4698      	mov	r8, r3
 8002276:	4681      	mov	r9, r0
 8002278:	e6d6      	b.n	8002028 <__aeabi_dsub+0x104>
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	000007ff 	.word	0x000007ff
 8002280:	ff7fffff 	.word	0xff7fffff
 8002284:	fffff801 	.word	0xfffff801
 8002288:	000007fe 	.word	0x000007fe
 800228c:	430f      	orrs	r7, r1
 800228e:	1e7a      	subs	r2, r7, #1
 8002290:	4197      	sbcs	r7, r2
 8002292:	e691      	b.n	8001fb8 <__aeabi_dsub+0x94>
 8002294:	4661      	mov	r1, ip
 8002296:	08db      	lsrs	r3, r3, #3
 8002298:	0749      	lsls	r1, r1, #29
 800229a:	430b      	orrs	r3, r1
 800229c:	4661      	mov	r1, ip
 800229e:	08cc      	lsrs	r4, r1, #3
 80022a0:	e7b8      	b.n	8002214 <__aeabi_dsub+0x2f0>
 80022a2:	4640      	mov	r0, r8
 80022a4:	4cd3      	ldr	r4, [pc, #844]	; (80025f4 <__aeabi_dsub+0x6d0>)
 80022a6:	3001      	adds	r0, #1
 80022a8:	4220      	tst	r0, r4
 80022aa:	d000      	beq.n	80022ae <__aeabi_dsub+0x38a>
 80022ac:	e0a2      	b.n	80023f4 <__aeabi_dsub+0x4d0>
 80022ae:	4640      	mov	r0, r8
 80022b0:	2800      	cmp	r0, #0
 80022b2:	d000      	beq.n	80022b6 <__aeabi_dsub+0x392>
 80022b4:	e101      	b.n	80024ba <__aeabi_dsub+0x596>
 80022b6:	4660      	mov	r0, ip
 80022b8:	4318      	orrs	r0, r3
 80022ba:	d100      	bne.n	80022be <__aeabi_dsub+0x39a>
 80022bc:	e15e      	b.n	800257c <__aeabi_dsub+0x658>
 80022be:	0008      	movs	r0, r1
 80022c0:	4338      	orrs	r0, r7
 80022c2:	d000      	beq.n	80022c6 <__aeabi_dsub+0x3a2>
 80022c4:	e15f      	b.n	8002586 <__aeabi_dsub+0x662>
 80022c6:	4661      	mov	r1, ip
 80022c8:	08db      	lsrs	r3, r3, #3
 80022ca:	0749      	lsls	r1, r1, #29
 80022cc:	430b      	orrs	r3, r1
 80022ce:	4661      	mov	r1, ip
 80022d0:	08cc      	lsrs	r4, r1, #3
 80022d2:	e7a2      	b.n	800221a <__aeabi_dsub+0x2f6>
 80022d4:	4dc8      	ldr	r5, [pc, #800]	; (80025f8 <__aeabi_dsub+0x6d4>)
 80022d6:	42a8      	cmp	r0, r5
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x3b8>
 80022da:	e0cf      	b.n	800247c <__aeabi_dsub+0x558>
 80022dc:	2580      	movs	r5, #128	; 0x80
 80022de:	4664      	mov	r4, ip
 80022e0:	042d      	lsls	r5, r5, #16
 80022e2:	432c      	orrs	r4, r5
 80022e4:	46a4      	mov	ip, r4
 80022e6:	2a38      	cmp	r2, #56	; 0x38
 80022e8:	dc56      	bgt.n	8002398 <__aeabi_dsub+0x474>
 80022ea:	2a1f      	cmp	r2, #31
 80022ec:	dd00      	ble.n	80022f0 <__aeabi_dsub+0x3cc>
 80022ee:	e0d1      	b.n	8002494 <__aeabi_dsub+0x570>
 80022f0:	2520      	movs	r5, #32
 80022f2:	001e      	movs	r6, r3
 80022f4:	1aad      	subs	r5, r5, r2
 80022f6:	4664      	mov	r4, ip
 80022f8:	40ab      	lsls	r3, r5
 80022fa:	40ac      	lsls	r4, r5
 80022fc:	40d6      	lsrs	r6, r2
 80022fe:	1e5d      	subs	r5, r3, #1
 8002300:	41ab      	sbcs	r3, r5
 8002302:	4334      	orrs	r4, r6
 8002304:	4323      	orrs	r3, r4
 8002306:	4664      	mov	r4, ip
 8002308:	40d4      	lsrs	r4, r2
 800230a:	1b09      	subs	r1, r1, r4
 800230c:	e049      	b.n	80023a2 <__aeabi_dsub+0x47e>
 800230e:	4660      	mov	r0, ip
 8002310:	1bdc      	subs	r4, r3, r7
 8002312:	1a46      	subs	r6, r0, r1
 8002314:	42a3      	cmp	r3, r4
 8002316:	4180      	sbcs	r0, r0
 8002318:	4240      	negs	r0, r0
 800231a:	4681      	mov	r9, r0
 800231c:	0030      	movs	r0, r6
 800231e:	464e      	mov	r6, r9
 8002320:	1b80      	subs	r0, r0, r6
 8002322:	4681      	mov	r9, r0
 8002324:	0200      	lsls	r0, r0, #8
 8002326:	d476      	bmi.n	8002416 <__aeabi_dsub+0x4f2>
 8002328:	464b      	mov	r3, r9
 800232a:	4323      	orrs	r3, r4
 800232c:	d000      	beq.n	8002330 <__aeabi_dsub+0x40c>
 800232e:	e652      	b.n	8001fd6 <__aeabi_dsub+0xb2>
 8002330:	2400      	movs	r4, #0
 8002332:	2500      	movs	r5, #0
 8002334:	e771      	b.n	800221a <__aeabi_dsub+0x2f6>
 8002336:	4339      	orrs	r1, r7
 8002338:	000c      	movs	r4, r1
 800233a:	1e62      	subs	r2, r4, #1
 800233c:	4194      	sbcs	r4, r2
 800233e:	18e4      	adds	r4, r4, r3
 8002340:	429c      	cmp	r4, r3
 8002342:	419b      	sbcs	r3, r3
 8002344:	425b      	negs	r3, r3
 8002346:	4463      	add	r3, ip
 8002348:	4699      	mov	r9, r3
 800234a:	464b      	mov	r3, r9
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	d400      	bmi.n	8002352 <__aeabi_dsub+0x42e>
 8002350:	e756      	b.n	8002200 <__aeabi_dsub+0x2dc>
 8002352:	2301      	movs	r3, #1
 8002354:	469c      	mov	ip, r3
 8002356:	4ba8      	ldr	r3, [pc, #672]	; (80025f8 <__aeabi_dsub+0x6d4>)
 8002358:	44e0      	add	r8, ip
 800235a:	4598      	cmp	r8, r3
 800235c:	d038      	beq.n	80023d0 <__aeabi_dsub+0x4ac>
 800235e:	464b      	mov	r3, r9
 8002360:	48a6      	ldr	r0, [pc, #664]	; (80025fc <__aeabi_dsub+0x6d8>)
 8002362:	2201      	movs	r2, #1
 8002364:	4003      	ands	r3, r0
 8002366:	0018      	movs	r0, r3
 8002368:	0863      	lsrs	r3, r4, #1
 800236a:	4014      	ands	r4, r2
 800236c:	431c      	orrs	r4, r3
 800236e:	07c3      	lsls	r3, r0, #31
 8002370:	431c      	orrs	r4, r3
 8002372:	0843      	lsrs	r3, r0, #1
 8002374:	4699      	mov	r9, r3
 8002376:	e657      	b.n	8002028 <__aeabi_dsub+0x104>
 8002378:	0010      	movs	r0, r2
 800237a:	000e      	movs	r6, r1
 800237c:	3820      	subs	r0, #32
 800237e:	40c6      	lsrs	r6, r0
 8002380:	2a20      	cmp	r2, #32
 8002382:	d004      	beq.n	800238e <__aeabi_dsub+0x46a>
 8002384:	2040      	movs	r0, #64	; 0x40
 8002386:	1a82      	subs	r2, r0, r2
 8002388:	4091      	lsls	r1, r2
 800238a:	430f      	orrs	r7, r1
 800238c:	46b9      	mov	r9, r7
 800238e:	464f      	mov	r7, r9
 8002390:	1e7a      	subs	r2, r7, #1
 8002392:	4197      	sbcs	r7, r2
 8002394:	4337      	orrs	r7, r6
 8002396:	e60f      	b.n	8001fb8 <__aeabi_dsub+0x94>
 8002398:	4662      	mov	r2, ip
 800239a:	431a      	orrs	r2, r3
 800239c:	0013      	movs	r3, r2
 800239e:	1e5a      	subs	r2, r3, #1
 80023a0:	4193      	sbcs	r3, r2
 80023a2:	1afc      	subs	r4, r7, r3
 80023a4:	42a7      	cmp	r7, r4
 80023a6:	41bf      	sbcs	r7, r7
 80023a8:	427f      	negs	r7, r7
 80023aa:	1bcb      	subs	r3, r1, r7
 80023ac:	4699      	mov	r9, r3
 80023ae:	465d      	mov	r5, fp
 80023b0:	4680      	mov	r8, r0
 80023b2:	e608      	b.n	8001fc6 <__aeabi_dsub+0xa2>
 80023b4:	4666      	mov	r6, ip
 80023b6:	431e      	orrs	r6, r3
 80023b8:	d100      	bne.n	80023bc <__aeabi_dsub+0x498>
 80023ba:	e0be      	b.n	800253a <__aeabi_dsub+0x616>
 80023bc:	1e56      	subs	r6, r2, #1
 80023be:	2a01      	cmp	r2, #1
 80023c0:	d100      	bne.n	80023c4 <__aeabi_dsub+0x4a0>
 80023c2:	e109      	b.n	80025d8 <__aeabi_dsub+0x6b4>
 80023c4:	4c8c      	ldr	r4, [pc, #560]	; (80025f8 <__aeabi_dsub+0x6d4>)
 80023c6:	42a2      	cmp	r2, r4
 80023c8:	d100      	bne.n	80023cc <__aeabi_dsub+0x4a8>
 80023ca:	e119      	b.n	8002600 <__aeabi_dsub+0x6dc>
 80023cc:	0032      	movs	r2, r6
 80023ce:	e6c1      	b.n	8002154 <__aeabi_dsub+0x230>
 80023d0:	4642      	mov	r2, r8
 80023d2:	2400      	movs	r4, #0
 80023d4:	2300      	movs	r3, #0
 80023d6:	e648      	b.n	800206a <__aeabi_dsub+0x146>
 80023d8:	2020      	movs	r0, #32
 80023da:	000c      	movs	r4, r1
 80023dc:	1a80      	subs	r0, r0, r2
 80023de:	003e      	movs	r6, r7
 80023e0:	4087      	lsls	r7, r0
 80023e2:	4084      	lsls	r4, r0
 80023e4:	40d6      	lsrs	r6, r2
 80023e6:	1e78      	subs	r0, r7, #1
 80023e8:	4187      	sbcs	r7, r0
 80023ea:	40d1      	lsrs	r1, r2
 80023ec:	4334      	orrs	r4, r6
 80023ee:	433c      	orrs	r4, r7
 80023f0:	448c      	add	ip, r1
 80023f2:	e7a4      	b.n	800233e <__aeabi_dsub+0x41a>
 80023f4:	4a80      	ldr	r2, [pc, #512]	; (80025f8 <__aeabi_dsub+0x6d4>)
 80023f6:	4290      	cmp	r0, r2
 80023f8:	d100      	bne.n	80023fc <__aeabi_dsub+0x4d8>
 80023fa:	e0e9      	b.n	80025d0 <__aeabi_dsub+0x6ac>
 80023fc:	19df      	adds	r7, r3, r7
 80023fe:	429f      	cmp	r7, r3
 8002400:	419b      	sbcs	r3, r3
 8002402:	4461      	add	r1, ip
 8002404:	425b      	negs	r3, r3
 8002406:	18c9      	adds	r1, r1, r3
 8002408:	07cc      	lsls	r4, r1, #31
 800240a:	087f      	lsrs	r7, r7, #1
 800240c:	084b      	lsrs	r3, r1, #1
 800240e:	4699      	mov	r9, r3
 8002410:	4680      	mov	r8, r0
 8002412:	433c      	orrs	r4, r7
 8002414:	e6f4      	b.n	8002200 <__aeabi_dsub+0x2dc>
 8002416:	1afc      	subs	r4, r7, r3
 8002418:	42a7      	cmp	r7, r4
 800241a:	41bf      	sbcs	r7, r7
 800241c:	4663      	mov	r3, ip
 800241e:	427f      	negs	r7, r7
 8002420:	1ac9      	subs	r1, r1, r3
 8002422:	1bcb      	subs	r3, r1, r7
 8002424:	4699      	mov	r9, r3
 8002426:	465d      	mov	r5, fp
 8002428:	e5d5      	b.n	8001fd6 <__aeabi_dsub+0xb2>
 800242a:	08ff      	lsrs	r7, r7, #3
 800242c:	074b      	lsls	r3, r1, #29
 800242e:	465d      	mov	r5, fp
 8002430:	433b      	orrs	r3, r7
 8002432:	08cc      	lsrs	r4, r1, #3
 8002434:	e6ee      	b.n	8002214 <__aeabi_dsub+0x2f0>
 8002436:	4662      	mov	r2, ip
 8002438:	431a      	orrs	r2, r3
 800243a:	d000      	beq.n	800243e <__aeabi_dsub+0x51a>
 800243c:	e082      	b.n	8002544 <__aeabi_dsub+0x620>
 800243e:	000b      	movs	r3, r1
 8002440:	433b      	orrs	r3, r7
 8002442:	d11b      	bne.n	800247c <__aeabi_dsub+0x558>
 8002444:	2480      	movs	r4, #128	; 0x80
 8002446:	2500      	movs	r5, #0
 8002448:	0324      	lsls	r4, r4, #12
 800244a:	e6f9      	b.n	8002240 <__aeabi_dsub+0x31c>
 800244c:	19dc      	adds	r4, r3, r7
 800244e:	429c      	cmp	r4, r3
 8002450:	419b      	sbcs	r3, r3
 8002452:	4461      	add	r1, ip
 8002454:	4689      	mov	r9, r1
 8002456:	425b      	negs	r3, r3
 8002458:	4499      	add	r9, r3
 800245a:	464b      	mov	r3, r9
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	d444      	bmi.n	80024ea <__aeabi_dsub+0x5c6>
 8002460:	2301      	movs	r3, #1
 8002462:	4698      	mov	r8, r3
 8002464:	e6cc      	b.n	8002200 <__aeabi_dsub+0x2dc>
 8002466:	1bdc      	subs	r4, r3, r7
 8002468:	4662      	mov	r2, ip
 800246a:	42a3      	cmp	r3, r4
 800246c:	419b      	sbcs	r3, r3
 800246e:	1a51      	subs	r1, r2, r1
 8002470:	425b      	negs	r3, r3
 8002472:	1acb      	subs	r3, r1, r3
 8002474:	4699      	mov	r9, r3
 8002476:	2301      	movs	r3, #1
 8002478:	4698      	mov	r8, r3
 800247a:	e5a4      	b.n	8001fc6 <__aeabi_dsub+0xa2>
 800247c:	08ff      	lsrs	r7, r7, #3
 800247e:	074b      	lsls	r3, r1, #29
 8002480:	465d      	mov	r5, fp
 8002482:	433b      	orrs	r3, r7
 8002484:	08cc      	lsrs	r4, r1, #3
 8002486:	e6d7      	b.n	8002238 <__aeabi_dsub+0x314>
 8002488:	4662      	mov	r2, ip
 800248a:	431a      	orrs	r2, r3
 800248c:	0014      	movs	r4, r2
 800248e:	1e63      	subs	r3, r4, #1
 8002490:	419c      	sbcs	r4, r3
 8002492:	e679      	b.n	8002188 <__aeabi_dsub+0x264>
 8002494:	0015      	movs	r5, r2
 8002496:	4664      	mov	r4, ip
 8002498:	3d20      	subs	r5, #32
 800249a:	40ec      	lsrs	r4, r5
 800249c:	46a0      	mov	r8, r4
 800249e:	2a20      	cmp	r2, #32
 80024a0:	d005      	beq.n	80024ae <__aeabi_dsub+0x58a>
 80024a2:	2540      	movs	r5, #64	; 0x40
 80024a4:	4664      	mov	r4, ip
 80024a6:	1aaa      	subs	r2, r5, r2
 80024a8:	4094      	lsls	r4, r2
 80024aa:	4323      	orrs	r3, r4
 80024ac:	469a      	mov	sl, r3
 80024ae:	4654      	mov	r4, sl
 80024b0:	1e63      	subs	r3, r4, #1
 80024b2:	419c      	sbcs	r4, r3
 80024b4:	4643      	mov	r3, r8
 80024b6:	4323      	orrs	r3, r4
 80024b8:	e773      	b.n	80023a2 <__aeabi_dsub+0x47e>
 80024ba:	4662      	mov	r2, ip
 80024bc:	431a      	orrs	r2, r3
 80024be:	d023      	beq.n	8002508 <__aeabi_dsub+0x5e4>
 80024c0:	000a      	movs	r2, r1
 80024c2:	433a      	orrs	r2, r7
 80024c4:	d000      	beq.n	80024c8 <__aeabi_dsub+0x5a4>
 80024c6:	e0a0      	b.n	800260a <__aeabi_dsub+0x6e6>
 80024c8:	4662      	mov	r2, ip
 80024ca:	08db      	lsrs	r3, r3, #3
 80024cc:	0752      	lsls	r2, r2, #29
 80024ce:	4313      	orrs	r3, r2
 80024d0:	4662      	mov	r2, ip
 80024d2:	08d4      	lsrs	r4, r2, #3
 80024d4:	e6b0      	b.n	8002238 <__aeabi_dsub+0x314>
 80024d6:	000b      	movs	r3, r1
 80024d8:	433b      	orrs	r3, r7
 80024da:	d100      	bne.n	80024de <__aeabi_dsub+0x5ba>
 80024dc:	e728      	b.n	8002330 <__aeabi_dsub+0x40c>
 80024de:	08ff      	lsrs	r7, r7, #3
 80024e0:	074b      	lsls	r3, r1, #29
 80024e2:	465d      	mov	r5, fp
 80024e4:	433b      	orrs	r3, r7
 80024e6:	08cc      	lsrs	r4, r1, #3
 80024e8:	e697      	b.n	800221a <__aeabi_dsub+0x2f6>
 80024ea:	2302      	movs	r3, #2
 80024ec:	4698      	mov	r8, r3
 80024ee:	e736      	b.n	800235e <__aeabi_dsub+0x43a>
 80024f0:	1afc      	subs	r4, r7, r3
 80024f2:	42a7      	cmp	r7, r4
 80024f4:	41bf      	sbcs	r7, r7
 80024f6:	4663      	mov	r3, ip
 80024f8:	427f      	negs	r7, r7
 80024fa:	1ac9      	subs	r1, r1, r3
 80024fc:	1bcb      	subs	r3, r1, r7
 80024fe:	4699      	mov	r9, r3
 8002500:	2301      	movs	r3, #1
 8002502:	465d      	mov	r5, fp
 8002504:	4698      	mov	r8, r3
 8002506:	e55e      	b.n	8001fc6 <__aeabi_dsub+0xa2>
 8002508:	074b      	lsls	r3, r1, #29
 800250a:	08ff      	lsrs	r7, r7, #3
 800250c:	433b      	orrs	r3, r7
 800250e:	08cc      	lsrs	r4, r1, #3
 8002510:	e692      	b.n	8002238 <__aeabi_dsub+0x314>
 8002512:	1bdc      	subs	r4, r3, r7
 8002514:	4660      	mov	r0, ip
 8002516:	42a3      	cmp	r3, r4
 8002518:	41b6      	sbcs	r6, r6
 800251a:	1a40      	subs	r0, r0, r1
 800251c:	4276      	negs	r6, r6
 800251e:	1b80      	subs	r0, r0, r6
 8002520:	4681      	mov	r9, r0
 8002522:	0200      	lsls	r0, r0, #8
 8002524:	d560      	bpl.n	80025e8 <__aeabi_dsub+0x6c4>
 8002526:	1afc      	subs	r4, r7, r3
 8002528:	42a7      	cmp	r7, r4
 800252a:	41bf      	sbcs	r7, r7
 800252c:	4663      	mov	r3, ip
 800252e:	427f      	negs	r7, r7
 8002530:	1ac9      	subs	r1, r1, r3
 8002532:	1bcb      	subs	r3, r1, r7
 8002534:	4699      	mov	r9, r3
 8002536:	465d      	mov	r5, fp
 8002538:	e576      	b.n	8002028 <__aeabi_dsub+0x104>
 800253a:	08ff      	lsrs	r7, r7, #3
 800253c:	074b      	lsls	r3, r1, #29
 800253e:	433b      	orrs	r3, r7
 8002540:	08cc      	lsrs	r4, r1, #3
 8002542:	e667      	b.n	8002214 <__aeabi_dsub+0x2f0>
 8002544:	000a      	movs	r2, r1
 8002546:	08db      	lsrs	r3, r3, #3
 8002548:	433a      	orrs	r2, r7
 800254a:	d100      	bne.n	800254e <__aeabi_dsub+0x62a>
 800254c:	e66f      	b.n	800222e <__aeabi_dsub+0x30a>
 800254e:	4662      	mov	r2, ip
 8002550:	0752      	lsls	r2, r2, #29
 8002552:	4313      	orrs	r3, r2
 8002554:	4662      	mov	r2, ip
 8002556:	08d4      	lsrs	r4, r2, #3
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	0312      	lsls	r2, r2, #12
 800255c:	4214      	tst	r4, r2
 800255e:	d007      	beq.n	8002570 <__aeabi_dsub+0x64c>
 8002560:	08c8      	lsrs	r0, r1, #3
 8002562:	4210      	tst	r0, r2
 8002564:	d104      	bne.n	8002570 <__aeabi_dsub+0x64c>
 8002566:	465d      	mov	r5, fp
 8002568:	0004      	movs	r4, r0
 800256a:	08fb      	lsrs	r3, r7, #3
 800256c:	0749      	lsls	r1, r1, #29
 800256e:	430b      	orrs	r3, r1
 8002570:	0f5a      	lsrs	r2, r3, #29
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	08db      	lsrs	r3, r3, #3
 8002576:	0752      	lsls	r2, r2, #29
 8002578:	4313      	orrs	r3, r2
 800257a:	e65d      	b.n	8002238 <__aeabi_dsub+0x314>
 800257c:	074b      	lsls	r3, r1, #29
 800257e:	08ff      	lsrs	r7, r7, #3
 8002580:	433b      	orrs	r3, r7
 8002582:	08cc      	lsrs	r4, r1, #3
 8002584:	e649      	b.n	800221a <__aeabi_dsub+0x2f6>
 8002586:	19dc      	adds	r4, r3, r7
 8002588:	429c      	cmp	r4, r3
 800258a:	419b      	sbcs	r3, r3
 800258c:	4461      	add	r1, ip
 800258e:	4689      	mov	r9, r1
 8002590:	425b      	negs	r3, r3
 8002592:	4499      	add	r9, r3
 8002594:	464b      	mov	r3, r9
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	d400      	bmi.n	800259c <__aeabi_dsub+0x678>
 800259a:	e631      	b.n	8002200 <__aeabi_dsub+0x2dc>
 800259c:	464a      	mov	r2, r9
 800259e:	4b17      	ldr	r3, [pc, #92]	; (80025fc <__aeabi_dsub+0x6d8>)
 80025a0:	401a      	ands	r2, r3
 80025a2:	2301      	movs	r3, #1
 80025a4:	4691      	mov	r9, r2
 80025a6:	4698      	mov	r8, r3
 80025a8:	e62a      	b.n	8002200 <__aeabi_dsub+0x2dc>
 80025aa:	0016      	movs	r6, r2
 80025ac:	4664      	mov	r4, ip
 80025ae:	3e20      	subs	r6, #32
 80025b0:	40f4      	lsrs	r4, r6
 80025b2:	46a0      	mov	r8, r4
 80025b4:	2a20      	cmp	r2, #32
 80025b6:	d005      	beq.n	80025c4 <__aeabi_dsub+0x6a0>
 80025b8:	2640      	movs	r6, #64	; 0x40
 80025ba:	4664      	mov	r4, ip
 80025bc:	1ab2      	subs	r2, r6, r2
 80025be:	4094      	lsls	r4, r2
 80025c0:	4323      	orrs	r3, r4
 80025c2:	469a      	mov	sl, r3
 80025c4:	4654      	mov	r4, sl
 80025c6:	1e63      	subs	r3, r4, #1
 80025c8:	419c      	sbcs	r4, r3
 80025ca:	4643      	mov	r3, r8
 80025cc:	431c      	orrs	r4, r3
 80025ce:	e5db      	b.n	8002188 <__aeabi_dsub+0x264>
 80025d0:	0002      	movs	r2, r0
 80025d2:	2400      	movs	r4, #0
 80025d4:	2300      	movs	r3, #0
 80025d6:	e548      	b.n	800206a <__aeabi_dsub+0x146>
 80025d8:	19dc      	adds	r4, r3, r7
 80025da:	42bc      	cmp	r4, r7
 80025dc:	41bf      	sbcs	r7, r7
 80025de:	4461      	add	r1, ip
 80025e0:	4689      	mov	r9, r1
 80025e2:	427f      	negs	r7, r7
 80025e4:	44b9      	add	r9, r7
 80025e6:	e738      	b.n	800245a <__aeabi_dsub+0x536>
 80025e8:	464b      	mov	r3, r9
 80025ea:	4323      	orrs	r3, r4
 80025ec:	d100      	bne.n	80025f0 <__aeabi_dsub+0x6cc>
 80025ee:	e69f      	b.n	8002330 <__aeabi_dsub+0x40c>
 80025f0:	e606      	b.n	8002200 <__aeabi_dsub+0x2dc>
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	000007fe 	.word	0x000007fe
 80025f8:	000007ff 	.word	0x000007ff
 80025fc:	ff7fffff 	.word	0xff7fffff
 8002600:	08ff      	lsrs	r7, r7, #3
 8002602:	074b      	lsls	r3, r1, #29
 8002604:	433b      	orrs	r3, r7
 8002606:	08cc      	lsrs	r4, r1, #3
 8002608:	e616      	b.n	8002238 <__aeabi_dsub+0x314>
 800260a:	4662      	mov	r2, ip
 800260c:	08db      	lsrs	r3, r3, #3
 800260e:	0752      	lsls	r2, r2, #29
 8002610:	4313      	orrs	r3, r2
 8002612:	4662      	mov	r2, ip
 8002614:	08d4      	lsrs	r4, r2, #3
 8002616:	2280      	movs	r2, #128	; 0x80
 8002618:	0312      	lsls	r2, r2, #12
 800261a:	4214      	tst	r4, r2
 800261c:	d007      	beq.n	800262e <__aeabi_dsub+0x70a>
 800261e:	08c8      	lsrs	r0, r1, #3
 8002620:	4210      	tst	r0, r2
 8002622:	d104      	bne.n	800262e <__aeabi_dsub+0x70a>
 8002624:	465d      	mov	r5, fp
 8002626:	0004      	movs	r4, r0
 8002628:	08fb      	lsrs	r3, r7, #3
 800262a:	0749      	lsls	r1, r1, #29
 800262c:	430b      	orrs	r3, r1
 800262e:	0f5a      	lsrs	r2, r3, #29
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	0752      	lsls	r2, r2, #29
 8002634:	08db      	lsrs	r3, r3, #3
 8002636:	4313      	orrs	r3, r2
 8002638:	e5fe      	b.n	8002238 <__aeabi_dsub+0x314>
 800263a:	2300      	movs	r3, #0
 800263c:	4a01      	ldr	r2, [pc, #4]	; (8002644 <__aeabi_dsub+0x720>)
 800263e:	001c      	movs	r4, r3
 8002640:	e513      	b.n	800206a <__aeabi_dsub+0x146>
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	000007ff 	.word	0x000007ff

08002648 <__aeabi_dcmpun>:
 8002648:	b570      	push	{r4, r5, r6, lr}
 800264a:	0005      	movs	r5, r0
 800264c:	480c      	ldr	r0, [pc, #48]	; (8002680 <__aeabi_dcmpun+0x38>)
 800264e:	031c      	lsls	r4, r3, #12
 8002650:	0016      	movs	r6, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	030a      	lsls	r2, r1, #12
 8002656:	0049      	lsls	r1, r1, #1
 8002658:	0b12      	lsrs	r2, r2, #12
 800265a:	0d49      	lsrs	r1, r1, #21
 800265c:	0b24      	lsrs	r4, r4, #12
 800265e:	0d5b      	lsrs	r3, r3, #21
 8002660:	4281      	cmp	r1, r0
 8002662:	d008      	beq.n	8002676 <__aeabi_dcmpun+0x2e>
 8002664:	4a06      	ldr	r2, [pc, #24]	; (8002680 <__aeabi_dcmpun+0x38>)
 8002666:	2000      	movs	r0, #0
 8002668:	4293      	cmp	r3, r2
 800266a:	d103      	bne.n	8002674 <__aeabi_dcmpun+0x2c>
 800266c:	0020      	movs	r0, r4
 800266e:	4330      	orrs	r0, r6
 8002670:	1e43      	subs	r3, r0, #1
 8002672:	4198      	sbcs	r0, r3
 8002674:	bd70      	pop	{r4, r5, r6, pc}
 8002676:	2001      	movs	r0, #1
 8002678:	432a      	orrs	r2, r5
 800267a:	d1fb      	bne.n	8002674 <__aeabi_dcmpun+0x2c>
 800267c:	e7f2      	b.n	8002664 <__aeabi_dcmpun+0x1c>
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	000007ff 	.word	0x000007ff

08002684 <__aeabi_d2iz>:
 8002684:	000a      	movs	r2, r1
 8002686:	b530      	push	{r4, r5, lr}
 8002688:	4c13      	ldr	r4, [pc, #76]	; (80026d8 <__aeabi_d2iz+0x54>)
 800268a:	0053      	lsls	r3, r2, #1
 800268c:	0309      	lsls	r1, r1, #12
 800268e:	0005      	movs	r5, r0
 8002690:	0b09      	lsrs	r1, r1, #12
 8002692:	2000      	movs	r0, #0
 8002694:	0d5b      	lsrs	r3, r3, #21
 8002696:	0fd2      	lsrs	r2, r2, #31
 8002698:	42a3      	cmp	r3, r4
 800269a:	dd04      	ble.n	80026a6 <__aeabi_d2iz+0x22>
 800269c:	480f      	ldr	r0, [pc, #60]	; (80026dc <__aeabi_d2iz+0x58>)
 800269e:	4283      	cmp	r3, r0
 80026a0:	dd02      	ble.n	80026a8 <__aeabi_d2iz+0x24>
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <__aeabi_d2iz+0x5c>)
 80026a4:	18d0      	adds	r0, r2, r3
 80026a6:	bd30      	pop	{r4, r5, pc}
 80026a8:	2080      	movs	r0, #128	; 0x80
 80026aa:	0340      	lsls	r0, r0, #13
 80026ac:	4301      	orrs	r1, r0
 80026ae:	480d      	ldr	r0, [pc, #52]	; (80026e4 <__aeabi_d2iz+0x60>)
 80026b0:	1ac0      	subs	r0, r0, r3
 80026b2:	281f      	cmp	r0, #31
 80026b4:	dd08      	ble.n	80026c8 <__aeabi_d2iz+0x44>
 80026b6:	480c      	ldr	r0, [pc, #48]	; (80026e8 <__aeabi_d2iz+0x64>)
 80026b8:	1ac3      	subs	r3, r0, r3
 80026ba:	40d9      	lsrs	r1, r3
 80026bc:	000b      	movs	r3, r1
 80026be:	4258      	negs	r0, r3
 80026c0:	2a00      	cmp	r2, #0
 80026c2:	d1f0      	bne.n	80026a6 <__aeabi_d2iz+0x22>
 80026c4:	0018      	movs	r0, r3
 80026c6:	e7ee      	b.n	80026a6 <__aeabi_d2iz+0x22>
 80026c8:	4c08      	ldr	r4, [pc, #32]	; (80026ec <__aeabi_d2iz+0x68>)
 80026ca:	40c5      	lsrs	r5, r0
 80026cc:	46a4      	mov	ip, r4
 80026ce:	4463      	add	r3, ip
 80026d0:	4099      	lsls	r1, r3
 80026d2:	000b      	movs	r3, r1
 80026d4:	432b      	orrs	r3, r5
 80026d6:	e7f2      	b.n	80026be <__aeabi_d2iz+0x3a>
 80026d8:	000003fe 	.word	0x000003fe
 80026dc:	0000041d 	.word	0x0000041d
 80026e0:	7fffffff 	.word	0x7fffffff
 80026e4:	00000433 	.word	0x00000433
 80026e8:	00000413 	.word	0x00000413
 80026ec:	fffffbed 	.word	0xfffffbed

080026f0 <__aeabi_i2d>:
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	2800      	cmp	r0, #0
 80026f4:	d016      	beq.n	8002724 <__aeabi_i2d+0x34>
 80026f6:	17c3      	asrs	r3, r0, #31
 80026f8:	18c5      	adds	r5, r0, r3
 80026fa:	405d      	eors	r5, r3
 80026fc:	0fc4      	lsrs	r4, r0, #31
 80026fe:	0028      	movs	r0, r5
 8002700:	f000 f91c 	bl	800293c <__clzsi2>
 8002704:	4a11      	ldr	r2, [pc, #68]	; (800274c <__aeabi_i2d+0x5c>)
 8002706:	1a12      	subs	r2, r2, r0
 8002708:	280a      	cmp	r0, #10
 800270a:	dc16      	bgt.n	800273a <__aeabi_i2d+0x4a>
 800270c:	0003      	movs	r3, r0
 800270e:	002e      	movs	r6, r5
 8002710:	3315      	adds	r3, #21
 8002712:	409e      	lsls	r6, r3
 8002714:	230b      	movs	r3, #11
 8002716:	1a18      	subs	r0, r3, r0
 8002718:	40c5      	lsrs	r5, r0
 800271a:	0552      	lsls	r2, r2, #21
 800271c:	032d      	lsls	r5, r5, #12
 800271e:	0b2d      	lsrs	r5, r5, #12
 8002720:	0d53      	lsrs	r3, r2, #21
 8002722:	e003      	b.n	800272c <__aeabi_i2d+0x3c>
 8002724:	2400      	movs	r4, #0
 8002726:	2300      	movs	r3, #0
 8002728:	2500      	movs	r5, #0
 800272a:	2600      	movs	r6, #0
 800272c:	051b      	lsls	r3, r3, #20
 800272e:	432b      	orrs	r3, r5
 8002730:	07e4      	lsls	r4, r4, #31
 8002732:	4323      	orrs	r3, r4
 8002734:	0030      	movs	r0, r6
 8002736:	0019      	movs	r1, r3
 8002738:	bd70      	pop	{r4, r5, r6, pc}
 800273a:	380b      	subs	r0, #11
 800273c:	4085      	lsls	r5, r0
 800273e:	0552      	lsls	r2, r2, #21
 8002740:	032d      	lsls	r5, r5, #12
 8002742:	2600      	movs	r6, #0
 8002744:	0b2d      	lsrs	r5, r5, #12
 8002746:	0d53      	lsrs	r3, r2, #21
 8002748:	e7f0      	b.n	800272c <__aeabi_i2d+0x3c>
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	0000041e 	.word	0x0000041e

08002750 <__aeabi_ui2d>:
 8002750:	b510      	push	{r4, lr}
 8002752:	1e04      	subs	r4, r0, #0
 8002754:	d010      	beq.n	8002778 <__aeabi_ui2d+0x28>
 8002756:	f000 f8f1 	bl	800293c <__clzsi2>
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <__aeabi_ui2d+0x48>)
 800275c:	1a1b      	subs	r3, r3, r0
 800275e:	280a      	cmp	r0, #10
 8002760:	dc11      	bgt.n	8002786 <__aeabi_ui2d+0x36>
 8002762:	220b      	movs	r2, #11
 8002764:	0021      	movs	r1, r4
 8002766:	1a12      	subs	r2, r2, r0
 8002768:	40d1      	lsrs	r1, r2
 800276a:	3015      	adds	r0, #21
 800276c:	030a      	lsls	r2, r1, #12
 800276e:	055b      	lsls	r3, r3, #21
 8002770:	4084      	lsls	r4, r0
 8002772:	0b12      	lsrs	r2, r2, #12
 8002774:	0d5b      	lsrs	r3, r3, #21
 8002776:	e001      	b.n	800277c <__aeabi_ui2d+0x2c>
 8002778:	2300      	movs	r3, #0
 800277a:	2200      	movs	r2, #0
 800277c:	051b      	lsls	r3, r3, #20
 800277e:	4313      	orrs	r3, r2
 8002780:	0020      	movs	r0, r4
 8002782:	0019      	movs	r1, r3
 8002784:	bd10      	pop	{r4, pc}
 8002786:	0022      	movs	r2, r4
 8002788:	380b      	subs	r0, #11
 800278a:	4082      	lsls	r2, r0
 800278c:	055b      	lsls	r3, r3, #21
 800278e:	0312      	lsls	r2, r2, #12
 8002790:	2400      	movs	r4, #0
 8002792:	0b12      	lsrs	r2, r2, #12
 8002794:	0d5b      	lsrs	r3, r3, #21
 8002796:	e7f1      	b.n	800277c <__aeabi_ui2d+0x2c>
 8002798:	0000041e 	.word	0x0000041e

0800279c <__aeabi_f2d>:
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	0043      	lsls	r3, r0, #1
 80027a0:	0246      	lsls	r6, r0, #9
 80027a2:	0fc4      	lsrs	r4, r0, #31
 80027a4:	20fe      	movs	r0, #254	; 0xfe
 80027a6:	0e1b      	lsrs	r3, r3, #24
 80027a8:	1c59      	adds	r1, r3, #1
 80027aa:	0a75      	lsrs	r5, r6, #9
 80027ac:	4208      	tst	r0, r1
 80027ae:	d00c      	beq.n	80027ca <__aeabi_f2d+0x2e>
 80027b0:	22e0      	movs	r2, #224	; 0xe0
 80027b2:	0092      	lsls	r2, r2, #2
 80027b4:	4694      	mov	ip, r2
 80027b6:	076d      	lsls	r5, r5, #29
 80027b8:	0b36      	lsrs	r6, r6, #12
 80027ba:	4463      	add	r3, ip
 80027bc:	051b      	lsls	r3, r3, #20
 80027be:	4333      	orrs	r3, r6
 80027c0:	07e4      	lsls	r4, r4, #31
 80027c2:	4323      	orrs	r3, r4
 80027c4:	0028      	movs	r0, r5
 80027c6:	0019      	movs	r1, r3
 80027c8:	bd70      	pop	{r4, r5, r6, pc}
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d114      	bne.n	80027f8 <__aeabi_f2d+0x5c>
 80027ce:	2d00      	cmp	r5, #0
 80027d0:	d01b      	beq.n	800280a <__aeabi_f2d+0x6e>
 80027d2:	0028      	movs	r0, r5
 80027d4:	f000 f8b2 	bl	800293c <__clzsi2>
 80027d8:	280a      	cmp	r0, #10
 80027da:	dc1c      	bgt.n	8002816 <__aeabi_f2d+0x7a>
 80027dc:	230b      	movs	r3, #11
 80027de:	002e      	movs	r6, r5
 80027e0:	1a1b      	subs	r3, r3, r0
 80027e2:	40de      	lsrs	r6, r3
 80027e4:	0003      	movs	r3, r0
 80027e6:	3315      	adds	r3, #21
 80027e8:	409d      	lsls	r5, r3
 80027ea:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <__aeabi_f2d+0x88>)
 80027ec:	0336      	lsls	r6, r6, #12
 80027ee:	1a12      	subs	r2, r2, r0
 80027f0:	0552      	lsls	r2, r2, #21
 80027f2:	0b36      	lsrs	r6, r6, #12
 80027f4:	0d53      	lsrs	r3, r2, #21
 80027f6:	e7e1      	b.n	80027bc <__aeabi_f2d+0x20>
 80027f8:	2d00      	cmp	r5, #0
 80027fa:	d009      	beq.n	8002810 <__aeabi_f2d+0x74>
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	0b36      	lsrs	r6, r6, #12
 8002800:	0312      	lsls	r2, r2, #12
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <__aeabi_f2d+0x8c>)
 8002804:	076d      	lsls	r5, r5, #29
 8002806:	4316      	orrs	r6, r2
 8002808:	e7d8      	b.n	80027bc <__aeabi_f2d+0x20>
 800280a:	2300      	movs	r3, #0
 800280c:	2600      	movs	r6, #0
 800280e:	e7d5      	b.n	80027bc <__aeabi_f2d+0x20>
 8002810:	2600      	movs	r6, #0
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <__aeabi_f2d+0x8c>)
 8002814:	e7d2      	b.n	80027bc <__aeabi_f2d+0x20>
 8002816:	0003      	movs	r3, r0
 8002818:	3b0b      	subs	r3, #11
 800281a:	409d      	lsls	r5, r3
 800281c:	002e      	movs	r6, r5
 800281e:	2500      	movs	r5, #0
 8002820:	e7e3      	b.n	80027ea <__aeabi_f2d+0x4e>
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	00000389 	.word	0x00000389
 8002828:	000007ff 	.word	0x000007ff

0800282c <__aeabi_d2f>:
 800282c:	0002      	movs	r2, r0
 800282e:	004b      	lsls	r3, r1, #1
 8002830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002832:	0d5b      	lsrs	r3, r3, #21
 8002834:	030c      	lsls	r4, r1, #12
 8002836:	4e3d      	ldr	r6, [pc, #244]	; (800292c <__aeabi_d2f+0x100>)
 8002838:	0a64      	lsrs	r4, r4, #9
 800283a:	0f40      	lsrs	r0, r0, #29
 800283c:	1c5f      	adds	r7, r3, #1
 800283e:	0fc9      	lsrs	r1, r1, #31
 8002840:	4304      	orrs	r4, r0
 8002842:	00d5      	lsls	r5, r2, #3
 8002844:	4237      	tst	r7, r6
 8002846:	d00a      	beq.n	800285e <__aeabi_d2f+0x32>
 8002848:	4839      	ldr	r0, [pc, #228]	; (8002930 <__aeabi_d2f+0x104>)
 800284a:	181e      	adds	r6, r3, r0
 800284c:	2efe      	cmp	r6, #254	; 0xfe
 800284e:	dd16      	ble.n	800287e <__aeabi_d2f+0x52>
 8002850:	20ff      	movs	r0, #255	; 0xff
 8002852:	2400      	movs	r4, #0
 8002854:	05c0      	lsls	r0, r0, #23
 8002856:	4320      	orrs	r0, r4
 8002858:	07c9      	lsls	r1, r1, #31
 800285a:	4308      	orrs	r0, r1
 800285c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <__aeabi_d2f+0x44>
 8002862:	432c      	orrs	r4, r5
 8002864:	d026      	beq.n	80028b4 <__aeabi_d2f+0x88>
 8002866:	2205      	movs	r2, #5
 8002868:	0192      	lsls	r2, r2, #6
 800286a:	0a54      	lsrs	r4, r2, #9
 800286c:	b2d8      	uxtb	r0, r3
 800286e:	e7f1      	b.n	8002854 <__aeabi_d2f+0x28>
 8002870:	4325      	orrs	r5, r4
 8002872:	d0ed      	beq.n	8002850 <__aeabi_d2f+0x24>
 8002874:	2080      	movs	r0, #128	; 0x80
 8002876:	03c0      	lsls	r0, r0, #15
 8002878:	4304      	orrs	r4, r0
 800287a:	20ff      	movs	r0, #255	; 0xff
 800287c:	e7ea      	b.n	8002854 <__aeabi_d2f+0x28>
 800287e:	2e00      	cmp	r6, #0
 8002880:	dd1b      	ble.n	80028ba <__aeabi_d2f+0x8e>
 8002882:	0192      	lsls	r2, r2, #6
 8002884:	1e53      	subs	r3, r2, #1
 8002886:	419a      	sbcs	r2, r3
 8002888:	00e4      	lsls	r4, r4, #3
 800288a:	0f6d      	lsrs	r5, r5, #29
 800288c:	4322      	orrs	r2, r4
 800288e:	432a      	orrs	r2, r5
 8002890:	0753      	lsls	r3, r2, #29
 8002892:	d048      	beq.n	8002926 <__aeabi_d2f+0xfa>
 8002894:	230f      	movs	r3, #15
 8002896:	4013      	ands	r3, r2
 8002898:	2b04      	cmp	r3, #4
 800289a:	d000      	beq.n	800289e <__aeabi_d2f+0x72>
 800289c:	3204      	adds	r2, #4
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	04db      	lsls	r3, r3, #19
 80028a2:	4013      	ands	r3, r2
 80028a4:	d03f      	beq.n	8002926 <__aeabi_d2f+0xfa>
 80028a6:	1c70      	adds	r0, r6, #1
 80028a8:	2efe      	cmp	r6, #254	; 0xfe
 80028aa:	d0d1      	beq.n	8002850 <__aeabi_d2f+0x24>
 80028ac:	0192      	lsls	r2, r2, #6
 80028ae:	0a54      	lsrs	r4, r2, #9
 80028b0:	b2c0      	uxtb	r0, r0
 80028b2:	e7cf      	b.n	8002854 <__aeabi_d2f+0x28>
 80028b4:	2000      	movs	r0, #0
 80028b6:	2400      	movs	r4, #0
 80028b8:	e7cc      	b.n	8002854 <__aeabi_d2f+0x28>
 80028ba:	0032      	movs	r2, r6
 80028bc:	3217      	adds	r2, #23
 80028be:	db22      	blt.n	8002906 <__aeabi_d2f+0xda>
 80028c0:	2080      	movs	r0, #128	; 0x80
 80028c2:	0400      	lsls	r0, r0, #16
 80028c4:	4320      	orrs	r0, r4
 80028c6:	241e      	movs	r4, #30
 80028c8:	1ba4      	subs	r4, r4, r6
 80028ca:	2c1f      	cmp	r4, #31
 80028cc:	dd1d      	ble.n	800290a <__aeabi_d2f+0xde>
 80028ce:	2202      	movs	r2, #2
 80028d0:	4252      	negs	r2, r2
 80028d2:	1b96      	subs	r6, r2, r6
 80028d4:	0002      	movs	r2, r0
 80028d6:	40f2      	lsrs	r2, r6
 80028d8:	0016      	movs	r6, r2
 80028da:	2c20      	cmp	r4, #32
 80028dc:	d004      	beq.n	80028e8 <__aeabi_d2f+0xbc>
 80028de:	4a15      	ldr	r2, [pc, #84]	; (8002934 <__aeabi_d2f+0x108>)
 80028e0:	4694      	mov	ip, r2
 80028e2:	4463      	add	r3, ip
 80028e4:	4098      	lsls	r0, r3
 80028e6:	4305      	orrs	r5, r0
 80028e8:	002a      	movs	r2, r5
 80028ea:	1e53      	subs	r3, r2, #1
 80028ec:	419a      	sbcs	r2, r3
 80028ee:	4332      	orrs	r2, r6
 80028f0:	2600      	movs	r6, #0
 80028f2:	0753      	lsls	r3, r2, #29
 80028f4:	d1ce      	bne.n	8002894 <__aeabi_d2f+0x68>
 80028f6:	2480      	movs	r4, #128	; 0x80
 80028f8:	0013      	movs	r3, r2
 80028fa:	04e4      	lsls	r4, r4, #19
 80028fc:	2001      	movs	r0, #1
 80028fe:	4023      	ands	r3, r4
 8002900:	4222      	tst	r2, r4
 8002902:	d1d3      	bne.n	80028ac <__aeabi_d2f+0x80>
 8002904:	e7b0      	b.n	8002868 <__aeabi_d2f+0x3c>
 8002906:	2300      	movs	r3, #0
 8002908:	e7ad      	b.n	8002866 <__aeabi_d2f+0x3a>
 800290a:	4a0b      	ldr	r2, [pc, #44]	; (8002938 <__aeabi_d2f+0x10c>)
 800290c:	4694      	mov	ip, r2
 800290e:	002a      	movs	r2, r5
 8002910:	40e2      	lsrs	r2, r4
 8002912:	0014      	movs	r4, r2
 8002914:	002a      	movs	r2, r5
 8002916:	4463      	add	r3, ip
 8002918:	409a      	lsls	r2, r3
 800291a:	4098      	lsls	r0, r3
 800291c:	1e55      	subs	r5, r2, #1
 800291e:	41aa      	sbcs	r2, r5
 8002920:	4302      	orrs	r2, r0
 8002922:	4322      	orrs	r2, r4
 8002924:	e7e4      	b.n	80028f0 <__aeabi_d2f+0xc4>
 8002926:	0033      	movs	r3, r6
 8002928:	e79e      	b.n	8002868 <__aeabi_d2f+0x3c>
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	000007fe 	.word	0x000007fe
 8002930:	fffffc80 	.word	0xfffffc80
 8002934:	fffffca2 	.word	0xfffffca2
 8002938:	fffffc82 	.word	0xfffffc82

0800293c <__clzsi2>:
 800293c:	211c      	movs	r1, #28
 800293e:	2301      	movs	r3, #1
 8002940:	041b      	lsls	r3, r3, #16
 8002942:	4298      	cmp	r0, r3
 8002944:	d301      	bcc.n	800294a <__clzsi2+0xe>
 8002946:	0c00      	lsrs	r0, r0, #16
 8002948:	3910      	subs	r1, #16
 800294a:	0a1b      	lsrs	r3, r3, #8
 800294c:	4298      	cmp	r0, r3
 800294e:	d301      	bcc.n	8002954 <__clzsi2+0x18>
 8002950:	0a00      	lsrs	r0, r0, #8
 8002952:	3908      	subs	r1, #8
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	4298      	cmp	r0, r3
 8002958:	d301      	bcc.n	800295e <__clzsi2+0x22>
 800295a:	0900      	lsrs	r0, r0, #4
 800295c:	3904      	subs	r1, #4
 800295e:	a202      	add	r2, pc, #8	; (adr r2, 8002968 <__clzsi2+0x2c>)
 8002960:	5c10      	ldrb	r0, [r2, r0]
 8002962:	1840      	adds	r0, r0, r1
 8002964:	4770      	bx	lr
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	02020304 	.word	0x02020304
 800296c:	01010101 	.word	0x01010101
	...

08002978 <main>:
axises my_gyro;
axises my_accel;
axises my_mag;

int main(void)
{
 8002978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800297a:	b0c7      	sub	sp, #284	; 0x11c
 800297c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800297e:	f001 fa75 	bl	8003e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002982:	f000 f895 	bl	8002ab0 <SystemClock_Config>
  MX_GPIO_Init();
 8002986:	f000 f95b 	bl	8002c40 <MX_GPIO_Init>
  MX_SPI1_Init();
 800298a:	f000 f8e9 	bl	8002b60 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800298e:	f000 f925 	bl	8002bdc <MX_USART1_UART_Init>
  icm20948_init();
 8002992:	f000 f9ab 	bl	8002cec <icm20948_init>
  ak09916_init();
 8002996:	f000 f9d9 	bl	8002d4c <ak09916_init>


  //reading data from the my_gyro------------------------------------------------------------------
  icm20948_gyro_read(&my_gyro);
 800299a:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <main+0xe4>)
 800299c:	0018      	movs	r0, r3
 800299e:	f000 f9f0 	bl	8002d82 <icm20948_gyro_read>
  icm20948_gyro_read_dps(&my_gyro);
 80029a2:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <main+0xe4>)
 80029a4:	0018      	movs	r0, r3
 80029a6:	f000 fa79 	bl	8002e9c <icm20948_gyro_read_dps>
  //reading data from the my_gyro------------------------------------------------------------------


  //reading data from the my_gyro------------------------------------------------------------------
  icm20948_accel_read(&my_accel);
 80029aa:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <main+0xe8>)
 80029ac:	0018      	movs	r0, r3
 80029ae:	f000 fa29 	bl	8002e04 <icm20948_accel_read>
  icm20948_accel_read_g(&my_accel);
 80029b2:	4b2b      	ldr	r3, [pc, #172]	; (8002a60 <main+0xe8>)
 80029b4:	0018      	movs	r0, r3
 80029b6:	f000 faa3 	bl	8002f00 <icm20948_accel_read_g>
  char strbuf[256];

  while (1)
  {

	  sprintf(strbuf,"Acceleration = X : %f Y : %f Z %f",my_accel.x,my_accel.y, my_accel.z);
 80029ba:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <main+0xe8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	1c18      	adds	r0, r3, #0
 80029c0:	f7ff feec 	bl	800279c <__aeabi_f2d>
 80029c4:	6038      	str	r0, [r7, #0]
 80029c6:	6079      	str	r1, [r7, #4]
 80029c8:	4b25      	ldr	r3, [pc, #148]	; (8002a60 <main+0xe8>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	1c18      	adds	r0, r3, #0
 80029ce:	f7ff fee5 	bl	800279c <__aeabi_f2d>
 80029d2:	0004      	movs	r4, r0
 80029d4:	000d      	movs	r5, r1
 80029d6:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <main+0xe8>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	1c18      	adds	r0, r3, #0
 80029dc:	f7ff fede 	bl	800279c <__aeabi_f2d>
 80029e0:	0002      	movs	r2, r0
 80029e2:	000b      	movs	r3, r1
 80029e4:	491f      	ldr	r1, [pc, #124]	; (8002a64 <main+0xec>)
 80029e6:	2608      	movs	r6, #8
 80029e8:	19b8      	adds	r0, r7, r6
 80029ea:	9202      	str	r2, [sp, #8]
 80029ec:	9303      	str	r3, [sp, #12]
 80029ee:	9400      	str	r4, [sp, #0]
 80029f0:	9501      	str	r5, [sp, #4]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f004 fc1d 	bl	8007234 <siprintf>
	  //figure out why the SPI is not reading in the data, ak09916_init() init??
	  debugPrintln(&huart1, strbuf);
 80029fa:	19ba      	adds	r2, r7, r6
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <main+0xf0>)
 80029fe:	0011      	movs	r1, r2
 8002a00:	0018      	movs	r0, r3
 8002a02:	f000 f835 	bl	8002a70 <debugPrintln>
	  sprintf(strbuf,"Gyroscope = X : %f Y : %f Z %f",my_gyro.x,my_gyro.y, my_gyro.z);
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <main+0xe4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	1c18      	adds	r0, r3, #0
 8002a0c:	f7ff fec6 	bl	800279c <__aeabi_f2d>
 8002a10:	6038      	str	r0, [r7, #0]
 8002a12:	6079      	str	r1, [r7, #4]
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <main+0xe4>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	1c18      	adds	r0, r3, #0
 8002a1a:	f7ff febf 	bl	800279c <__aeabi_f2d>
 8002a1e:	0004      	movs	r4, r0
 8002a20:	000d      	movs	r5, r1
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <main+0xe4>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	1c18      	adds	r0, r3, #0
 8002a28:	f7ff feb8 	bl	800279c <__aeabi_f2d>
 8002a2c:	0002      	movs	r2, r0
 8002a2e:	000b      	movs	r3, r1
 8002a30:	490e      	ldr	r1, [pc, #56]	; (8002a6c <main+0xf4>)
 8002a32:	19b8      	adds	r0, r7, r6
 8002a34:	9202      	str	r2, [sp, #8]
 8002a36:	9303      	str	r3, [sp, #12]
 8002a38:	9400      	str	r4, [sp, #0]
 8002a3a:	9501      	str	r5, [sp, #4]
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f004 fbf8 	bl	8007234 <siprintf>
	  debugPrintln(&huart1, strbuf);
 8002a44:	19ba      	adds	r2, r7, r6
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <main+0xf0>)
 8002a48:	0011      	movs	r1, r2
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 f810 	bl	8002a70 <debugPrintln>

	  HAL_Delay(1000);
 8002a50:	23fa      	movs	r3, #250	; 0xfa
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	0018      	movs	r0, r3
 8002a56:	f001 fa6d 	bl	8003f34 <HAL_Delay>
	  sprintf(strbuf,"Acceleration = X : %f Y : %f Z %f",my_accel.x,my_accel.y, my_accel.z);
 8002a5a:	e7ae      	b.n	80029ba <main+0x42>
 8002a5c:	200002ec 	.word	0x200002ec
 8002a60:	200002f8 	.word	0x200002f8
 8002a64:	0800afa8 	.word	0x0800afa8
 8002a68:	20000260 	.word	0x20000260
 8002a6c:	0800afcc 	.word	0x0800afcc

08002a70 <debugPrintln>:
  }

}

void debugPrintln(UART_HandleTypeDef *uart_handle,char _out[])
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
	  HAL_UART_Transmit(uart_handle, (uint8_t *) _out, strlen(_out), 60);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f7fd fb43 	bl	8000108 <strlen>
 8002a82:	0003      	movs	r3, r0
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	6839      	ldr	r1, [r7, #0]
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	233c      	movs	r3, #60	; 0x3c
 8002a8c:	f003 f97c 	bl	8005d88 <HAL_UART_Transmit>
	  char newline[2] = "\r\n";
 8002a90:	210c      	movs	r1, #12
 8002a92:	187b      	adds	r3, r7, r1
 8002a94:	4a05      	ldr	r2, [pc, #20]	; (8002aac <debugPrintln+0x3c>)
 8002a96:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(uart_handle, (uint8_t *)newline, 2, 10);
 8002a98:	1879      	adds	r1, r7, r1
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	230a      	movs	r3, #10
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f003 f972 	bl	8005d88 <HAL_UART_Transmit>


}
 8002aa4:	46c0      	nop			; (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b004      	add	sp, #16
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	00000a0d 	.word	0x00000a0d

08002ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b097      	sub	sp, #92	; 0x5c
 8002ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ab6:	2428      	movs	r4, #40	; 0x28
 8002ab8:	193b      	adds	r3, r7, r4
 8002aba:	0018      	movs	r0, r3
 8002abc:	2330      	movs	r3, #48	; 0x30
 8002abe:	001a      	movs	r2, r3
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	f003 fd35 	bl	8006530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ac6:	2318      	movs	r3, #24
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	0018      	movs	r0, r3
 8002acc:	2310      	movs	r3, #16
 8002ace:	001a      	movs	r2, r3
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	f003 fd2d 	bl	8006530 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ad6:	1d3b      	adds	r3, r7, #4
 8002ad8:	0018      	movs	r0, r3
 8002ada:	2314      	movs	r3, #20
 8002adc:	001a      	movs	r2, r3
 8002ade:	2100      	movs	r1, #0
 8002ae0:	f003 fd26 	bl	8006530 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ae4:	0021      	movs	r1, r4
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	2202      	movs	r2, #2
 8002aea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002aec:	187b      	adds	r3, r7, r1
 8002aee:	2201      	movs	r2, #1
 8002af0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002af2:	187b      	adds	r3, r7, r1
 8002af4:	2210      	movs	r2, #16
 8002af6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	2200      	movs	r2, #0
 8002afc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	0018      	movs	r0, r3
 8002b02:	f001 fc7d 	bl	8004400 <HAL_RCC_OscConfig>
 8002b06:	1e03      	subs	r3, r0, #0
 8002b08:	d001      	beq.n	8002b0e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002b0a:	f000 ffe7 	bl	8003adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b0e:	2118      	movs	r1, #24
 8002b10:	187b      	adds	r3, r7, r1
 8002b12:	2207      	movs	r2, #7
 8002b14:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b16:	187b      	adds	r3, r7, r1
 8002b18:	2200      	movs	r2, #0
 8002b1a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b22:	187b      	adds	r3, r7, r1
 8002b24:	2200      	movs	r2, #0
 8002b26:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b28:	187b      	adds	r3, r7, r1
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f001 ff81 	bl	8004a34 <HAL_RCC_ClockConfig>
 8002b32:	1e03      	subs	r3, r0, #0
 8002b34:	d001      	beq.n	8002b3a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002b36:	f000 ffd1 	bl	8003adc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002b40:	1d3b      	adds	r3, r7, #4
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b46:	1d3b      	adds	r3, r7, #4
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f002 f8c5 	bl	8004cd8 <HAL_RCCEx_PeriphCLKConfig>
 8002b4e:	1e03      	subs	r3, r0, #0
 8002b50:	d001      	beq.n	8002b56 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002b52:	f000 ffc3 	bl	8003adc <Error_Handler>
  }
}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b017      	add	sp, #92	; 0x5c
 8002b5c:	bd90      	pop	{r4, r7, pc}
	...

08002b60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002b66:	4a1c      	ldr	r2, [pc, #112]	; (8002bd8 <MX_SPI1_Init+0x78>)
 8002b68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002b6c:	2282      	movs	r2, #130	; 0x82
 8002b6e:	0052      	lsls	r2, r2, #1
 8002b70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b72:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002b78:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002b7a:	22c0      	movs	r2, #192	; 0xc0
 8002b7c:	0092      	lsls	r2, r2, #2
 8002b7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b80:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002b8e:	2280      	movs	r2, #128	; 0x80
 8002b90:	0092      	lsls	r2, r2, #2
 8002b92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002bac:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002bae:	2207      	movs	r2, #7
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002bba:	2208      	movs	r2, #8
 8002bbc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bbe:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f002 f967 	bl	8004e94 <HAL_SPI_Init>
 8002bc6:	1e03      	subs	r3, r0, #0
 8002bc8:	d001      	beq.n	8002bce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002bca:	f000 ff87 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	200001fc 	.word	0x200001fc
 8002bd8:	40013000 	.word	0x40013000

08002bdc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002be0:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <MX_USART1_UART_Init+0x5c>)
 8002be2:	4a16      	ldr	r2, [pc, #88]	; (8002c3c <MX_USART1_UART_Init+0x60>)
 8002be4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002be6:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <MX_USART1_UART_Init+0x5c>)
 8002be8:	2296      	movs	r2, #150	; 0x96
 8002bea:	0192      	lsls	r2, r2, #6
 8002bec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bee:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <MX_USART1_UART_Init+0x5c>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bf4:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <MX_USART1_UART_Init+0x5c>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <MX_USART1_UART_Init+0x5c>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c00:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <MX_USART1_UART_Init+0x5c>)
 8002c02:	220c      	movs	r2, #12
 8002c04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <MX_USART1_UART_Init+0x5c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <MX_USART1_UART_Init+0x5c>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <MX_USART1_UART_Init+0x5c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c18:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <MX_USART1_UART_Init+0x5c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <MX_USART1_UART_Init+0x5c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	2100      	movs	r1, #0
 8002c24:	0018      	movs	r0, r3
 8002c26:	f003 f837 	bl	8005c98 <HAL_MultiProcessor_Init>
 8002c2a:	1e03      	subs	r3, r0, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8002c2e:	f000 ff55 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000260 	.word	0x20000260
 8002c3c:	40013800 	.word	0x40013800

08002c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c40:	b590      	push	{r4, r7, lr}
 8002c42:	b089      	sub	sp, #36	; 0x24
 8002c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c46:	240c      	movs	r4, #12
 8002c48:	193b      	adds	r3, r7, r4
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	2314      	movs	r3, #20
 8002c4e:	001a      	movs	r2, r3
 8002c50:	2100      	movs	r1, #0
 8002c52:	f003 fc6d 	bl	8006530 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c56:	4b23      	ldr	r3, [pc, #140]	; (8002ce4 <MX_GPIO_Init+0xa4>)
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <MX_GPIO_Init+0xa4>)
 8002c5c:	2180      	movs	r1, #128	; 0x80
 8002c5e:	0309      	lsls	r1, r1, #12
 8002c60:	430a      	orrs	r2, r1
 8002c62:	615a      	str	r2, [r3, #20]
 8002c64:	4b1f      	ldr	r3, [pc, #124]	; (8002ce4 <MX_GPIO_Init+0xa4>)
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	031b      	lsls	r3, r3, #12
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c72:	4b1c      	ldr	r3, [pc, #112]	; (8002ce4 <MX_GPIO_Init+0xa4>)
 8002c74:	695a      	ldr	r2, [r3, #20]
 8002c76:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <MX_GPIO_Init+0xa4>)
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	03c9      	lsls	r1, r1, #15
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	615a      	str	r2, [r3, #20]
 8002c80:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <MX_GPIO_Init+0xa4>)
 8002c82:	695a      	ldr	r2, [r3, #20]
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	03db      	lsls	r3, r3, #15
 8002c88:	4013      	ands	r3, r2
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8e:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <MX_GPIO_Init+0xa4>)
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <MX_GPIO_Init+0xa4>)
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	0289      	lsls	r1, r1, #10
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	615a      	str	r2, [r3, #20]
 8002c9c:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <MX_GPIO_Init+0xa4>)
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	029b      	lsls	r3, r3, #10
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002caa:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <MX_GPIO_Init+0xa8>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	2180      	movs	r1, #128	; 0x80
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f001 fb87 	bl	80043c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cb6:	0021      	movs	r1, r4
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cbe:	187b      	adds	r3, r7, r1
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	187b      	adds	r3, r7, r1
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	187b      	adds	r3, r7, r1
 8002ccc:	2200      	movs	r2, #0
 8002cce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd0:	187b      	adds	r3, r7, r1
 8002cd2:	4a05      	ldr	r2, [pc, #20]	; (8002ce8 <MX_GPIO_Init+0xa8>)
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	0010      	movs	r0, r2
 8002cd8:	f001 fa04 	bl	80040e4 <HAL_GPIO_Init>

}
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b009      	add	sp, #36	; 0x24
 8002ce2:	bd90      	pop	{r4, r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	48000800 	.word	0x48000800

08002cec <icm20948_init>:
/* ICM20948 Functions-----------------------------------------------*/

void icm20948_init()
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	f000 f937 	bl	8002f64 <icm20948_who_am_i>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	001a      	movs	r2, r3
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	4053      	eors	r3, r2
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f6      	bne.n	8002cf2 <icm20948_init+0x6>

	icm20948_device_reset();
 8002d04:	f000 f962 	bl	8002fcc <icm20948_device_reset>
	icm20948_wakeup();
 8002d08:	f000 f979 	bl	8002ffe <icm20948_wakeup>

	icm20948_clock_source(1);
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	f000 fa09 	bl	8003124 <icm20948_clock_source>
	icm20948_odr_align_enable();
 8002d12:	f000 fa28 	bl	8003166 <icm20948_odr_align_enable>

	icm20948_spi_slave_enable();
 8002d16:	f000 f990 	bl	800303a <icm20948_spi_slave_enable>

	icm20948_gyro_low_pass_filter(0);
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f000 fa2d 	bl	800317a <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8002d20:	2000      	movs	r0, #0
 8002d22:	f000 fa4e 	bl	80031c2 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8002d26:	2000      	movs	r0, #0
 8002d28:	f000 fa6f 	bl	800320a <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f000 fa7d 	bl	800322c <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8002d32:	f000 fab5 	bl	80032a0 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8002d36:	f000 fb79 	bl	800342c <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8002d3a:	2003      	movs	r0, #3
 8002d3c:	f000 fcca 	bl	80036d4 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8002d40:	2003      	movs	r0, #3
 8002d42:	f000 fd23 	bl	800378c <icm20948_accel_full_scale_select>
}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <ak09916_init>:

void ak09916_init()
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8002d50:	f000 f98e 	bl	8003070 <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8002d54:	f000 f9a7 	bl	80030a6 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8002d58:	2007      	movs	r0, #7
 8002d5a:	f000 f9c2 	bl	80030e2 <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	f000 f920 	bl	8002fa4 <ak09916_who_am_i>
 8002d64:	0003      	movs	r3, r0
 8002d66:	001a      	movs	r2, r3
 8002d68:	2301      	movs	r3, #1
 8002d6a:	4053      	eors	r3, r2
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f6      	bne.n	8002d60 <ak09916_init+0x14>

	ak09916_soft_reset();
 8002d72:	f000 f938 	bl	8002fe6 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8002d76:	2008      	movs	r0, #8
 8002d78:	f000 fa7f 	bl	800327a <ak09916_operation_mode_setting>
}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8002d8a:	2206      	movs	r2, #6
 8002d8c:	2133      	movs	r1, #51	; 0x33
 8002d8e:	2000      	movs	r0, #0
 8002d90:	f000 fdee 	bl	8003970 <read_multiple_icm20948_reg>
 8002d94:	0003      	movs	r3, r0
 8002d96:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	b21a      	sxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	3301      	adds	r3, #1
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	b21b      	sxth	r3, r3
 8002da8:	4313      	orrs	r3, r2
 8002daa:	b21b      	sxth	r3, r3
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7fd fec1 	bl	8000b34 <__aeabi_i2f>
 8002db2:	1c02      	adds	r2, r0, #0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3302      	adds	r3, #2
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	b21a      	sxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3303      	adds	r3, #3
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b21b      	sxth	r3, r3
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	b21b      	sxth	r3, r3
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f7fd feb0 	bl	8000b34 <__aeabi_i2f>
 8002dd4:	1c02      	adds	r2, r0, #0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	b21a      	sxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	3305      	adds	r3, #5
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b21b      	sxth	r3, r3
 8002dec:	4313      	orrs	r3, r2
 8002dee:	b21b      	sxth	r3, r3
 8002df0:	0018      	movs	r0, r3
 8002df2:	f7fd fe9f 	bl	8000b34 <__aeabi_i2f>
 8002df6:	1c02      	adds	r2, r0, #0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b004      	add	sp, #16
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8002e0c:	2206      	movs	r2, #6
 8002e0e:	212d      	movs	r1, #45	; 0x2d
 8002e10:	2000      	movs	r0, #0
 8002e12:	f000 fdad 	bl	8003970 <read_multiple_icm20948_reg>
 8002e16:	0003      	movs	r3, r0
 8002e18:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	b21a      	sxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	3301      	adds	r3, #1
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	b21b      	sxth	r3, r3
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	b21b      	sxth	r3, r3
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f7fd fe80 	bl	8000b34 <__aeabi_i2f>
 8002e34:	1c02      	adds	r2, r0, #0
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	b21a      	sxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	3303      	adds	r3, #3
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	b21b      	sxth	r3, r3
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	b21b      	sxth	r3, r3
 8002e50:	0018      	movs	r0, r3
 8002e52:	f7fd fe6f 	bl	8000b34 <__aeabi_i2f>
 8002e56:	1c02      	adds	r2, r0, #0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3304      	adds	r3, #4
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	b21a      	sxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3305      	adds	r3, #5
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	b21b      	sxth	r3, r3
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	b21b      	sxth	r3, r3
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7fd fe5e 	bl	8000b34 <__aeabi_i2f>
 8002e78:	1c02      	adds	r2, r0, #0
 8002e7a:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <icm20948_accel_read+0x94>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	1c19      	adds	r1, r3, #0
 8002e80:	1c10      	adds	r0, r2, #0
 8002e82:	f7fd fb81 	bl	8000588 <__aeabi_fadd>
 8002e86:	1c03      	adds	r3, r0, #0
 8002e88:	1c1a      	adds	r2, r3, #0
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b004      	add	sp, #16
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	200002e8 	.word	0x200002e8

08002e9c <icm20948_gyro_read_dps>:

	return true;
}

void icm20948_gyro_read_dps(axises* data)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
	icm20948_gyro_read(data);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f7ff ff6b 	bl	8002d82 <icm20948_gyro_read>

	data->x /= gyro_scale_factor;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <icm20948_gyro_read_dps+0x60>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	1c19      	adds	r1, r3, #0
 8002eb6:	1c10      	adds	r0, r2, #0
 8002eb8:	f7fd fd04 	bl	80008c4 <__aeabi_fdiv>
 8002ebc:	1c03      	adds	r3, r0, #0
 8002ebe:	1c1a      	adds	r2, r3, #0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	601a      	str	r2, [r3, #0]
	data->y /= gyro_scale_factor;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <icm20948_gyro_read_dps+0x60>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	1c19      	adds	r1, r3, #0
 8002ece:	1c10      	adds	r0, r2, #0
 8002ed0:	f7fd fcf8 	bl	80008c4 <__aeabi_fdiv>
 8002ed4:	1c03      	adds	r3, r0, #0
 8002ed6:	1c1a      	adds	r2, r3, #0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	605a      	str	r2, [r3, #4]
	data->z /= gyro_scale_factor;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <icm20948_gyro_read_dps+0x60>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	1c19      	adds	r1, r3, #0
 8002ee6:	1c10      	adds	r0, r2, #0
 8002ee8:	f7fd fcec 	bl	80008c4 <__aeabi_fdiv>
 8002eec:	1c03      	adds	r3, r0, #0
 8002eee:	1c1a      	adds	r2, r3, #0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
}
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b002      	add	sp, #8
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	200002e4 	.word	0x200002e4

08002f00 <icm20948_accel_read_g>:

void icm20948_accel_read_g(axises* data)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	icm20948_accel_read(data);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7ff ff7a 	bl	8002e04 <icm20948_accel_read>

	data->x /= accel_scale_factor;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <icm20948_accel_read_g+0x60>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	1c19      	adds	r1, r3, #0
 8002f1a:	1c10      	adds	r0, r2, #0
 8002f1c:	f7fd fcd2 	bl	80008c4 <__aeabi_fdiv>
 8002f20:	1c03      	adds	r3, r0, #0
 8002f22:	1c1a      	adds	r2, r3, #0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	601a      	str	r2, [r3, #0]
	data->y /= accel_scale_factor;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <icm20948_accel_read_g+0x60>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	1c19      	adds	r1, r3, #0
 8002f32:	1c10      	adds	r0, r2, #0
 8002f34:	f7fd fcc6 	bl	80008c4 <__aeabi_fdiv>
 8002f38:	1c03      	adds	r3, r0, #0
 8002f3a:	1c1a      	adds	r2, r3, #0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	605a      	str	r2, [r3, #4]
	data->z /= accel_scale_factor;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <icm20948_accel_read_g+0x60>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	1c19      	adds	r1, r3, #0
 8002f4a:	1c10      	adds	r0, r2, #0
 8002f4c:	f7fd fcba 	bl	80008c4 <__aeabi_fdiv>
 8002f50:	1c03      	adds	r3, r0, #0
 8002f52:	1c1a      	adds	r2, r3, #0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	609a      	str	r2, [r3, #8]
}
 8002f58:	46c0      	nop			; (mov r8, r8)
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b002      	add	sp, #8
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	200002e8 	.word	0x200002e8

08002f64 <icm20948_who_am_i>:
}


/* Sub Functions */
bool icm20948_who_am_i()
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8002f6a:	1dfc      	adds	r4, r7, #7
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f000 fc9e 	bl	80038b0 <read_single_icm20948_reg>
 8002f74:	0003      	movs	r3, r0
 8002f76:	7023      	strb	r3, [r4, #0]

	if(icm20948_id == ICM20948_ID)
 8002f78:	1dfb      	adds	r3, r7, #7
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2bea      	cmp	r3, #234	; 0xea
 8002f7e:	d101      	bne.n	8002f84 <icm20948_who_am_i+0x20>
		return true;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e006      	b.n	8002f92 <icm20948_who_am_i+0x2e>
	else
		debugPrintln(&huart1,"Hello");
 8002f84:	4a05      	ldr	r2, [pc, #20]	; (8002f9c <icm20948_who_am_i+0x38>)
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <icm20948_who_am_i+0x3c>)
 8002f88:	0011      	movs	r1, r2
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f7ff fd70 	bl	8002a70 <debugPrintln>
		return false;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	0018      	movs	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b003      	add	sp, #12
 8002f98:	bd90      	pop	{r4, r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	0800afec 	.word	0x0800afec
 8002fa0:	20000260 	.word	0x20000260

08002fa4 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8002fa4:	b590      	push	{r4, r7, lr}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8002faa:	1dfc      	adds	r4, r7, #7
 8002fac:	2001      	movs	r0, #1
 8002fae:	f000 fd4d 	bl	8003a4c <read_single_ak09916_reg>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	7023      	strb	r3, [r4, #0]

	if(ak09916_id == AK09916_ID)
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b09      	cmp	r3, #9
 8002fbc:	d101      	bne.n	8002fc2 <ak09916_who_am_i+0x1e>
		return true;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <ak09916_who_am_i+0x20>
	else
		return false;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b003      	add	sp, #12
 8002fca:	bd90      	pop	{r4, r7, pc}

08002fcc <icm20948_device_reset>:

void icm20948_device_reset()
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8002fd0:	22c1      	movs	r2, #193	; 0xc1
 8002fd2:	2106      	movs	r1, #6
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f000 fc9d 	bl	8003914 <write_single_icm20948_reg>
	HAL_Delay(100);
 8002fda:	2064      	movs	r0, #100	; 0x64
 8002fdc:	f000 ffaa 	bl	8003f34 <HAL_Delay>
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8002fea:	2101      	movs	r1, #1
 8002fec:	2032      	movs	r0, #50	; 0x32
 8002fee:	f000 fd50 	bl	8003a92 <write_single_ak09916_reg>
	HAL_Delay(100);
 8002ff2:	2064      	movs	r0, #100	; 0x64
 8002ff4:	f000 ff9e 	bl	8003f34 <HAL_Delay>
}
 8002ff8:	46c0      	nop			; (mov r8, r8)
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <icm20948_wakeup>:

void icm20948_wakeup()
{
 8002ffe:	b590      	push	{r4, r7, lr}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8003004:	1dfc      	adds	r4, r7, #7
 8003006:	2106      	movs	r1, #6
 8003008:	2000      	movs	r0, #0
 800300a:	f000 fc51 	bl	80038b0 <read_single_icm20948_reg>
 800300e:	0003      	movs	r3, r0
 8003010:	7023      	strb	r3, [r4, #0]
	new_val &= 0xBF;
 8003012:	1dfb      	adds	r3, r7, #7
 8003014:	1dfa      	adds	r2, r7, #7
 8003016:	7812      	ldrb	r2, [r2, #0]
 8003018:	2140      	movs	r1, #64	; 0x40
 800301a:	438a      	bics	r2, r1
 800301c:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 800301e:	1dfb      	adds	r3, r7, #7
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	001a      	movs	r2, r3
 8003024:	2106      	movs	r1, #6
 8003026:	2000      	movs	r0, #0
 8003028:	f000 fc74 	bl	8003914 <write_single_icm20948_reg>
	HAL_Delay(100);
 800302c:	2064      	movs	r0, #100	; 0x64
 800302e:	f000 ff81 	bl	8003f34 <HAL_Delay>
}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	46bd      	mov	sp, r7
 8003036:	b003      	add	sp, #12
 8003038:	bd90      	pop	{r4, r7, pc}

0800303a <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 800303a:	b590      	push	{r4, r7, lr}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8003040:	1dfc      	adds	r4, r7, #7
 8003042:	2103      	movs	r1, #3
 8003044:	2000      	movs	r0, #0
 8003046:	f000 fc33 	bl	80038b0 <read_single_icm20948_reg>
 800304a:	0003      	movs	r3, r0
 800304c:	7023      	strb	r3, [r4, #0]
	new_val |= 0x10;
 800304e:	1dfb      	adds	r3, r7, #7
 8003050:	1dfa      	adds	r2, r7, #7
 8003052:	7812      	ldrb	r2, [r2, #0]
 8003054:	2110      	movs	r1, #16
 8003056:	430a      	orrs	r2, r1
 8003058:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 800305a:	1dfb      	adds	r3, r7, #7
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	001a      	movs	r2, r3
 8003060:	2103      	movs	r1, #3
 8003062:	2000      	movs	r0, #0
 8003064:	f000 fc56 	bl	8003914 <write_single_icm20948_reg>
}
 8003068:	46c0      	nop			; (mov r8, r8)
 800306a:	46bd      	mov	sp, r7
 800306c:	b003      	add	sp, #12
 800306e:	bd90      	pop	{r4, r7, pc}

08003070 <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8003076:	1dfc      	adds	r4, r7, #7
 8003078:	2103      	movs	r1, #3
 800307a:	2000      	movs	r0, #0
 800307c:	f000 fc18 	bl	80038b0 <read_single_icm20948_reg>
 8003080:	0003      	movs	r3, r0
 8003082:	7023      	strb	r3, [r4, #0]
	new_val |= 0x02;
 8003084:	1dfb      	adds	r3, r7, #7
 8003086:	1dfa      	adds	r2, r7, #7
 8003088:	7812      	ldrb	r2, [r2, #0]
 800308a:	2102      	movs	r1, #2
 800308c:	430a      	orrs	r2, r1
 800308e:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8003090:	1dfb      	adds	r3, r7, #7
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	001a      	movs	r2, r3
 8003096:	2103      	movs	r1, #3
 8003098:	2000      	movs	r0, #0
 800309a:	f000 fc3b 	bl	8003914 <write_single_icm20948_reg>
}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b003      	add	sp, #12
 80030a4:	bd90      	pop	{r4, r7, pc}

080030a6 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 80030a6:	b590      	push	{r4, r7, lr}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 80030ac:	1dfc      	adds	r4, r7, #7
 80030ae:	2103      	movs	r1, #3
 80030b0:	2000      	movs	r0, #0
 80030b2:	f000 fbfd 	bl	80038b0 <read_single_icm20948_reg>
 80030b6:	0003      	movs	r3, r0
 80030b8:	7023      	strb	r3, [r4, #0]
	new_val |= 0x20;
 80030ba:	1dfb      	adds	r3, r7, #7
 80030bc:	1dfa      	adds	r2, r7, #7
 80030be:	7812      	ldrb	r2, [r2, #0]
 80030c0:	2120      	movs	r1, #32
 80030c2:	430a      	orrs	r2, r1
 80030c4:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 80030c6:	1dfb      	adds	r3, r7, #7
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	001a      	movs	r2, r3
 80030cc:	2103      	movs	r1, #3
 80030ce:	2000      	movs	r0, #0
 80030d0:	f000 fc20 	bl	8003914 <write_single_icm20948_reg>
	HAL_Delay(100);
 80030d4:	2064      	movs	r0, #100	; 0x64
 80030d6:	f000 ff2d 	bl	8003f34 <HAL_Delay>
}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	46bd      	mov	sp, r7
 80030de:	b003      	add	sp, #12
 80030e0:	bd90      	pop	{r4, r7, pc}

080030e2 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 80030e2:	b5b0      	push	{r4, r5, r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	0002      	movs	r2, r0
 80030ea:	1dfb      	adds	r3, r7, #7
 80030ec:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 80030ee:	250f      	movs	r5, #15
 80030f0:	197c      	adds	r4, r7, r5
 80030f2:	2101      	movs	r1, #1
 80030f4:	2030      	movs	r0, #48	; 0x30
 80030f6:	f000 fbdb 	bl	80038b0 <read_single_icm20948_reg>
 80030fa:	0003      	movs	r3, r0
 80030fc:	7023      	strb	r3, [r4, #0]
	new_val |= config;
 80030fe:	0028      	movs	r0, r5
 8003100:	183b      	adds	r3, r7, r0
 8003102:	1839      	adds	r1, r7, r0
 8003104:	1dfa      	adds	r2, r7, #7
 8003106:	7809      	ldrb	r1, [r1, #0]
 8003108:	7812      	ldrb	r2, [r2, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);
 800310e:	183b      	adds	r3, r7, r0
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	001a      	movs	r2, r3
 8003114:	2101      	movs	r1, #1
 8003116:	2030      	movs	r0, #48	; 0x30
 8003118:	f000 fbfc 	bl	8003914 <write_single_icm20948_reg>
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b004      	add	sp, #16
 8003122:	bdb0      	pop	{r4, r5, r7, pc}

08003124 <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8003124:	b5b0      	push	{r4, r5, r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	0002      	movs	r2, r0
 800312c:	1dfb      	adds	r3, r7, #7
 800312e:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8003130:	250f      	movs	r5, #15
 8003132:	197c      	adds	r4, r7, r5
 8003134:	2106      	movs	r1, #6
 8003136:	2000      	movs	r0, #0
 8003138:	f000 fbba 	bl	80038b0 <read_single_icm20948_reg>
 800313c:	0003      	movs	r3, r0
 800313e:	7023      	strb	r3, [r4, #0]
	new_val |= source;
 8003140:	0028      	movs	r0, r5
 8003142:	183b      	adds	r3, r7, r0
 8003144:	1839      	adds	r1, r7, r0
 8003146:	1dfa      	adds	r2, r7, #7
 8003148:	7809      	ldrb	r1, [r1, #0]
 800314a:	7812      	ldrb	r2, [r2, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8003150:	183b      	adds	r3, r7, r0
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	001a      	movs	r2, r3
 8003156:	2106      	movs	r1, #6
 8003158:	2000      	movs	r0, #0
 800315a:	f000 fbdb 	bl	8003914 <write_single_icm20948_reg>
}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	46bd      	mov	sp, r7
 8003162:	b004      	add	sp, #16
 8003164:	bdb0      	pop	{r4, r5, r7, pc}

08003166 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8003166:	b580      	push	{r7, lr}
 8003168:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 800316a:	2201      	movs	r2, #1
 800316c:	2109      	movs	r1, #9
 800316e:	2020      	movs	r0, #32
 8003170:	f000 fbd0 	bl	8003914 <write_single_icm20948_reg>
}
 8003174:	46c0      	nop			; (mov r8, r8)
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 800317a:	b5b0      	push	{r4, r5, r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	0002      	movs	r2, r0
 8003182:	1dfb      	adds	r3, r7, #7
 8003184:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8003186:	250f      	movs	r5, #15
 8003188:	197c      	adds	r4, r7, r5
 800318a:	2101      	movs	r1, #1
 800318c:	2020      	movs	r0, #32
 800318e:	f000 fb8f 	bl	80038b0 <read_single_icm20948_reg>
 8003192:	0003      	movs	r3, r0
 8003194:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 8003196:	1dfb      	adds	r3, r7, #7
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	b25a      	sxtb	r2, r3
 800319e:	197b      	adds	r3, r7, r5
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	b25b      	sxtb	r3, r3
 80031a4:	4313      	orrs	r3, r2
 80031a6:	b25a      	sxtb	r2, r3
 80031a8:	197b      	adds	r3, r7, r5
 80031aa:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80031ac:	197b      	adds	r3, r7, r5
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	001a      	movs	r2, r3
 80031b2:	2101      	movs	r1, #1
 80031b4:	2020      	movs	r0, #32
 80031b6:	f000 fbad 	bl	8003914 <write_single_icm20948_reg>
}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	46bd      	mov	sp, r7
 80031be:	b004      	add	sp, #16
 80031c0:	bdb0      	pop	{r4, r5, r7, pc}

080031c2 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 80031c2:	b5b0      	push	{r4, r5, r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	0002      	movs	r2, r0
 80031ca:	1dfb      	adds	r3, r7, #7
 80031cc:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80031ce:	250f      	movs	r5, #15
 80031d0:	197c      	adds	r4, r7, r5
 80031d2:	2114      	movs	r1, #20
 80031d4:	2020      	movs	r0, #32
 80031d6:	f000 fb6b 	bl	80038b0 <read_single_icm20948_reg>
 80031da:	0003      	movs	r3, r0
 80031dc:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 80031de:	1dfb      	adds	r3, r7, #7
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	b25a      	sxtb	r2, r3
 80031e6:	197b      	adds	r3, r7, r5
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	b25b      	sxtb	r3, r3
 80031ec:	4313      	orrs	r3, r2
 80031ee:	b25a      	sxtb	r2, r3
 80031f0:	197b      	adds	r3, r7, r5
 80031f2:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80031f4:	197b      	adds	r3, r7, r5
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	001a      	movs	r2, r3
 80031fa:	2101      	movs	r1, #1
 80031fc:	2020      	movs	r0, #32
 80031fe:	f000 fb89 	bl	8003914 <write_single_icm20948_reg>
}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	46bd      	mov	sp, r7
 8003206:	b004      	add	sp, #16
 8003208:	bdb0      	pop	{r4, r5, r7, pc}

0800320a <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	0002      	movs	r2, r0
 8003212:	1dfb      	adds	r3, r7, #7
 8003214:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8003216:	1dfb      	adds	r3, r7, #7
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	001a      	movs	r2, r3
 800321c:	2100      	movs	r1, #0
 800321e:	2020      	movs	r0, #32
 8003220:	f000 fb78 	bl	8003914 <write_single_icm20948_reg>
}
 8003224:	46c0      	nop			; (mov r8, r8)
 8003226:	46bd      	mov	sp, r7
 8003228:	b002      	add	sp, #8
 800322a:	bd80      	pop	{r7, pc}

0800322c <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	0002      	movs	r2, r0
 8003234:	1dbb      	adds	r3, r7, #6
 8003236:	801a      	strh	r2, [r3, #0]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8003238:	1dbb      	adds	r3, r7, #6
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	0a1b      	lsrs	r3, r3, #8
 800323e:	b29a      	uxth	r2, r3
 8003240:	200f      	movs	r0, #15
 8003242:	183b      	adds	r3, r7, r0
 8003244:	701a      	strb	r2, [r3, #0]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8003246:	1dbb      	adds	r3, r7, #6
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	b2da      	uxtb	r2, r3
 800324c:	240e      	movs	r4, #14
 800324e:	193b      	adds	r3, r7, r4
 8003250:	210f      	movs	r1, #15
 8003252:	400a      	ands	r2, r1
 8003254:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8003256:	183b      	adds	r3, r7, r0
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	001a      	movs	r2, r3
 800325c:	2110      	movs	r1, #16
 800325e:	2020      	movs	r0, #32
 8003260:	f000 fb58 	bl	8003914 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8003264:	193b      	adds	r3, r7, r4
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	001a      	movs	r2, r3
 800326a:	2111      	movs	r1, #17
 800326c:	2020      	movs	r0, #32
 800326e:	f000 fb51 	bl	8003914 <write_single_icm20948_reg>
}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	46bd      	mov	sp, r7
 8003276:	b005      	add	sp, #20
 8003278:	bd90      	pop	{r4, r7, pc}

0800327a <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	0002      	movs	r2, r0
 8003282:	1dfb      	adds	r3, r7, #7
 8003284:	701a      	strb	r2, [r3, #0]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8003286:	1dfb      	adds	r3, r7, #7
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	0019      	movs	r1, r3
 800328c:	2031      	movs	r0, #49	; 0x31
 800328e:	f000 fc00 	bl	8003a92 <write_single_ak09916_reg>
	HAL_Delay(100);
 8003292:	2064      	movs	r0, #100	; 0x64
 8003294:	f000 fe4e 	bl	8003f34 <HAL_Delay>
}
 8003298:	46c0      	nop			; (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	b002      	add	sp, #8
 800329e:	bd80      	pop	{r7, pc}

080032a0 <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 80032a0:	b5b0      	push	{r4, r5, r7, lr}
 80032a2:	b08a      	sub	sp, #40	; 0x28
 80032a4:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 80032a6:	230c      	movs	r3, #12
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	0018      	movs	r0, r3
 80032ac:	230c      	movs	r3, #12
 80032ae:	001a      	movs	r2, r3
 80032b0:	2100      	movs	r1, #0
 80032b2:	f003 f93d 	bl	8006530 <memset>
	uint8_t gyro_offset[6] = {0};
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	2200      	movs	r2, #0
 80032be:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 80032c0:	2300      	movs	r3, #0
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
 80032c4:	e041      	b.n	800334a <icm20948_gyro_calibration+0xaa>
	{
		icm20948_gyro_read(&temp);
 80032c6:	2518      	movs	r5, #24
 80032c8:	197b      	adds	r3, r7, r5
 80032ca:	0018      	movs	r0, r3
 80032cc:	f7ff fd59 	bl	8002d82 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 80032d0:	240c      	movs	r4, #12
 80032d2:	193b      	adds	r3, r7, r4
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	0018      	movs	r0, r3
 80032d8:	f7fd fc2c 	bl	8000b34 <__aeabi_i2f>
 80032dc:	1c02      	adds	r2, r0, #0
 80032de:	197b      	adds	r3, r7, r5
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	1c19      	adds	r1, r3, #0
 80032e4:	1c10      	adds	r0, r2, #0
 80032e6:	f7fd f94f 	bl	8000588 <__aeabi_fadd>
 80032ea:	1c03      	adds	r3, r0, #0
 80032ec:	1c18      	adds	r0, r3, #0
 80032ee:	f7fd fc01 	bl	8000af4 <__aeabi_f2iz>
 80032f2:	0002      	movs	r2, r0
 80032f4:	193b      	adds	r3, r7, r4
 80032f6:	601a      	str	r2, [r3, #0]
		gyro_bias[1] += temp.y;
 80032f8:	193b      	adds	r3, r7, r4
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	0018      	movs	r0, r3
 80032fe:	f7fd fc19 	bl	8000b34 <__aeabi_i2f>
 8003302:	1c02      	adds	r2, r0, #0
 8003304:	197b      	adds	r3, r7, r5
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	1c19      	adds	r1, r3, #0
 800330a:	1c10      	adds	r0, r2, #0
 800330c:	f7fd f93c 	bl	8000588 <__aeabi_fadd>
 8003310:	1c03      	adds	r3, r0, #0
 8003312:	1c18      	adds	r0, r3, #0
 8003314:	f7fd fbee 	bl	8000af4 <__aeabi_f2iz>
 8003318:	0002      	movs	r2, r0
 800331a:	193b      	adds	r3, r7, r4
 800331c:	605a      	str	r2, [r3, #4]
		gyro_bias[2] += temp.z;
 800331e:	193b      	adds	r3, r7, r4
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	0018      	movs	r0, r3
 8003324:	f7fd fc06 	bl	8000b34 <__aeabi_i2f>
 8003328:	1c02      	adds	r2, r0, #0
 800332a:	197b      	adds	r3, r7, r5
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	1c19      	adds	r1, r3, #0
 8003330:	1c10      	adds	r0, r2, #0
 8003332:	f7fd f929 	bl	8000588 <__aeabi_fadd>
 8003336:	1c03      	adds	r3, r0, #0
 8003338:	1c18      	adds	r0, r3, #0
 800333a:	f7fd fbdb 	bl	8000af4 <__aeabi_f2iz>
 800333e:	0002      	movs	r2, r0
 8003340:	193b      	adds	r3, r7, r4
 8003342:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	3301      	adds	r3, #1
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	2b63      	cmp	r3, #99	; 0x63
 800334e:	ddba      	ble.n	80032c6 <icm20948_gyro_calibration+0x26>
	}

	gyro_bias[0] /= 100;
 8003350:	240c      	movs	r4, #12
 8003352:	193b      	adds	r3, r7, r4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2164      	movs	r1, #100	; 0x64
 8003358:	0018      	movs	r0, r3
 800335a:	f7fc ff7b 	bl	8000254 <__divsi3>
 800335e:	0003      	movs	r3, r0
 8003360:	001a      	movs	r2, r3
 8003362:	193b      	adds	r3, r7, r4
 8003364:	601a      	str	r2, [r3, #0]
	gyro_bias[1] /= 100;
 8003366:	193b      	adds	r3, r7, r4
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2164      	movs	r1, #100	; 0x64
 800336c:	0018      	movs	r0, r3
 800336e:	f7fc ff71 	bl	8000254 <__divsi3>
 8003372:	0003      	movs	r3, r0
 8003374:	001a      	movs	r2, r3
 8003376:	193b      	adds	r3, r7, r4
 8003378:	605a      	str	r2, [r3, #4]
	gyro_bias[2] /= 100;
 800337a:	193b      	adds	r3, r7, r4
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2164      	movs	r1, #100	; 0x64
 8003380:	0018      	movs	r0, r3
 8003382:	f7fc ff67 	bl	8000254 <__divsi3>
 8003386:	0003      	movs	r3, r0
 8003388:	001a      	movs	r2, r3
 800338a:	193b      	adds	r3, r7, r4
 800338c:	609a      	str	r2, [r3, #8]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF;
 800338e:	193b      	adds	r3, r7, r4
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	425b      	negs	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	da00      	bge.n	800339a <icm20948_gyro_calibration+0xfa>
 8003398:	3303      	adds	r3, #3
 800339a:	109b      	asrs	r3, r3, #2
 800339c:	121b      	asrs	r3, r3, #8
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	1d3b      	adds	r3, r7, #4
 80033a2:	701a      	strb	r2, [r3, #0]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF;
 80033a4:	230c      	movs	r3, #12
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	425b      	negs	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	da00      	bge.n	80033b2 <icm20948_gyro_calibration+0x112>
 80033b0:	3303      	adds	r3, #3
 80033b2:	109b      	asrs	r3, r3, #2
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	1d3b      	adds	r3, r7, #4
 80033b8:	705a      	strb	r2, [r3, #1]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 80033ba:	230c      	movs	r3, #12
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	425b      	negs	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	da00      	bge.n	80033c8 <icm20948_gyro_calibration+0x128>
 80033c6:	3303      	adds	r3, #3
 80033c8:	109b      	asrs	r3, r3, #2
 80033ca:	121b      	asrs	r3, r3, #8
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	709a      	strb	r2, [r3, #2]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 80033d2:	230c      	movs	r3, #12
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	425b      	negs	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	da00      	bge.n	80033e0 <icm20948_gyro_calibration+0x140>
 80033de:	3303      	adds	r3, #3
 80033e0:	109b      	asrs	r3, r3, #2
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	70da      	strb	r2, [r3, #3]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 80033e8:	230c      	movs	r3, #12
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	425b      	negs	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	da00      	bge.n	80033f6 <icm20948_gyro_calibration+0x156>
 80033f4:	3303      	adds	r3, #3
 80033f6:	109b      	asrs	r3, r3, #2
 80033f8:	121b      	asrs	r3, r3, #8
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	1d3b      	adds	r3, r7, #4
 80033fe:	711a      	strb	r2, [r3, #4]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8003400:	230c      	movs	r3, #12
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	425b      	negs	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	da00      	bge.n	800340e <icm20948_gyro_calibration+0x16e>
 800340c:	3303      	adds	r3, #3
 800340e:	109b      	asrs	r3, r3, #2
 8003410:	b2da      	uxtb	r2, r3
 8003412:	1d3b      	adds	r3, r7, #4
 8003414:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8003416:	1d3a      	adds	r2, r7, #4
 8003418:	2306      	movs	r3, #6
 800341a:	2103      	movs	r1, #3
 800341c:	2020      	movs	r0, #32
 800341e:	f000 fae1 	bl	80039e4 <write_multiple_icm20948_reg>
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	46bd      	mov	sp, r7
 8003426:	b00a      	add	sp, #40	; 0x28
 8003428:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800342c <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 800342c:	b5b0      	push	{r4, r5, r7, lr}
 800342e:	b090      	sub	sp, #64	; 0x40
 8003430:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;

	int32_t accel_bias[3] = {0};
 8003432:	2318      	movs	r3, #24
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	0018      	movs	r0, r3
 8003438:	230c      	movs	r3, #12
 800343a:	001a      	movs	r2, r3
 800343c:	2100      	movs	r1, #0
 800343e:	f003 f877 	bl	8006530 <memset>
	int32_t accel_bias_reg[3] = {0};
 8003442:	230c      	movs	r3, #12
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	0018      	movs	r0, r3
 8003448:	230c      	movs	r3, #12
 800344a:	001a      	movs	r2, r3
 800344c:	2100      	movs	r1, #0
 800344e:	f003 f86f 	bl	8006530 <memset>
	uint8_t accel_offset[6] = {0};
 8003452:	1d3b      	adds	r3, r7, #4
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	2200      	movs	r2, #0
 800345a:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 800345c:	2300      	movs	r3, #0
 800345e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003460:	e041      	b.n	80034e6 <icm20948_accel_calibration+0xba>
	{
		icm20948_accel_read(&temp);
 8003462:	2524      	movs	r5, #36	; 0x24
 8003464:	197b      	adds	r3, r7, r5
 8003466:	0018      	movs	r0, r3
 8003468:	f7ff fccc 	bl	8002e04 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 800346c:	2418      	movs	r4, #24
 800346e:	193b      	adds	r3, r7, r4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	0018      	movs	r0, r3
 8003474:	f7fd fb5e 	bl	8000b34 <__aeabi_i2f>
 8003478:	1c02      	adds	r2, r0, #0
 800347a:	197b      	adds	r3, r7, r5
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	1c19      	adds	r1, r3, #0
 8003480:	1c10      	adds	r0, r2, #0
 8003482:	f7fd f881 	bl	8000588 <__aeabi_fadd>
 8003486:	1c03      	adds	r3, r0, #0
 8003488:	1c18      	adds	r0, r3, #0
 800348a:	f7fd fb33 	bl	8000af4 <__aeabi_f2iz>
 800348e:	0002      	movs	r2, r0
 8003490:	193b      	adds	r3, r7, r4
 8003492:	601a      	str	r2, [r3, #0]
		accel_bias[1] += temp.y;
 8003494:	193b      	adds	r3, r7, r4
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	0018      	movs	r0, r3
 800349a:	f7fd fb4b 	bl	8000b34 <__aeabi_i2f>
 800349e:	1c02      	adds	r2, r0, #0
 80034a0:	197b      	adds	r3, r7, r5
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	1c19      	adds	r1, r3, #0
 80034a6:	1c10      	adds	r0, r2, #0
 80034a8:	f7fd f86e 	bl	8000588 <__aeabi_fadd>
 80034ac:	1c03      	adds	r3, r0, #0
 80034ae:	1c18      	adds	r0, r3, #0
 80034b0:	f7fd fb20 	bl	8000af4 <__aeabi_f2iz>
 80034b4:	0002      	movs	r2, r0
 80034b6:	193b      	adds	r3, r7, r4
 80034b8:	605a      	str	r2, [r3, #4]
		accel_bias[2] += temp.z;
 80034ba:	193b      	adds	r3, r7, r4
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	0018      	movs	r0, r3
 80034c0:	f7fd fb38 	bl	8000b34 <__aeabi_i2f>
 80034c4:	1c02      	adds	r2, r0, #0
 80034c6:	197b      	adds	r3, r7, r5
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	1c19      	adds	r1, r3, #0
 80034cc:	1c10      	adds	r0, r2, #0
 80034ce:	f7fd f85b 	bl	8000588 <__aeabi_fadd>
 80034d2:	1c03      	adds	r3, r0, #0
 80034d4:	1c18      	adds	r0, r3, #0
 80034d6:	f7fd fb0d 	bl	8000af4 <__aeabi_f2iz>
 80034da:	0002      	movs	r2, r0
 80034dc:	193b      	adds	r3, r7, r4
 80034de:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 80034e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e2:	3301      	adds	r3, #1
 80034e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e8:	2b63      	cmp	r3, #99	; 0x63
 80034ea:	ddba      	ble.n	8003462 <icm20948_accel_calibration+0x36>
	}

	accel_bias[0] /= 100;
 80034ec:	2418      	movs	r4, #24
 80034ee:	193b      	adds	r3, r7, r4
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2164      	movs	r1, #100	; 0x64
 80034f4:	0018      	movs	r0, r3
 80034f6:	f7fc fead 	bl	8000254 <__divsi3>
 80034fa:	0003      	movs	r3, r0
 80034fc:	001a      	movs	r2, r3
 80034fe:	193b      	adds	r3, r7, r4
 8003500:	601a      	str	r2, [r3, #0]
	accel_bias[1] /= 100;
 8003502:	193b      	adds	r3, r7, r4
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2164      	movs	r1, #100	; 0x64
 8003508:	0018      	movs	r0, r3
 800350a:	f7fc fea3 	bl	8000254 <__divsi3>
 800350e:	0003      	movs	r3, r0
 8003510:	001a      	movs	r2, r3
 8003512:	193b      	adds	r3, r7, r4
 8003514:	605a      	str	r2, [r3, #4]
	accel_bias[2] /= 100;
 8003516:	193b      	adds	r3, r7, r4
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2164      	movs	r1, #100	; 0x64
 800351c:	0018      	movs	r0, r3
 800351e:	f7fc fe99 	bl	8000254 <__divsi3>
 8003522:	0003      	movs	r3, r0
 8003524:	001a      	movs	r2, r3
 8003526:	193b      	adds	r3, r7, r4
 8003528:	609a      	str	r2, [r3, #8]

	uint8_t mask_bit[3] = {0, 0, 0};
 800352a:	003b      	movs	r3, r7
 800352c:	4a68      	ldr	r2, [pc, #416]	; (80036d0 <icm20948_accel_calibration+0x2a4>)
 800352e:	8811      	ldrh	r1, [r2, #0]
 8003530:	8019      	strh	r1, [r3, #0]
 8003532:	7892      	ldrb	r2, [r2, #2]
 8003534:	709a      	strb	r2, [r3, #2]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 8003536:	2202      	movs	r2, #2
 8003538:	2114      	movs	r1, #20
 800353a:	2010      	movs	r0, #16
 800353c:	f000 fa18 	bl	8003970 <read_multiple_icm20948_reg>
 8003540:	0003      	movs	r3, r0
 8003542:	63bb      	str	r3, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8003544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800354c:	3201      	adds	r2, #1
 800354e:	7812      	ldrb	r2, [r2, #0]
 8003550:	431a      	orrs	r2, r3
 8003552:	250c      	movs	r5, #12
 8003554:	197b      	adds	r3, r7, r5
 8003556:	601a      	str	r2, [r3, #0]
	mask_bit[0] = temp2[1] & 0x01;
 8003558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355a:	3301      	adds	r3, #1
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2201      	movs	r2, #1
 8003560:	4013      	ands	r3, r2
 8003562:	b2da      	uxtb	r2, r3
 8003564:	003b      	movs	r3, r7
 8003566:	701a      	strb	r2, [r3, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8003568:	2202      	movs	r2, #2
 800356a:	2117      	movs	r1, #23
 800356c:	2010      	movs	r0, #16
 800356e:	f000 f9ff 	bl	8003970 <read_multiple_icm20948_reg>
 8003572:	0003      	movs	r3, r0
 8003574:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8003576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800357e:	3201      	adds	r2, #1
 8003580:	7812      	ldrb	r2, [r2, #0]
 8003582:	431a      	orrs	r2, r3
 8003584:	197b      	adds	r3, r7, r5
 8003586:	605a      	str	r2, [r3, #4]
	mask_bit[1] = temp3[1] & 0x01;
 8003588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358a:	3301      	adds	r3, #1
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2201      	movs	r2, #1
 8003590:	4013      	ands	r3, r2
 8003592:	b2da      	uxtb	r2, r3
 8003594:	003b      	movs	r3, r7
 8003596:	705a      	strb	r2, [r3, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8003598:	2202      	movs	r2, #2
 800359a:	211a      	movs	r1, #26
 800359c:	2010      	movs	r0, #16
 800359e:	f000 f9e7 	bl	8003970 <read_multiple_icm20948_reg>
 80035a2:	0003      	movs	r3, r0
 80035a4:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ae:	3201      	adds	r2, #1
 80035b0:	7812      	ldrb	r2, [r2, #0]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	197b      	adds	r3, r7, r5
 80035b6:	609a      	str	r2, [r3, #8]
	mask_bit[2] = temp4[1] & 0x01;
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	3301      	adds	r3, #1
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2201      	movs	r2, #1
 80035c0:	4013      	ands	r3, r2
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	003b      	movs	r3, r7
 80035c6:	709a      	strb	r2, [r3, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 80035c8:	197b      	adds	r3, r7, r5
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	193b      	adds	r3, r7, r4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	da00      	bge.n	80035d6 <icm20948_accel_calibration+0x1aa>
 80035d4:	3307      	adds	r3, #7
 80035d6:	10db      	asrs	r3, r3, #3
 80035d8:	425b      	negs	r3, r3
 80035da:	18d2      	adds	r2, r2, r3
 80035dc:	210c      	movs	r1, #12
 80035de:	187b      	adds	r3, r7, r1
 80035e0:	601a      	str	r2, [r3, #0]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 80035e2:	187b      	adds	r3, r7, r1
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	2318      	movs	r3, #24
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da00      	bge.n	80035f2 <icm20948_accel_calibration+0x1c6>
 80035f0:	3307      	adds	r3, #7
 80035f2:	10db      	asrs	r3, r3, #3
 80035f4:	425b      	negs	r3, r3
 80035f6:	18d2      	adds	r2, r2, r3
 80035f8:	210c      	movs	r1, #12
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	605a      	str	r2, [r3, #4]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 80035fe:	187b      	adds	r3, r7, r1
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	2318      	movs	r3, #24
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	da00      	bge.n	800360e <icm20948_accel_calibration+0x1e2>
 800360c:	3307      	adds	r3, #7
 800360e:	10db      	asrs	r3, r3, #3
 8003610:	425b      	negs	r3, r3
 8003612:	18d2      	adds	r2, r2, r3
 8003614:	210c      	movs	r1, #12
 8003616:	187b      	adds	r3, r7, r1
 8003618:	609a      	str	r2, [r3, #8]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800361a:	187b      	adds	r3, r7, r1
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	121b      	asrs	r3, r3, #8
 8003620:	b2da      	uxtb	r2, r3
 8003622:	1d3b      	adds	r3, r7, #4
 8003624:	701a      	strb	r2, [r3, #0]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 8003626:	187b      	adds	r3, r7, r1
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2201      	movs	r2, #1
 800362e:	4393      	bics	r3, r2
 8003630:	b2da      	uxtb	r2, r3
 8003632:	1d3b      	adds	r3, r7, #4
 8003634:	705a      	strb	r2, [r3, #1]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 8003636:	1d3b      	adds	r3, r7, #4
 8003638:	785a      	ldrb	r2, [r3, #1]
 800363a:	003b      	movs	r3, r7
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	b2da      	uxtb	r2, r3
 8003642:	1d3b      	adds	r3, r7, #4
 8003644:	705a      	strb	r2, [r3, #1]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8003646:	187b      	adds	r3, r7, r1
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	121b      	asrs	r3, r3, #8
 800364c:	b2da      	uxtb	r2, r3
 800364e:	1d3b      	adds	r3, r7, #4
 8003650:	709a      	strb	r2, [r3, #2]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 8003652:	187b      	adds	r3, r7, r1
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2201      	movs	r2, #1
 800365a:	4393      	bics	r3, r2
 800365c:	b2da      	uxtb	r2, r3
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	70da      	strb	r2, [r3, #3]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8003662:	1d3b      	adds	r3, r7, #4
 8003664:	78da      	ldrb	r2, [r3, #3]
 8003666:	003b      	movs	r3, r7
 8003668:	785b      	ldrb	r3, [r3, #1]
 800366a:	4313      	orrs	r3, r2
 800366c:	b2da      	uxtb	r2, r3
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	70da      	strb	r2, [r3, #3]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8003672:	187b      	adds	r3, r7, r1
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	121b      	asrs	r3, r3, #8
 8003678:	b2da      	uxtb	r2, r3
 800367a:	1d3b      	adds	r3, r7, #4
 800367c:	711a      	strb	r2, [r3, #4]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 800367e:	187b      	adds	r3, r7, r1
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2201      	movs	r2, #1
 8003686:	4393      	bics	r3, r2
 8003688:	b2da      	uxtb	r2, r3
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	715a      	strb	r2, [r3, #5]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	795a      	ldrb	r2, [r3, #5]
 8003692:	003b      	movs	r3, r7
 8003694:	789b      	ldrb	r3, [r3, #2]
 8003696:	4313      	orrs	r3, r2
 8003698:	b2da      	uxtb	r2, r3
 800369a:	1d3b      	adds	r3, r7, #4
 800369c:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 800369e:	1d3a      	adds	r2, r7, #4
 80036a0:	2302      	movs	r3, #2
 80036a2:	2114      	movs	r1, #20
 80036a4:	2010      	movs	r0, #16
 80036a6:	f000 f99d 	bl	80039e4 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 80036aa:	1d3b      	adds	r3, r7, #4
 80036ac:	1c9a      	adds	r2, r3, #2
 80036ae:	2302      	movs	r3, #2
 80036b0:	2117      	movs	r1, #23
 80036b2:	2010      	movs	r0, #16
 80036b4:	f000 f996 	bl	80039e4 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 80036b8:	1d3b      	adds	r3, r7, #4
 80036ba:	1d1a      	adds	r2, r3, #4
 80036bc:	2302      	movs	r3, #2
 80036be:	211a      	movs	r1, #26
 80036c0:	2010      	movs	r0, #16
 80036c2:	f000 f98f 	bl	80039e4 <write_multiple_icm20948_reg>
}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b010      	add	sp, #64	; 0x40
 80036cc:	bdb0      	pop	{r4, r5, r7, pc}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	0800aff4 	.word	0x0800aff4

080036d4 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	0002      	movs	r2, r0
 80036dc:	1dfb      	adds	r3, r7, #7
 80036de:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 80036e0:	230f      	movs	r3, #15
 80036e2:	18fc      	adds	r4, r7, r3
 80036e4:	2101      	movs	r1, #1
 80036e6:	2020      	movs	r0, #32
 80036e8:	f000 f8e2 	bl	80038b0 <read_single_icm20948_reg>
 80036ec:	0003      	movs	r3, r0
 80036ee:	7023      	strb	r3, [r4, #0]

	switch(full_scale)
 80036f0:	1dfb      	adds	r3, r7, #7
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d027      	beq.n	8003748 <icm20948_gyro_full_scale_select+0x74>
 80036f8:	dc31      	bgt.n	800375e <icm20948_gyro_full_scale_select+0x8a>
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d019      	beq.n	8003732 <icm20948_gyro_full_scale_select+0x5e>
 80036fe:	dc2e      	bgt.n	800375e <icm20948_gyro_full_scale_select+0x8a>
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <icm20948_gyro_full_scale_select+0x36>
 8003704:	2b01      	cmp	r3, #1
 8003706:	d009      	beq.n	800371c <icm20948_gyro_full_scale_select+0x48>
 8003708:	e029      	b.n	800375e <icm20948_gyro_full_scale_select+0x8a>
	{
		case _250dps :
			new_val |= 0x00;
 800370a:	220f      	movs	r2, #15
 800370c:	18bb      	adds	r3, r7, r2
 800370e:	18ba      	adds	r2, r7, r2
 8003710:	7812      	ldrb	r2, [r2, #0]
 8003712:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 131.0;
 8003714:	4b18      	ldr	r3, [pc, #96]	; (8003778 <icm20948_gyro_full_scale_select+0xa4>)
 8003716:	4a19      	ldr	r2, [pc, #100]	; (800377c <icm20948_gyro_full_scale_select+0xa8>)
 8003718:	601a      	str	r2, [r3, #0]
			break;
 800371a:	e020      	b.n	800375e <icm20948_gyro_full_scale_select+0x8a>
		case _500dps :
			new_val |= 0x02;
 800371c:	220f      	movs	r2, #15
 800371e:	18bb      	adds	r3, r7, r2
 8003720:	18ba      	adds	r2, r7, r2
 8003722:	7812      	ldrb	r2, [r2, #0]
 8003724:	2102      	movs	r1, #2
 8003726:	430a      	orrs	r2, r1
 8003728:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 65.5;
 800372a:	4b13      	ldr	r3, [pc, #76]	; (8003778 <icm20948_gyro_full_scale_select+0xa4>)
 800372c:	4a14      	ldr	r2, [pc, #80]	; (8003780 <icm20948_gyro_full_scale_select+0xac>)
 800372e:	601a      	str	r2, [r3, #0]
			break;
 8003730:	e015      	b.n	800375e <icm20948_gyro_full_scale_select+0x8a>
		case _1000dps :
			new_val |= 0x04;
 8003732:	220f      	movs	r2, #15
 8003734:	18bb      	adds	r3, r7, r2
 8003736:	18ba      	adds	r2, r7, r2
 8003738:	7812      	ldrb	r2, [r2, #0]
 800373a:	2104      	movs	r1, #4
 800373c:	430a      	orrs	r2, r1
 800373e:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 32.8;
 8003740:	4b0d      	ldr	r3, [pc, #52]	; (8003778 <icm20948_gyro_full_scale_select+0xa4>)
 8003742:	4a10      	ldr	r2, [pc, #64]	; (8003784 <icm20948_gyro_full_scale_select+0xb0>)
 8003744:	601a      	str	r2, [r3, #0]
			break;
 8003746:	e00a      	b.n	800375e <icm20948_gyro_full_scale_select+0x8a>
		case _2000dps :
			new_val |= 0x06;
 8003748:	220f      	movs	r2, #15
 800374a:	18bb      	adds	r3, r7, r2
 800374c:	18ba      	adds	r2, r7, r2
 800374e:	7812      	ldrb	r2, [r2, #0]
 8003750:	2106      	movs	r1, #6
 8003752:	430a      	orrs	r2, r1
 8003754:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 16.4;
 8003756:	4b08      	ldr	r3, [pc, #32]	; (8003778 <icm20948_gyro_full_scale_select+0xa4>)
 8003758:	4a0b      	ldr	r2, [pc, #44]	; (8003788 <icm20948_gyro_full_scale_select+0xb4>)
 800375a:	601a      	str	r2, [r3, #0]
			break;
 800375c:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800375e:	230f      	movs	r3, #15
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	001a      	movs	r2, r3
 8003766:	2101      	movs	r1, #1
 8003768:	2020      	movs	r0, #32
 800376a:	f000 f8d3 	bl	8003914 <write_single_icm20948_reg>
}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	46bd      	mov	sp, r7
 8003772:	b005      	add	sp, #20
 8003774:	bd90      	pop	{r4, r7, pc}
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	200002e4 	.word	0x200002e4
 800377c:	43030000 	.word	0x43030000
 8003780:	42830000 	.word	0x42830000
 8003784:	42033333 	.word	0x42033333
 8003788:	41833333 	.word	0x41833333

0800378c <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	0002      	movs	r2, r0
 8003794:	1dfb      	adds	r3, r7, #7
 8003796:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8003798:	230f      	movs	r3, #15
 800379a:	18fc      	adds	r4, r7, r3
 800379c:	2114      	movs	r1, #20
 800379e:	2020      	movs	r0, #32
 80037a0:	f000 f886 	bl	80038b0 <read_single_icm20948_reg>
 80037a4:	0003      	movs	r3, r0
 80037a6:	7023      	strb	r3, [r4, #0]

	switch(full_scale)
 80037a8:	1dfb      	adds	r3, r7, #7
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d02a      	beq.n	8003806 <icm20948_accel_full_scale_select+0x7a>
 80037b0:	dc35      	bgt.n	800381e <icm20948_accel_full_scale_select+0x92>
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d01b      	beq.n	80037ee <icm20948_accel_full_scale_select+0x62>
 80037b6:	dc32      	bgt.n	800381e <icm20948_accel_full_scale_select+0x92>
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <icm20948_accel_full_scale_select+0x36>
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d00a      	beq.n	80037d6 <icm20948_accel_full_scale_select+0x4a>
 80037c0:	e02d      	b.n	800381e <icm20948_accel_full_scale_select+0x92>
	{
		case _2g :
			new_val |= 0x00;
 80037c2:	220f      	movs	r2, #15
 80037c4:	18bb      	adds	r3, r7, r2
 80037c6:	18ba      	adds	r2, r7, r2
 80037c8:	7812      	ldrb	r2, [r2, #0]
 80037ca:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 16384;
 80037cc:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <icm20948_accel_full_scale_select+0xac>)
 80037ce:	228d      	movs	r2, #141	; 0x8d
 80037d0:	05d2      	lsls	r2, r2, #23
 80037d2:	601a      	str	r2, [r3, #0]
			break;
 80037d4:	e023      	b.n	800381e <icm20948_accel_full_scale_select+0x92>
		case _4g :
			new_val |= 0x02;
 80037d6:	220f      	movs	r2, #15
 80037d8:	18bb      	adds	r3, r7, r2
 80037da:	18ba      	adds	r2, r7, r2
 80037dc:	7812      	ldrb	r2, [r2, #0]
 80037de:	2102      	movs	r1, #2
 80037e0:	430a      	orrs	r2, r1
 80037e2:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 8192;
 80037e4:	4b14      	ldr	r3, [pc, #80]	; (8003838 <icm20948_accel_full_scale_select+0xac>)
 80037e6:	228c      	movs	r2, #140	; 0x8c
 80037e8:	05d2      	lsls	r2, r2, #23
 80037ea:	601a      	str	r2, [r3, #0]
			break;
 80037ec:	e017      	b.n	800381e <icm20948_accel_full_scale_select+0x92>
		case _8g :
			new_val |= 0x04;
 80037ee:	220f      	movs	r2, #15
 80037f0:	18bb      	adds	r3, r7, r2
 80037f2:	18ba      	adds	r2, r7, r2
 80037f4:	7812      	ldrb	r2, [r2, #0]
 80037f6:	2104      	movs	r1, #4
 80037f8:	430a      	orrs	r2, r1
 80037fa:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 4096;
 80037fc:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <icm20948_accel_full_scale_select+0xac>)
 80037fe:	228b      	movs	r2, #139	; 0x8b
 8003800:	05d2      	lsls	r2, r2, #23
 8003802:	601a      	str	r2, [r3, #0]
			break;
 8003804:	e00b      	b.n	800381e <icm20948_accel_full_scale_select+0x92>
		case _16g :
			new_val |= 0x06;
 8003806:	220f      	movs	r2, #15
 8003808:	18bb      	adds	r3, r7, r2
 800380a:	18ba      	adds	r2, r7, r2
 800380c:	7812      	ldrb	r2, [r2, #0]
 800380e:	2106      	movs	r1, #6
 8003810:	430a      	orrs	r2, r1
 8003812:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 2048;
 8003814:	4b08      	ldr	r3, [pc, #32]	; (8003838 <icm20948_accel_full_scale_select+0xac>)
 8003816:	228a      	movs	r2, #138	; 0x8a
 8003818:	05d2      	lsls	r2, r2, #23
 800381a:	601a      	str	r2, [r3, #0]
			break;
 800381c:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 800381e:	230f      	movs	r3, #15
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	001a      	movs	r2, r3
 8003826:	2114      	movs	r1, #20
 8003828:	2020      	movs	r0, #32
 800382a:	f000 f873 	bl	8003914 <write_single_icm20948_reg>
}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	46bd      	mov	sp, r7
 8003832:	b005      	add	sp, #20
 8003834:	bd90      	pop	{r4, r7, pc}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	200002e8 	.word	0x200002e8

0800383c <cs_high>:


/* Static Functions */
static void cs_high()
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <cs_high+0x18>)
 8003842:	2201      	movs	r2, #1
 8003844:	2180      	movs	r1, #128	; 0x80
 8003846:	0018      	movs	r0, r3
 8003848:	f000 fdbc 	bl	80043c4 <HAL_GPIO_WritePin>
}
 800384c:	46c0      	nop			; (mov r8, r8)
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	48000800 	.word	0x48000800

08003858 <cs_low>:

static void cs_low()
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 800385c:	4b04      	ldr	r3, [pc, #16]	; (8003870 <cs_low+0x18>)
 800385e:	2200      	movs	r2, #0
 8003860:	2180      	movs	r1, #128	; 0x80
 8003862:	0018      	movs	r0, r3
 8003864:	f000 fdae 	bl	80043c4 <HAL_GPIO_WritePin>
}
 8003868:	46c0      	nop			; (mov r8, r8)
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	48000800 	.word	0x48000800

08003874 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	0002      	movs	r2, r0
 800387c:	1dfb      	adds	r3, r7, #7
 800387e:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8003880:	240c      	movs	r4, #12
 8003882:	193b      	adds	r3, r7, r4
 8003884:	227f      	movs	r2, #127	; 0x7f
 8003886:	701a      	strb	r2, [r3, #0]
	write_reg[1] = ub;
 8003888:	193b      	adds	r3, r7, r4
 800388a:	1dfa      	adds	r2, r7, #7
 800388c:	7812      	ldrb	r2, [r2, #0]
 800388e:	705a      	strb	r2, [r3, #1]

	cs_low();
 8003890:	f7ff ffe2 	bl	8003858 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8003894:	1939      	adds	r1, r7, r4
 8003896:	4805      	ldr	r0, [pc, #20]	; (80038ac <select_user_bank+0x38>)
 8003898:	230a      	movs	r3, #10
 800389a:	2202      	movs	r2, #2
 800389c:	f001 fbb2 	bl	8005004 <HAL_SPI_Transmit>
	cs_high();
 80038a0:	f7ff ffcc 	bl	800383c <cs_high>
}
 80038a4:	46c0      	nop			; (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b005      	add	sp, #20
 80038aa:	bd90      	pop	{r4, r7, pc}
 80038ac:	200001fc 	.word	0x200001fc

080038b0 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	0002      	movs	r2, r0
 80038b8:	1dfb      	adds	r3, r7, #7
 80038ba:	701a      	strb	r2, [r3, #0]
 80038bc:	1dbb      	adds	r3, r7, #6
 80038be:	1c0a      	adds	r2, r1, #0
 80038c0:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 80038c2:	1dbb      	adds	r3, r7, #6
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2280      	movs	r2, #128	; 0x80
 80038c8:	4252      	negs	r2, r2
 80038ca:	4313      	orrs	r3, r2
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	240f      	movs	r4, #15
 80038d0:	193b      	adds	r3, r7, r4
 80038d2:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val;
	select_user_bank(ub);
 80038d4:	1dfb      	adds	r3, r7, #7
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	0018      	movs	r0, r3
 80038da:	f7ff ffcb 	bl	8003874 <select_user_bank>

	cs_low();
 80038de:	f7ff ffbb 	bl	8003858 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80038e2:	23fa      	movs	r3, #250	; 0xfa
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	1939      	adds	r1, r7, r4
 80038e8:	4809      	ldr	r0, [pc, #36]	; (8003910 <read_single_icm20948_reg+0x60>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	f001 fb8a 	bl	8005004 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 80038f0:	23fa      	movs	r3, #250	; 0xfa
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	240e      	movs	r4, #14
 80038f6:	1939      	adds	r1, r7, r4
 80038f8:	4805      	ldr	r0, [pc, #20]	; (8003910 <read_single_icm20948_reg+0x60>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	f001 fcda 	bl	80052b4 <HAL_SPI_Receive>
	cs_high();
 8003900:	f7ff ff9c 	bl	800383c <cs_high>

	return reg_val;
 8003904:	193b      	adds	r3, r7, r4
 8003906:	781b      	ldrb	r3, [r3, #0]
}
 8003908:	0018      	movs	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	b005      	add	sp, #20
 800390e:	bd90      	pop	{r4, r7, pc}
 8003910:	200001fc 	.word	0x200001fc

08003914 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	0004      	movs	r4, r0
 800391c:	0008      	movs	r0, r1
 800391e:	0011      	movs	r1, r2
 8003920:	1dfb      	adds	r3, r7, #7
 8003922:	1c22      	adds	r2, r4, #0
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	1dbb      	adds	r3, r7, #6
 8003928:	1c02      	adds	r2, r0, #0
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	1d7b      	adds	r3, r7, #5
 800392e:	1c0a      	adds	r2, r1, #0
 8003930:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8003932:	240c      	movs	r4, #12
 8003934:	193b      	adds	r3, r7, r4
 8003936:	1dba      	adds	r2, r7, #6
 8003938:	7812      	ldrb	r2, [r2, #0]
 800393a:	701a      	strb	r2, [r3, #0]
	write_reg[1] = val;
 800393c:	193b      	adds	r3, r7, r4
 800393e:	1d7a      	adds	r2, r7, #5
 8003940:	7812      	ldrb	r2, [r2, #0]
 8003942:	705a      	strb	r2, [r3, #1]

	select_user_bank(ub);
 8003944:	1dfb      	adds	r3, r7, #7
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	0018      	movs	r0, r3
 800394a:	f7ff ff93 	bl	8003874 <select_user_bank>

	cs_low();
 800394e:	f7ff ff83 	bl	8003858 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8003952:	23fa      	movs	r3, #250	; 0xfa
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	1939      	adds	r1, r7, r4
 8003958:	4804      	ldr	r0, [pc, #16]	; (800396c <write_single_icm20948_reg+0x58>)
 800395a:	2202      	movs	r2, #2
 800395c:	f001 fb52 	bl	8005004 <HAL_SPI_Transmit>
	cs_high();
 8003960:	f7ff ff6c 	bl	800383c <cs_high>
}
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	b005      	add	sp, #20
 800396a:	bd90      	pop	{r4, r7, pc}
 800396c:	200001fc 	.word	0x200001fc

08003970 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8003970:	b590      	push	{r4, r7, lr}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	0004      	movs	r4, r0
 8003978:	0008      	movs	r0, r1
 800397a:	0011      	movs	r1, r2
 800397c:	1dfb      	adds	r3, r7, #7
 800397e:	1c22      	adds	r2, r4, #0
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	1dbb      	adds	r3, r7, #6
 8003984:	1c02      	adds	r2, r0, #0
 8003986:	701a      	strb	r2, [r3, #0]
 8003988:	1d7b      	adds	r3, r7, #5
 800398a:	1c0a      	adds	r2, r1, #0
 800398c:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 800398e:	1dbb      	adds	r3, r7, #6
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	4252      	negs	r2, r2
 8003996:	4313      	orrs	r3, r2
 8003998:	b2da      	uxtb	r2, r3
 800399a:	240f      	movs	r4, #15
 800399c:	193b      	adds	r3, r7, r4
 800399e:	701a      	strb	r2, [r3, #0]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 80039a0:	1dfb      	adds	r3, r7, #7
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7ff ff65 	bl	8003874 <select_user_bank>

	cs_low();
 80039aa:	f7ff ff55 	bl	8003858 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80039ae:	23fa      	movs	r3, #250	; 0xfa
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	1939      	adds	r1, r7, r4
 80039b4:	4809      	ldr	r0, [pc, #36]	; (80039dc <read_multiple_icm20948_reg+0x6c>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	f001 fb24 	bl	8005004 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 80039bc:	1d7b      	adds	r3, r7, #5
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	23fa      	movs	r3, #250	; 0xfa
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4906      	ldr	r1, [pc, #24]	; (80039e0 <read_multiple_icm20948_reg+0x70>)
 80039c8:	4804      	ldr	r0, [pc, #16]	; (80039dc <read_multiple_icm20948_reg+0x6c>)
 80039ca:	f001 fc73 	bl	80052b4 <HAL_SPI_Receive>
	cs_high();
 80039ce:	f7ff ff35 	bl	800383c <cs_high>

	return reg_val;
 80039d2:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <read_multiple_icm20948_reg+0x70>)
}
 80039d4:	0018      	movs	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b005      	add	sp, #20
 80039da:	bd90      	pop	{r4, r7, pc}
 80039dc:	200001fc 	.word	0x200001fc
 80039e0:	20000304 	.word	0x20000304

080039e4 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	0004      	movs	r4, r0
 80039ec:	0008      	movs	r0, r1
 80039ee:	603a      	str	r2, [r7, #0]
 80039f0:	0019      	movs	r1, r3
 80039f2:	1dfb      	adds	r3, r7, #7
 80039f4:	1c22      	adds	r2, r4, #0
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	1dbb      	adds	r3, r7, #6
 80039fa:	1c02      	adds	r2, r0, #0
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	1d7b      	adds	r3, r7, #5
 8003a00:	1c0a      	adds	r2, r1, #0
 8003a02:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg = WRITE | reg;
 8003a04:	240f      	movs	r4, #15
 8003a06:	193b      	adds	r3, r7, r4
 8003a08:	1dba      	adds	r2, r7, #6
 8003a0a:	7812      	ldrb	r2, [r2, #0]
 8003a0c:	701a      	strb	r2, [r3, #0]
	select_user_bank(ub);
 8003a0e:	1dfb      	adds	r3, r7, #7
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	0018      	movs	r0, r3
 8003a14:	f7ff ff2e 	bl	8003874 <select_user_bank>

	cs_low();
 8003a18:	f7ff ff1e 	bl	8003858 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 8003a1c:	23fa      	movs	r3, #250	; 0xfa
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	1939      	adds	r1, r7, r4
 8003a22:	4809      	ldr	r0, [pc, #36]	; (8003a48 <write_multiple_icm20948_reg+0x64>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	f001 faed 	bl	8005004 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 8003a2a:	1d7b      	adds	r3, r7, #5
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	23fa      	movs	r3, #250	; 0xfa
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	6839      	ldr	r1, [r7, #0]
 8003a36:	4804      	ldr	r0, [pc, #16]	; (8003a48 <write_multiple_icm20948_reg+0x64>)
 8003a38:	f001 fae4 	bl	8005004 <HAL_SPI_Transmit>
	cs_high();
 8003a3c:	f7ff fefe 	bl	800383c <cs_high>
}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b005      	add	sp, #20
 8003a46:	bd90      	pop	{r4, r7, pc}
 8003a48:	200001fc 	.word	0x200001fc

08003a4c <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	0002      	movs	r2, r0
 8003a54:	1dfb      	adds	r3, r7, #7
 8003a56:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8003a58:	228c      	movs	r2, #140	; 0x8c
 8003a5a:	2103      	movs	r1, #3
 8003a5c:	2030      	movs	r0, #48	; 0x30
 8003a5e:	f7ff ff59 	bl	8003914 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8003a62:	1dfb      	adds	r3, r7, #7
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	001a      	movs	r2, r3
 8003a68:	2104      	movs	r1, #4
 8003a6a:	2030      	movs	r0, #48	; 0x30
 8003a6c:	f7ff ff52 	bl	8003914 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8003a70:	2281      	movs	r2, #129	; 0x81
 8003a72:	2105      	movs	r1, #5
 8003a74:	2030      	movs	r0, #48	; 0x30
 8003a76:	f7ff ff4d 	bl	8003914 <write_single_icm20948_reg>

	HAL_Delay(1);
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f000 fa5a 	bl	8003f34 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8003a80:	213b      	movs	r1, #59	; 0x3b
 8003a82:	2000      	movs	r0, #0
 8003a84:	f7ff ff14 	bl	80038b0 <read_single_icm20948_reg>
 8003a88:	0003      	movs	r3, r0
}
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b002      	add	sp, #8
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	0002      	movs	r2, r0
 8003a9a:	1dfb      	adds	r3, r7, #7
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	1dbb      	adds	r3, r7, #6
 8003aa0:	1c0a      	adds	r2, r1, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 8003aa4:	220c      	movs	r2, #12
 8003aa6:	2103      	movs	r1, #3
 8003aa8:	2030      	movs	r0, #48	; 0x30
 8003aaa:	f7ff ff33 	bl	8003914 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8003aae:	1dfb      	adds	r3, r7, #7
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	001a      	movs	r2, r3
 8003ab4:	2104      	movs	r1, #4
 8003ab6:	2030      	movs	r0, #48	; 0x30
 8003ab8:	f7ff ff2c 	bl	8003914 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8003abc:	1dbb      	adds	r3, r7, #6
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	001a      	movs	r2, r3
 8003ac2:	2106      	movs	r1, #6
 8003ac4:	2030      	movs	r0, #48	; 0x30
 8003ac6:	f7ff ff25 	bl	8003914 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8003aca:	2281      	movs	r2, #129	; 0x81
 8003acc:	2105      	movs	r1, #5
 8003ace:	2030      	movs	r0, #48	; 0x30
 8003ad0:	f7ff ff20 	bl	8003914 <write_single_icm20948_reg>
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b002      	add	sp, #8
 8003ada:	bd80      	pop	{r7, pc}

08003adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ae0:	b672      	cpsid	i
}
 8003ae2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ae4:	e7fe      	b.n	8003ae4 <Error_Handler+0x8>
	...

08003ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aee:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <HAL_MspInit+0x44>)
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <HAL_MspInit+0x44>)
 8003af4:	2101      	movs	r1, #1
 8003af6:	430a      	orrs	r2, r1
 8003af8:	619a      	str	r2, [r3, #24]
 8003afa:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <HAL_MspInit+0x44>)
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2201      	movs	r2, #1
 8003b00:	4013      	ands	r3, r2
 8003b02:	607b      	str	r3, [r7, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <HAL_MspInit+0x44>)
 8003b08:	69da      	ldr	r2, [r3, #28]
 8003b0a:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <HAL_MspInit+0x44>)
 8003b0c:	2180      	movs	r1, #128	; 0x80
 8003b0e:	0549      	lsls	r1, r1, #21
 8003b10:	430a      	orrs	r2, r1
 8003b12:	61da      	str	r2, [r3, #28]
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <HAL_MspInit+0x44>)
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	2380      	movs	r3, #128	; 0x80
 8003b1a:	055b      	lsls	r3, r3, #21
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b002      	add	sp, #8
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	40021000 	.word	0x40021000

08003b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b30:	b590      	push	{r4, r7, lr}
 8003b32:	b08b      	sub	sp, #44	; 0x2c
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b38:	2414      	movs	r4, #20
 8003b3a:	193b      	adds	r3, r7, r4
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	2314      	movs	r3, #20
 8003b40:	001a      	movs	r2, r3
 8003b42:	2100      	movs	r1, #0
 8003b44:	f002 fcf4 	bl	8006530 <memset>
  if(hspi->Instance==SPI1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1c      	ldr	r2, [pc, #112]	; (8003bc0 <HAL_SPI_MspInit+0x90>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d132      	bne.n	8003bb8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b52:	4b1c      	ldr	r3, [pc, #112]	; (8003bc4 <HAL_SPI_MspInit+0x94>)
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <HAL_SPI_MspInit+0x94>)
 8003b58:	2180      	movs	r1, #128	; 0x80
 8003b5a:	0149      	lsls	r1, r1, #5
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	619a      	str	r2, [r3, #24]
 8003b60:	4b18      	ldr	r3, [pc, #96]	; (8003bc4 <HAL_SPI_MspInit+0x94>)
 8003b62:	699a      	ldr	r2, [r3, #24]
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	015b      	lsls	r3, r3, #5
 8003b68:	4013      	ands	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6e:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <HAL_SPI_MspInit+0x94>)
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	4b14      	ldr	r3, [pc, #80]	; (8003bc4 <HAL_SPI_MspInit+0x94>)
 8003b74:	2180      	movs	r1, #128	; 0x80
 8003b76:	0289      	lsls	r1, r1, #10
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	615a      	str	r2, [r3, #20]
 8003b7c:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <HAL_SPI_MspInit+0x94>)
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	029b      	lsls	r3, r3, #10
 8003b84:	4013      	ands	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b8a:	0021      	movs	r1, r4
 8003b8c:	187b      	adds	r3, r7, r1
 8003b8e:	22e0      	movs	r2, #224	; 0xe0
 8003b90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b92:	187b      	adds	r3, r7, r1
 8003b94:	2202      	movs	r2, #2
 8003b96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	187b      	adds	r3, r7, r1
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b9e:	187b      	adds	r3, r7, r1
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003ba4:	187b      	adds	r3, r7, r1
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003baa:	187a      	adds	r2, r7, r1
 8003bac:	2390      	movs	r3, #144	; 0x90
 8003bae:	05db      	lsls	r3, r3, #23
 8003bb0:	0011      	movs	r1, r2
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f000 fa96 	bl	80040e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003bb8:	46c0      	nop			; (mov r8, r8)
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b00b      	add	sp, #44	; 0x2c
 8003bbe:	bd90      	pop	{r4, r7, pc}
 8003bc0:	40013000 	.word	0x40013000
 8003bc4:	40021000 	.word	0x40021000

08003bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bc8:	b590      	push	{r4, r7, lr}
 8003bca:	b08b      	sub	sp, #44	; 0x2c
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd0:	2414      	movs	r4, #20
 8003bd2:	193b      	adds	r3, r7, r4
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	2314      	movs	r3, #20
 8003bd8:	001a      	movs	r2, r3
 8003bda:	2100      	movs	r1, #0
 8003bdc:	f002 fca8 	bl	8006530 <memset>
  if(huart->Instance==USART1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a1d      	ldr	r2, [pc, #116]	; (8003c5c <HAL_UART_MspInit+0x94>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d133      	bne.n	8003c52 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bea:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <HAL_UART_MspInit+0x98>)
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	4b1c      	ldr	r3, [pc, #112]	; (8003c60 <HAL_UART_MspInit+0x98>)
 8003bf0:	2180      	movs	r1, #128	; 0x80
 8003bf2:	01c9      	lsls	r1, r1, #7
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	619a      	str	r2, [r3, #24]
 8003bf8:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <HAL_UART_MspInit+0x98>)
 8003bfa:	699a      	ldr	r2, [r3, #24]
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	01db      	lsls	r3, r3, #7
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c06:	4b16      	ldr	r3, [pc, #88]	; (8003c60 <HAL_UART_MspInit+0x98>)
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <HAL_UART_MspInit+0x98>)
 8003c0c:	2180      	movs	r1, #128	; 0x80
 8003c0e:	0289      	lsls	r1, r1, #10
 8003c10:	430a      	orrs	r2, r1
 8003c12:	615a      	str	r2, [r3, #20]
 8003c14:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <HAL_UART_MspInit+0x98>)
 8003c16:	695a      	ldr	r2, [r3, #20]
 8003c18:	2380      	movs	r3, #128	; 0x80
 8003c1a:	029b      	lsls	r3, r3, #10
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c22:	193b      	adds	r3, r7, r4
 8003c24:	22c0      	movs	r2, #192	; 0xc0
 8003c26:	00d2      	lsls	r2, r2, #3
 8003c28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c2a:	0021      	movs	r1, r4
 8003c2c:	187b      	adds	r3, r7, r1
 8003c2e:	2212      	movs	r2, #18
 8003c30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c32:	187b      	adds	r3, r7, r1
 8003c34:	2201      	movs	r2, #1
 8003c36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c38:	187b      	adds	r3, r7, r1
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003c3e:	187b      	adds	r3, r7, r1
 8003c40:	2201      	movs	r2, #1
 8003c42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c44:	187a      	adds	r2, r7, r1
 8003c46:	2390      	movs	r3, #144	; 0x90
 8003c48:	05db      	lsls	r3, r3, #23
 8003c4a:	0011      	movs	r1, r2
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f000 fa49 	bl	80040e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b00b      	add	sp, #44	; 0x2c
 8003c58:	bd90      	pop	{r4, r7, pc}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	40013800 	.word	0x40013800
 8003c60:	40021000 	.word	0x40021000

08003c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c68:	e7fe      	b.n	8003c68 <NMI_Handler+0x4>

08003c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c6e:	e7fe      	b.n	8003c6e <HardFault_Handler+0x4>

08003c70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c88:	f000 f938 	bl	8003efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c8c:	46c0      	nop			; (mov r8, r8)
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	af00      	add	r7, sp, #0
	return 1;
 8003c96:	2301      	movs	r3, #1
}
 8003c98:	0018      	movs	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <_kill>:

int _kill(int pid, int sig)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ca8:	f002 fc18 	bl	80064dc <__errno>
 8003cac:	0003      	movs	r3, r0
 8003cae:	2216      	movs	r2, #22
 8003cb0:	601a      	str	r2, [r3, #0]
	return -1;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	425b      	negs	r3, r3
}
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b002      	add	sp, #8
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <_exit>:

void _exit (int status)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	425a      	negs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	0011      	movs	r1, r2
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f7ff ffe5 	bl	8003c9e <_kill>
	while (1) {}		/* Make sure we hang here */
 8003cd4:	e7fe      	b.n	8003cd4 <_exit+0x16>

08003cd6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b086      	sub	sp, #24
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	e00a      	b.n	8003cfe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ce8:	e000      	b.n	8003cec <_read+0x16>
 8003cea:	bf00      	nop
 8003cec:	0001      	movs	r1, r0
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	60ba      	str	r2, [r7, #8]
 8003cf4:	b2ca      	uxtb	r2, r1
 8003cf6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	dbf0      	blt.n	8003ce8 <_read+0x12>
	}

return len;
 8003d06:	687b      	ldr	r3, [r7, #4]
}
 8003d08:	0018      	movs	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b006      	add	sp, #24
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e009      	b.n	8003d36 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	60ba      	str	r2, [r7, #8]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	e000      	b.n	8003d30 <_write+0x20>
 8003d2e:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	3301      	adds	r3, #1
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	dbf1      	blt.n	8003d22 <_write+0x12>
	}
	return len;
 8003d3e:	687b      	ldr	r3, [r7, #4]
}
 8003d40:	0018      	movs	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b006      	add	sp, #24
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <_close>:

int _close(int file)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	return -1;
 8003d50:	2301      	movs	r3, #1
 8003d52:	425b      	negs	r3, r3
}
 8003d54:	0018      	movs	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b002      	add	sp, #8
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2280      	movs	r2, #128	; 0x80
 8003d6a:	0192      	lsls	r2, r2, #6
 8003d6c:	605a      	str	r2, [r3, #4]
	return 0;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	0018      	movs	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b002      	add	sp, #8
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <_isatty>:

int _isatty(int file)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
	return 1;
 8003d80:	2301      	movs	r3, #1
}
 8003d82:	0018      	movs	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b002      	add	sp, #8
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
	return 0;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	0018      	movs	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b004      	add	sp, #16
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003da8:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <_sbrk+0x5c>)
 8003daa:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <_sbrk+0x60>)
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003db4:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <_sbrk+0x64>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dbc:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <_sbrk+0x64>)
 8003dbe:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <_sbrk+0x68>)
 8003dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dc2:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <_sbrk+0x64>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	18d3      	adds	r3, r2, r3
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d207      	bcs.n	8003de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dd0:	f002 fb84 	bl	80064dc <__errno>
 8003dd4:	0003      	movs	r3, r0
 8003dd6:	220c      	movs	r2, #12
 8003dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	425b      	negs	r3, r3
 8003dde:	e009      	b.n	8003df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003de0:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <_sbrk+0x64>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003de6:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <_sbrk+0x64>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	18d2      	adds	r2, r2, r3
 8003dee:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <_sbrk+0x64>)
 8003df0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003df2:	68fb      	ldr	r3, [r7, #12]
}
 8003df4:	0018      	movs	r0, r3
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b006      	add	sp, #24
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20002000 	.word	0x20002000
 8003e00:	00000400 	.word	0x00000400
 8003e04:	2000030c 	.word	0x2000030c
 8003e08:	20000328 	.word	0x20000328

08003e0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003e10:	46c0      	nop			; (mov r8, r8)
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e18:	480d      	ldr	r0, [pc, #52]	; (8003e50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e1c:	480d      	ldr	r0, [pc, #52]	; (8003e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e1e:	490e      	ldr	r1, [pc, #56]	; (8003e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e20:	4a0e      	ldr	r2, [pc, #56]	; (8003e5c <LoopForever+0xe>)
  movs r3, #0
 8003e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e24:	e002      	b.n	8003e2c <LoopCopyDataInit>

08003e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e2a:	3304      	adds	r3, #4

08003e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e30:	d3f9      	bcc.n	8003e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e32:	4a0b      	ldr	r2, [pc, #44]	; (8003e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e34:	4c0b      	ldr	r4, [pc, #44]	; (8003e64 <LoopForever+0x16>)
  movs r3, #0
 8003e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e38:	e001      	b.n	8003e3e <LoopFillZerobss>

08003e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e3c:	3204      	adds	r2, #4

08003e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e40:	d3fb      	bcc.n	8003e3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003e42:	f7ff ffe3 	bl	8003e0c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003e46:	f002 fb4f 	bl	80064e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e4a:	f7fe fd95 	bl	8002978 <main>

08003e4e <LoopForever>:

LoopForever:
    b LoopForever
 8003e4e:	e7fe      	b.n	8003e4e <LoopForever>
  ldr   r0, =_estack
 8003e50:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e58:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003e5c:	0800b5dc 	.word	0x0800b5dc
  ldr r2, =_sbss
 8003e60:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003e64:	20000324 	.word	0x20000324

08003e68 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e68:	e7fe      	b.n	8003e68 <ADC1_COMP_IRQHandler>
	...

08003e6c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e70:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <HAL_Init+0x24>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_Init+0x24>)
 8003e76:	2110      	movs	r1, #16
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003e7c:	2003      	movs	r0, #3
 8003e7e:	f000 f809 	bl	8003e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e82:	f7ff fe31 	bl	8003ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	0018      	movs	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	40022000 	.word	0x40022000

08003e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e94:	b590      	push	{r4, r7, lr}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e9c:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <HAL_InitTick+0x5c>)
 8003e9e:	681c      	ldr	r4, [r3, #0]
 8003ea0:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <HAL_InitTick+0x60>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	0019      	movs	r1, r3
 8003ea6:	23fa      	movs	r3, #250	; 0xfa
 8003ea8:	0098      	lsls	r0, r3, #2
 8003eaa:	f7fc f949 	bl	8000140 <__udivsi3>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	0019      	movs	r1, r3
 8003eb2:	0020      	movs	r0, r4
 8003eb4:	f7fc f944 	bl	8000140 <__udivsi3>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f000 f905 	bl	80040ca <HAL_SYSTICK_Config>
 8003ec0:	1e03      	subs	r3, r0, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e00f      	b.n	8003ee8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d80b      	bhi.n	8003ee6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	425b      	negs	r3, r3
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 f8e2 	bl	80040a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003edc:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <HAL_InitTick+0x64>)
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e000      	b.n	8003ee8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b003      	add	sp, #12
 8003eee:	bd90      	pop	{r4, r7, pc}
 8003ef0:	20000000 	.word	0x20000000
 8003ef4:	20000008 	.word	0x20000008
 8003ef8:	20000004 	.word	0x20000004

08003efc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <HAL_IncTick+0x1c>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	001a      	movs	r2, r3
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_IncTick+0x20>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	18d2      	adds	r2, r2, r3
 8003f0c:	4b03      	ldr	r3, [pc, #12]	; (8003f1c <HAL_IncTick+0x20>)
 8003f0e:	601a      	str	r2, [r3, #0]
}
 8003f10:	46c0      	nop			; (mov r8, r8)
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	20000008 	.word	0x20000008
 8003f1c:	20000310 	.word	0x20000310

08003f20 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  return uwTick;
 8003f24:	4b02      	ldr	r3, [pc, #8]	; (8003f30 <HAL_GetTick+0x10>)
 8003f26:	681b      	ldr	r3, [r3, #0]
}
 8003f28:	0018      	movs	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	20000310 	.word	0x20000310

08003f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f3c:	f7ff fff0 	bl	8003f20 <HAL_GetTick>
 8003f40:	0003      	movs	r3, r0
 8003f42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	d005      	beq.n	8003f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f4e:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <HAL_Delay+0x44>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	001a      	movs	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	189b      	adds	r3, r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	f7ff ffe0 	bl	8003f20 <HAL_GetTick>
 8003f60:	0002      	movs	r2, r0
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d8f7      	bhi.n	8003f5c <HAL_Delay+0x28>
  {
  }
}
 8003f6c:	46c0      	nop			; (mov r8, r8)
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	46bd      	mov	sp, r7
 8003f72:	b004      	add	sp, #16
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	20000008 	.word	0x20000008

08003f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f7c:	b590      	push	{r4, r7, lr}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	0002      	movs	r2, r0
 8003f84:	6039      	str	r1, [r7, #0]
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f8a:	1dfb      	adds	r3, r7, #7
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8003f90:	d828      	bhi.n	8003fe4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f92:	4a2f      	ldr	r2, [pc, #188]	; (8004050 <__NVIC_SetPriority+0xd4>)
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	b25b      	sxtb	r3, r3
 8003f9a:	089b      	lsrs	r3, r3, #2
 8003f9c:	33c0      	adds	r3, #192	; 0xc0
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	589b      	ldr	r3, [r3, r2]
 8003fa2:	1dfa      	adds	r2, r7, #7
 8003fa4:	7812      	ldrb	r2, [r2, #0]
 8003fa6:	0011      	movs	r1, r2
 8003fa8:	2203      	movs	r2, #3
 8003faa:	400a      	ands	r2, r1
 8003fac:	00d2      	lsls	r2, r2, #3
 8003fae:	21ff      	movs	r1, #255	; 0xff
 8003fb0:	4091      	lsls	r1, r2
 8003fb2:	000a      	movs	r2, r1
 8003fb4:	43d2      	mvns	r2, r2
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	019b      	lsls	r3, r3, #6
 8003fbe:	22ff      	movs	r2, #255	; 0xff
 8003fc0:	401a      	ands	r2, r3
 8003fc2:	1dfb      	adds	r3, r7, #7
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	2303      	movs	r3, #3
 8003fca:	4003      	ands	r3, r0
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fd0:	481f      	ldr	r0, [pc, #124]	; (8004050 <__NVIC_SetPriority+0xd4>)
 8003fd2:	1dfb      	adds	r3, r7, #7
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	b25b      	sxtb	r3, r3
 8003fd8:	089b      	lsrs	r3, r3, #2
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	33c0      	adds	r3, #192	; 0xc0
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003fe2:	e031      	b.n	8004048 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fe4:	4a1b      	ldr	r2, [pc, #108]	; (8004054 <__NVIC_SetPriority+0xd8>)
 8003fe6:	1dfb      	adds	r3, r7, #7
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	0019      	movs	r1, r3
 8003fec:	230f      	movs	r3, #15
 8003fee:	400b      	ands	r3, r1
 8003ff0:	3b08      	subs	r3, #8
 8003ff2:	089b      	lsrs	r3, r3, #2
 8003ff4:	3306      	adds	r3, #6
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	18d3      	adds	r3, r2, r3
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	1dfa      	adds	r2, r7, #7
 8004000:	7812      	ldrb	r2, [r2, #0]
 8004002:	0011      	movs	r1, r2
 8004004:	2203      	movs	r2, #3
 8004006:	400a      	ands	r2, r1
 8004008:	00d2      	lsls	r2, r2, #3
 800400a:	21ff      	movs	r1, #255	; 0xff
 800400c:	4091      	lsls	r1, r2
 800400e:	000a      	movs	r2, r1
 8004010:	43d2      	mvns	r2, r2
 8004012:	401a      	ands	r2, r3
 8004014:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	019b      	lsls	r3, r3, #6
 800401a:	22ff      	movs	r2, #255	; 0xff
 800401c:	401a      	ands	r2, r3
 800401e:	1dfb      	adds	r3, r7, #7
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	0018      	movs	r0, r3
 8004024:	2303      	movs	r3, #3
 8004026:	4003      	ands	r3, r0
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800402c:	4809      	ldr	r0, [pc, #36]	; (8004054 <__NVIC_SetPriority+0xd8>)
 800402e:	1dfb      	adds	r3, r7, #7
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	001c      	movs	r4, r3
 8004034:	230f      	movs	r3, #15
 8004036:	4023      	ands	r3, r4
 8004038:	3b08      	subs	r3, #8
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	430a      	orrs	r2, r1
 800403e:	3306      	adds	r3, #6
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	18c3      	adds	r3, r0, r3
 8004044:	3304      	adds	r3, #4
 8004046:	601a      	str	r2, [r3, #0]
}
 8004048:	46c0      	nop			; (mov r8, r8)
 800404a:	46bd      	mov	sp, r7
 800404c:	b003      	add	sp, #12
 800404e:	bd90      	pop	{r4, r7, pc}
 8004050:	e000e100 	.word	0xe000e100
 8004054:	e000ed00 	.word	0xe000ed00

08004058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	1e5a      	subs	r2, r3, #1
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	045b      	lsls	r3, r3, #17
 8004068:	429a      	cmp	r2, r3
 800406a:	d301      	bcc.n	8004070 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800406c:	2301      	movs	r3, #1
 800406e:	e010      	b.n	8004092 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004070:	4b0a      	ldr	r3, [pc, #40]	; (800409c <SysTick_Config+0x44>)
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	3a01      	subs	r2, #1
 8004076:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004078:	2301      	movs	r3, #1
 800407a:	425b      	negs	r3, r3
 800407c:	2103      	movs	r1, #3
 800407e:	0018      	movs	r0, r3
 8004080:	f7ff ff7c 	bl	8003f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004084:	4b05      	ldr	r3, [pc, #20]	; (800409c <SysTick_Config+0x44>)
 8004086:	2200      	movs	r2, #0
 8004088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800408a:	4b04      	ldr	r3, [pc, #16]	; (800409c <SysTick_Config+0x44>)
 800408c:	2207      	movs	r2, #7
 800408e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004090:	2300      	movs	r3, #0
}
 8004092:	0018      	movs	r0, r3
 8004094:	46bd      	mov	sp, r7
 8004096:	b002      	add	sp, #8
 8004098:	bd80      	pop	{r7, pc}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	e000e010 	.word	0xe000e010

080040a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	210f      	movs	r1, #15
 80040ac:	187b      	adds	r3, r7, r1
 80040ae:	1c02      	adds	r2, r0, #0
 80040b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	187b      	adds	r3, r7, r1
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	b25b      	sxtb	r3, r3
 80040ba:	0011      	movs	r1, r2
 80040bc:	0018      	movs	r0, r3
 80040be:	f7ff ff5d 	bl	8003f7c <__NVIC_SetPriority>
}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b004      	add	sp, #16
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b082      	sub	sp, #8
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7ff ffbf 	bl	8004058 <SysTick_Config>
 80040da:	0003      	movs	r3, r0
}
 80040dc:	0018      	movs	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	b002      	add	sp, #8
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040f2:	e14f      	b.n	8004394 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2101      	movs	r1, #1
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4091      	lsls	r1, r2
 80040fe:	000a      	movs	r2, r1
 8004100:	4013      	ands	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d100      	bne.n	800410c <HAL_GPIO_Init+0x28>
 800410a:	e140      	b.n	800438e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2203      	movs	r2, #3
 8004112:	4013      	ands	r3, r2
 8004114:	2b01      	cmp	r3, #1
 8004116:	d005      	beq.n	8004124 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2203      	movs	r2, #3
 800411e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004120:	2b02      	cmp	r3, #2
 8004122:	d130      	bne.n	8004186 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	2203      	movs	r2, #3
 8004130:	409a      	lsls	r2, r3
 8004132:	0013      	movs	r3, r2
 8004134:	43da      	mvns	r2, r3
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4013      	ands	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	409a      	lsls	r2, r3
 8004146:	0013      	movs	r3, r2
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800415a:	2201      	movs	r2, #1
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	409a      	lsls	r2, r3
 8004160:	0013      	movs	r3, r2
 8004162:	43da      	mvns	r2, r3
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4013      	ands	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	091b      	lsrs	r3, r3, #4
 8004170:	2201      	movs	r2, #1
 8004172:	401a      	ands	r2, r3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	409a      	lsls	r2, r3
 8004178:	0013      	movs	r3, r2
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2203      	movs	r2, #3
 800418c:	4013      	ands	r3, r2
 800418e:	2b03      	cmp	r3, #3
 8004190:	d017      	beq.n	80041c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	2203      	movs	r2, #3
 800419e:	409a      	lsls	r2, r3
 80041a0:	0013      	movs	r3, r2
 80041a2:	43da      	mvns	r2, r3
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4013      	ands	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	409a      	lsls	r2, r3
 80041b4:	0013      	movs	r3, r2
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2203      	movs	r2, #3
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d123      	bne.n	8004216 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	08da      	lsrs	r2, r3, #3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3208      	adds	r2, #8
 80041d6:	0092      	lsls	r2, r2, #2
 80041d8:	58d3      	ldr	r3, [r2, r3]
 80041da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2207      	movs	r2, #7
 80041e0:	4013      	ands	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	220f      	movs	r2, #15
 80041e6:	409a      	lsls	r2, r3
 80041e8:	0013      	movs	r3, r2
 80041ea:	43da      	mvns	r2, r3
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4013      	ands	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2107      	movs	r1, #7
 80041fa:	400b      	ands	r3, r1
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	409a      	lsls	r2, r3
 8004200:	0013      	movs	r3, r2
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	08da      	lsrs	r2, r3, #3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3208      	adds	r2, #8
 8004210:	0092      	lsls	r2, r2, #2
 8004212:	6939      	ldr	r1, [r7, #16]
 8004214:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	2203      	movs	r2, #3
 8004222:	409a      	lsls	r2, r3
 8004224:	0013      	movs	r3, r2
 8004226:	43da      	mvns	r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4013      	ands	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2203      	movs	r2, #3
 8004234:	401a      	ands	r2, r3
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	409a      	lsls	r2, r3
 800423c:	0013      	movs	r3, r2
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	23c0      	movs	r3, #192	; 0xc0
 8004250:	029b      	lsls	r3, r3, #10
 8004252:	4013      	ands	r3, r2
 8004254:	d100      	bne.n	8004258 <HAL_GPIO_Init+0x174>
 8004256:	e09a      	b.n	800438e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004258:	4b54      	ldr	r3, [pc, #336]	; (80043ac <HAL_GPIO_Init+0x2c8>)
 800425a:	699a      	ldr	r2, [r3, #24]
 800425c:	4b53      	ldr	r3, [pc, #332]	; (80043ac <HAL_GPIO_Init+0x2c8>)
 800425e:	2101      	movs	r1, #1
 8004260:	430a      	orrs	r2, r1
 8004262:	619a      	str	r2, [r3, #24]
 8004264:	4b51      	ldr	r3, [pc, #324]	; (80043ac <HAL_GPIO_Init+0x2c8>)
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	2201      	movs	r2, #1
 800426a:	4013      	ands	r3, r2
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004270:	4a4f      	ldr	r2, [pc, #316]	; (80043b0 <HAL_GPIO_Init+0x2cc>)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	089b      	lsrs	r3, r3, #2
 8004276:	3302      	adds	r3, #2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	589b      	ldr	r3, [r3, r2]
 800427c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2203      	movs	r2, #3
 8004282:	4013      	ands	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	220f      	movs	r2, #15
 8004288:	409a      	lsls	r2, r3
 800428a:	0013      	movs	r3, r2
 800428c:	43da      	mvns	r2, r3
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	4013      	ands	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	2390      	movs	r3, #144	; 0x90
 8004298:	05db      	lsls	r3, r3, #23
 800429a:	429a      	cmp	r2, r3
 800429c:	d013      	beq.n	80042c6 <HAL_GPIO_Init+0x1e2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a44      	ldr	r2, [pc, #272]	; (80043b4 <HAL_GPIO_Init+0x2d0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00d      	beq.n	80042c2 <HAL_GPIO_Init+0x1de>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a43      	ldr	r2, [pc, #268]	; (80043b8 <HAL_GPIO_Init+0x2d4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d007      	beq.n	80042be <HAL_GPIO_Init+0x1da>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a42      	ldr	r2, [pc, #264]	; (80043bc <HAL_GPIO_Init+0x2d8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <HAL_GPIO_Init+0x1d6>
 80042b6:	2303      	movs	r3, #3
 80042b8:	e006      	b.n	80042c8 <HAL_GPIO_Init+0x1e4>
 80042ba:	2305      	movs	r3, #5
 80042bc:	e004      	b.n	80042c8 <HAL_GPIO_Init+0x1e4>
 80042be:	2302      	movs	r3, #2
 80042c0:	e002      	b.n	80042c8 <HAL_GPIO_Init+0x1e4>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <HAL_GPIO_Init+0x1e4>
 80042c6:	2300      	movs	r3, #0
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	2103      	movs	r1, #3
 80042cc:	400a      	ands	r2, r1
 80042ce:	0092      	lsls	r2, r2, #2
 80042d0:	4093      	lsls	r3, r2
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042d8:	4935      	ldr	r1, [pc, #212]	; (80043b0 <HAL_GPIO_Init+0x2cc>)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	089b      	lsrs	r3, r3, #2
 80042de:	3302      	adds	r3, #2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042e6:	4b36      	ldr	r3, [pc, #216]	; (80043c0 <HAL_GPIO_Init+0x2dc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	43da      	mvns	r2, r3
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4013      	ands	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	2380      	movs	r3, #128	; 0x80
 80042fc:	025b      	lsls	r3, r3, #9
 80042fe:	4013      	ands	r3, r2
 8004300:	d003      	beq.n	800430a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800430a:	4b2d      	ldr	r3, [pc, #180]	; (80043c0 <HAL_GPIO_Init+0x2dc>)
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004310:	4b2b      	ldr	r3, [pc, #172]	; (80043c0 <HAL_GPIO_Init+0x2dc>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	43da      	mvns	r2, r3
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4013      	ands	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	2380      	movs	r3, #128	; 0x80
 8004326:	029b      	lsls	r3, r3, #10
 8004328:	4013      	ands	r3, r2
 800432a:	d003      	beq.n	8004334 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004334:	4b22      	ldr	r3, [pc, #136]	; (80043c0 <HAL_GPIO_Init+0x2dc>)
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800433a:	4b21      	ldr	r3, [pc, #132]	; (80043c0 <HAL_GPIO_Init+0x2dc>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	43da      	mvns	r2, r3
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	4013      	ands	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	2380      	movs	r3, #128	; 0x80
 8004350:	035b      	lsls	r3, r3, #13
 8004352:	4013      	ands	r3, r2
 8004354:	d003      	beq.n	800435e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800435e:	4b18      	ldr	r3, [pc, #96]	; (80043c0 <HAL_GPIO_Init+0x2dc>)
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004364:	4b16      	ldr	r3, [pc, #88]	; (80043c0 <HAL_GPIO_Init+0x2dc>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	43da      	mvns	r2, r3
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4013      	ands	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	2380      	movs	r3, #128	; 0x80
 800437a:	039b      	lsls	r3, r3, #14
 800437c:	4013      	ands	r3, r2
 800437e:	d003      	beq.n	8004388 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004388:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <HAL_GPIO_Init+0x2dc>)
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	3301      	adds	r3, #1
 8004392:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	40da      	lsrs	r2, r3
 800439c:	1e13      	subs	r3, r2, #0
 800439e:	d000      	beq.n	80043a2 <HAL_GPIO_Init+0x2be>
 80043a0:	e6a8      	b.n	80040f4 <HAL_GPIO_Init+0x10>
  } 
}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	46c0      	nop			; (mov r8, r8)
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b006      	add	sp, #24
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40021000 	.word	0x40021000
 80043b0:	40010000 	.word	0x40010000
 80043b4:	48000400 	.word	0x48000400
 80043b8:	48000800 	.word	0x48000800
 80043bc:	48000c00 	.word	0x48000c00
 80043c0:	40010400 	.word	0x40010400

080043c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	0008      	movs	r0, r1
 80043ce:	0011      	movs	r1, r2
 80043d0:	1cbb      	adds	r3, r7, #2
 80043d2:	1c02      	adds	r2, r0, #0
 80043d4:	801a      	strh	r2, [r3, #0]
 80043d6:	1c7b      	adds	r3, r7, #1
 80043d8:	1c0a      	adds	r2, r1, #0
 80043da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043dc:	1c7b      	adds	r3, r7, #1
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d004      	beq.n	80043ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043e4:	1cbb      	adds	r3, r7, #2
 80043e6:	881a      	ldrh	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043ec:	e003      	b.n	80043f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043ee:	1cbb      	adds	r3, r7, #2
 80043f0:	881a      	ldrh	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b002      	add	sp, #8
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e301      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2201      	movs	r2, #1
 8004418:	4013      	ands	r3, r2
 800441a:	d100      	bne.n	800441e <HAL_RCC_OscConfig+0x1e>
 800441c:	e08d      	b.n	800453a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800441e:	4bc3      	ldr	r3, [pc, #780]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	220c      	movs	r2, #12
 8004424:	4013      	ands	r3, r2
 8004426:	2b04      	cmp	r3, #4
 8004428:	d00e      	beq.n	8004448 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800442a:	4bc0      	ldr	r3, [pc, #768]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	220c      	movs	r2, #12
 8004430:	4013      	ands	r3, r2
 8004432:	2b08      	cmp	r3, #8
 8004434:	d116      	bne.n	8004464 <HAL_RCC_OscConfig+0x64>
 8004436:	4bbd      	ldr	r3, [pc, #756]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	2380      	movs	r3, #128	; 0x80
 800443c:	025b      	lsls	r3, r3, #9
 800443e:	401a      	ands	r2, r3
 8004440:	2380      	movs	r3, #128	; 0x80
 8004442:	025b      	lsls	r3, r3, #9
 8004444:	429a      	cmp	r2, r3
 8004446:	d10d      	bne.n	8004464 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004448:	4bb8      	ldr	r3, [pc, #736]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	029b      	lsls	r3, r3, #10
 8004450:	4013      	ands	r3, r2
 8004452:	d100      	bne.n	8004456 <HAL_RCC_OscConfig+0x56>
 8004454:	e070      	b.n	8004538 <HAL_RCC_OscConfig+0x138>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d000      	beq.n	8004460 <HAL_RCC_OscConfig+0x60>
 800445e:	e06b      	b.n	8004538 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e2d8      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d107      	bne.n	800447c <HAL_RCC_OscConfig+0x7c>
 800446c:	4baf      	ldr	r3, [pc, #700]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4bae      	ldr	r3, [pc, #696]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 8004472:	2180      	movs	r1, #128	; 0x80
 8004474:	0249      	lsls	r1, r1, #9
 8004476:	430a      	orrs	r2, r1
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	e02f      	b.n	80044dc <HAL_RCC_OscConfig+0xdc>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10c      	bne.n	800449e <HAL_RCC_OscConfig+0x9e>
 8004484:	4ba9      	ldr	r3, [pc, #676]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4ba8      	ldr	r3, [pc, #672]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 800448a:	49a9      	ldr	r1, [pc, #676]	; (8004730 <HAL_RCC_OscConfig+0x330>)
 800448c:	400a      	ands	r2, r1
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	4ba6      	ldr	r3, [pc, #664]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	4ba5      	ldr	r3, [pc, #660]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 8004496:	49a7      	ldr	r1, [pc, #668]	; (8004734 <HAL_RCC_OscConfig+0x334>)
 8004498:	400a      	ands	r2, r1
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	e01e      	b.n	80044dc <HAL_RCC_OscConfig+0xdc>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b05      	cmp	r3, #5
 80044a4:	d10e      	bne.n	80044c4 <HAL_RCC_OscConfig+0xc4>
 80044a6:	4ba1      	ldr	r3, [pc, #644]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4ba0      	ldr	r3, [pc, #640]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80044ac:	2180      	movs	r1, #128	; 0x80
 80044ae:	02c9      	lsls	r1, r1, #11
 80044b0:	430a      	orrs	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	4b9d      	ldr	r3, [pc, #628]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4b9c      	ldr	r3, [pc, #624]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80044ba:	2180      	movs	r1, #128	; 0x80
 80044bc:	0249      	lsls	r1, r1, #9
 80044be:	430a      	orrs	r2, r1
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0xdc>
 80044c4:	4b99      	ldr	r3, [pc, #612]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	4b98      	ldr	r3, [pc, #608]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80044ca:	4999      	ldr	r1, [pc, #612]	; (8004730 <HAL_RCC_OscConfig+0x330>)
 80044cc:	400a      	ands	r2, r1
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	4b96      	ldr	r3, [pc, #600]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	4b95      	ldr	r3, [pc, #596]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80044d6:	4997      	ldr	r1, [pc, #604]	; (8004734 <HAL_RCC_OscConfig+0x334>)
 80044d8:	400a      	ands	r2, r1
 80044da:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d014      	beq.n	800450e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7ff fd1c 	bl	8003f20 <HAL_GetTick>
 80044e8:	0003      	movs	r3, r0
 80044ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ee:	f7ff fd17 	bl	8003f20 <HAL_GetTick>
 80044f2:	0002      	movs	r2, r0
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b64      	cmp	r3, #100	; 0x64
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e28a      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004500:	4b8a      	ldr	r3, [pc, #552]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	2380      	movs	r3, #128	; 0x80
 8004506:	029b      	lsls	r3, r3, #10
 8004508:	4013      	ands	r3, r2
 800450a:	d0f0      	beq.n	80044ee <HAL_RCC_OscConfig+0xee>
 800450c:	e015      	b.n	800453a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450e:	f7ff fd07 	bl	8003f20 <HAL_GetTick>
 8004512:	0003      	movs	r3, r0
 8004514:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004518:	f7ff fd02 	bl	8003f20 <HAL_GetTick>
 800451c:	0002      	movs	r2, r0
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b64      	cmp	r3, #100	; 0x64
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e275      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452a:	4b80      	ldr	r3, [pc, #512]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	2380      	movs	r3, #128	; 0x80
 8004530:	029b      	lsls	r3, r3, #10
 8004532:	4013      	ands	r3, r2
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0x118>
 8004536:	e000      	b.n	800453a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004538:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2202      	movs	r2, #2
 8004540:	4013      	ands	r3, r2
 8004542:	d100      	bne.n	8004546 <HAL_RCC_OscConfig+0x146>
 8004544:	e069      	b.n	800461a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004546:	4b79      	ldr	r3, [pc, #484]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	220c      	movs	r2, #12
 800454c:	4013      	ands	r3, r2
 800454e:	d00b      	beq.n	8004568 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004550:	4b76      	ldr	r3, [pc, #472]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	220c      	movs	r2, #12
 8004556:	4013      	ands	r3, r2
 8004558:	2b08      	cmp	r3, #8
 800455a:	d11c      	bne.n	8004596 <HAL_RCC_OscConfig+0x196>
 800455c:	4b73      	ldr	r3, [pc, #460]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	025b      	lsls	r3, r3, #9
 8004564:	4013      	ands	r3, r2
 8004566:	d116      	bne.n	8004596 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004568:	4b70      	ldr	r3, [pc, #448]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2202      	movs	r2, #2
 800456e:	4013      	ands	r3, r2
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x17e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e24b      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b6b      	ldr	r3, [pc, #428]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	22f8      	movs	r2, #248	; 0xf8
 8004584:	4393      	bics	r3, r2
 8004586:	0019      	movs	r1, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	00da      	lsls	r2, r3, #3
 800458e:	4b67      	ldr	r3, [pc, #412]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 8004590:	430a      	orrs	r2, r1
 8004592:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004594:	e041      	b.n	800461a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d024      	beq.n	80045e8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459e:	4b63      	ldr	r3, [pc, #396]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4b62      	ldr	r3, [pc, #392]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80045a4:	2101      	movs	r1, #1
 80045a6:	430a      	orrs	r2, r1
 80045a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045aa:	f7ff fcb9 	bl	8003f20 <HAL_GetTick>
 80045ae:	0003      	movs	r3, r0
 80045b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045b4:	f7ff fcb4 	bl	8003f20 <HAL_GetTick>
 80045b8:	0002      	movs	r2, r0
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e227      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c6:	4b59      	ldr	r3, [pc, #356]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2202      	movs	r2, #2
 80045cc:	4013      	ands	r3, r2
 80045ce:	d0f1      	beq.n	80045b4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d0:	4b56      	ldr	r3, [pc, #344]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	22f8      	movs	r2, #248	; 0xf8
 80045d6:	4393      	bics	r3, r2
 80045d8:	0019      	movs	r1, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	00da      	lsls	r2, r3, #3
 80045e0:	4b52      	ldr	r3, [pc, #328]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80045e2:	430a      	orrs	r2, r1
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	e018      	b.n	800461a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e8:	4b50      	ldr	r3, [pc, #320]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	4b4f      	ldr	r3, [pc, #316]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80045ee:	2101      	movs	r1, #1
 80045f0:	438a      	bics	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7ff fc94 	bl	8003f20 <HAL_GetTick>
 80045f8:	0003      	movs	r3, r0
 80045fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045fe:	f7ff fc8f 	bl	8003f20 <HAL_GetTick>
 8004602:	0002      	movs	r2, r0
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e202      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004610:	4b46      	ldr	r3, [pc, #280]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2202      	movs	r2, #2
 8004616:	4013      	ands	r3, r2
 8004618:	d1f1      	bne.n	80045fe <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2208      	movs	r2, #8
 8004620:	4013      	ands	r3, r2
 8004622:	d036      	beq.n	8004692 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d019      	beq.n	8004660 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800462c:	4b3f      	ldr	r3, [pc, #252]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 800462e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004630:	4b3e      	ldr	r3, [pc, #248]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 8004632:	2101      	movs	r1, #1
 8004634:	430a      	orrs	r2, r1
 8004636:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004638:	f7ff fc72 	bl	8003f20 <HAL_GetTick>
 800463c:	0003      	movs	r3, r0
 800463e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004642:	f7ff fc6d 	bl	8003f20 <HAL_GetTick>
 8004646:	0002      	movs	r2, r0
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e1e0      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004654:	4b35      	ldr	r3, [pc, #212]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	2202      	movs	r2, #2
 800465a:	4013      	ands	r3, r2
 800465c:	d0f1      	beq.n	8004642 <HAL_RCC_OscConfig+0x242>
 800465e:	e018      	b.n	8004692 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004660:	4b32      	ldr	r3, [pc, #200]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 8004662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004664:	4b31      	ldr	r3, [pc, #196]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 8004666:	2101      	movs	r1, #1
 8004668:	438a      	bics	r2, r1
 800466a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800466c:	f7ff fc58 	bl	8003f20 <HAL_GetTick>
 8004670:	0003      	movs	r3, r0
 8004672:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004676:	f7ff fc53 	bl	8003f20 <HAL_GetTick>
 800467a:	0002      	movs	r2, r0
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e1c6      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004688:	4b28      	ldr	r3, [pc, #160]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	2202      	movs	r2, #2
 800468e:	4013      	ands	r3, r2
 8004690:	d1f1      	bne.n	8004676 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2204      	movs	r2, #4
 8004698:	4013      	ands	r3, r2
 800469a:	d100      	bne.n	800469e <HAL_RCC_OscConfig+0x29e>
 800469c:	e0b4      	b.n	8004808 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800469e:	201f      	movs	r0, #31
 80046a0:	183b      	adds	r3, r7, r0
 80046a2:	2200      	movs	r2, #0
 80046a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a6:	4b21      	ldr	r3, [pc, #132]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80046a8:	69da      	ldr	r2, [r3, #28]
 80046aa:	2380      	movs	r3, #128	; 0x80
 80046ac:	055b      	lsls	r3, r3, #21
 80046ae:	4013      	ands	r3, r2
 80046b0:	d110      	bne.n	80046d4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b2:	4b1e      	ldr	r3, [pc, #120]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80046b4:	69da      	ldr	r2, [r3, #28]
 80046b6:	4b1d      	ldr	r3, [pc, #116]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80046b8:	2180      	movs	r1, #128	; 0x80
 80046ba:	0549      	lsls	r1, r1, #21
 80046bc:	430a      	orrs	r2, r1
 80046be:	61da      	str	r2, [r3, #28]
 80046c0:	4b1a      	ldr	r3, [pc, #104]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	2380      	movs	r3, #128	; 0x80
 80046c6:	055b      	lsls	r3, r3, #21
 80046c8:	4013      	ands	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046ce:	183b      	adds	r3, r7, r0
 80046d0:	2201      	movs	r2, #1
 80046d2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d4:	4b18      	ldr	r3, [pc, #96]	; (8004738 <HAL_RCC_OscConfig+0x338>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	2380      	movs	r3, #128	; 0x80
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	4013      	ands	r3, r2
 80046de:	d11a      	bne.n	8004716 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046e0:	4b15      	ldr	r3, [pc, #84]	; (8004738 <HAL_RCC_OscConfig+0x338>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4b14      	ldr	r3, [pc, #80]	; (8004738 <HAL_RCC_OscConfig+0x338>)
 80046e6:	2180      	movs	r1, #128	; 0x80
 80046e8:	0049      	lsls	r1, r1, #1
 80046ea:	430a      	orrs	r2, r1
 80046ec:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ee:	f7ff fc17 	bl	8003f20 <HAL_GetTick>
 80046f2:	0003      	movs	r3, r0
 80046f4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f8:	f7ff fc12 	bl	8003f20 <HAL_GetTick>
 80046fc:	0002      	movs	r2, r0
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b64      	cmp	r3, #100	; 0x64
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e185      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470a:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <HAL_RCC_OscConfig+0x338>)
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	2380      	movs	r3, #128	; 0x80
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	4013      	ands	r3, r2
 8004714:	d0f0      	beq.n	80046f8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d10e      	bne.n	800473c <HAL_RCC_OscConfig+0x33c>
 800471e:	4b03      	ldr	r3, [pc, #12]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 8004720:	6a1a      	ldr	r2, [r3, #32]
 8004722:	4b02      	ldr	r3, [pc, #8]	; (800472c <HAL_RCC_OscConfig+0x32c>)
 8004724:	2101      	movs	r1, #1
 8004726:	430a      	orrs	r2, r1
 8004728:	621a      	str	r2, [r3, #32]
 800472a:	e035      	b.n	8004798 <HAL_RCC_OscConfig+0x398>
 800472c:	40021000 	.word	0x40021000
 8004730:	fffeffff 	.word	0xfffeffff
 8004734:	fffbffff 	.word	0xfffbffff
 8004738:	40007000 	.word	0x40007000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10c      	bne.n	800475e <HAL_RCC_OscConfig+0x35e>
 8004744:	4bb6      	ldr	r3, [pc, #728]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004746:	6a1a      	ldr	r2, [r3, #32]
 8004748:	4bb5      	ldr	r3, [pc, #724]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 800474a:	2101      	movs	r1, #1
 800474c:	438a      	bics	r2, r1
 800474e:	621a      	str	r2, [r3, #32]
 8004750:	4bb3      	ldr	r3, [pc, #716]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004752:	6a1a      	ldr	r2, [r3, #32]
 8004754:	4bb2      	ldr	r3, [pc, #712]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004756:	2104      	movs	r1, #4
 8004758:	438a      	bics	r2, r1
 800475a:	621a      	str	r2, [r3, #32]
 800475c:	e01c      	b.n	8004798 <HAL_RCC_OscConfig+0x398>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b05      	cmp	r3, #5
 8004764:	d10c      	bne.n	8004780 <HAL_RCC_OscConfig+0x380>
 8004766:	4bae      	ldr	r3, [pc, #696]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004768:	6a1a      	ldr	r2, [r3, #32]
 800476a:	4bad      	ldr	r3, [pc, #692]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 800476c:	2104      	movs	r1, #4
 800476e:	430a      	orrs	r2, r1
 8004770:	621a      	str	r2, [r3, #32]
 8004772:	4bab      	ldr	r3, [pc, #684]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004774:	6a1a      	ldr	r2, [r3, #32]
 8004776:	4baa      	ldr	r3, [pc, #680]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004778:	2101      	movs	r1, #1
 800477a:	430a      	orrs	r2, r1
 800477c:	621a      	str	r2, [r3, #32]
 800477e:	e00b      	b.n	8004798 <HAL_RCC_OscConfig+0x398>
 8004780:	4ba7      	ldr	r3, [pc, #668]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004782:	6a1a      	ldr	r2, [r3, #32]
 8004784:	4ba6      	ldr	r3, [pc, #664]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004786:	2101      	movs	r1, #1
 8004788:	438a      	bics	r2, r1
 800478a:	621a      	str	r2, [r3, #32]
 800478c:	4ba4      	ldr	r3, [pc, #656]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 800478e:	6a1a      	ldr	r2, [r3, #32]
 8004790:	4ba3      	ldr	r3, [pc, #652]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004792:	2104      	movs	r1, #4
 8004794:	438a      	bics	r2, r1
 8004796:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d014      	beq.n	80047ca <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a0:	f7ff fbbe 	bl	8003f20 <HAL_GetTick>
 80047a4:	0003      	movs	r3, r0
 80047a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a8:	e009      	b.n	80047be <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047aa:	f7ff fbb9 	bl	8003f20 <HAL_GetTick>
 80047ae:	0002      	movs	r2, r0
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	4a9b      	ldr	r2, [pc, #620]	; (8004a24 <HAL_RCC_OscConfig+0x624>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e12b      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047be:	4b98      	ldr	r3, [pc, #608]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	2202      	movs	r2, #2
 80047c4:	4013      	ands	r3, r2
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCC_OscConfig+0x3aa>
 80047c8:	e013      	b.n	80047f2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ca:	f7ff fba9 	bl	8003f20 <HAL_GetTick>
 80047ce:	0003      	movs	r3, r0
 80047d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d2:	e009      	b.n	80047e8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047d4:	f7ff fba4 	bl	8003f20 <HAL_GetTick>
 80047d8:	0002      	movs	r2, r0
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	4a91      	ldr	r2, [pc, #580]	; (8004a24 <HAL_RCC_OscConfig+0x624>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e116      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e8:	4b8d      	ldr	r3, [pc, #564]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	2202      	movs	r2, #2
 80047ee:	4013      	ands	r3, r2
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047f2:	231f      	movs	r3, #31
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d105      	bne.n	8004808 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047fc:	4b88      	ldr	r3, [pc, #544]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	4b87      	ldr	r3, [pc, #540]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004802:	4989      	ldr	r1, [pc, #548]	; (8004a28 <HAL_RCC_OscConfig+0x628>)
 8004804:	400a      	ands	r2, r1
 8004806:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2210      	movs	r2, #16
 800480e:	4013      	ands	r3, r2
 8004810:	d063      	beq.n	80048da <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d12a      	bne.n	8004870 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800481a:	4b81      	ldr	r3, [pc, #516]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 800481c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800481e:	4b80      	ldr	r3, [pc, #512]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004820:	2104      	movs	r1, #4
 8004822:	430a      	orrs	r2, r1
 8004824:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004826:	4b7e      	ldr	r3, [pc, #504]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800482a:	4b7d      	ldr	r3, [pc, #500]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 800482c:	2101      	movs	r1, #1
 800482e:	430a      	orrs	r2, r1
 8004830:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004832:	f7ff fb75 	bl	8003f20 <HAL_GetTick>
 8004836:	0003      	movs	r3, r0
 8004838:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800483c:	f7ff fb70 	bl	8003f20 <HAL_GetTick>
 8004840:	0002      	movs	r2, r0
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e0e3      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800484e:	4b74      	ldr	r3, [pc, #464]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004852:	2202      	movs	r2, #2
 8004854:	4013      	ands	r3, r2
 8004856:	d0f1      	beq.n	800483c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004858:	4b71      	ldr	r3, [pc, #452]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 800485a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485c:	22f8      	movs	r2, #248	; 0xf8
 800485e:	4393      	bics	r3, r2
 8004860:	0019      	movs	r1, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	00da      	lsls	r2, r3, #3
 8004868:	4b6d      	ldr	r3, [pc, #436]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 800486a:	430a      	orrs	r2, r1
 800486c:	635a      	str	r2, [r3, #52]	; 0x34
 800486e:	e034      	b.n	80048da <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	3305      	adds	r3, #5
 8004876:	d111      	bne.n	800489c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004878:	4b69      	ldr	r3, [pc, #420]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 800487a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800487c:	4b68      	ldr	r3, [pc, #416]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 800487e:	2104      	movs	r1, #4
 8004880:	438a      	bics	r2, r1
 8004882:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004884:	4b66      	ldr	r3, [pc, #408]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004888:	22f8      	movs	r2, #248	; 0xf8
 800488a:	4393      	bics	r3, r2
 800488c:	0019      	movs	r1, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	00da      	lsls	r2, r3, #3
 8004894:	4b62      	ldr	r3, [pc, #392]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004896:	430a      	orrs	r2, r1
 8004898:	635a      	str	r2, [r3, #52]	; 0x34
 800489a:	e01e      	b.n	80048da <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800489c:	4b60      	ldr	r3, [pc, #384]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 800489e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a0:	4b5f      	ldr	r3, [pc, #380]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 80048a2:	2104      	movs	r1, #4
 80048a4:	430a      	orrs	r2, r1
 80048a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80048a8:	4b5d      	ldr	r3, [pc, #372]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 80048aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ac:	4b5c      	ldr	r3, [pc, #368]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 80048ae:	2101      	movs	r1, #1
 80048b0:	438a      	bics	r2, r1
 80048b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b4:	f7ff fb34 	bl	8003f20 <HAL_GetTick>
 80048b8:	0003      	movs	r3, r0
 80048ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80048be:	f7ff fb2f 	bl	8003f20 <HAL_GetTick>
 80048c2:	0002      	movs	r2, r0
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e0a2      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80048d0:	4b53      	ldr	r3, [pc, #332]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 80048d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d4:	2202      	movs	r2, #2
 80048d6:	4013      	ands	r3, r2
 80048d8:	d1f1      	bne.n	80048be <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d100      	bne.n	80048e4 <HAL_RCC_OscConfig+0x4e4>
 80048e2:	e097      	b.n	8004a14 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048e4:	4b4e      	ldr	r3, [pc, #312]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	220c      	movs	r2, #12
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d100      	bne.n	80048f2 <HAL_RCC_OscConfig+0x4f2>
 80048f0:	e06b      	b.n	80049ca <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d14c      	bne.n	8004994 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fa:	4b49      	ldr	r3, [pc, #292]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4b48      	ldr	r3, [pc, #288]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004900:	494a      	ldr	r1, [pc, #296]	; (8004a2c <HAL_RCC_OscConfig+0x62c>)
 8004902:	400a      	ands	r2, r1
 8004904:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004906:	f7ff fb0b 	bl	8003f20 <HAL_GetTick>
 800490a:	0003      	movs	r3, r0
 800490c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004910:	f7ff fb06 	bl	8003f20 <HAL_GetTick>
 8004914:	0002      	movs	r2, r0
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e079      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004922:	4b3f      	ldr	r3, [pc, #252]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	2380      	movs	r3, #128	; 0x80
 8004928:	049b      	lsls	r3, r3, #18
 800492a:	4013      	ands	r3, r2
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800492e:	4b3c      	ldr	r3, [pc, #240]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	220f      	movs	r2, #15
 8004934:	4393      	bics	r3, r2
 8004936:	0019      	movs	r1, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493c:	4b38      	ldr	r3, [pc, #224]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 800493e:	430a      	orrs	r2, r1
 8004940:	62da      	str	r2, [r3, #44]	; 0x2c
 8004942:	4b37      	ldr	r3, [pc, #220]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4a3a      	ldr	r2, [pc, #232]	; (8004a30 <HAL_RCC_OscConfig+0x630>)
 8004948:	4013      	ands	r3, r2
 800494a:	0019      	movs	r1, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	431a      	orrs	r2, r3
 8004956:	4b32      	ldr	r3, [pc, #200]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004958:	430a      	orrs	r2, r1
 800495a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800495c:	4b30      	ldr	r3, [pc, #192]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	4b2f      	ldr	r3, [pc, #188]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004962:	2180      	movs	r1, #128	; 0x80
 8004964:	0449      	lsls	r1, r1, #17
 8004966:	430a      	orrs	r2, r1
 8004968:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496a:	f7ff fad9 	bl	8003f20 <HAL_GetTick>
 800496e:	0003      	movs	r3, r0
 8004970:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004974:	f7ff fad4 	bl	8003f20 <HAL_GetTick>
 8004978:	0002      	movs	r2, r0
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e047      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004986:	4b26      	ldr	r3, [pc, #152]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	2380      	movs	r3, #128	; 0x80
 800498c:	049b      	lsls	r3, r3, #18
 800498e:	4013      	ands	r3, r2
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0x574>
 8004992:	e03f      	b.n	8004a14 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004994:	4b22      	ldr	r3, [pc, #136]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4b21      	ldr	r3, [pc, #132]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 800499a:	4924      	ldr	r1, [pc, #144]	; (8004a2c <HAL_RCC_OscConfig+0x62c>)
 800499c:	400a      	ands	r2, r1
 800499e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a0:	f7ff fabe 	bl	8003f20 <HAL_GetTick>
 80049a4:	0003      	movs	r3, r0
 80049a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049aa:	f7ff fab9 	bl	8003f20 <HAL_GetTick>
 80049ae:	0002      	movs	r2, r0
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e02c      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049bc:	4b18      	ldr	r3, [pc, #96]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	2380      	movs	r3, #128	; 0x80
 80049c2:	049b      	lsls	r3, r3, #18
 80049c4:	4013      	ands	r3, r2
 80049c6:	d1f0      	bne.n	80049aa <HAL_RCC_OscConfig+0x5aa>
 80049c8:	e024      	b.n	8004a14 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e01f      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80049d6:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80049dc:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <HAL_RCC_OscConfig+0x620>)
 80049de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	2380      	movs	r3, #128	; 0x80
 80049e6:	025b      	lsls	r3, r3, #9
 80049e8:	401a      	ands	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d10e      	bne.n	8004a10 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	220f      	movs	r2, #15
 80049f6:	401a      	ands	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d107      	bne.n	8004a10 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	23f0      	movs	r3, #240	; 0xf0
 8004a04:	039b      	lsls	r3, r3, #14
 8004a06:	401a      	ands	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e000      	b.n	8004a16 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	0018      	movs	r0, r3
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	b008      	add	sp, #32
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	40021000 	.word	0x40021000
 8004a24:	00001388 	.word	0x00001388
 8004a28:	efffffff 	.word	0xefffffff
 8004a2c:	feffffff 	.word	0xfeffffff
 8004a30:	ffc2ffff 	.word	0xffc2ffff

08004a34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0b3      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a48:	4b5b      	ldr	r3, [pc, #364]	; (8004bb8 <HAL_RCC_ClockConfig+0x184>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	4013      	ands	r3, r2
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d911      	bls.n	8004a7a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b58      	ldr	r3, [pc, #352]	; (8004bb8 <HAL_RCC_ClockConfig+0x184>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	4393      	bics	r3, r2
 8004a5e:	0019      	movs	r1, r3
 8004a60:	4b55      	ldr	r3, [pc, #340]	; (8004bb8 <HAL_RCC_ClockConfig+0x184>)
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a68:	4b53      	ldr	r3, [pc, #332]	; (8004bb8 <HAL_RCC_ClockConfig+0x184>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	4013      	ands	r3, r2
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d001      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e09a      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	4013      	ands	r3, r2
 8004a82:	d015      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2204      	movs	r2, #4
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d006      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004a8e:	4b4b      	ldr	r3, [pc, #300]	; (8004bbc <HAL_RCC_ClockConfig+0x188>)
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	4b4a      	ldr	r3, [pc, #296]	; (8004bbc <HAL_RCC_ClockConfig+0x188>)
 8004a94:	21e0      	movs	r1, #224	; 0xe0
 8004a96:	00c9      	lsls	r1, r1, #3
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a9c:	4b47      	ldr	r3, [pc, #284]	; (8004bbc <HAL_RCC_ClockConfig+0x188>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	22f0      	movs	r2, #240	; 0xf0
 8004aa2:	4393      	bics	r3, r2
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	4b44      	ldr	r3, [pc, #272]	; (8004bbc <HAL_RCC_ClockConfig+0x188>)
 8004aac:	430a      	orrs	r2, r1
 8004aae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d040      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac2:	4b3e      	ldr	r3, [pc, #248]	; (8004bbc <HAL_RCC_ClockConfig+0x188>)
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	2380      	movs	r3, #128	; 0x80
 8004ac8:	029b      	lsls	r3, r3, #10
 8004aca:	4013      	ands	r3, r2
 8004acc:	d114      	bne.n	8004af8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e06e      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d107      	bne.n	8004aea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ada:	4b38      	ldr	r3, [pc, #224]	; (8004bbc <HAL_RCC_ClockConfig+0x188>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	2380      	movs	r3, #128	; 0x80
 8004ae0:	049b      	lsls	r3, r3, #18
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d108      	bne.n	8004af8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e062      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aea:	4b34      	ldr	r3, [pc, #208]	; (8004bbc <HAL_RCC_ClockConfig+0x188>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2202      	movs	r2, #2
 8004af0:	4013      	ands	r3, r2
 8004af2:	d101      	bne.n	8004af8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e05b      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004af8:	4b30      	ldr	r3, [pc, #192]	; (8004bbc <HAL_RCC_ClockConfig+0x188>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2203      	movs	r2, #3
 8004afe:	4393      	bics	r3, r2
 8004b00:	0019      	movs	r1, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	4b2d      	ldr	r3, [pc, #180]	; (8004bbc <HAL_RCC_ClockConfig+0x188>)
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b0c:	f7ff fa08 	bl	8003f20 <HAL_GetTick>
 8004b10:	0003      	movs	r3, r0
 8004b12:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b14:	e009      	b.n	8004b2a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b16:	f7ff fa03 	bl	8003f20 <HAL_GetTick>
 8004b1a:	0002      	movs	r2, r0
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	4a27      	ldr	r2, [pc, #156]	; (8004bc0 <HAL_RCC_ClockConfig+0x18c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e042      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2a:	4b24      	ldr	r3, [pc, #144]	; (8004bbc <HAL_RCC_ClockConfig+0x188>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	220c      	movs	r2, #12
 8004b30:	401a      	ands	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d1ec      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b3c:	4b1e      	ldr	r3, [pc, #120]	; (8004bb8 <HAL_RCC_ClockConfig+0x184>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2201      	movs	r2, #1
 8004b42:	4013      	ands	r3, r2
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d211      	bcs.n	8004b6e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4a:	4b1b      	ldr	r3, [pc, #108]	; (8004bb8 <HAL_RCC_ClockConfig+0x184>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	4393      	bics	r3, r2
 8004b52:	0019      	movs	r1, r3
 8004b54:	4b18      	ldr	r3, [pc, #96]	; (8004bb8 <HAL_RCC_ClockConfig+0x184>)
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5c:	4b16      	ldr	r3, [pc, #88]	; (8004bb8 <HAL_RCC_ClockConfig+0x184>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2201      	movs	r2, #1
 8004b62:	4013      	ands	r3, r2
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d001      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e020      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2204      	movs	r2, #4
 8004b74:	4013      	ands	r3, r2
 8004b76:	d009      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004b78:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <HAL_RCC_ClockConfig+0x188>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4a11      	ldr	r2, [pc, #68]	; (8004bc4 <HAL_RCC_ClockConfig+0x190>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	0019      	movs	r1, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <HAL_RCC_ClockConfig+0x188>)
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b8c:	f000 f820 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8004b90:	0001      	movs	r1, r0
 8004b92:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <HAL_RCC_ClockConfig+0x188>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	091b      	lsrs	r3, r3, #4
 8004b98:	220f      	movs	r2, #15
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	4a0a      	ldr	r2, [pc, #40]	; (8004bc8 <HAL_RCC_ClockConfig+0x194>)
 8004b9e:	5cd3      	ldrb	r3, [r2, r3]
 8004ba0:	000a      	movs	r2, r1
 8004ba2:	40da      	lsrs	r2, r3
 8004ba4:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <HAL_RCC_ClockConfig+0x198>)
 8004ba6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004ba8:	2003      	movs	r0, #3
 8004baa:	f7ff f973 	bl	8003e94 <HAL_InitTick>
  
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	b004      	add	sp, #16
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40022000 	.word	0x40022000
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	00001388 	.word	0x00001388
 8004bc4:	fffff8ff 	.word	0xfffff8ff
 8004bc8:	0800b118 	.word	0x0800b118
 8004bcc:	20000000 	.word	0x20000000

08004bd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd0:	b590      	push	{r4, r7, lr}
 8004bd2:	b08f      	sub	sp, #60	; 0x3c
 8004bd4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004bd6:	2314      	movs	r3, #20
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	4a2b      	ldr	r2, [pc, #172]	; (8004c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bdc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004bde:	c313      	stmia	r3!, {r0, r1, r4}
 8004be0:	6812      	ldr	r2, [r2, #0]
 8004be2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004be4:	1d3b      	adds	r3, r7, #4
 8004be6:	4a29      	ldr	r2, [pc, #164]	; (8004c8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004be8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004bea:	c313      	stmia	r3!, {r0, r1, r4}
 8004bec:	6812      	ldr	r2, [r2, #0]
 8004bee:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004c04:	4b22      	ldr	r3, [pc, #136]	; (8004c90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0c:	220c      	movs	r2, #12
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d002      	beq.n	8004c1a <HAL_RCC_GetSysClockFreq+0x4a>
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d003      	beq.n	8004c20 <HAL_RCC_GetSysClockFreq+0x50>
 8004c18:	e02d      	b.n	8004c76 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c1a:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c1c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c1e:	e02d      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c22:	0c9b      	lsrs	r3, r3, #18
 8004c24:	220f      	movs	r2, #15
 8004c26:	4013      	ands	r3, r2
 8004c28:	2214      	movs	r2, #20
 8004c2a:	18ba      	adds	r2, r7, r2
 8004c2c:	5cd3      	ldrb	r3, [r2, r3]
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004c30:	4b17      	ldr	r3, [pc, #92]	; (8004c90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	220f      	movs	r2, #15
 8004c36:	4013      	ands	r3, r2
 8004c38:	1d3a      	adds	r2, r7, #4
 8004c3a:	5cd3      	ldrb	r3, [r2, r3]
 8004c3c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	025b      	lsls	r3, r3, #9
 8004c44:	4013      	ands	r3, r2
 8004c46:	d009      	beq.n	8004c5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c4a:	4812      	ldr	r0, [pc, #72]	; (8004c94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c4c:	f7fb fa78 	bl	8000140 <__udivsi3>
 8004c50:	0003      	movs	r3, r0
 8004c52:	001a      	movs	r2, r3
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	4353      	muls	r3, r2
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
 8004c5a:	e009      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c5e:	000a      	movs	r2, r1
 8004c60:	0152      	lsls	r2, r2, #5
 8004c62:	1a52      	subs	r2, r2, r1
 8004c64:	0193      	lsls	r3, r2, #6
 8004c66:	1a9b      	subs	r3, r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	185b      	adds	r3, r3, r1
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c74:	e002      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c76:	4b07      	ldr	r3, [pc, #28]	; (8004c94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c7a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004c7e:	0018      	movs	r0, r3
 8004c80:	46bd      	mov	sp, r7
 8004c82:	b00f      	add	sp, #60	; 0x3c
 8004c84:	bd90      	pop	{r4, r7, pc}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	0800aff8 	.word	0x0800aff8
 8004c8c:	0800b008 	.word	0x0800b008
 8004c90:	40021000 	.word	0x40021000
 8004c94:	007a1200 	.word	0x007a1200

08004c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c9c:	4b02      	ldr	r3, [pc, #8]	; (8004ca8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
}
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	20000000 	.word	0x20000000

08004cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004cb0:	f7ff fff2 	bl	8004c98 <HAL_RCC_GetHCLKFreq>
 8004cb4:	0001      	movs	r1, r0
 8004cb6:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	0a1b      	lsrs	r3, r3, #8
 8004cbc:	2207      	movs	r2, #7
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	4a04      	ldr	r2, [pc, #16]	; (8004cd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cc2:	5cd3      	ldrb	r3, [r2, r3]
 8004cc4:	40d9      	lsrs	r1, r3
 8004cc6:	000b      	movs	r3, r1
}    
 8004cc8:	0018      	movs	r0, r3
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	0800b128 	.word	0x0800b128

08004cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	025b      	lsls	r3, r3, #9
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d100      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004cf4:	e08e      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004cf6:	2017      	movs	r0, #23
 8004cf8:	183b      	adds	r3, r7, r0
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cfe:	4b5f      	ldr	r3, [pc, #380]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004d00:	69da      	ldr	r2, [r3, #28]
 8004d02:	2380      	movs	r3, #128	; 0x80
 8004d04:	055b      	lsls	r3, r3, #21
 8004d06:	4013      	ands	r3, r2
 8004d08:	d110      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d0a:	4b5c      	ldr	r3, [pc, #368]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004d0c:	69da      	ldr	r2, [r3, #28]
 8004d0e:	4b5b      	ldr	r3, [pc, #364]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004d10:	2180      	movs	r1, #128	; 0x80
 8004d12:	0549      	lsls	r1, r1, #21
 8004d14:	430a      	orrs	r2, r1
 8004d16:	61da      	str	r2, [r3, #28]
 8004d18:	4b58      	ldr	r3, [pc, #352]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004d1a:	69da      	ldr	r2, [r3, #28]
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	055b      	lsls	r3, r3, #21
 8004d20:	4013      	ands	r3, r2
 8004d22:	60bb      	str	r3, [r7, #8]
 8004d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d26:	183b      	adds	r3, r7, r0
 8004d28:	2201      	movs	r2, #1
 8004d2a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2c:	4b54      	ldr	r3, [pc, #336]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	2380      	movs	r3, #128	; 0x80
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	4013      	ands	r3, r2
 8004d36:	d11a      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d38:	4b51      	ldr	r3, [pc, #324]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	4b50      	ldr	r3, [pc, #320]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004d3e:	2180      	movs	r1, #128	; 0x80
 8004d40:	0049      	lsls	r1, r1, #1
 8004d42:	430a      	orrs	r2, r1
 8004d44:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d46:	f7ff f8eb 	bl	8003f20 <HAL_GetTick>
 8004d4a:	0003      	movs	r3, r0
 8004d4c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4e:	e008      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d50:	f7ff f8e6 	bl	8003f20 <HAL_GetTick>
 8004d54:	0002      	movs	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b64      	cmp	r3, #100	; 0x64
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e087      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d62:	4b47      	ldr	r3, [pc, #284]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	2380      	movs	r3, #128	; 0x80
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d0f0      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d6e:	4b43      	ldr	r3, [pc, #268]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004d70:	6a1a      	ldr	r2, [r3, #32]
 8004d72:	23c0      	movs	r3, #192	; 0xc0
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4013      	ands	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d034      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	23c0      	movs	r3, #192	; 0xc0
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4013      	ands	r3, r2
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d02c      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d90:	4b3a      	ldr	r3, [pc, #232]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	4a3b      	ldr	r2, [pc, #236]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d9a:	4b38      	ldr	r3, [pc, #224]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004d9c:	6a1a      	ldr	r2, [r3, #32]
 8004d9e:	4b37      	ldr	r3, [pc, #220]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004da0:	2180      	movs	r1, #128	; 0x80
 8004da2:	0249      	lsls	r1, r1, #9
 8004da4:	430a      	orrs	r2, r1
 8004da6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004da8:	4b34      	ldr	r3, [pc, #208]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004daa:	6a1a      	ldr	r2, [r3, #32]
 8004dac:	4b33      	ldr	r3, [pc, #204]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004dae:	4936      	ldr	r1, [pc, #216]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004db0:	400a      	ands	r2, r1
 8004db2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004db4:	4b31      	ldr	r3, [pc, #196]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	d013      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc2:	f7ff f8ad 	bl	8003f20 <HAL_GetTick>
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dca:	e009      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dcc:	f7ff f8a8 	bl	8003f20 <HAL_GetTick>
 8004dd0:	0002      	movs	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	4a2d      	ldr	r2, [pc, #180]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e048      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de0:	4b26      	ldr	r3, [pc, #152]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	2202      	movs	r2, #2
 8004de6:	4013      	ands	r3, r2
 8004de8:	d0f0      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dea:	4b24      	ldr	r3, [pc, #144]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	4a25      	ldr	r2, [pc, #148]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	0019      	movs	r1, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	4b20      	ldr	r3, [pc, #128]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dfe:	2317      	movs	r3, #23
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d105      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e08:	4b1c      	ldr	r3, [pc, #112]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e0e:	4920      	ldr	r1, [pc, #128]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e10:	400a      	ands	r2, r1
 8004e12:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d009      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e1e:	4b17      	ldr	r3, [pc, #92]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e22:	2203      	movs	r2, #3
 8004e24:	4393      	bics	r3, r2
 8004e26:	0019      	movs	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2220      	movs	r2, #32
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d009      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e40:	2210      	movs	r2, #16
 8004e42:	4393      	bics	r3, r2
 8004e44:	0019      	movs	r1, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	2380      	movs	r3, #128	; 0x80
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d009      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e5c:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e60:	2240      	movs	r2, #64	; 0x40
 8004e62:	4393      	bics	r3, r2
 8004e64:	0019      	movs	r1, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	4b04      	ldr	r3, [pc, #16]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	0018      	movs	r0, r3
 8004e74:	46bd      	mov	sp, r7
 8004e76:	b006      	add	sp, #24
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	40007000 	.word	0x40007000
 8004e84:	fffffcff 	.word	0xfffffcff
 8004e88:	fffeffff 	.word	0xfffeffff
 8004e8c:	00001388 	.word	0x00001388
 8004e90:	efffffff 	.word	0xefffffff

08004e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e0a8      	b.n	8004ff8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d109      	bne.n	8004ec2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	2382      	movs	r3, #130	; 0x82
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d009      	beq.n	8004ece <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	61da      	str	r2, [r3, #28]
 8004ec0:	e005      	b.n	8004ece <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	225d      	movs	r2, #93	; 0x5d
 8004ed8:	5c9b      	ldrb	r3, [r3, r2]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d107      	bne.n	8004ef0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	225c      	movs	r2, #92	; 0x5c
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	0018      	movs	r0, r3
 8004eec:	f7fe fe20 	bl	8003b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	225d      	movs	r2, #93	; 0x5d
 8004ef4:	2102      	movs	r1, #2
 8004ef6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2140      	movs	r1, #64	; 0x40
 8004f04:	438a      	bics	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	23e0      	movs	r3, #224	; 0xe0
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d902      	bls.n	8004f1a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e002      	b.n	8004f20 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f1a:	2380      	movs	r3, #128	; 0x80
 8004f1c:	015b      	lsls	r3, r3, #5
 8004f1e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	23f0      	movs	r3, #240	; 0xf0
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d008      	beq.n	8004f3e <HAL_SPI_Init+0xaa>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	23e0      	movs	r3, #224	; 0xe0
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d002      	beq.n	8004f3e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	2382      	movs	r3, #130	; 0x82
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	401a      	ands	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6899      	ldr	r1, [r3, #8]
 8004f4c:	2384      	movs	r3, #132	; 0x84
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	400b      	ands	r3, r1
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	2102      	movs	r1, #2
 8004f5a:	400b      	ands	r3, r1
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	2101      	movs	r1, #1
 8004f64:	400b      	ands	r3, r1
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6999      	ldr	r1, [r3, #24]
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	400b      	ands	r3, r1
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	2138      	movs	r1, #56	; 0x38
 8004f7a:	400b      	ands	r3, r1
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	2180      	movs	r1, #128	; 0x80
 8004f84:	400b      	ands	r3, r1
 8004f86:	431a      	orrs	r2, r3
 8004f88:	0011      	movs	r1, r2
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f8e:	2380      	movs	r3, #128	; 0x80
 8004f90:	019b      	lsls	r3, r3, #6
 8004f92:	401a      	ands	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	0c1b      	lsrs	r3, r3, #16
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	401a      	ands	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	2110      	movs	r1, #16
 8004fac:	400b      	ands	r3, r1
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb4:	2108      	movs	r1, #8
 8004fb6:	400b      	ands	r3, r1
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68d9      	ldr	r1, [r3, #12]
 8004fbe:	23f0      	movs	r3, #240	; 0xf0
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	400b      	ands	r3, r1
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	0011      	movs	r1, r2
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	2380      	movs	r3, #128	; 0x80
 8004fcc:	015b      	lsls	r3, r3, #5
 8004fce:	401a      	ands	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69da      	ldr	r2, [r3, #28]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4907      	ldr	r1, [pc, #28]	; (8005000 <HAL_SPI_Init+0x16c>)
 8004fe4:	400a      	ands	r2, r1
 8004fe6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	225d      	movs	r2, #93	; 0x5d
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	b004      	add	sp, #16
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	fffff7ff 	.word	0xfffff7ff

08005004 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	1dbb      	adds	r3, r7, #6
 8005012:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005014:	231f      	movs	r3, #31
 8005016:	18fb      	adds	r3, r7, r3
 8005018:	2200      	movs	r2, #0
 800501a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	225c      	movs	r2, #92	; 0x5c
 8005020:	5c9b      	ldrb	r3, [r3, r2]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d101      	bne.n	800502a <HAL_SPI_Transmit+0x26>
 8005026:	2302      	movs	r3, #2
 8005028:	e140      	b.n	80052ac <HAL_SPI_Transmit+0x2a8>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	225c      	movs	r2, #92	; 0x5c
 800502e:	2101      	movs	r1, #1
 8005030:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005032:	f7fe ff75 	bl	8003f20 <HAL_GetTick>
 8005036:	0003      	movs	r3, r0
 8005038:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800503a:	2316      	movs	r3, #22
 800503c:	18fb      	adds	r3, r7, r3
 800503e:	1dba      	adds	r2, r7, #6
 8005040:	8812      	ldrh	r2, [r2, #0]
 8005042:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	225d      	movs	r2, #93	; 0x5d
 8005048:	5c9b      	ldrb	r3, [r3, r2]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	d004      	beq.n	800505a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005050:	231f      	movs	r3, #31
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	2202      	movs	r2, #2
 8005056:	701a      	strb	r2, [r3, #0]
    goto error;
 8005058:	e11d      	b.n	8005296 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_SPI_Transmit+0x64>
 8005060:	1dbb      	adds	r3, r7, #6
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d104      	bne.n	8005072 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005068:	231f      	movs	r3, #31
 800506a:	18fb      	adds	r3, r7, r3
 800506c:	2201      	movs	r2, #1
 800506e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005070:	e111      	b.n	8005296 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	225d      	movs	r2, #93	; 0x5d
 8005076:	2103      	movs	r1, #3
 8005078:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	1dba      	adds	r2, r7, #6
 800508a:	8812      	ldrh	r2, [r2, #0]
 800508c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	1dba      	adds	r2, r7, #6
 8005092:	8812      	ldrh	r2, [r2, #0]
 8005094:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2244      	movs	r2, #68	; 0x44
 80050a0:	2100      	movs	r1, #0
 80050a2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2246      	movs	r2, #70	; 0x46
 80050a8:	2100      	movs	r1, #0
 80050aa:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	2380      	movs	r3, #128	; 0x80
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d110      	bne.n	80050e6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2140      	movs	r1, #64	; 0x40
 80050d0:	438a      	bics	r2, r1
 80050d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2180      	movs	r1, #128	; 0x80
 80050e0:	01c9      	lsls	r1, r1, #7
 80050e2:	430a      	orrs	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2240      	movs	r2, #64	; 0x40
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b40      	cmp	r3, #64	; 0x40
 80050f2:	d007      	beq.n	8005104 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2140      	movs	r1, #64	; 0x40
 8005100:	430a      	orrs	r2, r1
 8005102:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	23e0      	movs	r3, #224	; 0xe0
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	429a      	cmp	r2, r3
 800510e:	d94e      	bls.n	80051ae <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d004      	beq.n	8005122 <HAL_SPI_Transmit+0x11e>
 8005118:	2316      	movs	r3, #22
 800511a:	18fb      	adds	r3, r7, r3
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d13f      	bne.n	80051a2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	881a      	ldrh	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005132:	1c9a      	adds	r2, r3, #2
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513c:	b29b      	uxth	r3, r3
 800513e:	3b01      	subs	r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005146:	e02c      	b.n	80051a2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2202      	movs	r2, #2
 8005150:	4013      	ands	r3, r2
 8005152:	2b02      	cmp	r3, #2
 8005154:	d112      	bne.n	800517c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	881a      	ldrh	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	1c9a      	adds	r2, r3, #2
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005170:	b29b      	uxth	r3, r3
 8005172:	3b01      	subs	r3, #1
 8005174:	b29a      	uxth	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	87da      	strh	r2, [r3, #62]	; 0x3e
 800517a:	e012      	b.n	80051a2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800517c:	f7fe fed0 	bl	8003f20 <HAL_GetTick>
 8005180:	0002      	movs	r2, r0
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d802      	bhi.n	8005192 <HAL_SPI_Transmit+0x18e>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	3301      	adds	r3, #1
 8005190:	d102      	bne.n	8005198 <HAL_SPI_Transmit+0x194>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d104      	bne.n	80051a2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005198:	231f      	movs	r3, #31
 800519a:	18fb      	adds	r3, r7, r3
 800519c:	2203      	movs	r2, #3
 800519e:	701a      	strb	r2, [r3, #0]
          goto error;
 80051a0:	e079      	b.n	8005296 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1cd      	bne.n	8005148 <HAL_SPI_Transmit+0x144>
 80051ac:	e04f      	b.n	800524e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d004      	beq.n	80051c0 <HAL_SPI_Transmit+0x1bc>
 80051b6:	2316      	movs	r3, #22
 80051b8:	18fb      	adds	r3, r7, r3
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d141      	bne.n	8005244 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	330c      	adds	r3, #12
 80051ca:	7812      	ldrb	r2, [r2, #0]
 80051cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80051e6:	e02d      	b.n	8005244 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	2202      	movs	r2, #2
 80051f0:	4013      	ands	r3, r2
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d113      	bne.n	800521e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	330c      	adds	r3, #12
 8005200:	7812      	ldrb	r2, [r2, #0]
 8005202:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800521c:	e012      	b.n	8005244 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800521e:	f7fe fe7f 	bl	8003f20 <HAL_GetTick>
 8005222:	0002      	movs	r2, r0
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d802      	bhi.n	8005234 <HAL_SPI_Transmit+0x230>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	3301      	adds	r3, #1
 8005232:	d102      	bne.n	800523a <HAL_SPI_Transmit+0x236>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d104      	bne.n	8005244 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800523a:	231f      	movs	r3, #31
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	2203      	movs	r2, #3
 8005240:	701a      	strb	r2, [r3, #0]
          goto error;
 8005242:	e028      	b.n	8005296 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1cc      	bne.n	80051e8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	6839      	ldr	r1, [r7, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	0018      	movs	r0, r3
 8005256:	f000 fcd9 	bl	8005c0c <SPI_EndRxTxTransaction>
 800525a:	1e03      	subs	r3, r0, #0
 800525c:	d002      	beq.n	8005264 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2220      	movs	r2, #32
 8005262:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10a      	bne.n	8005282 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800526c:	2300      	movs	r3, #0
 800526e:	613b      	str	r3, [r7, #16]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005286:	2b00      	cmp	r3, #0
 8005288:	d004      	beq.n	8005294 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800528a:	231f      	movs	r3, #31
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	2201      	movs	r2, #1
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	e000      	b.n	8005296 <HAL_SPI_Transmit+0x292>
  }

error:
 8005294:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	225d      	movs	r2, #93	; 0x5d
 800529a:	2101      	movs	r1, #1
 800529c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	225c      	movs	r2, #92	; 0x5c
 80052a2:	2100      	movs	r1, #0
 80052a4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80052a6:	231f      	movs	r3, #31
 80052a8:	18fb      	adds	r3, r7, r3
 80052aa:	781b      	ldrb	r3, [r3, #0]
}
 80052ac:	0018      	movs	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	b008      	add	sp, #32
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052b4:	b590      	push	{r4, r7, lr}
 80052b6:	b089      	sub	sp, #36	; 0x24
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	1dbb      	adds	r3, r7, #6
 80052c2:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052c4:	2317      	movs	r3, #23
 80052c6:	18fb      	adds	r3, r7, r3
 80052c8:	2200      	movs	r2, #0
 80052ca:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	2382      	movs	r3, #130	; 0x82
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d113      	bne.n	8005300 <HAL_SPI_Receive+0x4c>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10f      	bne.n	8005300 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	225d      	movs	r2, #93	; 0x5d
 80052e4:	2104      	movs	r1, #4
 80052e6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052e8:	1dbb      	adds	r3, r7, #6
 80052ea:	881c      	ldrh	r4, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	0023      	movs	r3, r4
 80052f8:	f000 f928 	bl	800554c <HAL_SPI_TransmitReceive>
 80052fc:	0003      	movs	r3, r0
 80052fe:	e11c      	b.n	800553a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	225c      	movs	r2, #92	; 0x5c
 8005304:	5c9b      	ldrb	r3, [r3, r2]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <HAL_SPI_Receive+0x5a>
 800530a:	2302      	movs	r3, #2
 800530c:	e115      	b.n	800553a <HAL_SPI_Receive+0x286>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	225c      	movs	r2, #92	; 0x5c
 8005312:	2101      	movs	r1, #1
 8005314:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005316:	f7fe fe03 	bl	8003f20 <HAL_GetTick>
 800531a:	0003      	movs	r3, r0
 800531c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	225d      	movs	r2, #93	; 0x5d
 8005322:	5c9b      	ldrb	r3, [r3, r2]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b01      	cmp	r3, #1
 8005328:	d004      	beq.n	8005334 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800532a:	2317      	movs	r3, #23
 800532c:	18fb      	adds	r3, r7, r3
 800532e:	2202      	movs	r2, #2
 8005330:	701a      	strb	r2, [r3, #0]
    goto error;
 8005332:	e0f7      	b.n	8005524 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_SPI_Receive+0x8e>
 800533a:	1dbb      	adds	r3, r7, #6
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d104      	bne.n	800534c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005342:	2317      	movs	r3, #23
 8005344:	18fb      	adds	r3, r7, r3
 8005346:	2201      	movs	r2, #1
 8005348:	701a      	strb	r2, [r3, #0]
    goto error;
 800534a:	e0eb      	b.n	8005524 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	225d      	movs	r2, #93	; 0x5d
 8005350:	2104      	movs	r1, #4
 8005352:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	1dba      	adds	r2, r7, #6
 8005364:	2144      	movs	r1, #68	; 0x44
 8005366:	8812      	ldrh	r2, [r2, #0]
 8005368:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1dba      	adds	r2, r7, #6
 800536e:	2146      	movs	r1, #70	; 0x46
 8005370:	8812      	ldrh	r2, [r2, #0]
 8005372:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	23e0      	movs	r3, #224	; 0xe0
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	429a      	cmp	r2, r3
 800539c:	d908      	bls.n	80053b0 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4966      	ldr	r1, [pc, #408]	; (8005544 <HAL_SPI_Receive+0x290>)
 80053aa:	400a      	ands	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	e008      	b.n	80053c2 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2180      	movs	r1, #128	; 0x80
 80053bc:	0149      	lsls	r1, r1, #5
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	2380      	movs	r3, #128	; 0x80
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d10f      	bne.n	80053ee <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2140      	movs	r1, #64	; 0x40
 80053da:	438a      	bics	r2, r1
 80053dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4957      	ldr	r1, [pc, #348]	; (8005548 <HAL_SPI_Receive+0x294>)
 80053ea:	400a      	ands	r2, r1
 80053ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2240      	movs	r2, #64	; 0x40
 80053f6:	4013      	ands	r3, r2
 80053f8:	2b40      	cmp	r3, #64	; 0x40
 80053fa:	d007      	beq.n	800540c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2140      	movs	r1, #64	; 0x40
 8005408:	430a      	orrs	r2, r1
 800540a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	23e0      	movs	r3, #224	; 0xe0
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	429a      	cmp	r2, r3
 8005416:	d900      	bls.n	800541a <HAL_SPI_Receive+0x166>
 8005418:	e069      	b.n	80054ee <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800541a:	e031      	b.n	8005480 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2201      	movs	r2, #1
 8005424:	4013      	ands	r3, r2
 8005426:	2b01      	cmp	r3, #1
 8005428:	d117      	bne.n	800545a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	330c      	adds	r3, #12
 8005430:	001a      	movs	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	7812      	ldrb	r2, [r2, #0]
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2246      	movs	r2, #70	; 0x46
 800544a:	5a9b      	ldrh	r3, [r3, r2]
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b01      	subs	r3, #1
 8005450:	b299      	uxth	r1, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2246      	movs	r2, #70	; 0x46
 8005456:	5299      	strh	r1, [r3, r2]
 8005458:	e012      	b.n	8005480 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800545a:	f7fe fd61 	bl	8003f20 <HAL_GetTick>
 800545e:	0002      	movs	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d802      	bhi.n	8005470 <HAL_SPI_Receive+0x1bc>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	3301      	adds	r3, #1
 800546e:	d102      	bne.n	8005476 <HAL_SPI_Receive+0x1c2>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d104      	bne.n	8005480 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8005476:	2317      	movs	r3, #23
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	2203      	movs	r2, #3
 800547c:	701a      	strb	r2, [r3, #0]
          goto error;
 800547e:	e051      	b.n	8005524 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2246      	movs	r2, #70	; 0x46
 8005484:	5a9b      	ldrh	r3, [r3, r2]
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1c7      	bne.n	800541c <HAL_SPI_Receive+0x168>
 800548c:	e035      	b.n	80054fa <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	2201      	movs	r2, #1
 8005496:	4013      	ands	r3, r2
 8005498:	2b01      	cmp	r3, #1
 800549a:	d115      	bne.n	80054c8 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	b292      	uxth	r2, r2
 80054a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	1c9a      	adds	r2, r3, #2
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2246      	movs	r2, #70	; 0x46
 80054b8:	5a9b      	ldrh	r3, [r3, r2]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b299      	uxth	r1, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2246      	movs	r2, #70	; 0x46
 80054c4:	5299      	strh	r1, [r3, r2]
 80054c6:	e012      	b.n	80054ee <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054c8:	f7fe fd2a 	bl	8003f20 <HAL_GetTick>
 80054cc:	0002      	movs	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d802      	bhi.n	80054de <HAL_SPI_Receive+0x22a>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	3301      	adds	r3, #1
 80054dc:	d102      	bne.n	80054e4 <HAL_SPI_Receive+0x230>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d104      	bne.n	80054ee <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80054e4:	2317      	movs	r3, #23
 80054e6:	18fb      	adds	r3, r7, r3
 80054e8:	2203      	movs	r2, #3
 80054ea:	701a      	strb	r2, [r3, #0]
          goto error;
 80054ec:	e01a      	b.n	8005524 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2246      	movs	r2, #70	; 0x46
 80054f2:	5a9b      	ldrh	r3, [r3, r2]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1c9      	bne.n	800548e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	6839      	ldr	r1, [r7, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	0018      	movs	r0, r3
 8005502:	f000 fb25 	bl	8005b50 <SPI_EndRxTransaction>
 8005506:	1e03      	subs	r3, r0, #0
 8005508:	d002      	beq.n	8005510 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2220      	movs	r2, #32
 800550e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005514:	2b00      	cmp	r3, #0
 8005516:	d004      	beq.n	8005522 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005518:	2317      	movs	r3, #23
 800551a:	18fb      	adds	r3, r7, r3
 800551c:	2201      	movs	r2, #1
 800551e:	701a      	strb	r2, [r3, #0]
 8005520:	e000      	b.n	8005524 <HAL_SPI_Receive+0x270>
  }

error :
 8005522:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	225d      	movs	r2, #93	; 0x5d
 8005528:	2101      	movs	r1, #1
 800552a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	225c      	movs	r2, #92	; 0x5c
 8005530:	2100      	movs	r1, #0
 8005532:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005534:	2317      	movs	r3, #23
 8005536:	18fb      	adds	r3, r7, r3
 8005538:	781b      	ldrb	r3, [r3, #0]
}
 800553a:	0018      	movs	r0, r3
 800553c:	46bd      	mov	sp, r7
 800553e:	b007      	add	sp, #28
 8005540:	bd90      	pop	{r4, r7, pc}
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	ffffefff 	.word	0xffffefff
 8005548:	ffffbfff 	.word	0xffffbfff

0800554c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	; 0x28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	001a      	movs	r2, r3
 800555a:	1cbb      	adds	r3, r7, #2
 800555c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800555e:	2301      	movs	r3, #1
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005562:	2323      	movs	r3, #35	; 0x23
 8005564:	18fb      	adds	r3, r7, r3
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	225c      	movs	r2, #92	; 0x5c
 800556e:	5c9b      	ldrb	r3, [r3, r2]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <HAL_SPI_TransmitReceive+0x2c>
 8005574:	2302      	movs	r3, #2
 8005576:	e1b5      	b.n	80058e4 <HAL_SPI_TransmitReceive+0x398>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	225c      	movs	r2, #92	; 0x5c
 800557c:	2101      	movs	r1, #1
 800557e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005580:	f7fe fcce 	bl	8003f20 <HAL_GetTick>
 8005584:	0003      	movs	r3, r0
 8005586:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005588:	201b      	movs	r0, #27
 800558a:	183b      	adds	r3, r7, r0
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	215d      	movs	r1, #93	; 0x5d
 8005590:	5c52      	ldrb	r2, [r2, r1]
 8005592:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800559a:	2312      	movs	r3, #18
 800559c:	18fb      	adds	r3, r7, r3
 800559e:	1cba      	adds	r2, r7, #2
 80055a0:	8812      	ldrh	r2, [r2, #0]
 80055a2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055a4:	183b      	adds	r3, r7, r0
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d011      	beq.n	80055d0 <HAL_SPI_TransmitReceive+0x84>
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	2382      	movs	r3, #130	; 0x82
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d107      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d103      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x7a>
 80055be:	183b      	adds	r3, r7, r0
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d004      	beq.n	80055d0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80055c6:	2323      	movs	r3, #35	; 0x23
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	2202      	movs	r2, #2
 80055cc:	701a      	strb	r2, [r3, #0]
    goto error;
 80055ce:	e17e      	b.n	80058ce <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d006      	beq.n	80055e4 <HAL_SPI_TransmitReceive+0x98>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <HAL_SPI_TransmitReceive+0x98>
 80055dc:	1cbb      	adds	r3, r7, #2
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d104      	bne.n	80055ee <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80055e4:	2323      	movs	r3, #35	; 0x23
 80055e6:	18fb      	adds	r3, r7, r3
 80055e8:	2201      	movs	r2, #1
 80055ea:	701a      	strb	r2, [r3, #0]
    goto error;
 80055ec:	e16f      	b.n	80058ce <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	225d      	movs	r2, #93	; 0x5d
 80055f2:	5c9b      	ldrb	r3, [r3, r2]
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d003      	beq.n	8005602 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	225d      	movs	r2, #93	; 0x5d
 80055fe:	2105      	movs	r1, #5
 8005600:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	1cba      	adds	r2, r7, #2
 8005612:	2146      	movs	r1, #70	; 0x46
 8005614:	8812      	ldrh	r2, [r2, #0]
 8005616:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	1cba      	adds	r2, r7, #2
 800561c:	2144      	movs	r1, #68	; 0x44
 800561e:	8812      	ldrh	r2, [r2, #0]
 8005620:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	1cba      	adds	r2, r7, #2
 800562c:	8812      	ldrh	r2, [r2, #0]
 800562e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	1cba      	adds	r2, r7, #2
 8005634:	8812      	ldrh	r2, [r2, #0]
 8005636:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	23e0      	movs	r3, #224	; 0xe0
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	429a      	cmp	r2, r3
 800564e:	d908      	bls.n	8005662 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	49a4      	ldr	r1, [pc, #656]	; (80058ec <HAL_SPI_TransmitReceive+0x3a0>)
 800565c:	400a      	ands	r2, r1
 800565e:	605a      	str	r2, [r3, #4]
 8005660:	e008      	b.n	8005674 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2180      	movs	r1, #128	; 0x80
 800566e:	0149      	lsls	r1, r1, #5
 8005670:	430a      	orrs	r2, r1
 8005672:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2240      	movs	r2, #64	; 0x40
 800567c:	4013      	ands	r3, r2
 800567e:	2b40      	cmp	r3, #64	; 0x40
 8005680:	d007      	beq.n	8005692 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2140      	movs	r1, #64	; 0x40
 800568e:	430a      	orrs	r2, r1
 8005690:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	23e0      	movs	r3, #224	; 0xe0
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	429a      	cmp	r2, r3
 800569c:	d800      	bhi.n	80056a0 <HAL_SPI_TransmitReceive+0x154>
 800569e:	e07f      	b.n	80057a0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <HAL_SPI_TransmitReceive+0x168>
 80056a8:	2312      	movs	r3, #18
 80056aa:	18fb      	adds	r3, r7, r3
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d000      	beq.n	80056b4 <HAL_SPI_TransmitReceive+0x168>
 80056b2:	e069      	b.n	8005788 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b8:	881a      	ldrh	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	1c9a      	adds	r2, r3, #2
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056d8:	e056      	b.n	8005788 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	2202      	movs	r2, #2
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d11b      	bne.n	8005720 <HAL_SPI_TransmitReceive+0x1d4>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d016      	beq.n	8005720 <HAL_SPI_TransmitReceive+0x1d4>
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d113      	bne.n	8005720 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fc:	881a      	ldrh	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	1c9a      	adds	r2, r3, #2
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	2201      	movs	r2, #1
 8005728:	4013      	ands	r3, r2
 800572a:	2b01      	cmp	r3, #1
 800572c:	d11c      	bne.n	8005768 <HAL_SPI_TransmitReceive+0x21c>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2246      	movs	r2, #70	; 0x46
 8005732:	5a9b      	ldrh	r3, [r3, r2]
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d016      	beq.n	8005768 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	b292      	uxth	r2, r2
 8005746:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574c:	1c9a      	adds	r2, r3, #2
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2246      	movs	r2, #70	; 0x46
 8005756:	5a9b      	ldrh	r3, [r3, r2]
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b299      	uxth	r1, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2246      	movs	r2, #70	; 0x46
 8005762:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005764:	2301      	movs	r3, #1
 8005766:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005768:	f7fe fbda 	bl	8003f20 <HAL_GetTick>
 800576c:	0002      	movs	r2, r0
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005774:	429a      	cmp	r2, r3
 8005776:	d807      	bhi.n	8005788 <HAL_SPI_TransmitReceive+0x23c>
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	3301      	adds	r3, #1
 800577c:	d004      	beq.n	8005788 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800577e:	2323      	movs	r3, #35	; 0x23
 8005780:	18fb      	adds	r3, r7, r3
 8005782:	2203      	movs	r2, #3
 8005784:	701a      	strb	r2, [r3, #0]
        goto error;
 8005786:	e0a2      	b.n	80058ce <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1a3      	bne.n	80056da <HAL_SPI_TransmitReceive+0x18e>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2246      	movs	r2, #70	; 0x46
 8005796:	5a9b      	ldrh	r3, [r3, r2]
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d19d      	bne.n	80056da <HAL_SPI_TransmitReceive+0x18e>
 800579e:	e085      	b.n	80058ac <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <HAL_SPI_TransmitReceive+0x268>
 80057a8:	2312      	movs	r3, #18
 80057aa:	18fb      	adds	r3, r7, r3
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d000      	beq.n	80057b4 <HAL_SPI_TransmitReceive+0x268>
 80057b2:	e070      	b.n	8005896 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	330c      	adds	r3, #12
 80057be:	7812      	ldrb	r2, [r2, #0]
 80057c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057da:	e05c      	b.n	8005896 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2202      	movs	r2, #2
 80057e4:	4013      	ands	r3, r2
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d11c      	bne.n	8005824 <HAL_SPI_TransmitReceive+0x2d8>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d017      	beq.n	8005824 <HAL_SPI_TransmitReceive+0x2d8>
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d114      	bne.n	8005824 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	330c      	adds	r3, #12
 8005804:	7812      	ldrb	r2, [r2, #0]
 8005806:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2201      	movs	r2, #1
 800582c:	4013      	ands	r3, r2
 800582e:	2b01      	cmp	r3, #1
 8005830:	d11e      	bne.n	8005870 <HAL_SPI_TransmitReceive+0x324>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2246      	movs	r2, #70	; 0x46
 8005836:	5a9b      	ldrh	r3, [r3, r2]
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d018      	beq.n	8005870 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	330c      	adds	r3, #12
 8005844:	001a      	movs	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	7812      	ldrb	r2, [r2, #0]
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2246      	movs	r2, #70	; 0x46
 800585e:	5a9b      	ldrh	r3, [r3, r2]
 8005860:	b29b      	uxth	r3, r3
 8005862:	3b01      	subs	r3, #1
 8005864:	b299      	uxth	r1, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2246      	movs	r2, #70	; 0x46
 800586a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800586c:	2301      	movs	r3, #1
 800586e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005870:	f7fe fb56 	bl	8003f20 <HAL_GetTick>
 8005874:	0002      	movs	r2, r0
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800587c:	429a      	cmp	r2, r3
 800587e:	d802      	bhi.n	8005886 <HAL_SPI_TransmitReceive+0x33a>
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	3301      	adds	r3, #1
 8005884:	d102      	bne.n	800588c <HAL_SPI_TransmitReceive+0x340>
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	2b00      	cmp	r3, #0
 800588a:	d104      	bne.n	8005896 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800588c:	2323      	movs	r3, #35	; 0x23
 800588e:	18fb      	adds	r3, r7, r3
 8005890:	2203      	movs	r2, #3
 8005892:	701a      	strb	r2, [r3, #0]
        goto error;
 8005894:	e01b      	b.n	80058ce <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d19d      	bne.n	80057dc <HAL_SPI_TransmitReceive+0x290>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2246      	movs	r2, #70	; 0x46
 80058a4:	5a9b      	ldrh	r3, [r3, r2]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d197      	bne.n	80057dc <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	0018      	movs	r0, r3
 80058b4:	f000 f9aa 	bl	8005c0c <SPI_EndRxTxTransaction>
 80058b8:	1e03      	subs	r3, r0, #0
 80058ba:	d007      	beq.n	80058cc <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80058bc:	2323      	movs	r3, #35	; 0x23
 80058be:	18fb      	adds	r3, r7, r3
 80058c0:	2201      	movs	r2, #1
 80058c2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	661a      	str	r2, [r3, #96]	; 0x60
 80058ca:	e000      	b.n	80058ce <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80058cc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	225d      	movs	r2, #93	; 0x5d
 80058d2:	2101      	movs	r1, #1
 80058d4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	225c      	movs	r2, #92	; 0x5c
 80058da:	2100      	movs	r1, #0
 80058dc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80058de:	2323      	movs	r3, #35	; 0x23
 80058e0:	18fb      	adds	r3, r7, r3
 80058e2:	781b      	ldrb	r3, [r3, #0]
}
 80058e4:	0018      	movs	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	b00a      	add	sp, #40	; 0x28
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	ffffefff 	.word	0xffffefff

080058f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	1dfb      	adds	r3, r7, #7
 80058fe:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005900:	f7fe fb0e 	bl	8003f20 <HAL_GetTick>
 8005904:	0002      	movs	r2, r0
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	1a9b      	subs	r3, r3, r2
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	18d3      	adds	r3, r2, r3
 800590e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005910:	f7fe fb06 	bl	8003f20 <HAL_GetTick>
 8005914:	0003      	movs	r3, r0
 8005916:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005918:	4b3a      	ldr	r3, [pc, #232]	; (8005a04 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	015b      	lsls	r3, r3, #5
 800591e:	0d1b      	lsrs	r3, r3, #20
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	4353      	muls	r3, r2
 8005924:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005926:	e058      	b.n	80059da <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	3301      	adds	r3, #1
 800592c:	d055      	beq.n	80059da <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800592e:	f7fe faf7 	bl	8003f20 <HAL_GetTick>
 8005932:	0002      	movs	r2, r0
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	429a      	cmp	r2, r3
 800593c:	d902      	bls.n	8005944 <SPI_WaitFlagStateUntilTimeout+0x54>
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d142      	bne.n	80059ca <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	21e0      	movs	r1, #224	; 0xe0
 8005950:	438a      	bics	r2, r1
 8005952:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	2382      	movs	r3, #130	; 0x82
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	429a      	cmp	r2, r3
 800595e:	d113      	bne.n	8005988 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	2380      	movs	r3, #128	; 0x80
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	429a      	cmp	r2, r3
 800596a:	d005      	beq.n	8005978 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	2380      	movs	r3, #128	; 0x80
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	429a      	cmp	r2, r3
 8005976:	d107      	bne.n	8005988 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2140      	movs	r1, #64	; 0x40
 8005984:	438a      	bics	r2, r1
 8005986:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	019b      	lsls	r3, r3, #6
 8005990:	429a      	cmp	r2, r3
 8005992:	d110      	bne.n	80059b6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	491a      	ldr	r1, [pc, #104]	; (8005a08 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80059a0:	400a      	ands	r2, r1
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2180      	movs	r1, #128	; 0x80
 80059b0:	0189      	lsls	r1, r1, #6
 80059b2:	430a      	orrs	r2, r1
 80059b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	225d      	movs	r2, #93	; 0x5d
 80059ba:	2101      	movs	r1, #1
 80059bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	225c      	movs	r2, #92	; 0x5c
 80059c2:	2100      	movs	r1, #0
 80059c4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e017      	b.n	80059fa <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	4013      	ands	r3, r2
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	425a      	negs	r2, r3
 80059ea:	4153      	adcs	r3, r2
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	001a      	movs	r2, r3
 80059f0:	1dfb      	adds	r3, r7, #7
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d197      	bne.n	8005928 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	0018      	movs	r0, r3
 80059fc:	46bd      	mov	sp, r7
 80059fe:	b008      	add	sp, #32
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	20000000 	.word	0x20000000
 8005a08:	ffffdfff 	.word	0xffffdfff

08005a0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08a      	sub	sp, #40	; 0x28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005a1a:	2317      	movs	r3, #23
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	2200      	movs	r2, #0
 8005a20:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a22:	f7fe fa7d 	bl	8003f20 <HAL_GetTick>
 8005a26:	0002      	movs	r2, r0
 8005a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	18d3      	adds	r3, r2, r3
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005a32:	f7fe fa75 	bl	8003f20 <HAL_GetTick>
 8005a36:	0003      	movs	r3, r0
 8005a38:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	330c      	adds	r3, #12
 8005a40:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a42:	4b41      	ldr	r3, [pc, #260]	; (8005b48 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	0013      	movs	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	189b      	adds	r3, r3, r2
 8005a4c:	00da      	lsls	r2, r3, #3
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	0d1b      	lsrs	r3, r3, #20
 8005a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a54:	4353      	muls	r3, r2
 8005a56:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a58:	e068      	b.n	8005b2c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	23c0      	movs	r3, #192	; 0xc0
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d10a      	bne.n	8005a7a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d107      	bne.n	8005a7a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	2117      	movs	r1, #23
 8005a72:	187b      	adds	r3, r7, r1
 8005a74:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a76:	187b      	adds	r3, r7, r1
 8005a78:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	d055      	beq.n	8005b2c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a80:	f7fe fa4e 	bl	8003f20 <HAL_GetTick>
 8005a84:	0002      	movs	r2, r0
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d902      	bls.n	8005a96 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d142      	bne.n	8005b1c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	21e0      	movs	r1, #224	; 0xe0
 8005aa2:	438a      	bics	r2, r1
 8005aa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	2382      	movs	r3, #130	; 0x82
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d113      	bne.n	8005ada <SPI_WaitFifoStateUntilTimeout+0xce>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	689a      	ldr	r2, [r3, #8]
 8005ab6:	2380      	movs	r3, #128	; 0x80
 8005ab8:	021b      	lsls	r3, r3, #8
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d005      	beq.n	8005aca <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	2380      	movs	r3, #128	; 0x80
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d107      	bne.n	8005ada <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2140      	movs	r1, #64	; 0x40
 8005ad6:	438a      	bics	r2, r1
 8005ad8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ade:	2380      	movs	r3, #128	; 0x80
 8005ae0:	019b      	lsls	r3, r3, #6
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d110      	bne.n	8005b08 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4916      	ldr	r1, [pc, #88]	; (8005b4c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005af2:	400a      	ands	r2, r1
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2180      	movs	r1, #128	; 0x80
 8005b02:	0189      	lsls	r1, r1, #6
 8005b04:	430a      	orrs	r2, r1
 8005b06:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	225d      	movs	r2, #93	; 0x5d
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	225c      	movs	r2, #92	; 0x5c
 8005b14:	2100      	movs	r1, #0
 8005b16:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e010      	b.n	8005b3e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	4013      	ands	r3, r2
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d18e      	bne.n	8005a5a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	0018      	movs	r0, r3
 8005b40:	46bd      	mov	sp, r7
 8005b42:	b00a      	add	sp, #40	; 0x28
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	46c0      	nop			; (mov r8, r8)
 8005b48:	20000000 	.word	0x20000000
 8005b4c:	ffffdfff 	.word	0xffffdfff

08005b50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	2382      	movs	r3, #130	; 0x82
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d113      	bne.n	8005b90 <SPI_EndRxTransaction+0x40>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	2380      	movs	r3, #128	; 0x80
 8005b6e:	021b      	lsls	r3, r3, #8
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d005      	beq.n	8005b80 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d107      	bne.n	8005b90 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2140      	movs	r1, #64	; 0x40
 8005b8c:	438a      	bics	r2, r1
 8005b8e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	0013      	movs	r3, r2
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2180      	movs	r1, #128	; 0x80
 8005b9e:	f7ff fea7 	bl	80058f0 <SPI_WaitFlagStateUntilTimeout>
 8005ba2:	1e03      	subs	r3, r0, #0
 8005ba4:	d007      	beq.n	8005bb6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005baa:	2220      	movs	r2, #32
 8005bac:	431a      	orrs	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e026      	b.n	8005c04 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	2382      	movs	r3, #130	; 0x82
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d11f      	bne.n	8005c02 <SPI_EndRxTransaction+0xb2>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	2380      	movs	r3, #128	; 0x80
 8005bc8:	021b      	lsls	r3, r3, #8
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d005      	beq.n	8005bda <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	2380      	movs	r3, #128	; 0x80
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d113      	bne.n	8005c02 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	23c0      	movs	r3, #192	; 0xc0
 8005bde:	00d9      	lsls	r1, r3, #3
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	0013      	movs	r3, r2
 8005be8:	2200      	movs	r2, #0
 8005bea:	f7ff ff0f 	bl	8005a0c <SPI_WaitFifoStateUntilTimeout>
 8005bee:	1e03      	subs	r3, r0, #0
 8005bf0:	d007      	beq.n	8005c02 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e000      	b.n	8005c04 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	0018      	movs	r0, r3
 8005c06:	46bd      	mov	sp, r7
 8005c08:	b004      	add	sp, #16
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	23c0      	movs	r3, #192	; 0xc0
 8005c1c:	0159      	lsls	r1, r3, #5
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	0013      	movs	r3, r2
 8005c26:	2200      	movs	r2, #0
 8005c28:	f7ff fef0 	bl	8005a0c <SPI_WaitFifoStateUntilTimeout>
 8005c2c:	1e03      	subs	r3, r0, #0
 8005c2e:	d007      	beq.n	8005c40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c34:	2220      	movs	r2, #32
 8005c36:	431a      	orrs	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e027      	b.n	8005c90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	0013      	movs	r3, r2
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2180      	movs	r1, #128	; 0x80
 8005c4e:	f7ff fe4f 	bl	80058f0 <SPI_WaitFlagStateUntilTimeout>
 8005c52:	1e03      	subs	r3, r0, #0
 8005c54:	d007      	beq.n	8005c66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e014      	b.n	8005c90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	23c0      	movs	r3, #192	; 0xc0
 8005c6a:	00d9      	lsls	r1, r3, #3
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	0013      	movs	r3, r2
 8005c74:	2200      	movs	r2, #0
 8005c76:	f7ff fec9 	bl	8005a0c <SPI_WaitFifoStateUntilTimeout>
 8005c7a:	1e03      	subs	r3, r0, #0
 8005c7c:	d007      	beq.n	8005c8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c82:	2220      	movs	r2, #32
 8005c84:	431a      	orrs	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e000      	b.n	8005c90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	0018      	movs	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	b004      	add	sp, #16
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	607a      	str	r2, [r7, #4]
 8005ca2:	230b      	movs	r3, #11
 8005ca4:	18fb      	adds	r3, r7, r3
 8005ca6:	1c0a      	adds	r2, r1, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <HAL_MultiProcessor_Init+0x1c>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e061      	b.n	8005d78 <HAL_MultiProcessor_Init+0xe0>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d107      	bne.n	8005ccc <HAL_MultiProcessor_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2274      	movs	r2, #116	; 0x74
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f7fd ff7e 	bl	8003bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2224      	movs	r2, #36	; 0x24
 8005cd0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2101      	movs	r1, #1
 8005cde:	438a      	bics	r2, r1
 8005ce0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f000 f8f9 	bl	8005edc <UART_SetConfig>
 8005cea:	0003      	movs	r3, r0
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_MultiProcessor_Init+0x5c>
  {
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e041      	b.n	8005d78 <HAL_MultiProcessor_Init+0xe0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_MultiProcessor_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f000 fa2c 	bl	800615c <UART_AdvFeatureConfig>

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported) bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	491c      	ldr	r1, [pc, #112]	; (8005d80 <HAL_MultiProcessor_Init+0xe8>)
 8005d10:	400a      	ands	r2, r1
 8005d12:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	212a      	movs	r1, #42	; 0x2a
 8005d20:	438a      	bics	r2, r1
 8005d22:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN */
#endif /* USART_CR3_SCEN */

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	2380      	movs	r3, #128	; 0x80
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d10c      	bne.n	8005d48 <HAL_MultiProcessor_Init+0xb0>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	021b      	lsls	r3, r3, #8
 8005d36:	0a19      	lsrs	r1, r3, #8
 8005d38:	230b      	movs	r3, #11
 8005d3a:	18fb      	adds	r3, r7, r3
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	061a      	lsls	r2, r3, #24
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a0d      	ldr	r2, [pc, #52]	; (8005d84 <HAL_MultiProcessor_Init+0xec>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	0019      	movs	r1, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2101      	movs	r1, #1
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	0018      	movs	r0, r3
 8005d72:	f000 faa7 	bl	80062c4 <UART_CheckIdleState>
 8005d76:	0003      	movs	r3, r0
}
 8005d78:	0018      	movs	r0, r3
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	b004      	add	sp, #16
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	ffffb7ff 	.word	0xffffb7ff
 8005d84:	fffff7ff 	.word	0xfffff7ff

08005d88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	; 0x28
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	603b      	str	r3, [r7, #0]
 8005d94:	1dbb      	adds	r3, r7, #6
 8005d96:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d9c:	2b20      	cmp	r3, #32
 8005d9e:	d000      	beq.n	8005da2 <HAL_UART_Transmit+0x1a>
 8005da0:	e096      	b.n	8005ed0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <HAL_UART_Transmit+0x28>
 8005da8:	1dbb      	adds	r3, r7, #6
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e08e      	b.n	8005ed2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	2380      	movs	r3, #128	; 0x80
 8005dba:	015b      	lsls	r3, r3, #5
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d109      	bne.n	8005dd4 <HAL_UART_Transmit+0x4c>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d105      	bne.n	8005dd4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	4013      	ands	r3, r2
 8005dce:	d001      	beq.n	8005dd4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e07e      	b.n	8005ed2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2274      	movs	r2, #116	; 0x74
 8005dd8:	5c9b      	ldrb	r3, [r3, r2]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d101      	bne.n	8005de2 <HAL_UART_Transmit+0x5a>
 8005dde:	2302      	movs	r3, #2
 8005de0:	e077      	b.n	8005ed2 <HAL_UART_Transmit+0x14a>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2274      	movs	r2, #116	; 0x74
 8005de6:	2101      	movs	r1, #1
 8005de8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2280      	movs	r2, #128	; 0x80
 8005dee:	2100      	movs	r1, #0
 8005df0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2221      	movs	r2, #33	; 0x21
 8005df6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005df8:	f7fe f892 	bl	8003f20 <HAL_GetTick>
 8005dfc:	0003      	movs	r3, r0
 8005dfe:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	1dba      	adds	r2, r7, #6
 8005e04:	2150      	movs	r1, #80	; 0x50
 8005e06:	8812      	ldrh	r2, [r2, #0]
 8005e08:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	1dba      	adds	r2, r7, #6
 8005e0e:	2152      	movs	r1, #82	; 0x52
 8005e10:	8812      	ldrh	r2, [r2, #0]
 8005e12:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	2380      	movs	r3, #128	; 0x80
 8005e1a:	015b      	lsls	r3, r3, #5
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d108      	bne.n	8005e32 <HAL_UART_Transmit+0xaa>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	61bb      	str	r3, [r7, #24]
 8005e30:	e003      	b.n	8005e3a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2274      	movs	r2, #116	; 0x74
 8005e3e:	2100      	movs	r1, #0
 8005e40:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005e42:	e02d      	b.n	8005ea0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	0013      	movs	r3, r2
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2180      	movs	r1, #128	; 0x80
 8005e52:	f000 fa7f 	bl	8006354 <UART_WaitOnFlagUntilTimeout>
 8005e56:	1e03      	subs	r3, r0, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e039      	b.n	8005ed2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10b      	bne.n	8005e7c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	881a      	ldrh	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	05d2      	lsls	r2, r2, #23
 8005e6e:	0dd2      	lsrs	r2, r2, #23
 8005e70:	b292      	uxth	r2, r2
 8005e72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	3302      	adds	r3, #2
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	e008      	b.n	8005e8e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	781a      	ldrb	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	b292      	uxth	r2, r2
 8005e86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2252      	movs	r2, #82	; 0x52
 8005e92:	5a9b      	ldrh	r3, [r3, r2]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b299      	uxth	r1, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2252      	movs	r2, #82	; 0x52
 8005e9e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2252      	movs	r2, #82	; 0x52
 8005ea4:	5a9b      	ldrh	r3, [r3, r2]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1cb      	bne.n	8005e44 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	0013      	movs	r3, r2
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	2140      	movs	r1, #64	; 0x40
 8005eba:	f000 fa4b 	bl	8006354 <UART_WaitOnFlagUntilTimeout>
 8005ebe:	1e03      	subs	r3, r0, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e005      	b.n	8005ed2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	e000      	b.n	8005ed2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005ed0:	2302      	movs	r3, #2
  }
}
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	b008      	add	sp, #32
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ee4:	231e      	movs	r3, #30
 8005ee6:	18fb      	adds	r3, r7, r3
 8005ee8:	2200      	movs	r2, #0
 8005eea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a8d      	ldr	r2, [pc, #564]	; (8006140 <UART_SetConfig+0x264>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	0019      	movs	r1, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	4a88      	ldr	r2, [pc, #544]	; (8006144 <UART_SetConfig+0x268>)
 8005f22:	4013      	ands	r3, r2
 8005f24:	0019      	movs	r1, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	4a7f      	ldr	r2, [pc, #508]	; (8006148 <UART_SetConfig+0x26c>)
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	0019      	movs	r1, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a7b      	ldr	r2, [pc, #492]	; (800614c <UART_SetConfig+0x270>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d127      	bne.n	8005fb2 <UART_SetConfig+0xd6>
 8005f62:	4b7b      	ldr	r3, [pc, #492]	; (8006150 <UART_SetConfig+0x274>)
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	2203      	movs	r2, #3
 8005f68:	4013      	ands	r3, r2
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d00d      	beq.n	8005f8a <UART_SetConfig+0xae>
 8005f6e:	d81b      	bhi.n	8005fa8 <UART_SetConfig+0xcc>
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d014      	beq.n	8005f9e <UART_SetConfig+0xc2>
 8005f74:	d818      	bhi.n	8005fa8 <UART_SetConfig+0xcc>
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <UART_SetConfig+0xa4>
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d00a      	beq.n	8005f94 <UART_SetConfig+0xb8>
 8005f7e:	e013      	b.n	8005fa8 <UART_SetConfig+0xcc>
 8005f80:	231f      	movs	r3, #31
 8005f82:	18fb      	adds	r3, r7, r3
 8005f84:	2200      	movs	r2, #0
 8005f86:	701a      	strb	r2, [r3, #0]
 8005f88:	e021      	b.n	8005fce <UART_SetConfig+0xf2>
 8005f8a:	231f      	movs	r3, #31
 8005f8c:	18fb      	adds	r3, r7, r3
 8005f8e:	2202      	movs	r2, #2
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	e01c      	b.n	8005fce <UART_SetConfig+0xf2>
 8005f94:	231f      	movs	r3, #31
 8005f96:	18fb      	adds	r3, r7, r3
 8005f98:	2204      	movs	r2, #4
 8005f9a:	701a      	strb	r2, [r3, #0]
 8005f9c:	e017      	b.n	8005fce <UART_SetConfig+0xf2>
 8005f9e:	231f      	movs	r3, #31
 8005fa0:	18fb      	adds	r3, r7, r3
 8005fa2:	2208      	movs	r2, #8
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	e012      	b.n	8005fce <UART_SetConfig+0xf2>
 8005fa8:	231f      	movs	r3, #31
 8005faa:	18fb      	adds	r3, r7, r3
 8005fac:	2210      	movs	r2, #16
 8005fae:	701a      	strb	r2, [r3, #0]
 8005fb0:	e00d      	b.n	8005fce <UART_SetConfig+0xf2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a67      	ldr	r2, [pc, #412]	; (8006154 <UART_SetConfig+0x278>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d104      	bne.n	8005fc6 <UART_SetConfig+0xea>
 8005fbc:	231f      	movs	r3, #31
 8005fbe:	18fb      	adds	r3, r7, r3
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	701a      	strb	r2, [r3, #0]
 8005fc4:	e003      	b.n	8005fce <UART_SetConfig+0xf2>
 8005fc6:	231f      	movs	r3, #31
 8005fc8:	18fb      	adds	r3, r7, r3
 8005fca:	2210      	movs	r2, #16
 8005fcc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69da      	ldr	r2, [r3, #28]
 8005fd2:	2380      	movs	r3, #128	; 0x80
 8005fd4:	021b      	lsls	r3, r3, #8
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d15d      	bne.n	8006096 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005fda:	231f      	movs	r3, #31
 8005fdc:	18fb      	adds	r3, r7, r3
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d015      	beq.n	8006010 <UART_SetConfig+0x134>
 8005fe4:	dc18      	bgt.n	8006018 <UART_SetConfig+0x13c>
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d00d      	beq.n	8006006 <UART_SetConfig+0x12a>
 8005fea:	dc15      	bgt.n	8006018 <UART_SetConfig+0x13c>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <UART_SetConfig+0x11a>
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d005      	beq.n	8006000 <UART_SetConfig+0x124>
 8005ff4:	e010      	b.n	8006018 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff6:	f7fe fe59 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 8005ffa:	0003      	movs	r3, r0
 8005ffc:	61bb      	str	r3, [r7, #24]
        break;
 8005ffe:	e012      	b.n	8006026 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006000:	4b55      	ldr	r3, [pc, #340]	; (8006158 <UART_SetConfig+0x27c>)
 8006002:	61bb      	str	r3, [r7, #24]
        break;
 8006004:	e00f      	b.n	8006026 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006006:	f7fe fde3 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 800600a:	0003      	movs	r3, r0
 800600c:	61bb      	str	r3, [r7, #24]
        break;
 800600e:	e00a      	b.n	8006026 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006010:	2380      	movs	r3, #128	; 0x80
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	61bb      	str	r3, [r7, #24]
        break;
 8006016:	e006      	b.n	8006026 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800601c:	231e      	movs	r3, #30
 800601e:	18fb      	adds	r3, r7, r3
 8006020:	2201      	movs	r2, #1
 8006022:	701a      	strb	r2, [r3, #0]
        break;
 8006024:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d100      	bne.n	800602e <UART_SetConfig+0x152>
 800602c:	e07b      	b.n	8006126 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	005a      	lsls	r2, r3, #1
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	085b      	lsrs	r3, r3, #1
 8006038:	18d2      	adds	r2, r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	0019      	movs	r1, r3
 8006040:	0010      	movs	r0, r2
 8006042:	f7fa f87d 	bl	8000140 <__udivsi3>
 8006046:	0003      	movs	r3, r0
 8006048:	b29b      	uxth	r3, r3
 800604a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	2b0f      	cmp	r3, #15
 8006050:	d91c      	bls.n	800608c <UART_SetConfig+0x1b0>
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	2380      	movs	r3, #128	; 0x80
 8006056:	025b      	lsls	r3, r3, #9
 8006058:	429a      	cmp	r2, r3
 800605a:	d217      	bcs.n	800608c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	b29a      	uxth	r2, r3
 8006060:	200e      	movs	r0, #14
 8006062:	183b      	adds	r3, r7, r0
 8006064:	210f      	movs	r1, #15
 8006066:	438a      	bics	r2, r1
 8006068:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	085b      	lsrs	r3, r3, #1
 800606e:	b29b      	uxth	r3, r3
 8006070:	2207      	movs	r2, #7
 8006072:	4013      	ands	r3, r2
 8006074:	b299      	uxth	r1, r3
 8006076:	183b      	adds	r3, r7, r0
 8006078:	183a      	adds	r2, r7, r0
 800607a:	8812      	ldrh	r2, [r2, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	183a      	adds	r2, r7, r0
 8006086:	8812      	ldrh	r2, [r2, #0]
 8006088:	60da      	str	r2, [r3, #12]
 800608a:	e04c      	b.n	8006126 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800608c:	231e      	movs	r3, #30
 800608e:	18fb      	adds	r3, r7, r3
 8006090:	2201      	movs	r2, #1
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	e047      	b.n	8006126 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006096:	231f      	movs	r3, #31
 8006098:	18fb      	adds	r3, r7, r3
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b08      	cmp	r3, #8
 800609e:	d015      	beq.n	80060cc <UART_SetConfig+0x1f0>
 80060a0:	dc18      	bgt.n	80060d4 <UART_SetConfig+0x1f8>
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d00d      	beq.n	80060c2 <UART_SetConfig+0x1e6>
 80060a6:	dc15      	bgt.n	80060d4 <UART_SetConfig+0x1f8>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <UART_SetConfig+0x1d6>
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d005      	beq.n	80060bc <UART_SetConfig+0x1e0>
 80060b0:	e010      	b.n	80060d4 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060b2:	f7fe fdfb 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 80060b6:	0003      	movs	r3, r0
 80060b8:	61bb      	str	r3, [r7, #24]
        break;
 80060ba:	e012      	b.n	80060e2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060bc:	4b26      	ldr	r3, [pc, #152]	; (8006158 <UART_SetConfig+0x27c>)
 80060be:	61bb      	str	r3, [r7, #24]
        break;
 80060c0:	e00f      	b.n	80060e2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060c2:	f7fe fd85 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 80060c6:	0003      	movs	r3, r0
 80060c8:	61bb      	str	r3, [r7, #24]
        break;
 80060ca:	e00a      	b.n	80060e2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060cc:	2380      	movs	r3, #128	; 0x80
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	61bb      	str	r3, [r7, #24]
        break;
 80060d2:	e006      	b.n	80060e2 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060d8:	231e      	movs	r3, #30
 80060da:	18fb      	adds	r3, r7, r3
 80060dc:	2201      	movs	r2, #1
 80060de:	701a      	strb	r2, [r3, #0]
        break;
 80060e0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01e      	beq.n	8006126 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	085a      	lsrs	r2, r3, #1
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	18d2      	adds	r2, r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	0019      	movs	r1, r3
 80060f8:	0010      	movs	r0, r2
 80060fa:	f7fa f821 	bl	8000140 <__udivsi3>
 80060fe:	0003      	movs	r3, r0
 8006100:	b29b      	uxth	r3, r3
 8006102:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	2b0f      	cmp	r3, #15
 8006108:	d909      	bls.n	800611e <UART_SetConfig+0x242>
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	2380      	movs	r3, #128	; 0x80
 800610e:	025b      	lsls	r3, r3, #9
 8006110:	429a      	cmp	r2, r3
 8006112:	d204      	bcs.n	800611e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	60da      	str	r2, [r3, #12]
 800611c:	e003      	b.n	8006126 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800611e:	231e      	movs	r3, #30
 8006120:	18fb      	adds	r3, r7, r3
 8006122:	2201      	movs	r2, #1
 8006124:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006132:	231e      	movs	r3, #30
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	781b      	ldrb	r3, [r3, #0]
}
 8006138:	0018      	movs	r0, r3
 800613a:	46bd      	mov	sp, r7
 800613c:	b008      	add	sp, #32
 800613e:	bd80      	pop	{r7, pc}
 8006140:	ffff69f3 	.word	0xffff69f3
 8006144:	ffffcfff 	.word	0xffffcfff
 8006148:	fffff4ff 	.word	0xfffff4ff
 800614c:	40013800 	.word	0x40013800
 8006150:	40021000 	.word	0x40021000
 8006154:	40004400 	.word	0x40004400
 8006158:	007a1200 	.word	0x007a1200

0800615c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	2201      	movs	r2, #1
 800616a:	4013      	ands	r3, r2
 800616c:	d00b      	beq.n	8006186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	4a4a      	ldr	r2, [pc, #296]	; (80062a0 <UART_AdvFeatureConfig+0x144>)
 8006176:	4013      	ands	r3, r2
 8006178:	0019      	movs	r1, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	2202      	movs	r2, #2
 800618c:	4013      	ands	r3, r2
 800618e:	d00b      	beq.n	80061a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	4a43      	ldr	r2, [pc, #268]	; (80062a4 <UART_AdvFeatureConfig+0x148>)
 8006198:	4013      	ands	r3, r2
 800619a:	0019      	movs	r1, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	2204      	movs	r2, #4
 80061ae:	4013      	ands	r3, r2
 80061b0:	d00b      	beq.n	80061ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	4a3b      	ldr	r2, [pc, #236]	; (80062a8 <UART_AdvFeatureConfig+0x14c>)
 80061ba:	4013      	ands	r3, r2
 80061bc:	0019      	movs	r1, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	2208      	movs	r2, #8
 80061d0:	4013      	ands	r3, r2
 80061d2:	d00b      	beq.n	80061ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	4a34      	ldr	r2, [pc, #208]	; (80062ac <UART_AdvFeatureConfig+0x150>)
 80061dc:	4013      	ands	r3, r2
 80061de:	0019      	movs	r1, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	2210      	movs	r2, #16
 80061f2:	4013      	ands	r3, r2
 80061f4:	d00b      	beq.n	800620e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	4a2c      	ldr	r2, [pc, #176]	; (80062b0 <UART_AdvFeatureConfig+0x154>)
 80061fe:	4013      	ands	r3, r2
 8006200:	0019      	movs	r1, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	2220      	movs	r2, #32
 8006214:	4013      	ands	r3, r2
 8006216:	d00b      	beq.n	8006230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	4a25      	ldr	r2, [pc, #148]	; (80062b4 <UART_AdvFeatureConfig+0x158>)
 8006220:	4013      	ands	r3, r2
 8006222:	0019      	movs	r1, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	2240      	movs	r2, #64	; 0x40
 8006236:	4013      	ands	r3, r2
 8006238:	d01d      	beq.n	8006276 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	4a1d      	ldr	r2, [pc, #116]	; (80062b8 <UART_AdvFeatureConfig+0x15c>)
 8006242:	4013      	ands	r3, r2
 8006244:	0019      	movs	r1, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006256:	2380      	movs	r3, #128	; 0x80
 8006258:	035b      	lsls	r3, r3, #13
 800625a:	429a      	cmp	r2, r3
 800625c:	d10b      	bne.n	8006276 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	4a15      	ldr	r2, [pc, #84]	; (80062bc <UART_AdvFeatureConfig+0x160>)
 8006266:	4013      	ands	r3, r2
 8006268:	0019      	movs	r1, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	2280      	movs	r2, #128	; 0x80
 800627c:	4013      	ands	r3, r2
 800627e:	d00b      	beq.n	8006298 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	4a0e      	ldr	r2, [pc, #56]	; (80062c0 <UART_AdvFeatureConfig+0x164>)
 8006288:	4013      	ands	r3, r2
 800628a:	0019      	movs	r1, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	605a      	str	r2, [r3, #4]
  }
}
 8006298:	46c0      	nop			; (mov r8, r8)
 800629a:	46bd      	mov	sp, r7
 800629c:	b002      	add	sp, #8
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	fffdffff 	.word	0xfffdffff
 80062a4:	fffeffff 	.word	0xfffeffff
 80062a8:	fffbffff 	.word	0xfffbffff
 80062ac:	ffff7fff 	.word	0xffff7fff
 80062b0:	ffffefff 	.word	0xffffefff
 80062b4:	ffffdfff 	.word	0xffffdfff
 80062b8:	ffefffff 	.word	0xffefffff
 80062bc:	ff9fffff 	.word	0xff9fffff
 80062c0:	fff7ffff 	.word	0xfff7ffff

080062c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2280      	movs	r2, #128	; 0x80
 80062d0:	2100      	movs	r1, #0
 80062d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062d4:	f7fd fe24 	bl	8003f20 <HAL_GetTick>
 80062d8:	0003      	movs	r3, r0
 80062da:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2208      	movs	r2, #8
 80062e4:	4013      	ands	r3, r2
 80062e6:	2b08      	cmp	r3, #8
 80062e8:	d10c      	bne.n	8006304 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2280      	movs	r2, #128	; 0x80
 80062ee:	0391      	lsls	r1, r2, #14
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	4a17      	ldr	r2, [pc, #92]	; (8006350 <UART_CheckIdleState+0x8c>)
 80062f4:	9200      	str	r2, [sp, #0]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f000 f82c 	bl	8006354 <UART_WaitOnFlagUntilTimeout>
 80062fc:	1e03      	subs	r3, r0, #0
 80062fe:	d001      	beq.n	8006304 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e021      	b.n	8006348 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2204      	movs	r2, #4
 800630c:	4013      	ands	r3, r2
 800630e:	2b04      	cmp	r3, #4
 8006310:	d10c      	bne.n	800632c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2280      	movs	r2, #128	; 0x80
 8006316:	03d1      	lsls	r1, r2, #15
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	4a0d      	ldr	r2, [pc, #52]	; (8006350 <UART_CheckIdleState+0x8c>)
 800631c:	9200      	str	r2, [sp, #0]
 800631e:	2200      	movs	r2, #0
 8006320:	f000 f818 	bl	8006354 <UART_WaitOnFlagUntilTimeout>
 8006324:	1e03      	subs	r3, r0, #0
 8006326:	d001      	beq.n	800632c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e00d      	b.n	8006348 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2220      	movs	r2, #32
 8006336:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2274      	movs	r2, #116	; 0x74
 8006342:	2100      	movs	r1, #0
 8006344:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	0018      	movs	r0, r3
 800634a:	46bd      	mov	sp, r7
 800634c:	b004      	add	sp, #16
 800634e:	bd80      	pop	{r7, pc}
 8006350:	01ffffff 	.word	0x01ffffff

08006354 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b094      	sub	sp, #80	; 0x50
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	1dfb      	adds	r3, r7, #7
 8006362:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006364:	e0a3      	b.n	80064ae <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006368:	3301      	adds	r3, #1
 800636a:	d100      	bne.n	800636e <UART_WaitOnFlagUntilTimeout+0x1a>
 800636c:	e09f      	b.n	80064ae <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800636e:	f7fd fdd7 	bl	8003f20 <HAL_GetTick>
 8006372:	0002      	movs	r2, r0
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800637a:	429a      	cmp	r2, r3
 800637c:	d302      	bcc.n	8006384 <UART_WaitOnFlagUntilTimeout+0x30>
 800637e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006380:	2b00      	cmp	r3, #0
 8006382:	d13d      	bne.n	8006400 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006384:	f3ef 8310 	mrs	r3, PRIMASK
 8006388:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800638c:	647b      	str	r3, [r7, #68]	; 0x44
 800638e:	2301      	movs	r3, #1
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006394:	f383 8810 	msr	PRIMASK, r3
}
 8006398:	46c0      	nop			; (mov r8, r8)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	494c      	ldr	r1, [pc, #304]	; (80064d8 <UART_WaitOnFlagUntilTimeout+0x184>)
 80063a6:	400a      	ands	r2, r1
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ac:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	f383 8810 	msr	PRIMASK, r3
}
 80063b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063b6:	f3ef 8310 	mrs	r3, PRIMASK
 80063ba:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80063bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063be:	643b      	str	r3, [r7, #64]	; 0x40
 80063c0:	2301      	movs	r3, #1
 80063c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c6:	f383 8810 	msr	PRIMASK, r3
}
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2101      	movs	r1, #1
 80063d8:	438a      	bics	r2, r1
 80063da:	609a      	str	r2, [r3, #8]
 80063dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063de:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e2:	f383 8810 	msr	PRIMASK, r3
}
 80063e6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2220      	movs	r2, #32
 80063f2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2274      	movs	r2, #116	; 0x74
 80063f8:	2100      	movs	r1, #0
 80063fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e067      	b.n	80064d0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2204      	movs	r2, #4
 8006408:	4013      	ands	r3, r2
 800640a:	d050      	beq.n	80064ae <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69da      	ldr	r2, [r3, #28]
 8006412:	2380      	movs	r3, #128	; 0x80
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	401a      	ands	r2, r3
 8006418:	2380      	movs	r3, #128	; 0x80
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	429a      	cmp	r2, r3
 800641e:	d146      	bne.n	80064ae <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2280      	movs	r2, #128	; 0x80
 8006426:	0112      	lsls	r2, r2, #4
 8006428:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800642a:	f3ef 8310 	mrs	r3, PRIMASK
 800642e:	613b      	str	r3, [r7, #16]
  return(result);
 8006430:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006434:	2301      	movs	r3, #1
 8006436:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f383 8810 	msr	PRIMASK, r3
}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4923      	ldr	r1, [pc, #140]	; (80064d8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800644c:	400a      	ands	r2, r1
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006452:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	f383 8810 	msr	PRIMASK, r3
}
 800645a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800645c:	f3ef 8310 	mrs	r3, PRIMASK
 8006460:	61fb      	str	r3, [r7, #28]
  return(result);
 8006462:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006464:	64bb      	str	r3, [r7, #72]	; 0x48
 8006466:	2301      	movs	r3, #1
 8006468:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	f383 8810 	msr	PRIMASK, r3
}
 8006470:	46c0      	nop			; (mov r8, r8)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2101      	movs	r1, #1
 800647e:	438a      	bics	r2, r1
 8006480:	609a      	str	r2, [r3, #8]
 8006482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	f383 8810 	msr	PRIMASK, r3
}
 800648c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2220      	movs	r2, #32
 8006492:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2220      	movs	r2, #32
 8006498:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2280      	movs	r2, #128	; 0x80
 800649e:	2120      	movs	r1, #32
 80064a0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2274      	movs	r2, #116	; 0x74
 80064a6:	2100      	movs	r1, #0
 80064a8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e010      	b.n	80064d0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	4013      	ands	r3, r2
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	425a      	negs	r2, r3
 80064be:	4153      	adcs	r3, r2
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	001a      	movs	r2, r3
 80064c4:	1dfb      	adds	r3, r7, #7
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d100      	bne.n	80064ce <UART_WaitOnFlagUntilTimeout+0x17a>
 80064cc:	e74b      	b.n	8006366 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	0018      	movs	r0, r3
 80064d2:	46bd      	mov	sp, r7
 80064d4:	b014      	add	sp, #80	; 0x50
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	fffffe5f 	.word	0xfffffe5f

080064dc <__errno>:
 80064dc:	4b01      	ldr	r3, [pc, #4]	; (80064e4 <__errno+0x8>)
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	4770      	bx	lr
 80064e2:	46c0      	nop			; (mov r8, r8)
 80064e4:	2000000c 	.word	0x2000000c

080064e8 <__libc_init_array>:
 80064e8:	b570      	push	{r4, r5, r6, lr}
 80064ea:	2600      	movs	r6, #0
 80064ec:	4d0c      	ldr	r5, [pc, #48]	; (8006520 <__libc_init_array+0x38>)
 80064ee:	4c0d      	ldr	r4, [pc, #52]	; (8006524 <__libc_init_array+0x3c>)
 80064f0:	1b64      	subs	r4, r4, r5
 80064f2:	10a4      	asrs	r4, r4, #2
 80064f4:	42a6      	cmp	r6, r4
 80064f6:	d109      	bne.n	800650c <__libc_init_array+0x24>
 80064f8:	2600      	movs	r6, #0
 80064fa:	f004 fd47 	bl	800af8c <_init>
 80064fe:	4d0a      	ldr	r5, [pc, #40]	; (8006528 <__libc_init_array+0x40>)
 8006500:	4c0a      	ldr	r4, [pc, #40]	; (800652c <__libc_init_array+0x44>)
 8006502:	1b64      	subs	r4, r4, r5
 8006504:	10a4      	asrs	r4, r4, #2
 8006506:	42a6      	cmp	r6, r4
 8006508:	d105      	bne.n	8006516 <__libc_init_array+0x2e>
 800650a:	bd70      	pop	{r4, r5, r6, pc}
 800650c:	00b3      	lsls	r3, r6, #2
 800650e:	58eb      	ldr	r3, [r5, r3]
 8006510:	4798      	blx	r3
 8006512:	3601      	adds	r6, #1
 8006514:	e7ee      	b.n	80064f4 <__libc_init_array+0xc>
 8006516:	00b3      	lsls	r3, r6, #2
 8006518:	58eb      	ldr	r3, [r5, r3]
 800651a:	4798      	blx	r3
 800651c:	3601      	adds	r6, #1
 800651e:	e7f2      	b.n	8006506 <__libc_init_array+0x1e>
 8006520:	0800b5d4 	.word	0x0800b5d4
 8006524:	0800b5d4 	.word	0x0800b5d4
 8006528:	0800b5d4 	.word	0x0800b5d4
 800652c:	0800b5d8 	.word	0x0800b5d8

08006530 <memset>:
 8006530:	0003      	movs	r3, r0
 8006532:	1882      	adds	r2, r0, r2
 8006534:	4293      	cmp	r3, r2
 8006536:	d100      	bne.n	800653a <memset+0xa>
 8006538:	4770      	bx	lr
 800653a:	7019      	strb	r1, [r3, #0]
 800653c:	3301      	adds	r3, #1
 800653e:	e7f9      	b.n	8006534 <memset+0x4>

08006540 <__cvt>:
 8006540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006542:	001e      	movs	r6, r3
 8006544:	2300      	movs	r3, #0
 8006546:	0014      	movs	r4, r2
 8006548:	b08b      	sub	sp, #44	; 0x2c
 800654a:	429e      	cmp	r6, r3
 800654c:	da04      	bge.n	8006558 <__cvt+0x18>
 800654e:	2180      	movs	r1, #128	; 0x80
 8006550:	0609      	lsls	r1, r1, #24
 8006552:	1873      	adds	r3, r6, r1
 8006554:	001e      	movs	r6, r3
 8006556:	232d      	movs	r3, #45	; 0x2d
 8006558:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800655a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800655c:	7013      	strb	r3, [r2, #0]
 800655e:	2320      	movs	r3, #32
 8006560:	2203      	movs	r2, #3
 8006562:	439f      	bics	r7, r3
 8006564:	2f46      	cmp	r7, #70	; 0x46
 8006566:	d007      	beq.n	8006578 <__cvt+0x38>
 8006568:	003b      	movs	r3, r7
 800656a:	3b45      	subs	r3, #69	; 0x45
 800656c:	4259      	negs	r1, r3
 800656e:	414b      	adcs	r3, r1
 8006570:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006572:	3a01      	subs	r2, #1
 8006574:	18cb      	adds	r3, r1, r3
 8006576:	9310      	str	r3, [sp, #64]	; 0x40
 8006578:	ab09      	add	r3, sp, #36	; 0x24
 800657a:	9304      	str	r3, [sp, #16]
 800657c:	ab08      	add	r3, sp, #32
 800657e:	9303      	str	r3, [sp, #12]
 8006580:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006582:	9200      	str	r2, [sp, #0]
 8006584:	9302      	str	r3, [sp, #8]
 8006586:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006588:	0022      	movs	r2, r4
 800658a:	9301      	str	r3, [sp, #4]
 800658c:	0033      	movs	r3, r6
 800658e:	f001 fdc3 	bl	8008118 <_dtoa_r>
 8006592:	0005      	movs	r5, r0
 8006594:	2f47      	cmp	r7, #71	; 0x47
 8006596:	d102      	bne.n	800659e <__cvt+0x5e>
 8006598:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800659a:	07db      	lsls	r3, r3, #31
 800659c:	d528      	bpl.n	80065f0 <__cvt+0xb0>
 800659e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065a0:	18eb      	adds	r3, r5, r3
 80065a2:	9307      	str	r3, [sp, #28]
 80065a4:	2f46      	cmp	r7, #70	; 0x46
 80065a6:	d114      	bne.n	80065d2 <__cvt+0x92>
 80065a8:	782b      	ldrb	r3, [r5, #0]
 80065aa:	2b30      	cmp	r3, #48	; 0x30
 80065ac:	d10c      	bne.n	80065c8 <__cvt+0x88>
 80065ae:	2200      	movs	r2, #0
 80065b0:	2300      	movs	r3, #0
 80065b2:	0020      	movs	r0, r4
 80065b4:	0031      	movs	r1, r6
 80065b6:	f7f9 ff49 	bl	800044c <__aeabi_dcmpeq>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d104      	bne.n	80065c8 <__cvt+0x88>
 80065be:	2301      	movs	r3, #1
 80065c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80065c2:	1a9b      	subs	r3, r3, r2
 80065c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065ca:	9a07      	ldr	r2, [sp, #28]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	18d3      	adds	r3, r2, r3
 80065d0:	9307      	str	r3, [sp, #28]
 80065d2:	2200      	movs	r2, #0
 80065d4:	2300      	movs	r3, #0
 80065d6:	0020      	movs	r0, r4
 80065d8:	0031      	movs	r1, r6
 80065da:	f7f9 ff37 	bl	800044c <__aeabi_dcmpeq>
 80065de:	2800      	cmp	r0, #0
 80065e0:	d001      	beq.n	80065e6 <__cvt+0xa6>
 80065e2:	9b07      	ldr	r3, [sp, #28]
 80065e4:	9309      	str	r3, [sp, #36]	; 0x24
 80065e6:	2230      	movs	r2, #48	; 0x30
 80065e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ea:	9907      	ldr	r1, [sp, #28]
 80065ec:	428b      	cmp	r3, r1
 80065ee:	d306      	bcc.n	80065fe <__cvt+0xbe>
 80065f0:	0028      	movs	r0, r5
 80065f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80065f6:	1b5b      	subs	r3, r3, r5
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	b00b      	add	sp, #44	; 0x2c
 80065fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065fe:	1c59      	adds	r1, r3, #1
 8006600:	9109      	str	r1, [sp, #36]	; 0x24
 8006602:	701a      	strb	r2, [r3, #0]
 8006604:	e7f0      	b.n	80065e8 <__cvt+0xa8>

08006606 <__exponent>:
 8006606:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006608:	1c83      	adds	r3, r0, #2
 800660a:	b087      	sub	sp, #28
 800660c:	9303      	str	r3, [sp, #12]
 800660e:	0005      	movs	r5, r0
 8006610:	000c      	movs	r4, r1
 8006612:	232b      	movs	r3, #43	; 0x2b
 8006614:	7002      	strb	r2, [r0, #0]
 8006616:	2900      	cmp	r1, #0
 8006618:	da01      	bge.n	800661e <__exponent+0x18>
 800661a:	424c      	negs	r4, r1
 800661c:	3302      	adds	r3, #2
 800661e:	706b      	strb	r3, [r5, #1]
 8006620:	2c09      	cmp	r4, #9
 8006622:	dd31      	ble.n	8006688 <__exponent+0x82>
 8006624:	270a      	movs	r7, #10
 8006626:	ab04      	add	r3, sp, #16
 8006628:	1dde      	adds	r6, r3, #7
 800662a:	0020      	movs	r0, r4
 800662c:	0039      	movs	r1, r7
 800662e:	9601      	str	r6, [sp, #4]
 8006630:	f7f9 fef6 	bl	8000420 <__aeabi_idivmod>
 8006634:	3e01      	subs	r6, #1
 8006636:	3130      	adds	r1, #48	; 0x30
 8006638:	0020      	movs	r0, r4
 800663a:	7031      	strb	r1, [r6, #0]
 800663c:	0039      	movs	r1, r7
 800663e:	9402      	str	r4, [sp, #8]
 8006640:	f7f9 fe08 	bl	8000254 <__divsi3>
 8006644:	9b02      	ldr	r3, [sp, #8]
 8006646:	0004      	movs	r4, r0
 8006648:	2b63      	cmp	r3, #99	; 0x63
 800664a:	dcee      	bgt.n	800662a <__exponent+0x24>
 800664c:	9b01      	ldr	r3, [sp, #4]
 800664e:	3430      	adds	r4, #48	; 0x30
 8006650:	1e9a      	subs	r2, r3, #2
 8006652:	0013      	movs	r3, r2
 8006654:	9903      	ldr	r1, [sp, #12]
 8006656:	7014      	strb	r4, [r2, #0]
 8006658:	a804      	add	r0, sp, #16
 800665a:	3007      	adds	r0, #7
 800665c:	4298      	cmp	r0, r3
 800665e:	d80e      	bhi.n	800667e <__exponent+0x78>
 8006660:	ab04      	add	r3, sp, #16
 8006662:	3307      	adds	r3, #7
 8006664:	2000      	movs	r0, #0
 8006666:	429a      	cmp	r2, r3
 8006668:	d804      	bhi.n	8006674 <__exponent+0x6e>
 800666a:	ab04      	add	r3, sp, #16
 800666c:	3009      	adds	r0, #9
 800666e:	18c0      	adds	r0, r0, r3
 8006670:	9b01      	ldr	r3, [sp, #4]
 8006672:	1ac0      	subs	r0, r0, r3
 8006674:	9b03      	ldr	r3, [sp, #12]
 8006676:	1818      	adds	r0, r3, r0
 8006678:	1b40      	subs	r0, r0, r5
 800667a:	b007      	add	sp, #28
 800667c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800667e:	7818      	ldrb	r0, [r3, #0]
 8006680:	3301      	adds	r3, #1
 8006682:	7008      	strb	r0, [r1, #0]
 8006684:	3101      	adds	r1, #1
 8006686:	e7e7      	b.n	8006658 <__exponent+0x52>
 8006688:	2330      	movs	r3, #48	; 0x30
 800668a:	18e4      	adds	r4, r4, r3
 800668c:	70ab      	strb	r3, [r5, #2]
 800668e:	1d28      	adds	r0, r5, #4
 8006690:	70ec      	strb	r4, [r5, #3]
 8006692:	e7f1      	b.n	8006678 <__exponent+0x72>

08006694 <_printf_float>:
 8006694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006696:	b095      	sub	sp, #84	; 0x54
 8006698:	000c      	movs	r4, r1
 800669a:	9209      	str	r2, [sp, #36]	; 0x24
 800669c:	001e      	movs	r6, r3
 800669e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80066a0:	0007      	movs	r7, r0
 80066a2:	f002 fec7 	bl	8009434 <_localeconv_r>
 80066a6:	6803      	ldr	r3, [r0, #0]
 80066a8:	0018      	movs	r0, r3
 80066aa:	930c      	str	r3, [sp, #48]	; 0x30
 80066ac:	f7f9 fd2c 	bl	8000108 <strlen>
 80066b0:	2300      	movs	r3, #0
 80066b2:	9312      	str	r3, [sp, #72]	; 0x48
 80066b4:	7e23      	ldrb	r3, [r4, #24]
 80066b6:	2207      	movs	r2, #7
 80066b8:	930a      	str	r3, [sp, #40]	; 0x28
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	900e      	str	r0, [sp, #56]	; 0x38
 80066be:	930d      	str	r3, [sp, #52]	; 0x34
 80066c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80066c2:	682b      	ldr	r3, [r5, #0]
 80066c4:	05c9      	lsls	r1, r1, #23
 80066c6:	d547      	bpl.n	8006758 <_printf_float+0xc4>
 80066c8:	189b      	adds	r3, r3, r2
 80066ca:	4393      	bics	r3, r2
 80066cc:	001a      	movs	r2, r3
 80066ce:	3208      	adds	r2, #8
 80066d0:	602a      	str	r2, [r5, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	64a2      	str	r2, [r4, #72]	; 0x48
 80066d8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80066da:	2201      	movs	r2, #1
 80066dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80066de:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80066e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80066e2:	006b      	lsls	r3, r5, #1
 80066e4:	085b      	lsrs	r3, r3, #1
 80066e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80066e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80066ea:	4ba7      	ldr	r3, [pc, #668]	; (8006988 <_printf_float+0x2f4>)
 80066ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80066ee:	4252      	negs	r2, r2
 80066f0:	f7fb ffaa 	bl	8002648 <__aeabi_dcmpun>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	d131      	bne.n	800675c <_printf_float+0xc8>
 80066f8:	2201      	movs	r2, #1
 80066fa:	4ba3      	ldr	r3, [pc, #652]	; (8006988 <_printf_float+0x2f4>)
 80066fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80066fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006700:	4252      	negs	r2, r2
 8006702:	f7f9 feb3 	bl	800046c <__aeabi_dcmple>
 8006706:	2800      	cmp	r0, #0
 8006708:	d128      	bne.n	800675c <_printf_float+0xc8>
 800670a:	2200      	movs	r2, #0
 800670c:	2300      	movs	r3, #0
 800670e:	0029      	movs	r1, r5
 8006710:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006712:	f7f9 fea1 	bl	8000458 <__aeabi_dcmplt>
 8006716:	2800      	cmp	r0, #0
 8006718:	d003      	beq.n	8006722 <_printf_float+0x8e>
 800671a:	0023      	movs	r3, r4
 800671c:	222d      	movs	r2, #45	; 0x2d
 800671e:	3343      	adds	r3, #67	; 0x43
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006724:	4d99      	ldr	r5, [pc, #612]	; (800698c <_printf_float+0x2f8>)
 8006726:	2b47      	cmp	r3, #71	; 0x47
 8006728:	d900      	bls.n	800672c <_printf_float+0x98>
 800672a:	4d99      	ldr	r5, [pc, #612]	; (8006990 <_printf_float+0x2fc>)
 800672c:	2303      	movs	r3, #3
 800672e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006730:	6123      	str	r3, [r4, #16]
 8006732:	3301      	adds	r3, #1
 8006734:	439a      	bics	r2, r3
 8006736:	2300      	movs	r3, #0
 8006738:	6022      	str	r2, [r4, #0]
 800673a:	930b      	str	r3, [sp, #44]	; 0x2c
 800673c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673e:	0021      	movs	r1, r4
 8006740:	0038      	movs	r0, r7
 8006742:	9600      	str	r6, [sp, #0]
 8006744:	aa13      	add	r2, sp, #76	; 0x4c
 8006746:	f000 f9e7 	bl	8006b18 <_printf_common>
 800674a:	1c43      	adds	r3, r0, #1
 800674c:	d000      	beq.n	8006750 <_printf_float+0xbc>
 800674e:	e0a2      	b.n	8006896 <_printf_float+0x202>
 8006750:	2001      	movs	r0, #1
 8006752:	4240      	negs	r0, r0
 8006754:	b015      	add	sp, #84	; 0x54
 8006756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006758:	3307      	adds	r3, #7
 800675a:	e7b6      	b.n	80066ca <_printf_float+0x36>
 800675c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800675e:	002b      	movs	r3, r5
 8006760:	0010      	movs	r0, r2
 8006762:	0029      	movs	r1, r5
 8006764:	f7fb ff70 	bl	8002648 <__aeabi_dcmpun>
 8006768:	2800      	cmp	r0, #0
 800676a:	d00b      	beq.n	8006784 <_printf_float+0xf0>
 800676c:	2d00      	cmp	r5, #0
 800676e:	da03      	bge.n	8006778 <_printf_float+0xe4>
 8006770:	0023      	movs	r3, r4
 8006772:	222d      	movs	r2, #45	; 0x2d
 8006774:	3343      	adds	r3, #67	; 0x43
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800677a:	4d86      	ldr	r5, [pc, #536]	; (8006994 <_printf_float+0x300>)
 800677c:	2b47      	cmp	r3, #71	; 0x47
 800677e:	d9d5      	bls.n	800672c <_printf_float+0x98>
 8006780:	4d85      	ldr	r5, [pc, #532]	; (8006998 <_printf_float+0x304>)
 8006782:	e7d3      	b.n	800672c <_printf_float+0x98>
 8006784:	2220      	movs	r2, #32
 8006786:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006788:	6863      	ldr	r3, [r4, #4]
 800678a:	4391      	bics	r1, r2
 800678c:	910f      	str	r1, [sp, #60]	; 0x3c
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	d149      	bne.n	8006826 <_printf_float+0x192>
 8006792:	3307      	adds	r3, #7
 8006794:	6063      	str	r3, [r4, #4]
 8006796:	2380      	movs	r3, #128	; 0x80
 8006798:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	4313      	orrs	r3, r2
 800679e:	2200      	movs	r2, #0
 80067a0:	9206      	str	r2, [sp, #24]
 80067a2:	aa12      	add	r2, sp, #72	; 0x48
 80067a4:	9205      	str	r2, [sp, #20]
 80067a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067a8:	a908      	add	r1, sp, #32
 80067aa:	9204      	str	r2, [sp, #16]
 80067ac:	aa11      	add	r2, sp, #68	; 0x44
 80067ae:	9203      	str	r2, [sp, #12]
 80067b0:	2223      	movs	r2, #35	; 0x23
 80067b2:	6023      	str	r3, [r4, #0]
 80067b4:	9301      	str	r3, [sp, #4]
 80067b6:	6863      	ldr	r3, [r4, #4]
 80067b8:	1852      	adds	r2, r2, r1
 80067ba:	9202      	str	r2, [sp, #8]
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	0038      	movs	r0, r7
 80067c0:	002b      	movs	r3, r5
 80067c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067c4:	f7ff febc 	bl	8006540 <__cvt>
 80067c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067ca:	0005      	movs	r5, r0
 80067cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80067ce:	2b47      	cmp	r3, #71	; 0x47
 80067d0:	d108      	bne.n	80067e4 <_printf_float+0x150>
 80067d2:	1ccb      	adds	r3, r1, #3
 80067d4:	db02      	blt.n	80067dc <_printf_float+0x148>
 80067d6:	6863      	ldr	r3, [r4, #4]
 80067d8:	4299      	cmp	r1, r3
 80067da:	dd48      	ble.n	800686e <_printf_float+0x1da>
 80067dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067de:	3b02      	subs	r3, #2
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	930a      	str	r3, [sp, #40]	; 0x28
 80067e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e6:	2b65      	cmp	r3, #101	; 0x65
 80067e8:	d824      	bhi.n	8006834 <_printf_float+0x1a0>
 80067ea:	0020      	movs	r0, r4
 80067ec:	001a      	movs	r2, r3
 80067ee:	3901      	subs	r1, #1
 80067f0:	3050      	adds	r0, #80	; 0x50
 80067f2:	9111      	str	r1, [sp, #68]	; 0x44
 80067f4:	f7ff ff07 	bl	8006606 <__exponent>
 80067f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80067fc:	1813      	adds	r3, r2, r0
 80067fe:	6123      	str	r3, [r4, #16]
 8006800:	2a01      	cmp	r2, #1
 8006802:	dc02      	bgt.n	800680a <_printf_float+0x176>
 8006804:	6822      	ldr	r2, [r4, #0]
 8006806:	07d2      	lsls	r2, r2, #31
 8006808:	d501      	bpl.n	800680e <_printf_float+0x17a>
 800680a:	3301      	adds	r3, #1
 800680c:	6123      	str	r3, [r4, #16]
 800680e:	2323      	movs	r3, #35	; 0x23
 8006810:	aa08      	add	r2, sp, #32
 8006812:	189b      	adds	r3, r3, r2
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d100      	bne.n	800681c <_printf_float+0x188>
 800681a:	e78f      	b.n	800673c <_printf_float+0xa8>
 800681c:	0023      	movs	r3, r4
 800681e:	222d      	movs	r2, #45	; 0x2d
 8006820:	3343      	adds	r3, #67	; 0x43
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	e78a      	b.n	800673c <_printf_float+0xa8>
 8006826:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006828:	2a47      	cmp	r2, #71	; 0x47
 800682a:	d1b4      	bne.n	8006796 <_printf_float+0x102>
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1b2      	bne.n	8006796 <_printf_float+0x102>
 8006830:	3301      	adds	r3, #1
 8006832:	e7af      	b.n	8006794 <_printf_float+0x100>
 8006834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006836:	2b66      	cmp	r3, #102	; 0x66
 8006838:	d11b      	bne.n	8006872 <_printf_float+0x1de>
 800683a:	6863      	ldr	r3, [r4, #4]
 800683c:	2900      	cmp	r1, #0
 800683e:	dd0d      	ble.n	800685c <_printf_float+0x1c8>
 8006840:	6121      	str	r1, [r4, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d102      	bne.n	800684c <_printf_float+0x1b8>
 8006846:	6822      	ldr	r2, [r4, #0]
 8006848:	07d2      	lsls	r2, r2, #31
 800684a:	d502      	bpl.n	8006852 <_printf_float+0x1be>
 800684c:	3301      	adds	r3, #1
 800684e:	1859      	adds	r1, r3, r1
 8006850:	6121      	str	r1, [r4, #16]
 8006852:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006854:	65a3      	str	r3, [r4, #88]	; 0x58
 8006856:	2300      	movs	r3, #0
 8006858:	930b      	str	r3, [sp, #44]	; 0x2c
 800685a:	e7d8      	b.n	800680e <_printf_float+0x17a>
 800685c:	2b00      	cmp	r3, #0
 800685e:	d103      	bne.n	8006868 <_printf_float+0x1d4>
 8006860:	2201      	movs	r2, #1
 8006862:	6821      	ldr	r1, [r4, #0]
 8006864:	4211      	tst	r1, r2
 8006866:	d000      	beq.n	800686a <_printf_float+0x1d6>
 8006868:	1c9a      	adds	r2, r3, #2
 800686a:	6122      	str	r2, [r4, #16]
 800686c:	e7f1      	b.n	8006852 <_printf_float+0x1be>
 800686e:	2367      	movs	r3, #103	; 0x67
 8006870:	930a      	str	r3, [sp, #40]	; 0x28
 8006872:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006874:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006876:	4293      	cmp	r3, r2
 8006878:	db06      	blt.n	8006888 <_printf_float+0x1f4>
 800687a:	6822      	ldr	r2, [r4, #0]
 800687c:	6123      	str	r3, [r4, #16]
 800687e:	07d2      	lsls	r2, r2, #31
 8006880:	d5e7      	bpl.n	8006852 <_printf_float+0x1be>
 8006882:	3301      	adds	r3, #1
 8006884:	6123      	str	r3, [r4, #16]
 8006886:	e7e4      	b.n	8006852 <_printf_float+0x1be>
 8006888:	2101      	movs	r1, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	dc01      	bgt.n	8006892 <_printf_float+0x1fe>
 800688e:	1849      	adds	r1, r1, r1
 8006890:	1ac9      	subs	r1, r1, r3
 8006892:	1852      	adds	r2, r2, r1
 8006894:	e7e9      	b.n	800686a <_printf_float+0x1d6>
 8006896:	6822      	ldr	r2, [r4, #0]
 8006898:	0553      	lsls	r3, r2, #21
 800689a:	d407      	bmi.n	80068ac <_printf_float+0x218>
 800689c:	6923      	ldr	r3, [r4, #16]
 800689e:	002a      	movs	r2, r5
 80068a0:	0038      	movs	r0, r7
 80068a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068a4:	47b0      	blx	r6
 80068a6:	1c43      	adds	r3, r0, #1
 80068a8:	d128      	bne.n	80068fc <_printf_float+0x268>
 80068aa:	e751      	b.n	8006750 <_printf_float+0xbc>
 80068ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ae:	2b65      	cmp	r3, #101	; 0x65
 80068b0:	d800      	bhi.n	80068b4 <_printf_float+0x220>
 80068b2:	e0e1      	b.n	8006a78 <_printf_float+0x3e4>
 80068b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80068b6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80068b8:	2200      	movs	r2, #0
 80068ba:	2300      	movs	r3, #0
 80068bc:	f7f9 fdc6 	bl	800044c <__aeabi_dcmpeq>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d031      	beq.n	8006928 <_printf_float+0x294>
 80068c4:	2301      	movs	r3, #1
 80068c6:	0038      	movs	r0, r7
 80068c8:	4a34      	ldr	r2, [pc, #208]	; (800699c <_printf_float+0x308>)
 80068ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068cc:	47b0      	blx	r6
 80068ce:	1c43      	adds	r3, r0, #1
 80068d0:	d100      	bne.n	80068d4 <_printf_float+0x240>
 80068d2:	e73d      	b.n	8006750 <_printf_float+0xbc>
 80068d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068d8:	4293      	cmp	r3, r2
 80068da:	db02      	blt.n	80068e2 <_printf_float+0x24e>
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	07db      	lsls	r3, r3, #31
 80068e0:	d50c      	bpl.n	80068fc <_printf_float+0x268>
 80068e2:	0038      	movs	r0, r7
 80068e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068ea:	47b0      	blx	r6
 80068ec:	2500      	movs	r5, #0
 80068ee:	1c43      	adds	r3, r0, #1
 80068f0:	d100      	bne.n	80068f4 <_printf_float+0x260>
 80068f2:	e72d      	b.n	8006750 <_printf_float+0xbc>
 80068f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068f6:	3b01      	subs	r3, #1
 80068f8:	42ab      	cmp	r3, r5
 80068fa:	dc0a      	bgt.n	8006912 <_printf_float+0x27e>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	079b      	lsls	r3, r3, #30
 8006900:	d500      	bpl.n	8006904 <_printf_float+0x270>
 8006902:	e106      	b.n	8006b12 <_printf_float+0x47e>
 8006904:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006906:	68e0      	ldr	r0, [r4, #12]
 8006908:	4298      	cmp	r0, r3
 800690a:	db00      	blt.n	800690e <_printf_float+0x27a>
 800690c:	e722      	b.n	8006754 <_printf_float+0xc0>
 800690e:	0018      	movs	r0, r3
 8006910:	e720      	b.n	8006754 <_printf_float+0xc0>
 8006912:	0022      	movs	r2, r4
 8006914:	2301      	movs	r3, #1
 8006916:	0038      	movs	r0, r7
 8006918:	9909      	ldr	r1, [sp, #36]	; 0x24
 800691a:	321a      	adds	r2, #26
 800691c:	47b0      	blx	r6
 800691e:	1c43      	adds	r3, r0, #1
 8006920:	d100      	bne.n	8006924 <_printf_float+0x290>
 8006922:	e715      	b.n	8006750 <_printf_float+0xbc>
 8006924:	3501      	adds	r5, #1
 8006926:	e7e5      	b.n	80068f4 <_printf_float+0x260>
 8006928:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800692a:	2b00      	cmp	r3, #0
 800692c:	dc38      	bgt.n	80069a0 <_printf_float+0x30c>
 800692e:	2301      	movs	r3, #1
 8006930:	0038      	movs	r0, r7
 8006932:	4a1a      	ldr	r2, [pc, #104]	; (800699c <_printf_float+0x308>)
 8006934:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006936:	47b0      	blx	r6
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	d100      	bne.n	800693e <_printf_float+0x2aa>
 800693c:	e708      	b.n	8006750 <_printf_float+0xbc>
 800693e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006940:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006942:	4313      	orrs	r3, r2
 8006944:	d102      	bne.n	800694c <_printf_float+0x2b8>
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	07db      	lsls	r3, r3, #31
 800694a:	d5d7      	bpl.n	80068fc <_printf_float+0x268>
 800694c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800694e:	0038      	movs	r0, r7
 8006950:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006952:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006954:	47b0      	blx	r6
 8006956:	1c43      	adds	r3, r0, #1
 8006958:	d100      	bne.n	800695c <_printf_float+0x2c8>
 800695a:	e6f9      	b.n	8006750 <_printf_float+0xbc>
 800695c:	2300      	movs	r3, #0
 800695e:	930a      	str	r3, [sp, #40]	; 0x28
 8006960:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006964:	425b      	negs	r3, r3
 8006966:	4293      	cmp	r3, r2
 8006968:	dc01      	bgt.n	800696e <_printf_float+0x2da>
 800696a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800696c:	e797      	b.n	800689e <_printf_float+0x20a>
 800696e:	0022      	movs	r2, r4
 8006970:	2301      	movs	r3, #1
 8006972:	0038      	movs	r0, r7
 8006974:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006976:	321a      	adds	r2, #26
 8006978:	47b0      	blx	r6
 800697a:	1c43      	adds	r3, r0, #1
 800697c:	d100      	bne.n	8006980 <_printf_float+0x2ec>
 800697e:	e6e7      	b.n	8006750 <_printf_float+0xbc>
 8006980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006982:	3301      	adds	r3, #1
 8006984:	e7eb      	b.n	800695e <_printf_float+0x2ca>
 8006986:	46c0      	nop			; (mov r8, r8)
 8006988:	7fefffff 	.word	0x7fefffff
 800698c:	0800b134 	.word	0x0800b134
 8006990:	0800b138 	.word	0x0800b138
 8006994:	0800b13c 	.word	0x0800b13c
 8006998:	0800b140 	.word	0x0800b140
 800699c:	0800b144 	.word	0x0800b144
 80069a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069a4:	920a      	str	r2, [sp, #40]	; 0x28
 80069a6:	429a      	cmp	r2, r3
 80069a8:	dd00      	ble.n	80069ac <_printf_float+0x318>
 80069aa:	930a      	str	r3, [sp, #40]	; 0x28
 80069ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	dc3c      	bgt.n	8006a2c <_printf_float+0x398>
 80069b2:	2300      	movs	r3, #0
 80069b4:	930d      	str	r3, [sp, #52]	; 0x34
 80069b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b8:	43db      	mvns	r3, r3
 80069ba:	17db      	asrs	r3, r3, #31
 80069bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80069be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80069c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c6:	4013      	ands	r3, r2
 80069c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069ce:	4293      	cmp	r3, r2
 80069d0:	dc34      	bgt.n	8006a3c <_printf_float+0x3a8>
 80069d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069d6:	4293      	cmp	r3, r2
 80069d8:	db3d      	blt.n	8006a56 <_printf_float+0x3c2>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	07db      	lsls	r3, r3, #31
 80069de:	d43a      	bmi.n	8006a56 <_printf_float+0x3c2>
 80069e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	1a52      	subs	r2, r2, r1
 80069ea:	920a      	str	r2, [sp, #40]	; 0x28
 80069ec:	429a      	cmp	r2, r3
 80069ee:	dd00      	ble.n	80069f2 <_printf_float+0x35e>
 80069f0:	930a      	str	r3, [sp, #40]	; 0x28
 80069f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	dc36      	bgt.n	8006a66 <_printf_float+0x3d2>
 80069f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069fa:	2500      	movs	r5, #0
 80069fc:	43db      	mvns	r3, r3
 80069fe:	17db      	asrs	r3, r3, #31
 8006a00:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a08:	1a9b      	subs	r3, r3, r2
 8006a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a0c:	400a      	ands	r2, r1
 8006a0e:	1a9b      	subs	r3, r3, r2
 8006a10:	42ab      	cmp	r3, r5
 8006a12:	dc00      	bgt.n	8006a16 <_printf_float+0x382>
 8006a14:	e772      	b.n	80068fc <_printf_float+0x268>
 8006a16:	0022      	movs	r2, r4
 8006a18:	2301      	movs	r3, #1
 8006a1a:	0038      	movs	r0, r7
 8006a1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a1e:	321a      	adds	r2, #26
 8006a20:	47b0      	blx	r6
 8006a22:	1c43      	adds	r3, r0, #1
 8006a24:	d100      	bne.n	8006a28 <_printf_float+0x394>
 8006a26:	e693      	b.n	8006750 <_printf_float+0xbc>
 8006a28:	3501      	adds	r5, #1
 8006a2a:	e7ea      	b.n	8006a02 <_printf_float+0x36e>
 8006a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a2e:	002a      	movs	r2, r5
 8006a30:	0038      	movs	r0, r7
 8006a32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a34:	47b0      	blx	r6
 8006a36:	1c43      	adds	r3, r0, #1
 8006a38:	d1bb      	bne.n	80069b2 <_printf_float+0x31e>
 8006a3a:	e689      	b.n	8006750 <_printf_float+0xbc>
 8006a3c:	0022      	movs	r2, r4
 8006a3e:	2301      	movs	r3, #1
 8006a40:	0038      	movs	r0, r7
 8006a42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a44:	321a      	adds	r2, #26
 8006a46:	47b0      	blx	r6
 8006a48:	1c43      	adds	r3, r0, #1
 8006a4a:	d100      	bne.n	8006a4e <_printf_float+0x3ba>
 8006a4c:	e680      	b.n	8006750 <_printf_float+0xbc>
 8006a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a50:	3301      	adds	r3, #1
 8006a52:	930d      	str	r3, [sp, #52]	; 0x34
 8006a54:	e7b3      	b.n	80069be <_printf_float+0x32a>
 8006a56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a58:	0038      	movs	r0, r7
 8006a5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a5e:	47b0      	blx	r6
 8006a60:	1c43      	adds	r3, r0, #1
 8006a62:	d1bd      	bne.n	80069e0 <_printf_float+0x34c>
 8006a64:	e674      	b.n	8006750 <_printf_float+0xbc>
 8006a66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a68:	0038      	movs	r0, r7
 8006a6a:	18ea      	adds	r2, r5, r3
 8006a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a70:	47b0      	blx	r6
 8006a72:	1c43      	adds	r3, r0, #1
 8006a74:	d1c0      	bne.n	80069f8 <_printf_float+0x364>
 8006a76:	e66b      	b.n	8006750 <_printf_float+0xbc>
 8006a78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	dc02      	bgt.n	8006a84 <_printf_float+0x3f0>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	421a      	tst	r2, r3
 8006a82:	d034      	beq.n	8006aee <_printf_float+0x45a>
 8006a84:	2301      	movs	r3, #1
 8006a86:	002a      	movs	r2, r5
 8006a88:	0038      	movs	r0, r7
 8006a8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a8c:	47b0      	blx	r6
 8006a8e:	1c43      	adds	r3, r0, #1
 8006a90:	d100      	bne.n	8006a94 <_printf_float+0x400>
 8006a92:	e65d      	b.n	8006750 <_printf_float+0xbc>
 8006a94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a96:	0038      	movs	r0, r7
 8006a98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a9c:	47b0      	blx	r6
 8006a9e:	1c43      	adds	r3, r0, #1
 8006aa0:	d100      	bne.n	8006aa4 <_printf_float+0x410>
 8006aa2:	e655      	b.n	8006750 <_printf_float+0xbc>
 8006aa4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006aa6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f7f9 fcce 	bl	800044c <__aeabi_dcmpeq>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d11a      	bne.n	8006aea <_printf_float+0x456>
 8006ab4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ab6:	1c6a      	adds	r2, r5, #1
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	0038      	movs	r0, r7
 8006abc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006abe:	47b0      	blx	r6
 8006ac0:	1c43      	adds	r3, r0, #1
 8006ac2:	d10e      	bne.n	8006ae2 <_printf_float+0x44e>
 8006ac4:	e644      	b.n	8006750 <_printf_float+0xbc>
 8006ac6:	0022      	movs	r2, r4
 8006ac8:	2301      	movs	r3, #1
 8006aca:	0038      	movs	r0, r7
 8006acc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ace:	321a      	adds	r2, #26
 8006ad0:	47b0      	blx	r6
 8006ad2:	1c43      	adds	r3, r0, #1
 8006ad4:	d100      	bne.n	8006ad8 <_printf_float+0x444>
 8006ad6:	e63b      	b.n	8006750 <_printf_float+0xbc>
 8006ad8:	3501      	adds	r5, #1
 8006ada:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006adc:	3b01      	subs	r3, #1
 8006ade:	42ab      	cmp	r3, r5
 8006ae0:	dcf1      	bgt.n	8006ac6 <_printf_float+0x432>
 8006ae2:	0022      	movs	r2, r4
 8006ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ae6:	3250      	adds	r2, #80	; 0x50
 8006ae8:	e6da      	b.n	80068a0 <_printf_float+0x20c>
 8006aea:	2500      	movs	r5, #0
 8006aec:	e7f5      	b.n	8006ada <_printf_float+0x446>
 8006aee:	002a      	movs	r2, r5
 8006af0:	e7e3      	b.n	8006aba <_printf_float+0x426>
 8006af2:	0022      	movs	r2, r4
 8006af4:	2301      	movs	r3, #1
 8006af6:	0038      	movs	r0, r7
 8006af8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006afa:	3219      	adds	r2, #25
 8006afc:	47b0      	blx	r6
 8006afe:	1c43      	adds	r3, r0, #1
 8006b00:	d100      	bne.n	8006b04 <_printf_float+0x470>
 8006b02:	e625      	b.n	8006750 <_printf_float+0xbc>
 8006b04:	3501      	adds	r5, #1
 8006b06:	68e3      	ldr	r3, [r4, #12]
 8006b08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b0a:	1a9b      	subs	r3, r3, r2
 8006b0c:	42ab      	cmp	r3, r5
 8006b0e:	dcf0      	bgt.n	8006af2 <_printf_float+0x45e>
 8006b10:	e6f8      	b.n	8006904 <_printf_float+0x270>
 8006b12:	2500      	movs	r5, #0
 8006b14:	e7f7      	b.n	8006b06 <_printf_float+0x472>
 8006b16:	46c0      	nop			; (mov r8, r8)

08006b18 <_printf_common>:
 8006b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b1a:	0015      	movs	r5, r2
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	688a      	ldr	r2, [r1, #8]
 8006b20:	690b      	ldr	r3, [r1, #16]
 8006b22:	000c      	movs	r4, r1
 8006b24:	9000      	str	r0, [sp, #0]
 8006b26:	4293      	cmp	r3, r2
 8006b28:	da00      	bge.n	8006b2c <_printf_common+0x14>
 8006b2a:	0013      	movs	r3, r2
 8006b2c:	0022      	movs	r2, r4
 8006b2e:	602b      	str	r3, [r5, #0]
 8006b30:	3243      	adds	r2, #67	; 0x43
 8006b32:	7812      	ldrb	r2, [r2, #0]
 8006b34:	2a00      	cmp	r2, #0
 8006b36:	d001      	beq.n	8006b3c <_printf_common+0x24>
 8006b38:	3301      	adds	r3, #1
 8006b3a:	602b      	str	r3, [r5, #0]
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	069b      	lsls	r3, r3, #26
 8006b40:	d502      	bpl.n	8006b48 <_printf_common+0x30>
 8006b42:	682b      	ldr	r3, [r5, #0]
 8006b44:	3302      	adds	r3, #2
 8006b46:	602b      	str	r3, [r5, #0]
 8006b48:	6822      	ldr	r2, [r4, #0]
 8006b4a:	2306      	movs	r3, #6
 8006b4c:	0017      	movs	r7, r2
 8006b4e:	401f      	ands	r7, r3
 8006b50:	421a      	tst	r2, r3
 8006b52:	d027      	beq.n	8006ba4 <_printf_common+0x8c>
 8006b54:	0023      	movs	r3, r4
 8006b56:	3343      	adds	r3, #67	; 0x43
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	1e5a      	subs	r2, r3, #1
 8006b5c:	4193      	sbcs	r3, r2
 8006b5e:	6822      	ldr	r2, [r4, #0]
 8006b60:	0692      	lsls	r2, r2, #26
 8006b62:	d430      	bmi.n	8006bc6 <_printf_common+0xae>
 8006b64:	0022      	movs	r2, r4
 8006b66:	9901      	ldr	r1, [sp, #4]
 8006b68:	9800      	ldr	r0, [sp, #0]
 8006b6a:	9e08      	ldr	r6, [sp, #32]
 8006b6c:	3243      	adds	r2, #67	; 0x43
 8006b6e:	47b0      	blx	r6
 8006b70:	1c43      	adds	r3, r0, #1
 8006b72:	d025      	beq.n	8006bc0 <_printf_common+0xa8>
 8006b74:	2306      	movs	r3, #6
 8006b76:	6820      	ldr	r0, [r4, #0]
 8006b78:	682a      	ldr	r2, [r5, #0]
 8006b7a:	68e1      	ldr	r1, [r4, #12]
 8006b7c:	2500      	movs	r5, #0
 8006b7e:	4003      	ands	r3, r0
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d103      	bne.n	8006b8c <_printf_common+0x74>
 8006b84:	1a8d      	subs	r5, r1, r2
 8006b86:	43eb      	mvns	r3, r5
 8006b88:	17db      	asrs	r3, r3, #31
 8006b8a:	401d      	ands	r5, r3
 8006b8c:	68a3      	ldr	r3, [r4, #8]
 8006b8e:	6922      	ldr	r2, [r4, #16]
 8006b90:	4293      	cmp	r3, r2
 8006b92:	dd01      	ble.n	8006b98 <_printf_common+0x80>
 8006b94:	1a9b      	subs	r3, r3, r2
 8006b96:	18ed      	adds	r5, r5, r3
 8006b98:	2700      	movs	r7, #0
 8006b9a:	42bd      	cmp	r5, r7
 8006b9c:	d120      	bne.n	8006be0 <_printf_common+0xc8>
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	e010      	b.n	8006bc4 <_printf_common+0xac>
 8006ba2:	3701      	adds	r7, #1
 8006ba4:	68e3      	ldr	r3, [r4, #12]
 8006ba6:	682a      	ldr	r2, [r5, #0]
 8006ba8:	1a9b      	subs	r3, r3, r2
 8006baa:	42bb      	cmp	r3, r7
 8006bac:	ddd2      	ble.n	8006b54 <_printf_common+0x3c>
 8006bae:	0022      	movs	r2, r4
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	9901      	ldr	r1, [sp, #4]
 8006bb4:	9800      	ldr	r0, [sp, #0]
 8006bb6:	9e08      	ldr	r6, [sp, #32]
 8006bb8:	3219      	adds	r2, #25
 8006bba:	47b0      	blx	r6
 8006bbc:	1c43      	adds	r3, r0, #1
 8006bbe:	d1f0      	bne.n	8006ba2 <_printf_common+0x8a>
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	4240      	negs	r0, r0
 8006bc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006bc6:	2030      	movs	r0, #48	; 0x30
 8006bc8:	18e1      	adds	r1, r4, r3
 8006bca:	3143      	adds	r1, #67	; 0x43
 8006bcc:	7008      	strb	r0, [r1, #0]
 8006bce:	0021      	movs	r1, r4
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	3145      	adds	r1, #69	; 0x45
 8006bd4:	7809      	ldrb	r1, [r1, #0]
 8006bd6:	18a2      	adds	r2, r4, r2
 8006bd8:	3243      	adds	r2, #67	; 0x43
 8006bda:	3302      	adds	r3, #2
 8006bdc:	7011      	strb	r1, [r2, #0]
 8006bde:	e7c1      	b.n	8006b64 <_printf_common+0x4c>
 8006be0:	0022      	movs	r2, r4
 8006be2:	2301      	movs	r3, #1
 8006be4:	9901      	ldr	r1, [sp, #4]
 8006be6:	9800      	ldr	r0, [sp, #0]
 8006be8:	9e08      	ldr	r6, [sp, #32]
 8006bea:	321a      	adds	r2, #26
 8006bec:	47b0      	blx	r6
 8006bee:	1c43      	adds	r3, r0, #1
 8006bf0:	d0e6      	beq.n	8006bc0 <_printf_common+0xa8>
 8006bf2:	3701      	adds	r7, #1
 8006bf4:	e7d1      	b.n	8006b9a <_printf_common+0x82>
	...

08006bf8 <_printf_i>:
 8006bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bfa:	b08b      	sub	sp, #44	; 0x2c
 8006bfc:	9206      	str	r2, [sp, #24]
 8006bfe:	000a      	movs	r2, r1
 8006c00:	3243      	adds	r2, #67	; 0x43
 8006c02:	9307      	str	r3, [sp, #28]
 8006c04:	9005      	str	r0, [sp, #20]
 8006c06:	9204      	str	r2, [sp, #16]
 8006c08:	7e0a      	ldrb	r2, [r1, #24]
 8006c0a:	000c      	movs	r4, r1
 8006c0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c0e:	2a78      	cmp	r2, #120	; 0x78
 8006c10:	d807      	bhi.n	8006c22 <_printf_i+0x2a>
 8006c12:	2a62      	cmp	r2, #98	; 0x62
 8006c14:	d809      	bhi.n	8006c2a <_printf_i+0x32>
 8006c16:	2a00      	cmp	r2, #0
 8006c18:	d100      	bne.n	8006c1c <_printf_i+0x24>
 8006c1a:	e0c1      	b.n	8006da0 <_printf_i+0x1a8>
 8006c1c:	2a58      	cmp	r2, #88	; 0x58
 8006c1e:	d100      	bne.n	8006c22 <_printf_i+0x2a>
 8006c20:	e08c      	b.n	8006d3c <_printf_i+0x144>
 8006c22:	0026      	movs	r6, r4
 8006c24:	3642      	adds	r6, #66	; 0x42
 8006c26:	7032      	strb	r2, [r6, #0]
 8006c28:	e022      	b.n	8006c70 <_printf_i+0x78>
 8006c2a:	0010      	movs	r0, r2
 8006c2c:	3863      	subs	r0, #99	; 0x63
 8006c2e:	2815      	cmp	r0, #21
 8006c30:	d8f7      	bhi.n	8006c22 <_printf_i+0x2a>
 8006c32:	f7f9 fa7b 	bl	800012c <__gnu_thumb1_case_shi>
 8006c36:	0016      	.short	0x0016
 8006c38:	fff6001f 	.word	0xfff6001f
 8006c3c:	fff6fff6 	.word	0xfff6fff6
 8006c40:	001ffff6 	.word	0x001ffff6
 8006c44:	fff6fff6 	.word	0xfff6fff6
 8006c48:	fff6fff6 	.word	0xfff6fff6
 8006c4c:	003600a8 	.word	0x003600a8
 8006c50:	fff6009a 	.word	0xfff6009a
 8006c54:	00b9fff6 	.word	0x00b9fff6
 8006c58:	0036fff6 	.word	0x0036fff6
 8006c5c:	fff6fff6 	.word	0xfff6fff6
 8006c60:	009e      	.short	0x009e
 8006c62:	0026      	movs	r6, r4
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	3642      	adds	r6, #66	; 0x42
 8006c68:	1d11      	adds	r1, r2, #4
 8006c6a:	6019      	str	r1, [r3, #0]
 8006c6c:	6813      	ldr	r3, [r2, #0]
 8006c6e:	7033      	strb	r3, [r6, #0]
 8006c70:	2301      	movs	r3, #1
 8006c72:	e0a7      	b.n	8006dc4 <_printf_i+0x1cc>
 8006c74:	6808      	ldr	r0, [r1, #0]
 8006c76:	6819      	ldr	r1, [r3, #0]
 8006c78:	1d0a      	adds	r2, r1, #4
 8006c7a:	0605      	lsls	r5, r0, #24
 8006c7c:	d50b      	bpl.n	8006c96 <_printf_i+0x9e>
 8006c7e:	680d      	ldr	r5, [r1, #0]
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	2d00      	cmp	r5, #0
 8006c84:	da03      	bge.n	8006c8e <_printf_i+0x96>
 8006c86:	232d      	movs	r3, #45	; 0x2d
 8006c88:	9a04      	ldr	r2, [sp, #16]
 8006c8a:	426d      	negs	r5, r5
 8006c8c:	7013      	strb	r3, [r2, #0]
 8006c8e:	4b61      	ldr	r3, [pc, #388]	; (8006e14 <_printf_i+0x21c>)
 8006c90:	270a      	movs	r7, #10
 8006c92:	9303      	str	r3, [sp, #12]
 8006c94:	e01b      	b.n	8006cce <_printf_i+0xd6>
 8006c96:	680d      	ldr	r5, [r1, #0]
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	0641      	lsls	r1, r0, #25
 8006c9c:	d5f1      	bpl.n	8006c82 <_printf_i+0x8a>
 8006c9e:	b22d      	sxth	r5, r5
 8006ca0:	e7ef      	b.n	8006c82 <_printf_i+0x8a>
 8006ca2:	680d      	ldr	r5, [r1, #0]
 8006ca4:	6819      	ldr	r1, [r3, #0]
 8006ca6:	1d08      	adds	r0, r1, #4
 8006ca8:	6018      	str	r0, [r3, #0]
 8006caa:	062e      	lsls	r6, r5, #24
 8006cac:	d501      	bpl.n	8006cb2 <_printf_i+0xba>
 8006cae:	680d      	ldr	r5, [r1, #0]
 8006cb0:	e003      	b.n	8006cba <_printf_i+0xc2>
 8006cb2:	066d      	lsls	r5, r5, #25
 8006cb4:	d5fb      	bpl.n	8006cae <_printf_i+0xb6>
 8006cb6:	680d      	ldr	r5, [r1, #0]
 8006cb8:	b2ad      	uxth	r5, r5
 8006cba:	4b56      	ldr	r3, [pc, #344]	; (8006e14 <_printf_i+0x21c>)
 8006cbc:	2708      	movs	r7, #8
 8006cbe:	9303      	str	r3, [sp, #12]
 8006cc0:	2a6f      	cmp	r2, #111	; 0x6f
 8006cc2:	d000      	beq.n	8006cc6 <_printf_i+0xce>
 8006cc4:	3702      	adds	r7, #2
 8006cc6:	0023      	movs	r3, r4
 8006cc8:	2200      	movs	r2, #0
 8006cca:	3343      	adds	r3, #67	; 0x43
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	6863      	ldr	r3, [r4, #4]
 8006cd0:	60a3      	str	r3, [r4, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	db03      	blt.n	8006cde <_printf_i+0xe6>
 8006cd6:	2204      	movs	r2, #4
 8006cd8:	6821      	ldr	r1, [r4, #0]
 8006cda:	4391      	bics	r1, r2
 8006cdc:	6021      	str	r1, [r4, #0]
 8006cde:	2d00      	cmp	r5, #0
 8006ce0:	d102      	bne.n	8006ce8 <_printf_i+0xf0>
 8006ce2:	9e04      	ldr	r6, [sp, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00c      	beq.n	8006d02 <_printf_i+0x10a>
 8006ce8:	9e04      	ldr	r6, [sp, #16]
 8006cea:	0028      	movs	r0, r5
 8006cec:	0039      	movs	r1, r7
 8006cee:	f7f9 faad 	bl	800024c <__aeabi_uidivmod>
 8006cf2:	9b03      	ldr	r3, [sp, #12]
 8006cf4:	3e01      	subs	r6, #1
 8006cf6:	5c5b      	ldrb	r3, [r3, r1]
 8006cf8:	7033      	strb	r3, [r6, #0]
 8006cfa:	002b      	movs	r3, r5
 8006cfc:	0005      	movs	r5, r0
 8006cfe:	429f      	cmp	r7, r3
 8006d00:	d9f3      	bls.n	8006cea <_printf_i+0xf2>
 8006d02:	2f08      	cmp	r7, #8
 8006d04:	d109      	bne.n	8006d1a <_printf_i+0x122>
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	07db      	lsls	r3, r3, #31
 8006d0a:	d506      	bpl.n	8006d1a <_printf_i+0x122>
 8006d0c:	6863      	ldr	r3, [r4, #4]
 8006d0e:	6922      	ldr	r2, [r4, #16]
 8006d10:	4293      	cmp	r3, r2
 8006d12:	dc02      	bgt.n	8006d1a <_printf_i+0x122>
 8006d14:	2330      	movs	r3, #48	; 0x30
 8006d16:	3e01      	subs	r6, #1
 8006d18:	7033      	strb	r3, [r6, #0]
 8006d1a:	9b04      	ldr	r3, [sp, #16]
 8006d1c:	1b9b      	subs	r3, r3, r6
 8006d1e:	6123      	str	r3, [r4, #16]
 8006d20:	9b07      	ldr	r3, [sp, #28]
 8006d22:	0021      	movs	r1, r4
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	9805      	ldr	r0, [sp, #20]
 8006d28:	9b06      	ldr	r3, [sp, #24]
 8006d2a:	aa09      	add	r2, sp, #36	; 0x24
 8006d2c:	f7ff fef4 	bl	8006b18 <_printf_common>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	d14c      	bne.n	8006dce <_printf_i+0x1d6>
 8006d34:	2001      	movs	r0, #1
 8006d36:	4240      	negs	r0, r0
 8006d38:	b00b      	add	sp, #44	; 0x2c
 8006d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d3c:	3145      	adds	r1, #69	; 0x45
 8006d3e:	700a      	strb	r2, [r1, #0]
 8006d40:	4a34      	ldr	r2, [pc, #208]	; (8006e14 <_printf_i+0x21c>)
 8006d42:	9203      	str	r2, [sp, #12]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	6821      	ldr	r1, [r4, #0]
 8006d48:	ca20      	ldmia	r2!, {r5}
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	0608      	lsls	r0, r1, #24
 8006d4e:	d516      	bpl.n	8006d7e <_printf_i+0x186>
 8006d50:	07cb      	lsls	r3, r1, #31
 8006d52:	d502      	bpl.n	8006d5a <_printf_i+0x162>
 8006d54:	2320      	movs	r3, #32
 8006d56:	4319      	orrs	r1, r3
 8006d58:	6021      	str	r1, [r4, #0]
 8006d5a:	2710      	movs	r7, #16
 8006d5c:	2d00      	cmp	r5, #0
 8006d5e:	d1b2      	bne.n	8006cc6 <_printf_i+0xce>
 8006d60:	2320      	movs	r3, #32
 8006d62:	6822      	ldr	r2, [r4, #0]
 8006d64:	439a      	bics	r2, r3
 8006d66:	6022      	str	r2, [r4, #0]
 8006d68:	e7ad      	b.n	8006cc6 <_printf_i+0xce>
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	6809      	ldr	r1, [r1, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	6022      	str	r2, [r4, #0]
 8006d72:	0022      	movs	r2, r4
 8006d74:	2178      	movs	r1, #120	; 0x78
 8006d76:	3245      	adds	r2, #69	; 0x45
 8006d78:	7011      	strb	r1, [r2, #0]
 8006d7a:	4a27      	ldr	r2, [pc, #156]	; (8006e18 <_printf_i+0x220>)
 8006d7c:	e7e1      	b.n	8006d42 <_printf_i+0x14a>
 8006d7e:	0648      	lsls	r0, r1, #25
 8006d80:	d5e6      	bpl.n	8006d50 <_printf_i+0x158>
 8006d82:	b2ad      	uxth	r5, r5
 8006d84:	e7e4      	b.n	8006d50 <_printf_i+0x158>
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	680d      	ldr	r5, [r1, #0]
 8006d8a:	1d10      	adds	r0, r2, #4
 8006d8c:	6949      	ldr	r1, [r1, #20]
 8006d8e:	6018      	str	r0, [r3, #0]
 8006d90:	6813      	ldr	r3, [r2, #0]
 8006d92:	062e      	lsls	r6, r5, #24
 8006d94:	d501      	bpl.n	8006d9a <_printf_i+0x1a2>
 8006d96:	6019      	str	r1, [r3, #0]
 8006d98:	e002      	b.n	8006da0 <_printf_i+0x1a8>
 8006d9a:	066d      	lsls	r5, r5, #25
 8006d9c:	d5fb      	bpl.n	8006d96 <_printf_i+0x19e>
 8006d9e:	8019      	strh	r1, [r3, #0]
 8006da0:	2300      	movs	r3, #0
 8006da2:	9e04      	ldr	r6, [sp, #16]
 8006da4:	6123      	str	r3, [r4, #16]
 8006da6:	e7bb      	b.n	8006d20 <_printf_i+0x128>
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	1d11      	adds	r1, r2, #4
 8006dac:	6019      	str	r1, [r3, #0]
 8006dae:	6816      	ldr	r6, [r2, #0]
 8006db0:	2100      	movs	r1, #0
 8006db2:	0030      	movs	r0, r6
 8006db4:	6862      	ldr	r2, [r4, #4]
 8006db6:	f002 fb5d 	bl	8009474 <memchr>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d001      	beq.n	8006dc2 <_printf_i+0x1ca>
 8006dbe:	1b80      	subs	r0, r0, r6
 8006dc0:	6060      	str	r0, [r4, #4]
 8006dc2:	6863      	ldr	r3, [r4, #4]
 8006dc4:	6123      	str	r3, [r4, #16]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	9a04      	ldr	r2, [sp, #16]
 8006dca:	7013      	strb	r3, [r2, #0]
 8006dcc:	e7a8      	b.n	8006d20 <_printf_i+0x128>
 8006dce:	6923      	ldr	r3, [r4, #16]
 8006dd0:	0032      	movs	r2, r6
 8006dd2:	9906      	ldr	r1, [sp, #24]
 8006dd4:	9805      	ldr	r0, [sp, #20]
 8006dd6:	9d07      	ldr	r5, [sp, #28]
 8006dd8:	47a8      	blx	r5
 8006dda:	1c43      	adds	r3, r0, #1
 8006ddc:	d0aa      	beq.n	8006d34 <_printf_i+0x13c>
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	079b      	lsls	r3, r3, #30
 8006de2:	d415      	bmi.n	8006e10 <_printf_i+0x218>
 8006de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de6:	68e0      	ldr	r0, [r4, #12]
 8006de8:	4298      	cmp	r0, r3
 8006dea:	daa5      	bge.n	8006d38 <_printf_i+0x140>
 8006dec:	0018      	movs	r0, r3
 8006dee:	e7a3      	b.n	8006d38 <_printf_i+0x140>
 8006df0:	0022      	movs	r2, r4
 8006df2:	2301      	movs	r3, #1
 8006df4:	9906      	ldr	r1, [sp, #24]
 8006df6:	9805      	ldr	r0, [sp, #20]
 8006df8:	9e07      	ldr	r6, [sp, #28]
 8006dfa:	3219      	adds	r2, #25
 8006dfc:	47b0      	blx	r6
 8006dfe:	1c43      	adds	r3, r0, #1
 8006e00:	d098      	beq.n	8006d34 <_printf_i+0x13c>
 8006e02:	3501      	adds	r5, #1
 8006e04:	68e3      	ldr	r3, [r4, #12]
 8006e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e08:	1a9b      	subs	r3, r3, r2
 8006e0a:	42ab      	cmp	r3, r5
 8006e0c:	dcf0      	bgt.n	8006df0 <_printf_i+0x1f8>
 8006e0e:	e7e9      	b.n	8006de4 <_printf_i+0x1ec>
 8006e10:	2500      	movs	r5, #0
 8006e12:	e7f7      	b.n	8006e04 <_printf_i+0x20c>
 8006e14:	0800b146 	.word	0x0800b146
 8006e18:	0800b157 	.word	0x0800b157

08006e1c <_scanf_float>:
 8006e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e1e:	b08b      	sub	sp, #44	; 0x2c
 8006e20:	0015      	movs	r5, r2
 8006e22:	9001      	str	r0, [sp, #4]
 8006e24:	22ae      	movs	r2, #174	; 0xae
 8006e26:	2000      	movs	r0, #0
 8006e28:	9306      	str	r3, [sp, #24]
 8006e2a:	688b      	ldr	r3, [r1, #8]
 8006e2c:	000e      	movs	r6, r1
 8006e2e:	1e59      	subs	r1, r3, #1
 8006e30:	0052      	lsls	r2, r2, #1
 8006e32:	9005      	str	r0, [sp, #20]
 8006e34:	4291      	cmp	r1, r2
 8006e36:	d905      	bls.n	8006e44 <_scanf_float+0x28>
 8006e38:	3b5e      	subs	r3, #94	; 0x5e
 8006e3a:	3bff      	subs	r3, #255	; 0xff
 8006e3c:	9305      	str	r3, [sp, #20]
 8006e3e:	235e      	movs	r3, #94	; 0x5e
 8006e40:	33ff      	adds	r3, #255	; 0xff
 8006e42:	60b3      	str	r3, [r6, #8]
 8006e44:	23f0      	movs	r3, #240	; 0xf0
 8006e46:	6832      	ldr	r2, [r6, #0]
 8006e48:	00db      	lsls	r3, r3, #3
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	6033      	str	r3, [r6, #0]
 8006e4e:	0033      	movs	r3, r6
 8006e50:	2400      	movs	r4, #0
 8006e52:	331c      	adds	r3, #28
 8006e54:	001f      	movs	r7, r3
 8006e56:	9303      	str	r3, [sp, #12]
 8006e58:	9402      	str	r4, [sp, #8]
 8006e5a:	9408      	str	r4, [sp, #32]
 8006e5c:	9407      	str	r4, [sp, #28]
 8006e5e:	9400      	str	r4, [sp, #0]
 8006e60:	9404      	str	r4, [sp, #16]
 8006e62:	68b2      	ldr	r2, [r6, #8]
 8006e64:	2a00      	cmp	r2, #0
 8006e66:	d00a      	beq.n	8006e7e <_scanf_float+0x62>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	2b4e      	cmp	r3, #78	; 0x4e
 8006e6e:	d844      	bhi.n	8006efa <_scanf_float+0xde>
 8006e70:	0018      	movs	r0, r3
 8006e72:	2b40      	cmp	r3, #64	; 0x40
 8006e74:	d82c      	bhi.n	8006ed0 <_scanf_float+0xb4>
 8006e76:	382b      	subs	r0, #43	; 0x2b
 8006e78:	b2c1      	uxtb	r1, r0
 8006e7a:	290e      	cmp	r1, #14
 8006e7c:	d92a      	bls.n	8006ed4 <_scanf_float+0xb8>
 8006e7e:	9b00      	ldr	r3, [sp, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <_scanf_float+0x70>
 8006e84:	6832      	ldr	r2, [r6, #0]
 8006e86:	4ba4      	ldr	r3, [pc, #656]	; (8007118 <_scanf_float+0x2fc>)
 8006e88:	4013      	ands	r3, r2
 8006e8a:	6033      	str	r3, [r6, #0]
 8006e8c:	9b02      	ldr	r3, [sp, #8]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d900      	bls.n	8006e96 <_scanf_float+0x7a>
 8006e94:	e0f9      	b.n	800708a <_scanf_float+0x26e>
 8006e96:	24be      	movs	r4, #190	; 0xbe
 8006e98:	0064      	lsls	r4, r4, #1
 8006e9a:	9b03      	ldr	r3, [sp, #12]
 8006e9c:	429f      	cmp	r7, r3
 8006e9e:	d900      	bls.n	8006ea2 <_scanf_float+0x86>
 8006ea0:	e0e9      	b.n	8007076 <_scanf_float+0x25a>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	9302      	str	r3, [sp, #8]
 8006ea6:	e185      	b.n	80071b4 <_scanf_float+0x398>
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	3861      	subs	r0, #97	; 0x61
 8006eac:	280d      	cmp	r0, #13
 8006eae:	d8e6      	bhi.n	8006e7e <_scanf_float+0x62>
 8006eb0:	f7f9 f93c 	bl	800012c <__gnu_thumb1_case_shi>
 8006eb4:	ffe50083 	.word	0xffe50083
 8006eb8:	ffe5ffe5 	.word	0xffe5ffe5
 8006ebc:	00a200b6 	.word	0x00a200b6
 8006ec0:	ffe5ffe5 	.word	0xffe5ffe5
 8006ec4:	ffe50089 	.word	0xffe50089
 8006ec8:	ffe5ffe5 	.word	0xffe5ffe5
 8006ecc:	0065ffe5 	.word	0x0065ffe5
 8006ed0:	3841      	subs	r0, #65	; 0x41
 8006ed2:	e7eb      	b.n	8006eac <_scanf_float+0x90>
 8006ed4:	280e      	cmp	r0, #14
 8006ed6:	d8d2      	bhi.n	8006e7e <_scanf_float+0x62>
 8006ed8:	f7f9 f928 	bl	800012c <__gnu_thumb1_case_shi>
 8006edc:	ffd1004b 	.word	0xffd1004b
 8006ee0:	0098004b 	.word	0x0098004b
 8006ee4:	0020ffd1 	.word	0x0020ffd1
 8006ee8:	00400040 	.word	0x00400040
 8006eec:	00400040 	.word	0x00400040
 8006ef0:	00400040 	.word	0x00400040
 8006ef4:	00400040 	.word	0x00400040
 8006ef8:	0040      	.short	0x0040
 8006efa:	2b6e      	cmp	r3, #110	; 0x6e
 8006efc:	d809      	bhi.n	8006f12 <_scanf_float+0xf6>
 8006efe:	2b60      	cmp	r3, #96	; 0x60
 8006f00:	d8d2      	bhi.n	8006ea8 <_scanf_float+0x8c>
 8006f02:	2b54      	cmp	r3, #84	; 0x54
 8006f04:	d07d      	beq.n	8007002 <_scanf_float+0x1e6>
 8006f06:	2b59      	cmp	r3, #89	; 0x59
 8006f08:	d1b9      	bne.n	8006e7e <_scanf_float+0x62>
 8006f0a:	2c07      	cmp	r4, #7
 8006f0c:	d1b7      	bne.n	8006e7e <_scanf_float+0x62>
 8006f0e:	2408      	movs	r4, #8
 8006f10:	e02c      	b.n	8006f6c <_scanf_float+0x150>
 8006f12:	2b74      	cmp	r3, #116	; 0x74
 8006f14:	d075      	beq.n	8007002 <_scanf_float+0x1e6>
 8006f16:	2b79      	cmp	r3, #121	; 0x79
 8006f18:	d0f7      	beq.n	8006f0a <_scanf_float+0xee>
 8006f1a:	e7b0      	b.n	8006e7e <_scanf_float+0x62>
 8006f1c:	6831      	ldr	r1, [r6, #0]
 8006f1e:	05c8      	lsls	r0, r1, #23
 8006f20:	d51c      	bpl.n	8006f5c <_scanf_float+0x140>
 8006f22:	2380      	movs	r3, #128	; 0x80
 8006f24:	4399      	bics	r1, r3
 8006f26:	9b00      	ldr	r3, [sp, #0]
 8006f28:	6031      	str	r1, [r6, #0]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	9b05      	ldr	r3, [sp, #20]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <_scanf_float+0x120>
 8006f34:	3b01      	subs	r3, #1
 8006f36:	3201      	adds	r2, #1
 8006f38:	9305      	str	r3, [sp, #20]
 8006f3a:	60b2      	str	r2, [r6, #8]
 8006f3c:	68b3      	ldr	r3, [r6, #8]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	60b3      	str	r3, [r6, #8]
 8006f42:	6933      	ldr	r3, [r6, #16]
 8006f44:	3301      	adds	r3, #1
 8006f46:	6133      	str	r3, [r6, #16]
 8006f48:	686b      	ldr	r3, [r5, #4]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	606b      	str	r3, [r5, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	dc00      	bgt.n	8006f54 <_scanf_float+0x138>
 8006f52:	e086      	b.n	8007062 <_scanf_float+0x246>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	3301      	adds	r3, #1
 8006f58:	602b      	str	r3, [r5, #0]
 8006f5a:	e782      	b.n	8006e62 <_scanf_float+0x46>
 8006f5c:	9a02      	ldr	r2, [sp, #8]
 8006f5e:	1912      	adds	r2, r2, r4
 8006f60:	2a00      	cmp	r2, #0
 8006f62:	d18c      	bne.n	8006e7e <_scanf_float+0x62>
 8006f64:	4a6d      	ldr	r2, [pc, #436]	; (800711c <_scanf_float+0x300>)
 8006f66:	6831      	ldr	r1, [r6, #0]
 8006f68:	400a      	ands	r2, r1
 8006f6a:	6032      	str	r2, [r6, #0]
 8006f6c:	703b      	strb	r3, [r7, #0]
 8006f6e:	3701      	adds	r7, #1
 8006f70:	e7e4      	b.n	8006f3c <_scanf_float+0x120>
 8006f72:	2180      	movs	r1, #128	; 0x80
 8006f74:	6832      	ldr	r2, [r6, #0]
 8006f76:	420a      	tst	r2, r1
 8006f78:	d081      	beq.n	8006e7e <_scanf_float+0x62>
 8006f7a:	438a      	bics	r2, r1
 8006f7c:	e7f5      	b.n	8006f6a <_scanf_float+0x14e>
 8006f7e:	9a02      	ldr	r2, [sp, #8]
 8006f80:	2a00      	cmp	r2, #0
 8006f82:	d10f      	bne.n	8006fa4 <_scanf_float+0x188>
 8006f84:	9a00      	ldr	r2, [sp, #0]
 8006f86:	2a00      	cmp	r2, #0
 8006f88:	d10f      	bne.n	8006faa <_scanf_float+0x18e>
 8006f8a:	6832      	ldr	r2, [r6, #0]
 8006f8c:	21e0      	movs	r1, #224	; 0xe0
 8006f8e:	0010      	movs	r0, r2
 8006f90:	00c9      	lsls	r1, r1, #3
 8006f92:	4008      	ands	r0, r1
 8006f94:	4288      	cmp	r0, r1
 8006f96:	d108      	bne.n	8006faa <_scanf_float+0x18e>
 8006f98:	4961      	ldr	r1, [pc, #388]	; (8007120 <_scanf_float+0x304>)
 8006f9a:	400a      	ands	r2, r1
 8006f9c:	6032      	str	r2, [r6, #0]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	9202      	str	r2, [sp, #8]
 8006fa2:	e7e3      	b.n	8006f6c <_scanf_float+0x150>
 8006fa4:	9a02      	ldr	r2, [sp, #8]
 8006fa6:	2a02      	cmp	r2, #2
 8006fa8:	d059      	beq.n	800705e <_scanf_float+0x242>
 8006faa:	2c01      	cmp	r4, #1
 8006fac:	d002      	beq.n	8006fb4 <_scanf_float+0x198>
 8006fae:	2c04      	cmp	r4, #4
 8006fb0:	d000      	beq.n	8006fb4 <_scanf_float+0x198>
 8006fb2:	e764      	b.n	8006e7e <_scanf_float+0x62>
 8006fb4:	3401      	adds	r4, #1
 8006fb6:	b2e4      	uxtb	r4, r4
 8006fb8:	e7d8      	b.n	8006f6c <_scanf_float+0x150>
 8006fba:	9a02      	ldr	r2, [sp, #8]
 8006fbc:	2a01      	cmp	r2, #1
 8006fbe:	d000      	beq.n	8006fc2 <_scanf_float+0x1a6>
 8006fc0:	e75d      	b.n	8006e7e <_scanf_float+0x62>
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	e7ec      	b.n	8006fa0 <_scanf_float+0x184>
 8006fc6:	2c00      	cmp	r4, #0
 8006fc8:	d110      	bne.n	8006fec <_scanf_float+0x1d0>
 8006fca:	9a00      	ldr	r2, [sp, #0]
 8006fcc:	2a00      	cmp	r2, #0
 8006fce:	d000      	beq.n	8006fd2 <_scanf_float+0x1b6>
 8006fd0:	e758      	b.n	8006e84 <_scanf_float+0x68>
 8006fd2:	6832      	ldr	r2, [r6, #0]
 8006fd4:	21e0      	movs	r1, #224	; 0xe0
 8006fd6:	0010      	movs	r0, r2
 8006fd8:	00c9      	lsls	r1, r1, #3
 8006fda:	4008      	ands	r0, r1
 8006fdc:	4288      	cmp	r0, r1
 8006fde:	d000      	beq.n	8006fe2 <_scanf_float+0x1c6>
 8006fe0:	e754      	b.n	8006e8c <_scanf_float+0x70>
 8006fe2:	494f      	ldr	r1, [pc, #316]	; (8007120 <_scanf_float+0x304>)
 8006fe4:	3401      	adds	r4, #1
 8006fe6:	400a      	ands	r2, r1
 8006fe8:	6032      	str	r2, [r6, #0]
 8006fea:	e7bf      	b.n	8006f6c <_scanf_float+0x150>
 8006fec:	21fd      	movs	r1, #253	; 0xfd
 8006fee:	1ee2      	subs	r2, r4, #3
 8006ff0:	420a      	tst	r2, r1
 8006ff2:	d000      	beq.n	8006ff6 <_scanf_float+0x1da>
 8006ff4:	e743      	b.n	8006e7e <_scanf_float+0x62>
 8006ff6:	e7dd      	b.n	8006fb4 <_scanf_float+0x198>
 8006ff8:	2c02      	cmp	r4, #2
 8006ffa:	d000      	beq.n	8006ffe <_scanf_float+0x1e2>
 8006ffc:	e73f      	b.n	8006e7e <_scanf_float+0x62>
 8006ffe:	2403      	movs	r4, #3
 8007000:	e7b4      	b.n	8006f6c <_scanf_float+0x150>
 8007002:	2c06      	cmp	r4, #6
 8007004:	d000      	beq.n	8007008 <_scanf_float+0x1ec>
 8007006:	e73a      	b.n	8006e7e <_scanf_float+0x62>
 8007008:	2407      	movs	r4, #7
 800700a:	e7af      	b.n	8006f6c <_scanf_float+0x150>
 800700c:	6832      	ldr	r2, [r6, #0]
 800700e:	0591      	lsls	r1, r2, #22
 8007010:	d400      	bmi.n	8007014 <_scanf_float+0x1f8>
 8007012:	e734      	b.n	8006e7e <_scanf_float+0x62>
 8007014:	4943      	ldr	r1, [pc, #268]	; (8007124 <_scanf_float+0x308>)
 8007016:	400a      	ands	r2, r1
 8007018:	6032      	str	r2, [r6, #0]
 800701a:	9a00      	ldr	r2, [sp, #0]
 800701c:	9204      	str	r2, [sp, #16]
 800701e:	e7a5      	b.n	8006f6c <_scanf_float+0x150>
 8007020:	21a0      	movs	r1, #160	; 0xa0
 8007022:	2080      	movs	r0, #128	; 0x80
 8007024:	6832      	ldr	r2, [r6, #0]
 8007026:	00c9      	lsls	r1, r1, #3
 8007028:	4011      	ands	r1, r2
 800702a:	00c0      	lsls	r0, r0, #3
 800702c:	4281      	cmp	r1, r0
 800702e:	d006      	beq.n	800703e <_scanf_float+0x222>
 8007030:	4202      	tst	r2, r0
 8007032:	d100      	bne.n	8007036 <_scanf_float+0x21a>
 8007034:	e723      	b.n	8006e7e <_scanf_float+0x62>
 8007036:	9900      	ldr	r1, [sp, #0]
 8007038:	2900      	cmp	r1, #0
 800703a:	d100      	bne.n	800703e <_scanf_float+0x222>
 800703c:	e726      	b.n	8006e8c <_scanf_float+0x70>
 800703e:	0591      	lsls	r1, r2, #22
 8007040:	d404      	bmi.n	800704c <_scanf_float+0x230>
 8007042:	9900      	ldr	r1, [sp, #0]
 8007044:	9804      	ldr	r0, [sp, #16]
 8007046:	9708      	str	r7, [sp, #32]
 8007048:	1a09      	subs	r1, r1, r0
 800704a:	9107      	str	r1, [sp, #28]
 800704c:	4934      	ldr	r1, [pc, #208]	; (8007120 <_scanf_float+0x304>)
 800704e:	400a      	ands	r2, r1
 8007050:	21c0      	movs	r1, #192	; 0xc0
 8007052:	0049      	lsls	r1, r1, #1
 8007054:	430a      	orrs	r2, r1
 8007056:	6032      	str	r2, [r6, #0]
 8007058:	2200      	movs	r2, #0
 800705a:	9200      	str	r2, [sp, #0]
 800705c:	e786      	b.n	8006f6c <_scanf_float+0x150>
 800705e:	2203      	movs	r2, #3
 8007060:	e79e      	b.n	8006fa0 <_scanf_float+0x184>
 8007062:	23c0      	movs	r3, #192	; 0xc0
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	0029      	movs	r1, r5
 8007068:	58f3      	ldr	r3, [r6, r3]
 800706a:	9801      	ldr	r0, [sp, #4]
 800706c:	4798      	blx	r3
 800706e:	2800      	cmp	r0, #0
 8007070:	d100      	bne.n	8007074 <_scanf_float+0x258>
 8007072:	e6f6      	b.n	8006e62 <_scanf_float+0x46>
 8007074:	e703      	b.n	8006e7e <_scanf_float+0x62>
 8007076:	3f01      	subs	r7, #1
 8007078:	5933      	ldr	r3, [r6, r4]
 800707a:	002a      	movs	r2, r5
 800707c:	7839      	ldrb	r1, [r7, #0]
 800707e:	9801      	ldr	r0, [sp, #4]
 8007080:	4798      	blx	r3
 8007082:	6933      	ldr	r3, [r6, #16]
 8007084:	3b01      	subs	r3, #1
 8007086:	6133      	str	r3, [r6, #16]
 8007088:	e707      	b.n	8006e9a <_scanf_float+0x7e>
 800708a:	1e63      	subs	r3, r4, #1
 800708c:	2b06      	cmp	r3, #6
 800708e:	d80e      	bhi.n	80070ae <_scanf_float+0x292>
 8007090:	9702      	str	r7, [sp, #8]
 8007092:	2c02      	cmp	r4, #2
 8007094:	d920      	bls.n	80070d8 <_scanf_float+0x2bc>
 8007096:	1be3      	subs	r3, r4, r7
 8007098:	b2db      	uxtb	r3, r3
 800709a:	9305      	str	r3, [sp, #20]
 800709c:	9b02      	ldr	r3, [sp, #8]
 800709e:	9a05      	ldr	r2, [sp, #20]
 80070a0:	189b      	adds	r3, r3, r2
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	d827      	bhi.n	80070f8 <_scanf_float+0x2dc>
 80070a8:	3c03      	subs	r4, #3
 80070aa:	b2e4      	uxtb	r4, r4
 80070ac:	1b3f      	subs	r7, r7, r4
 80070ae:	6833      	ldr	r3, [r6, #0]
 80070b0:	05da      	lsls	r2, r3, #23
 80070b2:	d554      	bpl.n	800715e <_scanf_float+0x342>
 80070b4:	055b      	lsls	r3, r3, #21
 80070b6:	d537      	bpl.n	8007128 <_scanf_float+0x30c>
 80070b8:	24be      	movs	r4, #190	; 0xbe
 80070ba:	0064      	lsls	r4, r4, #1
 80070bc:	9b03      	ldr	r3, [sp, #12]
 80070be:	429f      	cmp	r7, r3
 80070c0:	d800      	bhi.n	80070c4 <_scanf_float+0x2a8>
 80070c2:	e6ee      	b.n	8006ea2 <_scanf_float+0x86>
 80070c4:	3f01      	subs	r7, #1
 80070c6:	5933      	ldr	r3, [r6, r4]
 80070c8:	002a      	movs	r2, r5
 80070ca:	7839      	ldrb	r1, [r7, #0]
 80070cc:	9801      	ldr	r0, [sp, #4]
 80070ce:	4798      	blx	r3
 80070d0:	6933      	ldr	r3, [r6, #16]
 80070d2:	3b01      	subs	r3, #1
 80070d4:	6133      	str	r3, [r6, #16]
 80070d6:	e7f1      	b.n	80070bc <_scanf_float+0x2a0>
 80070d8:	24be      	movs	r4, #190	; 0xbe
 80070da:	0064      	lsls	r4, r4, #1
 80070dc:	9b03      	ldr	r3, [sp, #12]
 80070de:	429f      	cmp	r7, r3
 80070e0:	d800      	bhi.n	80070e4 <_scanf_float+0x2c8>
 80070e2:	e6de      	b.n	8006ea2 <_scanf_float+0x86>
 80070e4:	3f01      	subs	r7, #1
 80070e6:	5933      	ldr	r3, [r6, r4]
 80070e8:	002a      	movs	r2, r5
 80070ea:	7839      	ldrb	r1, [r7, #0]
 80070ec:	9801      	ldr	r0, [sp, #4]
 80070ee:	4798      	blx	r3
 80070f0:	6933      	ldr	r3, [r6, #16]
 80070f2:	3b01      	subs	r3, #1
 80070f4:	6133      	str	r3, [r6, #16]
 80070f6:	e7f1      	b.n	80070dc <_scanf_float+0x2c0>
 80070f8:	9b02      	ldr	r3, [sp, #8]
 80070fa:	002a      	movs	r2, r5
 80070fc:	3b01      	subs	r3, #1
 80070fe:	7819      	ldrb	r1, [r3, #0]
 8007100:	9302      	str	r3, [sp, #8]
 8007102:	23be      	movs	r3, #190	; 0xbe
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	58f3      	ldr	r3, [r6, r3]
 8007108:	9801      	ldr	r0, [sp, #4]
 800710a:	9309      	str	r3, [sp, #36]	; 0x24
 800710c:	4798      	blx	r3
 800710e:	6933      	ldr	r3, [r6, #16]
 8007110:	3b01      	subs	r3, #1
 8007112:	6133      	str	r3, [r6, #16]
 8007114:	e7c2      	b.n	800709c <_scanf_float+0x280>
 8007116:	46c0      	nop			; (mov r8, r8)
 8007118:	fffffeff 	.word	0xfffffeff
 800711c:	fffffe7f 	.word	0xfffffe7f
 8007120:	fffff87f 	.word	0xfffff87f
 8007124:	fffffd7f 	.word	0xfffffd7f
 8007128:	6933      	ldr	r3, [r6, #16]
 800712a:	1e7c      	subs	r4, r7, #1
 800712c:	7821      	ldrb	r1, [r4, #0]
 800712e:	3b01      	subs	r3, #1
 8007130:	6133      	str	r3, [r6, #16]
 8007132:	2965      	cmp	r1, #101	; 0x65
 8007134:	d00c      	beq.n	8007150 <_scanf_float+0x334>
 8007136:	2945      	cmp	r1, #69	; 0x45
 8007138:	d00a      	beq.n	8007150 <_scanf_float+0x334>
 800713a:	23be      	movs	r3, #190	; 0xbe
 800713c:	005b      	lsls	r3, r3, #1
 800713e:	58f3      	ldr	r3, [r6, r3]
 8007140:	002a      	movs	r2, r5
 8007142:	9801      	ldr	r0, [sp, #4]
 8007144:	4798      	blx	r3
 8007146:	6933      	ldr	r3, [r6, #16]
 8007148:	1ebc      	subs	r4, r7, #2
 800714a:	3b01      	subs	r3, #1
 800714c:	7821      	ldrb	r1, [r4, #0]
 800714e:	6133      	str	r3, [r6, #16]
 8007150:	23be      	movs	r3, #190	; 0xbe
 8007152:	005b      	lsls	r3, r3, #1
 8007154:	002a      	movs	r2, r5
 8007156:	58f3      	ldr	r3, [r6, r3]
 8007158:	9801      	ldr	r0, [sp, #4]
 800715a:	4798      	blx	r3
 800715c:	0027      	movs	r7, r4
 800715e:	6832      	ldr	r2, [r6, #0]
 8007160:	2310      	movs	r3, #16
 8007162:	0011      	movs	r1, r2
 8007164:	4019      	ands	r1, r3
 8007166:	9102      	str	r1, [sp, #8]
 8007168:	421a      	tst	r2, r3
 800716a:	d158      	bne.n	800721e <_scanf_float+0x402>
 800716c:	23c0      	movs	r3, #192	; 0xc0
 800716e:	7039      	strb	r1, [r7, #0]
 8007170:	6832      	ldr	r2, [r6, #0]
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	4013      	ands	r3, r2
 8007176:	2280      	movs	r2, #128	; 0x80
 8007178:	00d2      	lsls	r2, r2, #3
 800717a:	4293      	cmp	r3, r2
 800717c:	d11d      	bne.n	80071ba <_scanf_float+0x39e>
 800717e:	9b04      	ldr	r3, [sp, #16]
 8007180:	9a00      	ldr	r2, [sp, #0]
 8007182:	9900      	ldr	r1, [sp, #0]
 8007184:	1a9a      	subs	r2, r3, r2
 8007186:	428b      	cmp	r3, r1
 8007188:	d124      	bne.n	80071d4 <_scanf_float+0x3b8>
 800718a:	2200      	movs	r2, #0
 800718c:	9903      	ldr	r1, [sp, #12]
 800718e:	9801      	ldr	r0, [sp, #4]
 8007190:	f000 fe9c 	bl	8007ecc <_strtod_r>
 8007194:	9b06      	ldr	r3, [sp, #24]
 8007196:	000d      	movs	r5, r1
 8007198:	6831      	ldr	r1, [r6, #0]
 800719a:	0004      	movs	r4, r0
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	078a      	lsls	r2, r1, #30
 80071a0:	d525      	bpl.n	80071ee <_scanf_float+0x3d2>
 80071a2:	1d1a      	adds	r2, r3, #4
 80071a4:	9906      	ldr	r1, [sp, #24]
 80071a6:	600a      	str	r2, [r1, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	601c      	str	r4, [r3, #0]
 80071ac:	605d      	str	r5, [r3, #4]
 80071ae:	68f3      	ldr	r3, [r6, #12]
 80071b0:	3301      	adds	r3, #1
 80071b2:	60f3      	str	r3, [r6, #12]
 80071b4:	9802      	ldr	r0, [sp, #8]
 80071b6:	b00b      	add	sp, #44	; 0x2c
 80071b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ba:	9b07      	ldr	r3, [sp, #28]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0e4      	beq.n	800718a <_scanf_float+0x36e>
 80071c0:	9b08      	ldr	r3, [sp, #32]
 80071c2:	9a02      	ldr	r2, [sp, #8]
 80071c4:	1c59      	adds	r1, r3, #1
 80071c6:	9801      	ldr	r0, [sp, #4]
 80071c8:	230a      	movs	r3, #10
 80071ca:	f000 ff15 	bl	8007ff8 <_strtol_r>
 80071ce:	9b07      	ldr	r3, [sp, #28]
 80071d0:	9f08      	ldr	r7, [sp, #32]
 80071d2:	1ac2      	subs	r2, r0, r3
 80071d4:	0033      	movs	r3, r6
 80071d6:	3370      	adds	r3, #112	; 0x70
 80071d8:	33ff      	adds	r3, #255	; 0xff
 80071da:	429f      	cmp	r7, r3
 80071dc:	d302      	bcc.n	80071e4 <_scanf_float+0x3c8>
 80071de:	0037      	movs	r7, r6
 80071e0:	376f      	adds	r7, #111	; 0x6f
 80071e2:	37ff      	adds	r7, #255	; 0xff
 80071e4:	0038      	movs	r0, r7
 80071e6:	490f      	ldr	r1, [pc, #60]	; (8007224 <_scanf_float+0x408>)
 80071e8:	f000 f824 	bl	8007234 <siprintf>
 80071ec:	e7cd      	b.n	800718a <_scanf_float+0x36e>
 80071ee:	1d1a      	adds	r2, r3, #4
 80071f0:	0749      	lsls	r1, r1, #29
 80071f2:	d4d7      	bmi.n	80071a4 <_scanf_float+0x388>
 80071f4:	9906      	ldr	r1, [sp, #24]
 80071f6:	0020      	movs	r0, r4
 80071f8:	600a      	str	r2, [r1, #0]
 80071fa:	681f      	ldr	r7, [r3, #0]
 80071fc:	0022      	movs	r2, r4
 80071fe:	002b      	movs	r3, r5
 8007200:	0029      	movs	r1, r5
 8007202:	f7fb fa21 	bl	8002648 <__aeabi_dcmpun>
 8007206:	2800      	cmp	r0, #0
 8007208:	d004      	beq.n	8007214 <_scanf_float+0x3f8>
 800720a:	4807      	ldr	r0, [pc, #28]	; (8007228 <_scanf_float+0x40c>)
 800720c:	f000 f80e 	bl	800722c <nanf>
 8007210:	6038      	str	r0, [r7, #0]
 8007212:	e7cc      	b.n	80071ae <_scanf_float+0x392>
 8007214:	0020      	movs	r0, r4
 8007216:	0029      	movs	r1, r5
 8007218:	f7fb fb08 	bl	800282c <__aeabi_d2f>
 800721c:	e7f8      	b.n	8007210 <_scanf_float+0x3f4>
 800721e:	2300      	movs	r3, #0
 8007220:	e640      	b.n	8006ea4 <_scanf_float+0x88>
 8007222:	46c0      	nop			; (mov r8, r8)
 8007224:	0800b168 	.word	0x0800b168
 8007228:	0800b570 	.word	0x0800b570

0800722c <nanf>:
 800722c:	4800      	ldr	r0, [pc, #0]	; (8007230 <nanf+0x4>)
 800722e:	4770      	bx	lr
 8007230:	7fc00000 	.word	0x7fc00000

08007234 <siprintf>:
 8007234:	b40e      	push	{r1, r2, r3}
 8007236:	b500      	push	{lr}
 8007238:	490b      	ldr	r1, [pc, #44]	; (8007268 <siprintf+0x34>)
 800723a:	b09c      	sub	sp, #112	; 0x70
 800723c:	ab1d      	add	r3, sp, #116	; 0x74
 800723e:	9002      	str	r0, [sp, #8]
 8007240:	9006      	str	r0, [sp, #24]
 8007242:	9107      	str	r1, [sp, #28]
 8007244:	9104      	str	r1, [sp, #16]
 8007246:	4809      	ldr	r0, [pc, #36]	; (800726c <siprintf+0x38>)
 8007248:	4909      	ldr	r1, [pc, #36]	; (8007270 <siprintf+0x3c>)
 800724a:	cb04      	ldmia	r3!, {r2}
 800724c:	9105      	str	r1, [sp, #20]
 800724e:	6800      	ldr	r0, [r0, #0]
 8007250:	a902      	add	r1, sp, #8
 8007252:	9301      	str	r3, [sp, #4]
 8007254:	f002 ff5c 	bl	800a110 <_svfiprintf_r>
 8007258:	2300      	movs	r3, #0
 800725a:	9a02      	ldr	r2, [sp, #8]
 800725c:	7013      	strb	r3, [r2, #0]
 800725e:	b01c      	add	sp, #112	; 0x70
 8007260:	bc08      	pop	{r3}
 8007262:	b003      	add	sp, #12
 8007264:	4718      	bx	r3
 8007266:	46c0      	nop			; (mov r8, r8)
 8007268:	7fffffff 	.word	0x7fffffff
 800726c:	2000000c 	.word	0x2000000c
 8007270:	ffff0208 	.word	0xffff0208

08007274 <sulp>:
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	0016      	movs	r6, r2
 8007278:	000d      	movs	r5, r1
 800727a:	f002 fc93 	bl	8009ba4 <__ulp>
 800727e:	2e00      	cmp	r6, #0
 8007280:	d00d      	beq.n	800729e <sulp+0x2a>
 8007282:	236b      	movs	r3, #107	; 0x6b
 8007284:	006a      	lsls	r2, r5, #1
 8007286:	0d52      	lsrs	r2, r2, #21
 8007288:	1a9b      	subs	r3, r3, r2
 800728a:	2b00      	cmp	r3, #0
 800728c:	dd07      	ble.n	800729e <sulp+0x2a>
 800728e:	2400      	movs	r4, #0
 8007290:	4a03      	ldr	r2, [pc, #12]	; (80072a0 <sulp+0x2c>)
 8007292:	051b      	lsls	r3, r3, #20
 8007294:	189d      	adds	r5, r3, r2
 8007296:	002b      	movs	r3, r5
 8007298:	0022      	movs	r2, r4
 800729a:	f7fa fbd7 	bl	8001a4c <__aeabi_dmul>
 800729e:	bd70      	pop	{r4, r5, r6, pc}
 80072a0:	3ff00000 	.word	0x3ff00000

080072a4 <_strtod_l>:
 80072a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072a6:	001d      	movs	r5, r3
 80072a8:	2300      	movs	r3, #0
 80072aa:	b0a5      	sub	sp, #148	; 0x94
 80072ac:	9320      	str	r3, [sp, #128]	; 0x80
 80072ae:	4bac      	ldr	r3, [pc, #688]	; (8007560 <_strtod_l+0x2bc>)
 80072b0:	9005      	str	r0, [sp, #20]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	9108      	str	r1, [sp, #32]
 80072b6:	0018      	movs	r0, r3
 80072b8:	9307      	str	r3, [sp, #28]
 80072ba:	921b      	str	r2, [sp, #108]	; 0x6c
 80072bc:	f7f8 ff24 	bl	8000108 <strlen>
 80072c0:	2600      	movs	r6, #0
 80072c2:	0004      	movs	r4, r0
 80072c4:	2700      	movs	r7, #0
 80072c6:	9b08      	ldr	r3, [sp, #32]
 80072c8:	931f      	str	r3, [sp, #124]	; 0x7c
 80072ca:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80072cc:	7813      	ldrb	r3, [r2, #0]
 80072ce:	2b2b      	cmp	r3, #43	; 0x2b
 80072d0:	d058      	beq.n	8007384 <_strtod_l+0xe0>
 80072d2:	d844      	bhi.n	800735e <_strtod_l+0xba>
 80072d4:	2b0d      	cmp	r3, #13
 80072d6:	d83d      	bhi.n	8007354 <_strtod_l+0xb0>
 80072d8:	2b08      	cmp	r3, #8
 80072da:	d83d      	bhi.n	8007358 <_strtod_l+0xb4>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d047      	beq.n	8007370 <_strtod_l+0xcc>
 80072e0:	2300      	movs	r3, #0
 80072e2:	930e      	str	r3, [sp, #56]	; 0x38
 80072e4:	2200      	movs	r2, #0
 80072e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80072e8:	920a      	str	r2, [sp, #40]	; 0x28
 80072ea:	9306      	str	r3, [sp, #24]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b30      	cmp	r3, #48	; 0x30
 80072f0:	d000      	beq.n	80072f4 <_strtod_l+0x50>
 80072f2:	e07f      	b.n	80073f4 <_strtod_l+0x150>
 80072f4:	9b06      	ldr	r3, [sp, #24]
 80072f6:	3220      	adds	r2, #32
 80072f8:	785b      	ldrb	r3, [r3, #1]
 80072fa:	4393      	bics	r3, r2
 80072fc:	2b58      	cmp	r3, #88	; 0x58
 80072fe:	d000      	beq.n	8007302 <_strtod_l+0x5e>
 8007300:	e06e      	b.n	80073e0 <_strtod_l+0x13c>
 8007302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007304:	9502      	str	r5, [sp, #8]
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	ab20      	add	r3, sp, #128	; 0x80
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	4a95      	ldr	r2, [pc, #596]	; (8007564 <_strtod_l+0x2c0>)
 800730e:	ab21      	add	r3, sp, #132	; 0x84
 8007310:	9805      	ldr	r0, [sp, #20]
 8007312:	a91f      	add	r1, sp, #124	; 0x7c
 8007314:	f001 fd84 	bl	8008e20 <__gethex>
 8007318:	2307      	movs	r3, #7
 800731a:	0005      	movs	r5, r0
 800731c:	0004      	movs	r4, r0
 800731e:	401d      	ands	r5, r3
 8007320:	4218      	tst	r0, r3
 8007322:	d006      	beq.n	8007332 <_strtod_l+0x8e>
 8007324:	2d06      	cmp	r5, #6
 8007326:	d12f      	bne.n	8007388 <_strtod_l+0xe4>
 8007328:	9b06      	ldr	r3, [sp, #24]
 800732a:	3301      	adds	r3, #1
 800732c:	931f      	str	r3, [sp, #124]	; 0x7c
 800732e:	2300      	movs	r3, #0
 8007330:	930e      	str	r3, [sp, #56]	; 0x38
 8007332:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <_strtod_l+0x9a>
 8007338:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800733a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01c      	beq.n	800737e <_strtod_l+0xda>
 8007344:	2380      	movs	r3, #128	; 0x80
 8007346:	0032      	movs	r2, r6
 8007348:	061b      	lsls	r3, r3, #24
 800734a:	18fb      	adds	r3, r7, r3
 800734c:	0010      	movs	r0, r2
 800734e:	0019      	movs	r1, r3
 8007350:	b025      	add	sp, #148	; 0x94
 8007352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007354:	2b20      	cmp	r3, #32
 8007356:	d1c3      	bne.n	80072e0 <_strtod_l+0x3c>
 8007358:	3201      	adds	r2, #1
 800735a:	921f      	str	r2, [sp, #124]	; 0x7c
 800735c:	e7b5      	b.n	80072ca <_strtod_l+0x26>
 800735e:	2b2d      	cmp	r3, #45	; 0x2d
 8007360:	d1be      	bne.n	80072e0 <_strtod_l+0x3c>
 8007362:	3b2c      	subs	r3, #44	; 0x2c
 8007364:	930e      	str	r3, [sp, #56]	; 0x38
 8007366:	1c53      	adds	r3, r2, #1
 8007368:	931f      	str	r3, [sp, #124]	; 0x7c
 800736a:	7853      	ldrb	r3, [r2, #1]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1b9      	bne.n	80072e4 <_strtod_l+0x40>
 8007370:	9b08      	ldr	r3, [sp, #32]
 8007372:	931f      	str	r3, [sp, #124]	; 0x7c
 8007374:	2300      	movs	r3, #0
 8007376:	930e      	str	r3, [sp, #56]	; 0x38
 8007378:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1dc      	bne.n	8007338 <_strtod_l+0x94>
 800737e:	0032      	movs	r2, r6
 8007380:	003b      	movs	r3, r7
 8007382:	e7e3      	b.n	800734c <_strtod_l+0xa8>
 8007384:	2300      	movs	r3, #0
 8007386:	e7ed      	b.n	8007364 <_strtod_l+0xc0>
 8007388:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800738a:	2a00      	cmp	r2, #0
 800738c:	d007      	beq.n	800739e <_strtod_l+0xfa>
 800738e:	2135      	movs	r1, #53	; 0x35
 8007390:	a822      	add	r0, sp, #136	; 0x88
 8007392:	f002 fd08 	bl	8009da6 <__copybits>
 8007396:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007398:	9805      	ldr	r0, [sp, #20]
 800739a:	f002 f8c3 	bl	8009524 <_Bfree>
 800739e:	1e68      	subs	r0, r5, #1
 80073a0:	2804      	cmp	r0, #4
 80073a2:	d806      	bhi.n	80073b2 <_strtod_l+0x10e>
 80073a4:	f7f8 feb8 	bl	8000118 <__gnu_thumb1_case_uqi>
 80073a8:	1816030b 	.word	0x1816030b
 80073ac:	0b          	.byte	0x0b
 80073ad:	00          	.byte	0x00
 80073ae:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80073b0:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80073b2:	0723      	lsls	r3, r4, #28
 80073b4:	d5bd      	bpl.n	8007332 <_strtod_l+0x8e>
 80073b6:	2380      	movs	r3, #128	; 0x80
 80073b8:	061b      	lsls	r3, r3, #24
 80073ba:	431f      	orrs	r7, r3
 80073bc:	e7b9      	b.n	8007332 <_strtod_l+0x8e>
 80073be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073c0:	4a69      	ldr	r2, [pc, #420]	; (8007568 <_strtod_l+0x2c4>)
 80073c2:	496a      	ldr	r1, [pc, #424]	; (800756c <_strtod_l+0x2c8>)
 80073c4:	401a      	ands	r2, r3
 80073c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073c8:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80073ca:	185b      	adds	r3, r3, r1
 80073cc:	051b      	lsls	r3, r3, #20
 80073ce:	431a      	orrs	r2, r3
 80073d0:	0017      	movs	r7, r2
 80073d2:	e7ee      	b.n	80073b2 <_strtod_l+0x10e>
 80073d4:	4f66      	ldr	r7, [pc, #408]	; (8007570 <_strtod_l+0x2cc>)
 80073d6:	e7ec      	b.n	80073b2 <_strtod_l+0x10e>
 80073d8:	2601      	movs	r6, #1
 80073da:	4f66      	ldr	r7, [pc, #408]	; (8007574 <_strtod_l+0x2d0>)
 80073dc:	4276      	negs	r6, r6
 80073de:	e7e8      	b.n	80073b2 <_strtod_l+0x10e>
 80073e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80073e2:	1c5a      	adds	r2, r3, #1
 80073e4:	921f      	str	r2, [sp, #124]	; 0x7c
 80073e6:	785b      	ldrb	r3, [r3, #1]
 80073e8:	2b30      	cmp	r3, #48	; 0x30
 80073ea:	d0f9      	beq.n	80073e0 <_strtod_l+0x13c>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0a0      	beq.n	8007332 <_strtod_l+0x8e>
 80073f0:	2301      	movs	r3, #1
 80073f2:	930a      	str	r3, [sp, #40]	; 0x28
 80073f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80073f6:	220a      	movs	r2, #10
 80073f8:	9310      	str	r3, [sp, #64]	; 0x40
 80073fa:	2300      	movs	r3, #0
 80073fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80073fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007400:	9309      	str	r3, [sp, #36]	; 0x24
 8007402:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007404:	7805      	ldrb	r5, [r0, #0]
 8007406:	002b      	movs	r3, r5
 8007408:	3b30      	subs	r3, #48	; 0x30
 800740a:	b2d9      	uxtb	r1, r3
 800740c:	2909      	cmp	r1, #9
 800740e:	d927      	bls.n	8007460 <_strtod_l+0x1bc>
 8007410:	0022      	movs	r2, r4
 8007412:	9907      	ldr	r1, [sp, #28]
 8007414:	f002 ff94 	bl	800a340 <strncmp>
 8007418:	2800      	cmp	r0, #0
 800741a:	d033      	beq.n	8007484 <_strtod_l+0x1e0>
 800741c:	2000      	movs	r0, #0
 800741e:	002b      	movs	r3, r5
 8007420:	4684      	mov	ip, r0
 8007422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007424:	900c      	str	r0, [sp, #48]	; 0x30
 8007426:	9206      	str	r2, [sp, #24]
 8007428:	2220      	movs	r2, #32
 800742a:	0019      	movs	r1, r3
 800742c:	4391      	bics	r1, r2
 800742e:	000a      	movs	r2, r1
 8007430:	2100      	movs	r1, #0
 8007432:	9107      	str	r1, [sp, #28]
 8007434:	2a45      	cmp	r2, #69	; 0x45
 8007436:	d000      	beq.n	800743a <_strtod_l+0x196>
 8007438:	e0c5      	b.n	80075c6 <_strtod_l+0x322>
 800743a:	9b06      	ldr	r3, [sp, #24]
 800743c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800743e:	4303      	orrs	r3, r0
 8007440:	4313      	orrs	r3, r2
 8007442:	428b      	cmp	r3, r1
 8007444:	d094      	beq.n	8007370 <_strtod_l+0xcc>
 8007446:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007448:	9308      	str	r3, [sp, #32]
 800744a:	3301      	adds	r3, #1
 800744c:	931f      	str	r3, [sp, #124]	; 0x7c
 800744e:	9b08      	ldr	r3, [sp, #32]
 8007450:	785b      	ldrb	r3, [r3, #1]
 8007452:	2b2b      	cmp	r3, #43	; 0x2b
 8007454:	d076      	beq.n	8007544 <_strtod_l+0x2a0>
 8007456:	000c      	movs	r4, r1
 8007458:	2b2d      	cmp	r3, #45	; 0x2d
 800745a:	d179      	bne.n	8007550 <_strtod_l+0x2ac>
 800745c:	2401      	movs	r4, #1
 800745e:	e072      	b.n	8007546 <_strtod_l+0x2a2>
 8007460:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007462:	2908      	cmp	r1, #8
 8007464:	dc09      	bgt.n	800747a <_strtod_l+0x1d6>
 8007466:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007468:	4351      	muls	r1, r2
 800746a:	185b      	adds	r3, r3, r1
 800746c:	930b      	str	r3, [sp, #44]	; 0x2c
 800746e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007470:	3001      	adds	r0, #1
 8007472:	3301      	adds	r3, #1
 8007474:	9309      	str	r3, [sp, #36]	; 0x24
 8007476:	901f      	str	r0, [sp, #124]	; 0x7c
 8007478:	e7c3      	b.n	8007402 <_strtod_l+0x15e>
 800747a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800747c:	4351      	muls	r1, r2
 800747e:	185b      	adds	r3, r3, r1
 8007480:	930f      	str	r3, [sp, #60]	; 0x3c
 8007482:	e7f4      	b.n	800746e <_strtod_l+0x1ca>
 8007484:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007488:	191c      	adds	r4, r3, r4
 800748a:	941f      	str	r4, [sp, #124]	; 0x7c
 800748c:	7823      	ldrb	r3, [r4, #0]
 800748e:	2a00      	cmp	r2, #0
 8007490:	d039      	beq.n	8007506 <_strtod_l+0x262>
 8007492:	900c      	str	r0, [sp, #48]	; 0x30
 8007494:	9206      	str	r2, [sp, #24]
 8007496:	001a      	movs	r2, r3
 8007498:	3a30      	subs	r2, #48	; 0x30
 800749a:	2a09      	cmp	r2, #9
 800749c:	d912      	bls.n	80074c4 <_strtod_l+0x220>
 800749e:	2201      	movs	r2, #1
 80074a0:	4694      	mov	ip, r2
 80074a2:	e7c1      	b.n	8007428 <_strtod_l+0x184>
 80074a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80074a6:	3001      	adds	r0, #1
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	921f      	str	r2, [sp, #124]	; 0x7c
 80074ac:	785b      	ldrb	r3, [r3, #1]
 80074ae:	2b30      	cmp	r3, #48	; 0x30
 80074b0:	d0f8      	beq.n	80074a4 <_strtod_l+0x200>
 80074b2:	001a      	movs	r2, r3
 80074b4:	3a31      	subs	r2, #49	; 0x31
 80074b6:	2a08      	cmp	r2, #8
 80074b8:	d83f      	bhi.n	800753a <_strtod_l+0x296>
 80074ba:	900c      	str	r0, [sp, #48]	; 0x30
 80074bc:	2000      	movs	r0, #0
 80074be:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80074c0:	9006      	str	r0, [sp, #24]
 80074c2:	9210      	str	r2, [sp, #64]	; 0x40
 80074c4:	001a      	movs	r2, r3
 80074c6:	1c41      	adds	r1, r0, #1
 80074c8:	3a30      	subs	r2, #48	; 0x30
 80074ca:	2b30      	cmp	r3, #48	; 0x30
 80074cc:	d015      	beq.n	80074fa <_strtod_l+0x256>
 80074ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074d0:	185b      	adds	r3, r3, r1
 80074d2:	210a      	movs	r1, #10
 80074d4:	930c      	str	r3, [sp, #48]	; 0x30
 80074d6:	9b06      	ldr	r3, [sp, #24]
 80074d8:	18c4      	adds	r4, r0, r3
 80074da:	42a3      	cmp	r3, r4
 80074dc:	d115      	bne.n	800750a <_strtod_l+0x266>
 80074de:	9906      	ldr	r1, [sp, #24]
 80074e0:	9b06      	ldr	r3, [sp, #24]
 80074e2:	3101      	adds	r1, #1
 80074e4:	1809      	adds	r1, r1, r0
 80074e6:	181b      	adds	r3, r3, r0
 80074e8:	9106      	str	r1, [sp, #24]
 80074ea:	2b08      	cmp	r3, #8
 80074ec:	dc1b      	bgt.n	8007526 <_strtod_l+0x282>
 80074ee:	230a      	movs	r3, #10
 80074f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074f2:	434b      	muls	r3, r1
 80074f4:	2100      	movs	r1, #0
 80074f6:	18d3      	adds	r3, r2, r3
 80074f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80074fc:	0008      	movs	r0, r1
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	921f      	str	r2, [sp, #124]	; 0x7c
 8007502:	785b      	ldrb	r3, [r3, #1]
 8007504:	e7c7      	b.n	8007496 <_strtod_l+0x1f2>
 8007506:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007508:	e7d1      	b.n	80074ae <_strtod_l+0x20a>
 800750a:	2b08      	cmp	r3, #8
 800750c:	dc04      	bgt.n	8007518 <_strtod_l+0x274>
 800750e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007510:	434d      	muls	r5, r1
 8007512:	950b      	str	r5, [sp, #44]	; 0x2c
 8007514:	3301      	adds	r3, #1
 8007516:	e7e0      	b.n	80074da <_strtod_l+0x236>
 8007518:	1c5d      	adds	r5, r3, #1
 800751a:	2d10      	cmp	r5, #16
 800751c:	dcfa      	bgt.n	8007514 <_strtod_l+0x270>
 800751e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007520:	434d      	muls	r5, r1
 8007522:	950f      	str	r5, [sp, #60]	; 0x3c
 8007524:	e7f6      	b.n	8007514 <_strtod_l+0x270>
 8007526:	9b06      	ldr	r3, [sp, #24]
 8007528:	2100      	movs	r1, #0
 800752a:	2b10      	cmp	r3, #16
 800752c:	dce5      	bgt.n	80074fa <_strtod_l+0x256>
 800752e:	230a      	movs	r3, #10
 8007530:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007532:	4343      	muls	r3, r0
 8007534:	18d3      	adds	r3, r2, r3
 8007536:	930f      	str	r3, [sp, #60]	; 0x3c
 8007538:	e7df      	b.n	80074fa <_strtod_l+0x256>
 800753a:	2200      	movs	r2, #0
 800753c:	920c      	str	r2, [sp, #48]	; 0x30
 800753e:	9206      	str	r2, [sp, #24]
 8007540:	3201      	adds	r2, #1
 8007542:	e7ad      	b.n	80074a0 <_strtod_l+0x1fc>
 8007544:	2400      	movs	r4, #0
 8007546:	9b08      	ldr	r3, [sp, #32]
 8007548:	3302      	adds	r3, #2
 800754a:	931f      	str	r3, [sp, #124]	; 0x7c
 800754c:	9b08      	ldr	r3, [sp, #32]
 800754e:	789b      	ldrb	r3, [r3, #2]
 8007550:	001a      	movs	r2, r3
 8007552:	3a30      	subs	r2, #48	; 0x30
 8007554:	2a09      	cmp	r2, #9
 8007556:	d913      	bls.n	8007580 <_strtod_l+0x2dc>
 8007558:	9a08      	ldr	r2, [sp, #32]
 800755a:	921f      	str	r2, [sp, #124]	; 0x7c
 800755c:	2200      	movs	r2, #0
 800755e:	e031      	b.n	80075c4 <_strtod_l+0x320>
 8007560:	0800b3b8 	.word	0x0800b3b8
 8007564:	0800b170 	.word	0x0800b170
 8007568:	ffefffff 	.word	0xffefffff
 800756c:	00000433 	.word	0x00000433
 8007570:	7ff00000 	.word	0x7ff00000
 8007574:	7fffffff 	.word	0x7fffffff
 8007578:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	921f      	str	r2, [sp, #124]	; 0x7c
 800757e:	785b      	ldrb	r3, [r3, #1]
 8007580:	2b30      	cmp	r3, #48	; 0x30
 8007582:	d0f9      	beq.n	8007578 <_strtod_l+0x2d4>
 8007584:	2200      	movs	r2, #0
 8007586:	9207      	str	r2, [sp, #28]
 8007588:	001a      	movs	r2, r3
 800758a:	3a31      	subs	r2, #49	; 0x31
 800758c:	2a08      	cmp	r2, #8
 800758e:	d81a      	bhi.n	80075c6 <_strtod_l+0x322>
 8007590:	3b30      	subs	r3, #48	; 0x30
 8007592:	001a      	movs	r2, r3
 8007594:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007596:	9307      	str	r3, [sp, #28]
 8007598:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800759a:	1c59      	adds	r1, r3, #1
 800759c:	911f      	str	r1, [sp, #124]	; 0x7c
 800759e:	785b      	ldrb	r3, [r3, #1]
 80075a0:	001d      	movs	r5, r3
 80075a2:	3d30      	subs	r5, #48	; 0x30
 80075a4:	2d09      	cmp	r5, #9
 80075a6:	d939      	bls.n	800761c <_strtod_l+0x378>
 80075a8:	9d07      	ldr	r5, [sp, #28]
 80075aa:	1b49      	subs	r1, r1, r5
 80075ac:	4db0      	ldr	r5, [pc, #704]	; (8007870 <_strtod_l+0x5cc>)
 80075ae:	9507      	str	r5, [sp, #28]
 80075b0:	2908      	cmp	r1, #8
 80075b2:	dc03      	bgt.n	80075bc <_strtod_l+0x318>
 80075b4:	9207      	str	r2, [sp, #28]
 80075b6:	42aa      	cmp	r2, r5
 80075b8:	dd00      	ble.n	80075bc <_strtod_l+0x318>
 80075ba:	9507      	str	r5, [sp, #28]
 80075bc:	2c00      	cmp	r4, #0
 80075be:	d002      	beq.n	80075c6 <_strtod_l+0x322>
 80075c0:	9a07      	ldr	r2, [sp, #28]
 80075c2:	4252      	negs	r2, r2
 80075c4:	9207      	str	r2, [sp, #28]
 80075c6:	9a06      	ldr	r2, [sp, #24]
 80075c8:	2a00      	cmp	r2, #0
 80075ca:	d14b      	bne.n	8007664 <_strtod_l+0x3c0>
 80075cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075ce:	4310      	orrs	r0, r2
 80075d0:	d000      	beq.n	80075d4 <_strtod_l+0x330>
 80075d2:	e6ae      	b.n	8007332 <_strtod_l+0x8e>
 80075d4:	4662      	mov	r2, ip
 80075d6:	2a00      	cmp	r2, #0
 80075d8:	d000      	beq.n	80075dc <_strtod_l+0x338>
 80075da:	e6c9      	b.n	8007370 <_strtod_l+0xcc>
 80075dc:	2b69      	cmp	r3, #105	; 0x69
 80075de:	d025      	beq.n	800762c <_strtod_l+0x388>
 80075e0:	dc21      	bgt.n	8007626 <_strtod_l+0x382>
 80075e2:	2b49      	cmp	r3, #73	; 0x49
 80075e4:	d022      	beq.n	800762c <_strtod_l+0x388>
 80075e6:	2b4e      	cmp	r3, #78	; 0x4e
 80075e8:	d000      	beq.n	80075ec <_strtod_l+0x348>
 80075ea:	e6c1      	b.n	8007370 <_strtod_l+0xcc>
 80075ec:	49a1      	ldr	r1, [pc, #644]	; (8007874 <_strtod_l+0x5d0>)
 80075ee:	a81f      	add	r0, sp, #124	; 0x7c
 80075f0:	f001 fe64 	bl	80092bc <__match>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	d100      	bne.n	80075fa <_strtod_l+0x356>
 80075f8:	e6ba      	b.n	8007370 <_strtod_l+0xcc>
 80075fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	2b28      	cmp	r3, #40	; 0x28
 8007600:	d12a      	bne.n	8007658 <_strtod_l+0x3b4>
 8007602:	499d      	ldr	r1, [pc, #628]	; (8007878 <_strtod_l+0x5d4>)
 8007604:	aa22      	add	r2, sp, #136	; 0x88
 8007606:	a81f      	add	r0, sp, #124	; 0x7c
 8007608:	f001 fe6c 	bl	80092e4 <__hexnan>
 800760c:	2805      	cmp	r0, #5
 800760e:	d123      	bne.n	8007658 <_strtod_l+0x3b4>
 8007610:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007612:	4a9a      	ldr	r2, [pc, #616]	; (800787c <_strtod_l+0x5d8>)
 8007614:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007616:	431a      	orrs	r2, r3
 8007618:	0017      	movs	r7, r2
 800761a:	e68a      	b.n	8007332 <_strtod_l+0x8e>
 800761c:	210a      	movs	r1, #10
 800761e:	434a      	muls	r2, r1
 8007620:	18d2      	adds	r2, r2, r3
 8007622:	3a30      	subs	r2, #48	; 0x30
 8007624:	e7b8      	b.n	8007598 <_strtod_l+0x2f4>
 8007626:	2b6e      	cmp	r3, #110	; 0x6e
 8007628:	d0e0      	beq.n	80075ec <_strtod_l+0x348>
 800762a:	e6a1      	b.n	8007370 <_strtod_l+0xcc>
 800762c:	4994      	ldr	r1, [pc, #592]	; (8007880 <_strtod_l+0x5dc>)
 800762e:	a81f      	add	r0, sp, #124	; 0x7c
 8007630:	f001 fe44 	bl	80092bc <__match>
 8007634:	2800      	cmp	r0, #0
 8007636:	d100      	bne.n	800763a <_strtod_l+0x396>
 8007638:	e69a      	b.n	8007370 <_strtod_l+0xcc>
 800763a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800763c:	4991      	ldr	r1, [pc, #580]	; (8007884 <_strtod_l+0x5e0>)
 800763e:	3b01      	subs	r3, #1
 8007640:	a81f      	add	r0, sp, #124	; 0x7c
 8007642:	931f      	str	r3, [sp, #124]	; 0x7c
 8007644:	f001 fe3a 	bl	80092bc <__match>
 8007648:	2800      	cmp	r0, #0
 800764a:	d102      	bne.n	8007652 <_strtod_l+0x3ae>
 800764c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800764e:	3301      	adds	r3, #1
 8007650:	931f      	str	r3, [sp, #124]	; 0x7c
 8007652:	2600      	movs	r6, #0
 8007654:	4f89      	ldr	r7, [pc, #548]	; (800787c <_strtod_l+0x5d8>)
 8007656:	e66c      	b.n	8007332 <_strtod_l+0x8e>
 8007658:	488b      	ldr	r0, [pc, #556]	; (8007888 <_strtod_l+0x5e4>)
 800765a:	f002 fe59 	bl	800a310 <nan>
 800765e:	0006      	movs	r6, r0
 8007660:	000f      	movs	r7, r1
 8007662:	e666      	b.n	8007332 <_strtod_l+0x8e>
 8007664:	9b07      	ldr	r3, [sp, #28]
 8007666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007668:	1a9b      	subs	r3, r3, r2
 800766a:	930a      	str	r3, [sp, #40]	; 0x28
 800766c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <_strtod_l+0x3d2>
 8007672:	9b06      	ldr	r3, [sp, #24]
 8007674:	9309      	str	r3, [sp, #36]	; 0x24
 8007676:	9c06      	ldr	r4, [sp, #24]
 8007678:	2c10      	cmp	r4, #16
 800767a:	dd00      	ble.n	800767e <_strtod_l+0x3da>
 800767c:	2410      	movs	r4, #16
 800767e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007680:	f7fb f866 	bl	8002750 <__aeabi_ui2d>
 8007684:	9b06      	ldr	r3, [sp, #24]
 8007686:	0006      	movs	r6, r0
 8007688:	000f      	movs	r7, r1
 800768a:	2b09      	cmp	r3, #9
 800768c:	dd15      	ble.n	80076ba <_strtod_l+0x416>
 800768e:	0022      	movs	r2, r4
 8007690:	4b7e      	ldr	r3, [pc, #504]	; (800788c <_strtod_l+0x5e8>)
 8007692:	3a09      	subs	r2, #9
 8007694:	00d2      	lsls	r2, r2, #3
 8007696:	189b      	adds	r3, r3, r2
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f7fa f9d6 	bl	8001a4c <__aeabi_dmul>
 80076a0:	0006      	movs	r6, r0
 80076a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80076a4:	000f      	movs	r7, r1
 80076a6:	f7fb f853 	bl	8002750 <__aeabi_ui2d>
 80076aa:	0002      	movs	r2, r0
 80076ac:	000b      	movs	r3, r1
 80076ae:	0030      	movs	r0, r6
 80076b0:	0039      	movs	r1, r7
 80076b2:	f7f9 fa8d 	bl	8000bd0 <__aeabi_dadd>
 80076b6:	0006      	movs	r6, r0
 80076b8:	000f      	movs	r7, r1
 80076ba:	9b06      	ldr	r3, [sp, #24]
 80076bc:	2b0f      	cmp	r3, #15
 80076be:	dc39      	bgt.n	8007734 <_strtod_l+0x490>
 80076c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d100      	bne.n	80076c8 <_strtod_l+0x424>
 80076c6:	e634      	b.n	8007332 <_strtod_l+0x8e>
 80076c8:	dd24      	ble.n	8007714 <_strtod_l+0x470>
 80076ca:	2b16      	cmp	r3, #22
 80076cc:	dc09      	bgt.n	80076e2 <_strtod_l+0x43e>
 80076ce:	496f      	ldr	r1, [pc, #444]	; (800788c <_strtod_l+0x5e8>)
 80076d0:	00db      	lsls	r3, r3, #3
 80076d2:	18c9      	adds	r1, r1, r3
 80076d4:	0032      	movs	r2, r6
 80076d6:	6808      	ldr	r0, [r1, #0]
 80076d8:	6849      	ldr	r1, [r1, #4]
 80076da:	003b      	movs	r3, r7
 80076dc:	f7fa f9b6 	bl	8001a4c <__aeabi_dmul>
 80076e0:	e7bd      	b.n	800765e <_strtod_l+0x3ba>
 80076e2:	2325      	movs	r3, #37	; 0x25
 80076e4:	9a06      	ldr	r2, [sp, #24]
 80076e6:	1a9b      	subs	r3, r3, r2
 80076e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076ea:	4293      	cmp	r3, r2
 80076ec:	db22      	blt.n	8007734 <_strtod_l+0x490>
 80076ee:	240f      	movs	r4, #15
 80076f0:	9b06      	ldr	r3, [sp, #24]
 80076f2:	4d66      	ldr	r5, [pc, #408]	; (800788c <_strtod_l+0x5e8>)
 80076f4:	1ae4      	subs	r4, r4, r3
 80076f6:	00e1      	lsls	r1, r4, #3
 80076f8:	1869      	adds	r1, r5, r1
 80076fa:	0032      	movs	r2, r6
 80076fc:	6808      	ldr	r0, [r1, #0]
 80076fe:	6849      	ldr	r1, [r1, #4]
 8007700:	003b      	movs	r3, r7
 8007702:	f7fa f9a3 	bl	8001a4c <__aeabi_dmul>
 8007706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007708:	1b1c      	subs	r4, r3, r4
 800770a:	00e4      	lsls	r4, r4, #3
 800770c:	192c      	adds	r4, r5, r4
 800770e:	6822      	ldr	r2, [r4, #0]
 8007710:	6863      	ldr	r3, [r4, #4]
 8007712:	e7e3      	b.n	80076dc <_strtod_l+0x438>
 8007714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007716:	3316      	adds	r3, #22
 8007718:	db0c      	blt.n	8007734 <_strtod_l+0x490>
 800771a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800771c:	9a07      	ldr	r2, [sp, #28]
 800771e:	0030      	movs	r0, r6
 8007720:	1a9a      	subs	r2, r3, r2
 8007722:	4b5a      	ldr	r3, [pc, #360]	; (800788c <_strtod_l+0x5e8>)
 8007724:	00d2      	lsls	r2, r2, #3
 8007726:	189b      	adds	r3, r3, r2
 8007728:	0039      	movs	r1, r7
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f7f9 fd8b 	bl	8001248 <__aeabi_ddiv>
 8007732:	e794      	b.n	800765e <_strtod_l+0x3ba>
 8007734:	9b06      	ldr	r3, [sp, #24]
 8007736:	1b1c      	subs	r4, r3, r4
 8007738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800773a:	18e4      	adds	r4, r4, r3
 800773c:	2c00      	cmp	r4, #0
 800773e:	dd72      	ble.n	8007826 <_strtod_l+0x582>
 8007740:	230f      	movs	r3, #15
 8007742:	0021      	movs	r1, r4
 8007744:	4019      	ands	r1, r3
 8007746:	421c      	tst	r4, r3
 8007748:	d00a      	beq.n	8007760 <_strtod_l+0x4bc>
 800774a:	00cb      	lsls	r3, r1, #3
 800774c:	494f      	ldr	r1, [pc, #316]	; (800788c <_strtod_l+0x5e8>)
 800774e:	0032      	movs	r2, r6
 8007750:	18c9      	adds	r1, r1, r3
 8007752:	6808      	ldr	r0, [r1, #0]
 8007754:	6849      	ldr	r1, [r1, #4]
 8007756:	003b      	movs	r3, r7
 8007758:	f7fa f978 	bl	8001a4c <__aeabi_dmul>
 800775c:	0006      	movs	r6, r0
 800775e:	000f      	movs	r7, r1
 8007760:	230f      	movs	r3, #15
 8007762:	439c      	bics	r4, r3
 8007764:	d04a      	beq.n	80077fc <_strtod_l+0x558>
 8007766:	3326      	adds	r3, #38	; 0x26
 8007768:	33ff      	adds	r3, #255	; 0xff
 800776a:	429c      	cmp	r4, r3
 800776c:	dd22      	ble.n	80077b4 <_strtod_l+0x510>
 800776e:	2300      	movs	r3, #0
 8007770:	9306      	str	r3, [sp, #24]
 8007772:	9307      	str	r3, [sp, #28]
 8007774:	930b      	str	r3, [sp, #44]	; 0x2c
 8007776:	9309      	str	r3, [sp, #36]	; 0x24
 8007778:	2322      	movs	r3, #34	; 0x22
 800777a:	2600      	movs	r6, #0
 800777c:	9a05      	ldr	r2, [sp, #20]
 800777e:	4f3f      	ldr	r7, [pc, #252]	; (800787c <_strtod_l+0x5d8>)
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007784:	42b3      	cmp	r3, r6
 8007786:	d100      	bne.n	800778a <_strtod_l+0x4e6>
 8007788:	e5d3      	b.n	8007332 <_strtod_l+0x8e>
 800778a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800778c:	9805      	ldr	r0, [sp, #20]
 800778e:	f001 fec9 	bl	8009524 <_Bfree>
 8007792:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007794:	9805      	ldr	r0, [sp, #20]
 8007796:	f001 fec5 	bl	8009524 <_Bfree>
 800779a:	9907      	ldr	r1, [sp, #28]
 800779c:	9805      	ldr	r0, [sp, #20]
 800779e:	f001 fec1 	bl	8009524 <_Bfree>
 80077a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077a4:	9805      	ldr	r0, [sp, #20]
 80077a6:	f001 febd 	bl	8009524 <_Bfree>
 80077aa:	9906      	ldr	r1, [sp, #24]
 80077ac:	9805      	ldr	r0, [sp, #20]
 80077ae:	f001 feb9 	bl	8009524 <_Bfree>
 80077b2:	e5be      	b.n	8007332 <_strtod_l+0x8e>
 80077b4:	2300      	movs	r3, #0
 80077b6:	0030      	movs	r0, r6
 80077b8:	0039      	movs	r1, r7
 80077ba:	4d35      	ldr	r5, [pc, #212]	; (8007890 <_strtod_l+0x5ec>)
 80077bc:	1124      	asrs	r4, r4, #4
 80077be:	9308      	str	r3, [sp, #32]
 80077c0:	2c01      	cmp	r4, #1
 80077c2:	dc1e      	bgt.n	8007802 <_strtod_l+0x55e>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <_strtod_l+0x528>
 80077c8:	0006      	movs	r6, r0
 80077ca:	000f      	movs	r7, r1
 80077cc:	4b31      	ldr	r3, [pc, #196]	; (8007894 <_strtod_l+0x5f0>)
 80077ce:	0032      	movs	r2, r6
 80077d0:	18ff      	adds	r7, r7, r3
 80077d2:	9b08      	ldr	r3, [sp, #32]
 80077d4:	00dd      	lsls	r5, r3, #3
 80077d6:	4b2e      	ldr	r3, [pc, #184]	; (8007890 <_strtod_l+0x5ec>)
 80077d8:	195d      	adds	r5, r3, r5
 80077da:	6828      	ldr	r0, [r5, #0]
 80077dc:	6869      	ldr	r1, [r5, #4]
 80077de:	003b      	movs	r3, r7
 80077e0:	f7fa f934 	bl	8001a4c <__aeabi_dmul>
 80077e4:	4b25      	ldr	r3, [pc, #148]	; (800787c <_strtod_l+0x5d8>)
 80077e6:	4a2c      	ldr	r2, [pc, #176]	; (8007898 <_strtod_l+0x5f4>)
 80077e8:	0006      	movs	r6, r0
 80077ea:	400b      	ands	r3, r1
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d8be      	bhi.n	800776e <_strtod_l+0x4ca>
 80077f0:	4a2a      	ldr	r2, [pc, #168]	; (800789c <_strtod_l+0x5f8>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d913      	bls.n	800781e <_strtod_l+0x57a>
 80077f6:	2601      	movs	r6, #1
 80077f8:	4f29      	ldr	r7, [pc, #164]	; (80078a0 <_strtod_l+0x5fc>)
 80077fa:	4276      	negs	r6, r6
 80077fc:	2300      	movs	r3, #0
 80077fe:	9308      	str	r3, [sp, #32]
 8007800:	e087      	b.n	8007912 <_strtod_l+0x66e>
 8007802:	2201      	movs	r2, #1
 8007804:	4214      	tst	r4, r2
 8007806:	d004      	beq.n	8007812 <_strtod_l+0x56e>
 8007808:	682a      	ldr	r2, [r5, #0]
 800780a:	686b      	ldr	r3, [r5, #4]
 800780c:	f7fa f91e 	bl	8001a4c <__aeabi_dmul>
 8007810:	2301      	movs	r3, #1
 8007812:	9a08      	ldr	r2, [sp, #32]
 8007814:	1064      	asrs	r4, r4, #1
 8007816:	3201      	adds	r2, #1
 8007818:	9208      	str	r2, [sp, #32]
 800781a:	3508      	adds	r5, #8
 800781c:	e7d0      	b.n	80077c0 <_strtod_l+0x51c>
 800781e:	23d4      	movs	r3, #212	; 0xd4
 8007820:	049b      	lsls	r3, r3, #18
 8007822:	18cf      	adds	r7, r1, r3
 8007824:	e7ea      	b.n	80077fc <_strtod_l+0x558>
 8007826:	2c00      	cmp	r4, #0
 8007828:	d0e8      	beq.n	80077fc <_strtod_l+0x558>
 800782a:	4264      	negs	r4, r4
 800782c:	220f      	movs	r2, #15
 800782e:	0023      	movs	r3, r4
 8007830:	4013      	ands	r3, r2
 8007832:	4214      	tst	r4, r2
 8007834:	d00a      	beq.n	800784c <_strtod_l+0x5a8>
 8007836:	00da      	lsls	r2, r3, #3
 8007838:	4b14      	ldr	r3, [pc, #80]	; (800788c <_strtod_l+0x5e8>)
 800783a:	0030      	movs	r0, r6
 800783c:	189b      	adds	r3, r3, r2
 800783e:	0039      	movs	r1, r7
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f7f9 fd00 	bl	8001248 <__aeabi_ddiv>
 8007848:	0006      	movs	r6, r0
 800784a:	000f      	movs	r7, r1
 800784c:	1124      	asrs	r4, r4, #4
 800784e:	d0d5      	beq.n	80077fc <_strtod_l+0x558>
 8007850:	2c1f      	cmp	r4, #31
 8007852:	dd27      	ble.n	80078a4 <_strtod_l+0x600>
 8007854:	2300      	movs	r3, #0
 8007856:	9306      	str	r3, [sp, #24]
 8007858:	9307      	str	r3, [sp, #28]
 800785a:	930b      	str	r3, [sp, #44]	; 0x2c
 800785c:	9309      	str	r3, [sp, #36]	; 0x24
 800785e:	2322      	movs	r3, #34	; 0x22
 8007860:	9a05      	ldr	r2, [sp, #20]
 8007862:	2600      	movs	r6, #0
 8007864:	6013      	str	r3, [r2, #0]
 8007866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007868:	2700      	movs	r7, #0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d18d      	bne.n	800778a <_strtod_l+0x4e6>
 800786e:	e560      	b.n	8007332 <_strtod_l+0x8e>
 8007870:	00004e1f 	.word	0x00004e1f
 8007874:	0800b141 	.word	0x0800b141
 8007878:	0800b184 	.word	0x0800b184
 800787c:	7ff00000 	.word	0x7ff00000
 8007880:	0800b139 	.word	0x0800b139
 8007884:	0800b2c4 	.word	0x0800b2c4
 8007888:	0800b570 	.word	0x0800b570
 800788c:	0800b450 	.word	0x0800b450
 8007890:	0800b428 	.word	0x0800b428
 8007894:	fcb00000 	.word	0xfcb00000
 8007898:	7ca00000 	.word	0x7ca00000
 800789c:	7c900000 	.word	0x7c900000
 80078a0:	7fefffff 	.word	0x7fefffff
 80078a4:	2310      	movs	r3, #16
 80078a6:	0022      	movs	r2, r4
 80078a8:	401a      	ands	r2, r3
 80078aa:	9208      	str	r2, [sp, #32]
 80078ac:	421c      	tst	r4, r3
 80078ae:	d001      	beq.n	80078b4 <_strtod_l+0x610>
 80078b0:	335a      	adds	r3, #90	; 0x5a
 80078b2:	9308      	str	r3, [sp, #32]
 80078b4:	0030      	movs	r0, r6
 80078b6:	0039      	movs	r1, r7
 80078b8:	2300      	movs	r3, #0
 80078ba:	4dc5      	ldr	r5, [pc, #788]	; (8007bd0 <_strtod_l+0x92c>)
 80078bc:	2201      	movs	r2, #1
 80078be:	4214      	tst	r4, r2
 80078c0:	d004      	beq.n	80078cc <_strtod_l+0x628>
 80078c2:	682a      	ldr	r2, [r5, #0]
 80078c4:	686b      	ldr	r3, [r5, #4]
 80078c6:	f7fa f8c1 	bl	8001a4c <__aeabi_dmul>
 80078ca:	2301      	movs	r3, #1
 80078cc:	1064      	asrs	r4, r4, #1
 80078ce:	3508      	adds	r5, #8
 80078d0:	2c00      	cmp	r4, #0
 80078d2:	d1f3      	bne.n	80078bc <_strtod_l+0x618>
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <_strtod_l+0x638>
 80078d8:	0006      	movs	r6, r0
 80078da:	000f      	movs	r7, r1
 80078dc:	9b08      	ldr	r3, [sp, #32]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00f      	beq.n	8007902 <_strtod_l+0x65e>
 80078e2:	236b      	movs	r3, #107	; 0x6b
 80078e4:	007a      	lsls	r2, r7, #1
 80078e6:	0d52      	lsrs	r2, r2, #21
 80078e8:	0039      	movs	r1, r7
 80078ea:	1a9b      	subs	r3, r3, r2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	dd08      	ble.n	8007902 <_strtod_l+0x65e>
 80078f0:	2b1f      	cmp	r3, #31
 80078f2:	dc00      	bgt.n	80078f6 <_strtod_l+0x652>
 80078f4:	e124      	b.n	8007b40 <_strtod_l+0x89c>
 80078f6:	2600      	movs	r6, #0
 80078f8:	2b34      	cmp	r3, #52	; 0x34
 80078fa:	dc00      	bgt.n	80078fe <_strtod_l+0x65a>
 80078fc:	e119      	b.n	8007b32 <_strtod_l+0x88e>
 80078fe:	27dc      	movs	r7, #220	; 0xdc
 8007900:	04bf      	lsls	r7, r7, #18
 8007902:	2200      	movs	r2, #0
 8007904:	2300      	movs	r3, #0
 8007906:	0030      	movs	r0, r6
 8007908:	0039      	movs	r1, r7
 800790a:	f7f8 fd9f 	bl	800044c <__aeabi_dcmpeq>
 800790e:	2800      	cmp	r0, #0
 8007910:	d1a0      	bne.n	8007854 <_strtod_l+0x5b0>
 8007912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	9910      	ldr	r1, [sp, #64]	; 0x40
 800791a:	9b06      	ldr	r3, [sp, #24]
 800791c:	9805      	ldr	r0, [sp, #20]
 800791e:	f001 fe69 	bl	80095f4 <__s2b>
 8007922:	900b      	str	r0, [sp, #44]	; 0x2c
 8007924:	2800      	cmp	r0, #0
 8007926:	d100      	bne.n	800792a <_strtod_l+0x686>
 8007928:	e721      	b.n	800776e <_strtod_l+0x4ca>
 800792a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800792c:	9907      	ldr	r1, [sp, #28]
 800792e:	17da      	asrs	r2, r3, #31
 8007930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007932:	1a5b      	subs	r3, r3, r1
 8007934:	401a      	ands	r2, r3
 8007936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007938:	9215      	str	r2, [sp, #84]	; 0x54
 800793a:	43db      	mvns	r3, r3
 800793c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800793e:	17db      	asrs	r3, r3, #31
 8007940:	401a      	ands	r2, r3
 8007942:	2300      	movs	r3, #0
 8007944:	921a      	str	r2, [sp, #104]	; 0x68
 8007946:	9306      	str	r3, [sp, #24]
 8007948:	9307      	str	r3, [sp, #28]
 800794a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800794c:	9805      	ldr	r0, [sp, #20]
 800794e:	6859      	ldr	r1, [r3, #4]
 8007950:	f001 fda4 	bl	800949c <_Balloc>
 8007954:	9009      	str	r0, [sp, #36]	; 0x24
 8007956:	2800      	cmp	r0, #0
 8007958:	d100      	bne.n	800795c <_strtod_l+0x6b8>
 800795a:	e70d      	b.n	8007778 <_strtod_l+0x4d4>
 800795c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800795e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	310c      	adds	r1, #12
 8007964:	1c9a      	adds	r2, r3, #2
 8007966:	0092      	lsls	r2, r2, #2
 8007968:	300c      	adds	r0, #12
 800796a:	930c      	str	r3, [sp, #48]	; 0x30
 800796c:	f001 fd8d 	bl	800948a <memcpy>
 8007970:	ab22      	add	r3, sp, #136	; 0x88
 8007972:	9301      	str	r3, [sp, #4]
 8007974:	ab21      	add	r3, sp, #132	; 0x84
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	0032      	movs	r2, r6
 800797a:	003b      	movs	r3, r7
 800797c:	9805      	ldr	r0, [sp, #20]
 800797e:	9612      	str	r6, [sp, #72]	; 0x48
 8007980:	9713      	str	r7, [sp, #76]	; 0x4c
 8007982:	f002 f983 	bl	8009c8c <__d2b>
 8007986:	9020      	str	r0, [sp, #128]	; 0x80
 8007988:	2800      	cmp	r0, #0
 800798a:	d100      	bne.n	800798e <_strtod_l+0x6ea>
 800798c:	e6f4      	b.n	8007778 <_strtod_l+0x4d4>
 800798e:	2101      	movs	r1, #1
 8007990:	9805      	ldr	r0, [sp, #20]
 8007992:	f001 fec3 	bl	800971c <__i2b>
 8007996:	9007      	str	r0, [sp, #28]
 8007998:	2800      	cmp	r0, #0
 800799a:	d100      	bne.n	800799e <_strtod_l+0x6fa>
 800799c:	e6ec      	b.n	8007778 <_strtod_l+0x4d4>
 800799e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079a0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80079a2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80079a4:	1ad4      	subs	r4, r2, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	db01      	blt.n	80079ae <_strtod_l+0x70a>
 80079aa:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80079ac:	195d      	adds	r5, r3, r5
 80079ae:	9908      	ldr	r1, [sp, #32]
 80079b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80079b2:	1a5b      	subs	r3, r3, r1
 80079b4:	2136      	movs	r1, #54	; 0x36
 80079b6:	189b      	adds	r3, r3, r2
 80079b8:	1a8a      	subs	r2, r1, r2
 80079ba:	4986      	ldr	r1, [pc, #536]	; (8007bd4 <_strtod_l+0x930>)
 80079bc:	2001      	movs	r0, #1
 80079be:	468c      	mov	ip, r1
 80079c0:	2100      	movs	r1, #0
 80079c2:	3b01      	subs	r3, #1
 80079c4:	9110      	str	r1, [sp, #64]	; 0x40
 80079c6:	9014      	str	r0, [sp, #80]	; 0x50
 80079c8:	4563      	cmp	r3, ip
 80079ca:	da07      	bge.n	80079dc <_strtod_l+0x738>
 80079cc:	4661      	mov	r1, ip
 80079ce:	1ac9      	subs	r1, r1, r3
 80079d0:	1a52      	subs	r2, r2, r1
 80079d2:	291f      	cmp	r1, #31
 80079d4:	dd00      	ble.n	80079d8 <_strtod_l+0x734>
 80079d6:	e0b8      	b.n	8007b4a <_strtod_l+0x8a6>
 80079d8:	4088      	lsls	r0, r1
 80079da:	9014      	str	r0, [sp, #80]	; 0x50
 80079dc:	18ab      	adds	r3, r5, r2
 80079de:	930c      	str	r3, [sp, #48]	; 0x30
 80079e0:	18a4      	adds	r4, r4, r2
 80079e2:	9b08      	ldr	r3, [sp, #32]
 80079e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079e6:	191c      	adds	r4, r3, r4
 80079e8:	002b      	movs	r3, r5
 80079ea:	4295      	cmp	r5, r2
 80079ec:	dd00      	ble.n	80079f0 <_strtod_l+0x74c>
 80079ee:	0013      	movs	r3, r2
 80079f0:	42a3      	cmp	r3, r4
 80079f2:	dd00      	ble.n	80079f6 <_strtod_l+0x752>
 80079f4:	0023      	movs	r3, r4
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	dd04      	ble.n	8007a04 <_strtod_l+0x760>
 80079fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079fc:	1ae4      	subs	r4, r4, r3
 80079fe:	1ad2      	subs	r2, r2, r3
 8007a00:	920c      	str	r2, [sp, #48]	; 0x30
 8007a02:	1aed      	subs	r5, r5, r3
 8007a04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	dd17      	ble.n	8007a3a <_strtod_l+0x796>
 8007a0a:	001a      	movs	r2, r3
 8007a0c:	9907      	ldr	r1, [sp, #28]
 8007a0e:	9805      	ldr	r0, [sp, #20]
 8007a10:	f001 ff4a 	bl	80098a8 <__pow5mult>
 8007a14:	9007      	str	r0, [sp, #28]
 8007a16:	2800      	cmp	r0, #0
 8007a18:	d100      	bne.n	8007a1c <_strtod_l+0x778>
 8007a1a:	e6ad      	b.n	8007778 <_strtod_l+0x4d4>
 8007a1c:	0001      	movs	r1, r0
 8007a1e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a20:	9805      	ldr	r0, [sp, #20]
 8007a22:	f001 fe91 	bl	8009748 <__multiply>
 8007a26:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	d100      	bne.n	8007a2e <_strtod_l+0x78a>
 8007a2c:	e6a4      	b.n	8007778 <_strtod_l+0x4d4>
 8007a2e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007a30:	9805      	ldr	r0, [sp, #20]
 8007a32:	f001 fd77 	bl	8009524 <_Bfree>
 8007a36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a38:	9320      	str	r3, [sp, #128]	; 0x80
 8007a3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	dd00      	ble.n	8007a42 <_strtod_l+0x79e>
 8007a40:	e089      	b.n	8007b56 <_strtod_l+0x8b2>
 8007a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	dd08      	ble.n	8007a5a <_strtod_l+0x7b6>
 8007a48:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007a4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a4c:	9805      	ldr	r0, [sp, #20]
 8007a4e:	f001 ff2b 	bl	80098a8 <__pow5mult>
 8007a52:	9009      	str	r0, [sp, #36]	; 0x24
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d100      	bne.n	8007a5a <_strtod_l+0x7b6>
 8007a58:	e68e      	b.n	8007778 <_strtod_l+0x4d4>
 8007a5a:	2c00      	cmp	r4, #0
 8007a5c:	dd08      	ble.n	8007a70 <_strtod_l+0x7cc>
 8007a5e:	0022      	movs	r2, r4
 8007a60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a62:	9805      	ldr	r0, [sp, #20]
 8007a64:	f001 ff7c 	bl	8009960 <__lshift>
 8007a68:	9009      	str	r0, [sp, #36]	; 0x24
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	d100      	bne.n	8007a70 <_strtod_l+0x7cc>
 8007a6e:	e683      	b.n	8007778 <_strtod_l+0x4d4>
 8007a70:	2d00      	cmp	r5, #0
 8007a72:	dd08      	ble.n	8007a86 <_strtod_l+0x7e2>
 8007a74:	002a      	movs	r2, r5
 8007a76:	9907      	ldr	r1, [sp, #28]
 8007a78:	9805      	ldr	r0, [sp, #20]
 8007a7a:	f001 ff71 	bl	8009960 <__lshift>
 8007a7e:	9007      	str	r0, [sp, #28]
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d100      	bne.n	8007a86 <_strtod_l+0x7e2>
 8007a84:	e678      	b.n	8007778 <_strtod_l+0x4d4>
 8007a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a88:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007a8a:	9805      	ldr	r0, [sp, #20]
 8007a8c:	f001 fff2 	bl	8009a74 <__mdiff>
 8007a90:	9006      	str	r0, [sp, #24]
 8007a92:	2800      	cmp	r0, #0
 8007a94:	d100      	bne.n	8007a98 <_strtod_l+0x7f4>
 8007a96:	e66f      	b.n	8007778 <_strtod_l+0x4d4>
 8007a98:	2200      	movs	r2, #0
 8007a9a:	68c3      	ldr	r3, [r0, #12]
 8007a9c:	9907      	ldr	r1, [sp, #28]
 8007a9e:	60c2      	str	r2, [r0, #12]
 8007aa0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007aa2:	f001 ffcb 	bl	8009a3c <__mcmp>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	da5f      	bge.n	8007b6a <_strtod_l+0x8c6>
 8007aaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aac:	4333      	orrs	r3, r6
 8007aae:	d000      	beq.n	8007ab2 <_strtod_l+0x80e>
 8007ab0:	e08a      	b.n	8007bc8 <_strtod_l+0x924>
 8007ab2:	033b      	lsls	r3, r7, #12
 8007ab4:	d000      	beq.n	8007ab8 <_strtod_l+0x814>
 8007ab6:	e087      	b.n	8007bc8 <_strtod_l+0x924>
 8007ab8:	22d6      	movs	r2, #214	; 0xd6
 8007aba:	4b47      	ldr	r3, [pc, #284]	; (8007bd8 <_strtod_l+0x934>)
 8007abc:	04d2      	lsls	r2, r2, #19
 8007abe:	403b      	ands	r3, r7
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d800      	bhi.n	8007ac6 <_strtod_l+0x822>
 8007ac4:	e080      	b.n	8007bc8 <_strtod_l+0x924>
 8007ac6:	9b06      	ldr	r3, [sp, #24]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	930a      	str	r3, [sp, #40]	; 0x28
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d104      	bne.n	8007ada <_strtod_l+0x836>
 8007ad0:	9b06      	ldr	r3, [sp, #24]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	930a      	str	r3, [sp, #40]	; 0x28
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	dd76      	ble.n	8007bc8 <_strtod_l+0x924>
 8007ada:	9906      	ldr	r1, [sp, #24]
 8007adc:	2201      	movs	r2, #1
 8007ade:	9805      	ldr	r0, [sp, #20]
 8007ae0:	f001 ff3e 	bl	8009960 <__lshift>
 8007ae4:	9907      	ldr	r1, [sp, #28]
 8007ae6:	9006      	str	r0, [sp, #24]
 8007ae8:	f001 ffa8 	bl	8009a3c <__mcmp>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	dd6b      	ble.n	8007bc8 <_strtod_l+0x924>
 8007af0:	9908      	ldr	r1, [sp, #32]
 8007af2:	003b      	movs	r3, r7
 8007af4:	4a38      	ldr	r2, [pc, #224]	; (8007bd8 <_strtod_l+0x934>)
 8007af6:	2900      	cmp	r1, #0
 8007af8:	d100      	bne.n	8007afc <_strtod_l+0x858>
 8007afa:	e092      	b.n	8007c22 <_strtod_l+0x97e>
 8007afc:	0011      	movs	r1, r2
 8007afe:	20d6      	movs	r0, #214	; 0xd6
 8007b00:	4039      	ands	r1, r7
 8007b02:	04c0      	lsls	r0, r0, #19
 8007b04:	4281      	cmp	r1, r0
 8007b06:	dd00      	ble.n	8007b0a <_strtod_l+0x866>
 8007b08:	e08b      	b.n	8007c22 <_strtod_l+0x97e>
 8007b0a:	23dc      	movs	r3, #220	; 0xdc
 8007b0c:	049b      	lsls	r3, r3, #18
 8007b0e:	4299      	cmp	r1, r3
 8007b10:	dc00      	bgt.n	8007b14 <_strtod_l+0x870>
 8007b12:	e6a4      	b.n	800785e <_strtod_l+0x5ba>
 8007b14:	0030      	movs	r0, r6
 8007b16:	0039      	movs	r1, r7
 8007b18:	2200      	movs	r2, #0
 8007b1a:	4b30      	ldr	r3, [pc, #192]	; (8007bdc <_strtod_l+0x938>)
 8007b1c:	f7f9 ff96 	bl	8001a4c <__aeabi_dmul>
 8007b20:	0006      	movs	r6, r0
 8007b22:	000f      	movs	r7, r1
 8007b24:	4308      	orrs	r0, r1
 8007b26:	d000      	beq.n	8007b2a <_strtod_l+0x886>
 8007b28:	e62f      	b.n	800778a <_strtod_l+0x4e6>
 8007b2a:	2322      	movs	r3, #34	; 0x22
 8007b2c:	9a05      	ldr	r2, [sp, #20]
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	e62b      	b.n	800778a <_strtod_l+0x4e6>
 8007b32:	234b      	movs	r3, #75	; 0x4b
 8007b34:	1a9a      	subs	r2, r3, r2
 8007b36:	3b4c      	subs	r3, #76	; 0x4c
 8007b38:	4093      	lsls	r3, r2
 8007b3a:	4019      	ands	r1, r3
 8007b3c:	000f      	movs	r7, r1
 8007b3e:	e6e0      	b.n	8007902 <_strtod_l+0x65e>
 8007b40:	2201      	movs	r2, #1
 8007b42:	4252      	negs	r2, r2
 8007b44:	409a      	lsls	r2, r3
 8007b46:	4016      	ands	r6, r2
 8007b48:	e6db      	b.n	8007902 <_strtod_l+0x65e>
 8007b4a:	4925      	ldr	r1, [pc, #148]	; (8007be0 <_strtod_l+0x93c>)
 8007b4c:	1acb      	subs	r3, r1, r3
 8007b4e:	0001      	movs	r1, r0
 8007b50:	4099      	lsls	r1, r3
 8007b52:	9110      	str	r1, [sp, #64]	; 0x40
 8007b54:	e741      	b.n	80079da <_strtod_l+0x736>
 8007b56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b58:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007b5a:	9805      	ldr	r0, [sp, #20]
 8007b5c:	f001 ff00 	bl	8009960 <__lshift>
 8007b60:	9020      	str	r0, [sp, #128]	; 0x80
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d000      	beq.n	8007b68 <_strtod_l+0x8c4>
 8007b66:	e76c      	b.n	8007a42 <_strtod_l+0x79e>
 8007b68:	e606      	b.n	8007778 <_strtod_l+0x4d4>
 8007b6a:	970c      	str	r7, [sp, #48]	; 0x30
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	d176      	bne.n	8007c5e <_strtod_l+0x9ba>
 8007b70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b72:	033b      	lsls	r3, r7, #12
 8007b74:	0b1b      	lsrs	r3, r3, #12
 8007b76:	2a00      	cmp	r2, #0
 8007b78:	d038      	beq.n	8007bec <_strtod_l+0x948>
 8007b7a:	4a1a      	ldr	r2, [pc, #104]	; (8007be4 <_strtod_l+0x940>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d138      	bne.n	8007bf2 <_strtod_l+0x94e>
 8007b80:	2201      	movs	r2, #1
 8007b82:	9b08      	ldr	r3, [sp, #32]
 8007b84:	4252      	negs	r2, r2
 8007b86:	0031      	movs	r1, r6
 8007b88:	0010      	movs	r0, r2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00b      	beq.n	8007ba6 <_strtod_l+0x902>
 8007b8e:	24d4      	movs	r4, #212	; 0xd4
 8007b90:	4b11      	ldr	r3, [pc, #68]	; (8007bd8 <_strtod_l+0x934>)
 8007b92:	0010      	movs	r0, r2
 8007b94:	403b      	ands	r3, r7
 8007b96:	04e4      	lsls	r4, r4, #19
 8007b98:	42a3      	cmp	r3, r4
 8007b9a:	d804      	bhi.n	8007ba6 <_strtod_l+0x902>
 8007b9c:	306c      	adds	r0, #108	; 0x6c
 8007b9e:	0d1b      	lsrs	r3, r3, #20
 8007ba0:	1ac3      	subs	r3, r0, r3
 8007ba2:	409a      	lsls	r2, r3
 8007ba4:	0010      	movs	r0, r2
 8007ba6:	4281      	cmp	r1, r0
 8007ba8:	d123      	bne.n	8007bf2 <_strtod_l+0x94e>
 8007baa:	4b0f      	ldr	r3, [pc, #60]	; (8007be8 <_strtod_l+0x944>)
 8007bac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d102      	bne.n	8007bb8 <_strtod_l+0x914>
 8007bb2:	1c4b      	adds	r3, r1, #1
 8007bb4:	d100      	bne.n	8007bb8 <_strtod_l+0x914>
 8007bb6:	e5df      	b.n	8007778 <_strtod_l+0x4d4>
 8007bb8:	4b07      	ldr	r3, [pc, #28]	; (8007bd8 <_strtod_l+0x934>)
 8007bba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bbc:	2600      	movs	r6, #0
 8007bbe:	401a      	ands	r2, r3
 8007bc0:	0013      	movs	r3, r2
 8007bc2:	2280      	movs	r2, #128	; 0x80
 8007bc4:	0352      	lsls	r2, r2, #13
 8007bc6:	189f      	adds	r7, r3, r2
 8007bc8:	9b08      	ldr	r3, [sp, #32]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1a2      	bne.n	8007b14 <_strtod_l+0x870>
 8007bce:	e5dc      	b.n	800778a <_strtod_l+0x4e6>
 8007bd0:	0800b198 	.word	0x0800b198
 8007bd4:	fffffc02 	.word	0xfffffc02
 8007bd8:	7ff00000 	.word	0x7ff00000
 8007bdc:	39500000 	.word	0x39500000
 8007be0:	fffffbe2 	.word	0xfffffbe2
 8007be4:	000fffff 	.word	0x000fffff
 8007be8:	7fefffff 	.word	0x7fefffff
 8007bec:	4333      	orrs	r3, r6
 8007bee:	d100      	bne.n	8007bf2 <_strtod_l+0x94e>
 8007bf0:	e77e      	b.n	8007af0 <_strtod_l+0x84c>
 8007bf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d01d      	beq.n	8007c34 <_strtod_l+0x990>
 8007bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bfa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007bfc:	4213      	tst	r3, r2
 8007bfe:	d0e3      	beq.n	8007bc8 <_strtod_l+0x924>
 8007c00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c02:	0030      	movs	r0, r6
 8007c04:	0039      	movs	r1, r7
 8007c06:	9a08      	ldr	r2, [sp, #32]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d017      	beq.n	8007c3c <_strtod_l+0x998>
 8007c0c:	f7ff fb32 	bl	8007274 <sulp>
 8007c10:	0002      	movs	r2, r0
 8007c12:	000b      	movs	r3, r1
 8007c14:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007c16:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007c18:	f7f8 ffda 	bl	8000bd0 <__aeabi_dadd>
 8007c1c:	0006      	movs	r6, r0
 8007c1e:	000f      	movs	r7, r1
 8007c20:	e7d2      	b.n	8007bc8 <_strtod_l+0x924>
 8007c22:	2601      	movs	r6, #1
 8007c24:	4013      	ands	r3, r2
 8007c26:	4a99      	ldr	r2, [pc, #612]	; (8007e8c <_strtod_l+0xbe8>)
 8007c28:	4276      	negs	r6, r6
 8007c2a:	189b      	adds	r3, r3, r2
 8007c2c:	4a98      	ldr	r2, [pc, #608]	; (8007e90 <_strtod_l+0xbec>)
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	0017      	movs	r7, r2
 8007c32:	e7c9      	b.n	8007bc8 <_strtod_l+0x924>
 8007c34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c36:	4233      	tst	r3, r6
 8007c38:	d0c6      	beq.n	8007bc8 <_strtod_l+0x924>
 8007c3a:	e7e1      	b.n	8007c00 <_strtod_l+0x95c>
 8007c3c:	f7ff fb1a 	bl	8007274 <sulp>
 8007c40:	0002      	movs	r2, r0
 8007c42:	000b      	movs	r3, r1
 8007c44:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007c46:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007c48:	f7fa f96c 	bl	8001f24 <__aeabi_dsub>
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	2300      	movs	r3, #0
 8007c50:	0006      	movs	r6, r0
 8007c52:	000f      	movs	r7, r1
 8007c54:	f7f8 fbfa 	bl	800044c <__aeabi_dcmpeq>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d0b5      	beq.n	8007bc8 <_strtod_l+0x924>
 8007c5c:	e5ff      	b.n	800785e <_strtod_l+0x5ba>
 8007c5e:	9907      	ldr	r1, [sp, #28]
 8007c60:	9806      	ldr	r0, [sp, #24]
 8007c62:	f002 f877 	bl	8009d54 <__ratio>
 8007c66:	2380      	movs	r3, #128	; 0x80
 8007c68:	2200      	movs	r2, #0
 8007c6a:	05db      	lsls	r3, r3, #23
 8007c6c:	0004      	movs	r4, r0
 8007c6e:	000d      	movs	r5, r1
 8007c70:	f7f8 fbfc 	bl	800046c <__aeabi_dcmple>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d075      	beq.n	8007d64 <_strtod_l+0xac0>
 8007c78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d047      	beq.n	8007d0e <_strtod_l+0xa6a>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	4c84      	ldr	r4, [pc, #528]	; (8007e94 <_strtod_l+0xbf0>)
 8007c82:	2500      	movs	r5, #0
 8007c84:	9310      	str	r3, [sp, #64]	; 0x40
 8007c86:	9411      	str	r4, [sp, #68]	; 0x44
 8007c88:	4c82      	ldr	r4, [pc, #520]	; (8007e94 <_strtod_l+0xbf0>)
 8007c8a:	4a83      	ldr	r2, [pc, #524]	; (8007e98 <_strtod_l+0xbf4>)
 8007c8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c8e:	4013      	ands	r3, r2
 8007c90:	9314      	str	r3, [sp, #80]	; 0x50
 8007c92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c94:	4b81      	ldr	r3, [pc, #516]	; (8007e9c <_strtod_l+0xbf8>)
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d000      	beq.n	8007c9c <_strtod_l+0x9f8>
 8007c9a:	e0ac      	b.n	8007df6 <_strtod_l+0xb52>
 8007c9c:	4a80      	ldr	r2, [pc, #512]	; (8007ea0 <_strtod_l+0xbfc>)
 8007c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ca0:	4694      	mov	ip, r2
 8007ca2:	4463      	add	r3, ip
 8007ca4:	001f      	movs	r7, r3
 8007ca6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007caa:	0030      	movs	r0, r6
 8007cac:	0039      	movs	r1, r7
 8007cae:	920c      	str	r2, [sp, #48]	; 0x30
 8007cb0:	930d      	str	r3, [sp, #52]	; 0x34
 8007cb2:	f001 ff77 	bl	8009ba4 <__ulp>
 8007cb6:	0002      	movs	r2, r0
 8007cb8:	000b      	movs	r3, r1
 8007cba:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007cbc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007cbe:	f7f9 fec5 	bl	8001a4c <__aeabi_dmul>
 8007cc2:	0032      	movs	r2, r6
 8007cc4:	003b      	movs	r3, r7
 8007cc6:	f7f8 ff83 	bl	8000bd0 <__aeabi_dadd>
 8007cca:	4a73      	ldr	r2, [pc, #460]	; (8007e98 <_strtod_l+0xbf4>)
 8007ccc:	4b75      	ldr	r3, [pc, #468]	; (8007ea4 <_strtod_l+0xc00>)
 8007cce:	0006      	movs	r6, r0
 8007cd0:	400a      	ands	r2, r1
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d95e      	bls.n	8007d94 <_strtod_l+0xaf0>
 8007cd6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cd8:	4b73      	ldr	r3, [pc, #460]	; (8007ea8 <_strtod_l+0xc04>)
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d103      	bne.n	8007ce6 <_strtod_l+0xa42>
 8007cde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	d100      	bne.n	8007ce6 <_strtod_l+0xa42>
 8007ce4:	e548      	b.n	8007778 <_strtod_l+0x4d4>
 8007ce6:	2601      	movs	r6, #1
 8007ce8:	4f6f      	ldr	r7, [pc, #444]	; (8007ea8 <_strtod_l+0xc04>)
 8007cea:	4276      	negs	r6, r6
 8007cec:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007cee:	9805      	ldr	r0, [sp, #20]
 8007cf0:	f001 fc18 	bl	8009524 <_Bfree>
 8007cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cf6:	9805      	ldr	r0, [sp, #20]
 8007cf8:	f001 fc14 	bl	8009524 <_Bfree>
 8007cfc:	9907      	ldr	r1, [sp, #28]
 8007cfe:	9805      	ldr	r0, [sp, #20]
 8007d00:	f001 fc10 	bl	8009524 <_Bfree>
 8007d04:	9906      	ldr	r1, [sp, #24]
 8007d06:	9805      	ldr	r0, [sp, #20]
 8007d08:	f001 fc0c 	bl	8009524 <_Bfree>
 8007d0c:	e61d      	b.n	800794a <_strtod_l+0x6a6>
 8007d0e:	2e00      	cmp	r6, #0
 8007d10:	d11c      	bne.n	8007d4c <_strtod_l+0xaa8>
 8007d12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d14:	031b      	lsls	r3, r3, #12
 8007d16:	d11f      	bne.n	8007d58 <_strtod_l+0xab4>
 8007d18:	2200      	movs	r2, #0
 8007d1a:	0020      	movs	r0, r4
 8007d1c:	0029      	movs	r1, r5
 8007d1e:	4b5d      	ldr	r3, [pc, #372]	; (8007e94 <_strtod_l+0xbf0>)
 8007d20:	f7f8 fb9a 	bl	8000458 <__aeabi_dcmplt>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d11a      	bne.n	8007d5e <_strtod_l+0xaba>
 8007d28:	0020      	movs	r0, r4
 8007d2a:	0029      	movs	r1, r5
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	4b5f      	ldr	r3, [pc, #380]	; (8007eac <_strtod_l+0xc08>)
 8007d30:	f7f9 fe8c 	bl	8001a4c <__aeabi_dmul>
 8007d34:	0005      	movs	r5, r0
 8007d36:	000c      	movs	r4, r1
 8007d38:	2380      	movs	r3, #128	; 0x80
 8007d3a:	061b      	lsls	r3, r3, #24
 8007d3c:	18e3      	adds	r3, r4, r3
 8007d3e:	951c      	str	r5, [sp, #112]	; 0x70
 8007d40:	931d      	str	r3, [sp, #116]	; 0x74
 8007d42:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007d44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d46:	9210      	str	r2, [sp, #64]	; 0x40
 8007d48:	9311      	str	r3, [sp, #68]	; 0x44
 8007d4a:	e79e      	b.n	8007c8a <_strtod_l+0x9e6>
 8007d4c:	2e01      	cmp	r6, #1
 8007d4e:	d103      	bne.n	8007d58 <_strtod_l+0xab4>
 8007d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d100      	bne.n	8007d58 <_strtod_l+0xab4>
 8007d56:	e582      	b.n	800785e <_strtod_l+0x5ba>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	4c55      	ldr	r4, [pc, #340]	; (8007eb0 <_strtod_l+0xc0c>)
 8007d5c:	e791      	b.n	8007c82 <_strtod_l+0x9de>
 8007d5e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d60:	4c52      	ldr	r4, [pc, #328]	; (8007eac <_strtod_l+0xc08>)
 8007d62:	e7e9      	b.n	8007d38 <_strtod_l+0xa94>
 8007d64:	2200      	movs	r2, #0
 8007d66:	0020      	movs	r0, r4
 8007d68:	0029      	movs	r1, r5
 8007d6a:	4b50      	ldr	r3, [pc, #320]	; (8007eac <_strtod_l+0xc08>)
 8007d6c:	f7f9 fe6e 	bl	8001a4c <__aeabi_dmul>
 8007d70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d72:	0005      	movs	r5, r0
 8007d74:	000b      	movs	r3, r1
 8007d76:	000c      	movs	r4, r1
 8007d78:	2a00      	cmp	r2, #0
 8007d7a:	d107      	bne.n	8007d8c <_strtod_l+0xae8>
 8007d7c:	2280      	movs	r2, #128	; 0x80
 8007d7e:	0612      	lsls	r2, r2, #24
 8007d80:	188b      	adds	r3, r1, r2
 8007d82:	9016      	str	r0, [sp, #88]	; 0x58
 8007d84:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d86:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007d88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d8a:	e7dc      	b.n	8007d46 <_strtod_l+0xaa2>
 8007d8c:	0002      	movs	r2, r0
 8007d8e:	9216      	str	r2, [sp, #88]	; 0x58
 8007d90:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d92:	e7f8      	b.n	8007d86 <_strtod_l+0xae2>
 8007d94:	23d4      	movs	r3, #212	; 0xd4
 8007d96:	049b      	lsls	r3, r3, #18
 8007d98:	18cf      	adds	r7, r1, r3
 8007d9a:	9b08      	ldr	r3, [sp, #32]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1a5      	bne.n	8007cec <_strtod_l+0xa48>
 8007da0:	4b3d      	ldr	r3, [pc, #244]	; (8007e98 <_strtod_l+0xbf4>)
 8007da2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007da4:	403b      	ands	r3, r7
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d1a0      	bne.n	8007cec <_strtod_l+0xa48>
 8007daa:	0028      	movs	r0, r5
 8007dac:	0021      	movs	r1, r4
 8007dae:	f7f8 fb99 	bl	80004e4 <__aeabi_d2lz>
 8007db2:	f7f8 fbd3 	bl	800055c <__aeabi_l2d>
 8007db6:	0002      	movs	r2, r0
 8007db8:	000b      	movs	r3, r1
 8007dba:	0028      	movs	r0, r5
 8007dbc:	0021      	movs	r1, r4
 8007dbe:	f7fa f8b1 	bl	8001f24 <__aeabi_dsub>
 8007dc2:	033b      	lsls	r3, r7, #12
 8007dc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dc6:	0b1b      	lsrs	r3, r3, #12
 8007dc8:	4333      	orrs	r3, r6
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	0004      	movs	r4, r0
 8007dce:	000d      	movs	r5, r1
 8007dd0:	4a38      	ldr	r2, [pc, #224]	; (8007eb4 <_strtod_l+0xc10>)
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d055      	beq.n	8007e82 <_strtod_l+0xbde>
 8007dd6:	4b38      	ldr	r3, [pc, #224]	; (8007eb8 <_strtod_l+0xc14>)
 8007dd8:	f7f8 fb3e 	bl	8000458 <__aeabi_dcmplt>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	d000      	beq.n	8007de2 <_strtod_l+0xb3e>
 8007de0:	e4d3      	b.n	800778a <_strtod_l+0x4e6>
 8007de2:	0020      	movs	r0, r4
 8007de4:	0029      	movs	r1, r5
 8007de6:	4a35      	ldr	r2, [pc, #212]	; (8007ebc <_strtod_l+0xc18>)
 8007de8:	4b30      	ldr	r3, [pc, #192]	; (8007eac <_strtod_l+0xc08>)
 8007dea:	f7f8 fb49 	bl	8000480 <__aeabi_dcmpgt>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	d100      	bne.n	8007df4 <_strtod_l+0xb50>
 8007df2:	e77b      	b.n	8007cec <_strtod_l+0xa48>
 8007df4:	e4c9      	b.n	800778a <_strtod_l+0x4e6>
 8007df6:	9b08      	ldr	r3, [sp, #32]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d02b      	beq.n	8007e54 <_strtod_l+0xbb0>
 8007dfc:	23d4      	movs	r3, #212	; 0xd4
 8007dfe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e00:	04db      	lsls	r3, r3, #19
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d826      	bhi.n	8007e54 <_strtod_l+0xbb0>
 8007e06:	0028      	movs	r0, r5
 8007e08:	0021      	movs	r1, r4
 8007e0a:	4a2d      	ldr	r2, [pc, #180]	; (8007ec0 <_strtod_l+0xc1c>)
 8007e0c:	4b2d      	ldr	r3, [pc, #180]	; (8007ec4 <_strtod_l+0xc20>)
 8007e0e:	f7f8 fb2d 	bl	800046c <__aeabi_dcmple>
 8007e12:	2800      	cmp	r0, #0
 8007e14:	d017      	beq.n	8007e46 <_strtod_l+0xba2>
 8007e16:	0028      	movs	r0, r5
 8007e18:	0021      	movs	r1, r4
 8007e1a:	f7f8 fb45 	bl	80004a8 <__aeabi_d2uiz>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d100      	bne.n	8007e24 <_strtod_l+0xb80>
 8007e22:	3001      	adds	r0, #1
 8007e24:	f7fa fc94 	bl	8002750 <__aeabi_ui2d>
 8007e28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e2a:	0005      	movs	r5, r0
 8007e2c:	000b      	movs	r3, r1
 8007e2e:	000c      	movs	r4, r1
 8007e30:	2a00      	cmp	r2, #0
 8007e32:	d122      	bne.n	8007e7a <_strtod_l+0xbd6>
 8007e34:	2280      	movs	r2, #128	; 0x80
 8007e36:	0612      	lsls	r2, r2, #24
 8007e38:	188b      	adds	r3, r1, r2
 8007e3a:	9018      	str	r0, [sp, #96]	; 0x60
 8007e3c:	9319      	str	r3, [sp, #100]	; 0x64
 8007e3e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007e40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e42:	9210      	str	r2, [sp, #64]	; 0x40
 8007e44:	9311      	str	r3, [sp, #68]	; 0x44
 8007e46:	22d6      	movs	r2, #214	; 0xd6
 8007e48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e4a:	04d2      	lsls	r2, r2, #19
 8007e4c:	189b      	adds	r3, r3, r2
 8007e4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e50:	1a9b      	subs	r3, r3, r2
 8007e52:	9311      	str	r3, [sp, #68]	; 0x44
 8007e54:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007e56:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007e58:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007e5a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007e5c:	f001 fea2 	bl	8009ba4 <__ulp>
 8007e60:	0002      	movs	r2, r0
 8007e62:	000b      	movs	r3, r1
 8007e64:	0030      	movs	r0, r6
 8007e66:	0039      	movs	r1, r7
 8007e68:	f7f9 fdf0 	bl	8001a4c <__aeabi_dmul>
 8007e6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e70:	f7f8 feae 	bl	8000bd0 <__aeabi_dadd>
 8007e74:	0006      	movs	r6, r0
 8007e76:	000f      	movs	r7, r1
 8007e78:	e78f      	b.n	8007d9a <_strtod_l+0xaf6>
 8007e7a:	0002      	movs	r2, r0
 8007e7c:	9218      	str	r2, [sp, #96]	; 0x60
 8007e7e:	9319      	str	r3, [sp, #100]	; 0x64
 8007e80:	e7dd      	b.n	8007e3e <_strtod_l+0xb9a>
 8007e82:	4b11      	ldr	r3, [pc, #68]	; (8007ec8 <_strtod_l+0xc24>)
 8007e84:	f7f8 fae8 	bl	8000458 <__aeabi_dcmplt>
 8007e88:	e7b1      	b.n	8007dee <_strtod_l+0xb4a>
 8007e8a:	46c0      	nop			; (mov r8, r8)
 8007e8c:	fff00000 	.word	0xfff00000
 8007e90:	000fffff 	.word	0x000fffff
 8007e94:	3ff00000 	.word	0x3ff00000
 8007e98:	7ff00000 	.word	0x7ff00000
 8007e9c:	7fe00000 	.word	0x7fe00000
 8007ea0:	fcb00000 	.word	0xfcb00000
 8007ea4:	7c9fffff 	.word	0x7c9fffff
 8007ea8:	7fefffff 	.word	0x7fefffff
 8007eac:	3fe00000 	.word	0x3fe00000
 8007eb0:	bff00000 	.word	0xbff00000
 8007eb4:	94a03595 	.word	0x94a03595
 8007eb8:	3fdfffff 	.word	0x3fdfffff
 8007ebc:	35afe535 	.word	0x35afe535
 8007ec0:	ffc00000 	.word	0xffc00000
 8007ec4:	41dfffff 	.word	0x41dfffff
 8007ec8:	3fcfffff 	.word	0x3fcfffff

08007ecc <_strtod_r>:
 8007ecc:	b510      	push	{r4, lr}
 8007ece:	4b02      	ldr	r3, [pc, #8]	; (8007ed8 <_strtod_r+0xc>)
 8007ed0:	f7ff f9e8 	bl	80072a4 <_strtod_l>
 8007ed4:	bd10      	pop	{r4, pc}
 8007ed6:	46c0      	nop			; (mov r8, r8)
 8007ed8:	20000074 	.word	0x20000074

08007edc <_strtol_l.constprop.0>:
 8007edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ede:	b087      	sub	sp, #28
 8007ee0:	001e      	movs	r6, r3
 8007ee2:	9005      	str	r0, [sp, #20]
 8007ee4:	9101      	str	r1, [sp, #4]
 8007ee6:	9202      	str	r2, [sp, #8]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d045      	beq.n	8007f78 <_strtol_l.constprop.0+0x9c>
 8007eec:	000b      	movs	r3, r1
 8007eee:	2e24      	cmp	r6, #36	; 0x24
 8007ef0:	d842      	bhi.n	8007f78 <_strtol_l.constprop.0+0x9c>
 8007ef2:	4a3f      	ldr	r2, [pc, #252]	; (8007ff0 <_strtol_l.constprop.0+0x114>)
 8007ef4:	2108      	movs	r1, #8
 8007ef6:	4694      	mov	ip, r2
 8007ef8:	001a      	movs	r2, r3
 8007efa:	4660      	mov	r0, ip
 8007efc:	7814      	ldrb	r4, [r2, #0]
 8007efe:	3301      	adds	r3, #1
 8007f00:	5d00      	ldrb	r0, [r0, r4]
 8007f02:	001d      	movs	r5, r3
 8007f04:	0007      	movs	r7, r0
 8007f06:	400f      	ands	r7, r1
 8007f08:	4208      	tst	r0, r1
 8007f0a:	d1f5      	bne.n	8007ef8 <_strtol_l.constprop.0+0x1c>
 8007f0c:	2c2d      	cmp	r4, #45	; 0x2d
 8007f0e:	d13a      	bne.n	8007f86 <_strtol_l.constprop.0+0xaa>
 8007f10:	2701      	movs	r7, #1
 8007f12:	781c      	ldrb	r4, [r3, #0]
 8007f14:	1c95      	adds	r5, r2, #2
 8007f16:	2e00      	cmp	r6, #0
 8007f18:	d065      	beq.n	8007fe6 <_strtol_l.constprop.0+0x10a>
 8007f1a:	2e10      	cmp	r6, #16
 8007f1c:	d109      	bne.n	8007f32 <_strtol_l.constprop.0+0x56>
 8007f1e:	2c30      	cmp	r4, #48	; 0x30
 8007f20:	d107      	bne.n	8007f32 <_strtol_l.constprop.0+0x56>
 8007f22:	2220      	movs	r2, #32
 8007f24:	782b      	ldrb	r3, [r5, #0]
 8007f26:	4393      	bics	r3, r2
 8007f28:	2b58      	cmp	r3, #88	; 0x58
 8007f2a:	d157      	bne.n	8007fdc <_strtol_l.constprop.0+0x100>
 8007f2c:	2610      	movs	r6, #16
 8007f2e:	786c      	ldrb	r4, [r5, #1]
 8007f30:	3502      	adds	r5, #2
 8007f32:	4b30      	ldr	r3, [pc, #192]	; (8007ff4 <_strtol_l.constprop.0+0x118>)
 8007f34:	0031      	movs	r1, r6
 8007f36:	18fb      	adds	r3, r7, r3
 8007f38:	0018      	movs	r0, r3
 8007f3a:	9303      	str	r3, [sp, #12]
 8007f3c:	f7f8 f986 	bl	800024c <__aeabi_uidivmod>
 8007f40:	2300      	movs	r3, #0
 8007f42:	2201      	movs	r2, #1
 8007f44:	4684      	mov	ip, r0
 8007f46:	0018      	movs	r0, r3
 8007f48:	9104      	str	r1, [sp, #16]
 8007f4a:	4252      	negs	r2, r2
 8007f4c:	0021      	movs	r1, r4
 8007f4e:	3930      	subs	r1, #48	; 0x30
 8007f50:	2909      	cmp	r1, #9
 8007f52:	d81d      	bhi.n	8007f90 <_strtol_l.constprop.0+0xb4>
 8007f54:	000c      	movs	r4, r1
 8007f56:	42a6      	cmp	r6, r4
 8007f58:	dd28      	ble.n	8007fac <_strtol_l.constprop.0+0xd0>
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	db24      	blt.n	8007fa8 <_strtol_l.constprop.0+0xcc>
 8007f5e:	0013      	movs	r3, r2
 8007f60:	4584      	cmp	ip, r0
 8007f62:	d306      	bcc.n	8007f72 <_strtol_l.constprop.0+0x96>
 8007f64:	d102      	bne.n	8007f6c <_strtol_l.constprop.0+0x90>
 8007f66:	9904      	ldr	r1, [sp, #16]
 8007f68:	42a1      	cmp	r1, r4
 8007f6a:	db02      	blt.n	8007f72 <_strtol_l.constprop.0+0x96>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	4370      	muls	r0, r6
 8007f70:	1820      	adds	r0, r4, r0
 8007f72:	782c      	ldrb	r4, [r5, #0]
 8007f74:	3501      	adds	r5, #1
 8007f76:	e7e9      	b.n	8007f4c <_strtol_l.constprop.0+0x70>
 8007f78:	f7fe fab0 	bl	80064dc <__errno>
 8007f7c:	2316      	movs	r3, #22
 8007f7e:	6003      	str	r3, [r0, #0]
 8007f80:	2000      	movs	r0, #0
 8007f82:	b007      	add	sp, #28
 8007f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f86:	2c2b      	cmp	r4, #43	; 0x2b
 8007f88:	d1c5      	bne.n	8007f16 <_strtol_l.constprop.0+0x3a>
 8007f8a:	781c      	ldrb	r4, [r3, #0]
 8007f8c:	1c95      	adds	r5, r2, #2
 8007f8e:	e7c2      	b.n	8007f16 <_strtol_l.constprop.0+0x3a>
 8007f90:	0021      	movs	r1, r4
 8007f92:	3941      	subs	r1, #65	; 0x41
 8007f94:	2919      	cmp	r1, #25
 8007f96:	d801      	bhi.n	8007f9c <_strtol_l.constprop.0+0xc0>
 8007f98:	3c37      	subs	r4, #55	; 0x37
 8007f9a:	e7dc      	b.n	8007f56 <_strtol_l.constprop.0+0x7a>
 8007f9c:	0021      	movs	r1, r4
 8007f9e:	3961      	subs	r1, #97	; 0x61
 8007fa0:	2919      	cmp	r1, #25
 8007fa2:	d803      	bhi.n	8007fac <_strtol_l.constprop.0+0xd0>
 8007fa4:	3c57      	subs	r4, #87	; 0x57
 8007fa6:	e7d6      	b.n	8007f56 <_strtol_l.constprop.0+0x7a>
 8007fa8:	0013      	movs	r3, r2
 8007faa:	e7e2      	b.n	8007f72 <_strtol_l.constprop.0+0x96>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	da09      	bge.n	8007fc4 <_strtol_l.constprop.0+0xe8>
 8007fb0:	2322      	movs	r3, #34	; 0x22
 8007fb2:	9a05      	ldr	r2, [sp, #20]
 8007fb4:	9803      	ldr	r0, [sp, #12]
 8007fb6:	6013      	str	r3, [r2, #0]
 8007fb8:	9b02      	ldr	r3, [sp, #8]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d0e1      	beq.n	8007f82 <_strtol_l.constprop.0+0xa6>
 8007fbe:	1e6b      	subs	r3, r5, #1
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	e007      	b.n	8007fd4 <_strtol_l.constprop.0+0xf8>
 8007fc4:	2f00      	cmp	r7, #0
 8007fc6:	d000      	beq.n	8007fca <_strtol_l.constprop.0+0xee>
 8007fc8:	4240      	negs	r0, r0
 8007fca:	9a02      	ldr	r2, [sp, #8]
 8007fcc:	2a00      	cmp	r2, #0
 8007fce:	d0d8      	beq.n	8007f82 <_strtol_l.constprop.0+0xa6>
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1f4      	bne.n	8007fbe <_strtol_l.constprop.0+0xe2>
 8007fd4:	9b02      	ldr	r3, [sp, #8]
 8007fd6:	9a01      	ldr	r2, [sp, #4]
 8007fd8:	601a      	str	r2, [r3, #0]
 8007fda:	e7d2      	b.n	8007f82 <_strtol_l.constprop.0+0xa6>
 8007fdc:	2430      	movs	r4, #48	; 0x30
 8007fde:	2e00      	cmp	r6, #0
 8007fe0:	d1a7      	bne.n	8007f32 <_strtol_l.constprop.0+0x56>
 8007fe2:	3608      	adds	r6, #8
 8007fe4:	e7a5      	b.n	8007f32 <_strtol_l.constprop.0+0x56>
 8007fe6:	2c30      	cmp	r4, #48	; 0x30
 8007fe8:	d09b      	beq.n	8007f22 <_strtol_l.constprop.0+0x46>
 8007fea:	260a      	movs	r6, #10
 8007fec:	e7a1      	b.n	8007f32 <_strtol_l.constprop.0+0x56>
 8007fee:	46c0      	nop			; (mov r8, r8)
 8007ff0:	0800b1c1 	.word	0x0800b1c1
 8007ff4:	7fffffff 	.word	0x7fffffff

08007ff8 <_strtol_r>:
 8007ff8:	b510      	push	{r4, lr}
 8007ffa:	f7ff ff6f 	bl	8007edc <_strtol_l.constprop.0>
 8007ffe:	bd10      	pop	{r4, pc}

08008000 <quorem>:
 8008000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008002:	0006      	movs	r6, r0
 8008004:	690b      	ldr	r3, [r1, #16]
 8008006:	6932      	ldr	r2, [r6, #16]
 8008008:	b087      	sub	sp, #28
 800800a:	2000      	movs	r0, #0
 800800c:	9103      	str	r1, [sp, #12]
 800800e:	429a      	cmp	r2, r3
 8008010:	db65      	blt.n	80080de <quorem+0xde>
 8008012:	3b01      	subs	r3, #1
 8008014:	009c      	lsls	r4, r3, #2
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	000b      	movs	r3, r1
 800801a:	3314      	adds	r3, #20
 800801c:	9305      	str	r3, [sp, #20]
 800801e:	191b      	adds	r3, r3, r4
 8008020:	9304      	str	r3, [sp, #16]
 8008022:	0033      	movs	r3, r6
 8008024:	3314      	adds	r3, #20
 8008026:	9302      	str	r3, [sp, #8]
 8008028:	191c      	adds	r4, r3, r4
 800802a:	9b04      	ldr	r3, [sp, #16]
 800802c:	6827      	ldr	r7, [r4, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	0038      	movs	r0, r7
 8008032:	1c5d      	adds	r5, r3, #1
 8008034:	0029      	movs	r1, r5
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	f7f8 f882 	bl	8000140 <__udivsi3>
 800803c:	9001      	str	r0, [sp, #4]
 800803e:	42af      	cmp	r7, r5
 8008040:	d324      	bcc.n	800808c <quorem+0x8c>
 8008042:	2500      	movs	r5, #0
 8008044:	46ac      	mov	ip, r5
 8008046:	9802      	ldr	r0, [sp, #8]
 8008048:	9f05      	ldr	r7, [sp, #20]
 800804a:	cf08      	ldmia	r7!, {r3}
 800804c:	9a01      	ldr	r2, [sp, #4]
 800804e:	b299      	uxth	r1, r3
 8008050:	4351      	muls	r1, r2
 8008052:	0c1b      	lsrs	r3, r3, #16
 8008054:	4353      	muls	r3, r2
 8008056:	1949      	adds	r1, r1, r5
 8008058:	0c0a      	lsrs	r2, r1, #16
 800805a:	189b      	adds	r3, r3, r2
 800805c:	6802      	ldr	r2, [r0, #0]
 800805e:	b289      	uxth	r1, r1
 8008060:	b292      	uxth	r2, r2
 8008062:	4462      	add	r2, ip
 8008064:	1a52      	subs	r2, r2, r1
 8008066:	6801      	ldr	r1, [r0, #0]
 8008068:	0c1d      	lsrs	r5, r3, #16
 800806a:	0c09      	lsrs	r1, r1, #16
 800806c:	b29b      	uxth	r3, r3
 800806e:	1acb      	subs	r3, r1, r3
 8008070:	1411      	asrs	r1, r2, #16
 8008072:	185b      	adds	r3, r3, r1
 8008074:	1419      	asrs	r1, r3, #16
 8008076:	b292      	uxth	r2, r2
 8008078:	041b      	lsls	r3, r3, #16
 800807a:	431a      	orrs	r2, r3
 800807c:	9b04      	ldr	r3, [sp, #16]
 800807e:	468c      	mov	ip, r1
 8008080:	c004      	stmia	r0!, {r2}
 8008082:	42bb      	cmp	r3, r7
 8008084:	d2e1      	bcs.n	800804a <quorem+0x4a>
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d030      	beq.n	80080ee <quorem+0xee>
 800808c:	0030      	movs	r0, r6
 800808e:	9903      	ldr	r1, [sp, #12]
 8008090:	f001 fcd4 	bl	8009a3c <__mcmp>
 8008094:	2800      	cmp	r0, #0
 8008096:	db21      	blt.n	80080dc <quorem+0xdc>
 8008098:	0030      	movs	r0, r6
 800809a:	2400      	movs	r4, #0
 800809c:	9b01      	ldr	r3, [sp, #4]
 800809e:	9903      	ldr	r1, [sp, #12]
 80080a0:	3301      	adds	r3, #1
 80080a2:	9301      	str	r3, [sp, #4]
 80080a4:	3014      	adds	r0, #20
 80080a6:	3114      	adds	r1, #20
 80080a8:	6803      	ldr	r3, [r0, #0]
 80080aa:	c920      	ldmia	r1!, {r5}
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	1914      	adds	r4, r2, r4
 80080b0:	b2aa      	uxth	r2, r5
 80080b2:	1aa2      	subs	r2, r4, r2
 80080b4:	0c1b      	lsrs	r3, r3, #16
 80080b6:	0c2d      	lsrs	r5, r5, #16
 80080b8:	1414      	asrs	r4, r2, #16
 80080ba:	1b5b      	subs	r3, r3, r5
 80080bc:	191b      	adds	r3, r3, r4
 80080be:	141c      	asrs	r4, r3, #16
 80080c0:	b292      	uxth	r2, r2
 80080c2:	041b      	lsls	r3, r3, #16
 80080c4:	4313      	orrs	r3, r2
 80080c6:	c008      	stmia	r0!, {r3}
 80080c8:	9b04      	ldr	r3, [sp, #16]
 80080ca:	428b      	cmp	r3, r1
 80080cc:	d2ec      	bcs.n	80080a8 <quorem+0xa8>
 80080ce:	9b00      	ldr	r3, [sp, #0]
 80080d0:	9a02      	ldr	r2, [sp, #8]
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	18d3      	adds	r3, r2, r3
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	2a00      	cmp	r2, #0
 80080da:	d015      	beq.n	8008108 <quorem+0x108>
 80080dc:	9801      	ldr	r0, [sp, #4]
 80080de:	b007      	add	sp, #28
 80080e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d106      	bne.n	80080f6 <quorem+0xf6>
 80080e8:	9b00      	ldr	r3, [sp, #0]
 80080ea:	3b01      	subs	r3, #1
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	9b02      	ldr	r3, [sp, #8]
 80080f0:	3c04      	subs	r4, #4
 80080f2:	42a3      	cmp	r3, r4
 80080f4:	d3f5      	bcc.n	80080e2 <quorem+0xe2>
 80080f6:	9b00      	ldr	r3, [sp, #0]
 80080f8:	6133      	str	r3, [r6, #16]
 80080fa:	e7c7      	b.n	800808c <quorem+0x8c>
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	2a00      	cmp	r2, #0
 8008100:	d106      	bne.n	8008110 <quorem+0x110>
 8008102:	9a00      	ldr	r2, [sp, #0]
 8008104:	3a01      	subs	r2, #1
 8008106:	9200      	str	r2, [sp, #0]
 8008108:	9a02      	ldr	r2, [sp, #8]
 800810a:	3b04      	subs	r3, #4
 800810c:	429a      	cmp	r2, r3
 800810e:	d3f5      	bcc.n	80080fc <quorem+0xfc>
 8008110:	9b00      	ldr	r3, [sp, #0]
 8008112:	6133      	str	r3, [r6, #16]
 8008114:	e7e2      	b.n	80080dc <quorem+0xdc>
	...

08008118 <_dtoa_r>:
 8008118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800811a:	b09d      	sub	sp, #116	; 0x74
 800811c:	9202      	str	r2, [sp, #8]
 800811e:	9303      	str	r3, [sp, #12]
 8008120:	9b02      	ldr	r3, [sp, #8]
 8008122:	9c03      	ldr	r4, [sp, #12]
 8008124:	9308      	str	r3, [sp, #32]
 8008126:	9409      	str	r4, [sp, #36]	; 0x24
 8008128:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800812a:	0007      	movs	r7, r0
 800812c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800812e:	2c00      	cmp	r4, #0
 8008130:	d10e      	bne.n	8008150 <_dtoa_r+0x38>
 8008132:	2010      	movs	r0, #16
 8008134:	f001 f982 	bl	800943c <malloc>
 8008138:	1e02      	subs	r2, r0, #0
 800813a:	6278      	str	r0, [r7, #36]	; 0x24
 800813c:	d104      	bne.n	8008148 <_dtoa_r+0x30>
 800813e:	21ea      	movs	r1, #234	; 0xea
 8008140:	4bc7      	ldr	r3, [pc, #796]	; (8008460 <_dtoa_r+0x348>)
 8008142:	48c8      	ldr	r0, [pc, #800]	; (8008464 <_dtoa_r+0x34c>)
 8008144:	f002 f91c 	bl	800a380 <__assert_func>
 8008148:	6044      	str	r4, [r0, #4]
 800814a:	6084      	str	r4, [r0, #8]
 800814c:	6004      	str	r4, [r0, #0]
 800814e:	60c4      	str	r4, [r0, #12]
 8008150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008152:	6819      	ldr	r1, [r3, #0]
 8008154:	2900      	cmp	r1, #0
 8008156:	d00a      	beq.n	800816e <_dtoa_r+0x56>
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	2301      	movs	r3, #1
 800815c:	4093      	lsls	r3, r2
 800815e:	604a      	str	r2, [r1, #4]
 8008160:	608b      	str	r3, [r1, #8]
 8008162:	0038      	movs	r0, r7
 8008164:	f001 f9de 	bl	8009524 <_Bfree>
 8008168:	2200      	movs	r2, #0
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	9b03      	ldr	r3, [sp, #12]
 8008170:	2b00      	cmp	r3, #0
 8008172:	da20      	bge.n	80081b6 <_dtoa_r+0x9e>
 8008174:	2301      	movs	r3, #1
 8008176:	602b      	str	r3, [r5, #0]
 8008178:	9b03      	ldr	r3, [sp, #12]
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	085b      	lsrs	r3, r3, #1
 800817e:	9309      	str	r3, [sp, #36]	; 0x24
 8008180:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008182:	4bb9      	ldr	r3, [pc, #740]	; (8008468 <_dtoa_r+0x350>)
 8008184:	4ab8      	ldr	r2, [pc, #736]	; (8008468 <_dtoa_r+0x350>)
 8008186:	402b      	ands	r3, r5
 8008188:	4293      	cmp	r3, r2
 800818a:	d117      	bne.n	80081bc <_dtoa_r+0xa4>
 800818c:	4bb7      	ldr	r3, [pc, #732]	; (800846c <_dtoa_r+0x354>)
 800818e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008190:	0328      	lsls	r0, r5, #12
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	9b02      	ldr	r3, [sp, #8]
 8008196:	0b00      	lsrs	r0, r0, #12
 8008198:	4318      	orrs	r0, r3
 800819a:	d101      	bne.n	80081a0 <_dtoa_r+0x88>
 800819c:	f000 fdbf 	bl	8008d1e <_dtoa_r+0xc06>
 80081a0:	48b3      	ldr	r0, [pc, #716]	; (8008470 <_dtoa_r+0x358>)
 80081a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081a4:	9006      	str	r0, [sp, #24]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <_dtoa_r+0x98>
 80081aa:	4bb2      	ldr	r3, [pc, #712]	; (8008474 <_dtoa_r+0x35c>)
 80081ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	9806      	ldr	r0, [sp, #24]
 80081b2:	b01d      	add	sp, #116	; 0x74
 80081b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081b6:	2300      	movs	r3, #0
 80081b8:	602b      	str	r3, [r5, #0]
 80081ba:	e7e1      	b.n	8008180 <_dtoa_r+0x68>
 80081bc:	9b08      	ldr	r3, [sp, #32]
 80081be:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80081c0:	9312      	str	r3, [sp, #72]	; 0x48
 80081c2:	9413      	str	r4, [sp, #76]	; 0x4c
 80081c4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80081c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80081c8:	2200      	movs	r2, #0
 80081ca:	2300      	movs	r3, #0
 80081cc:	f7f8 f93e 	bl	800044c <__aeabi_dcmpeq>
 80081d0:	1e04      	subs	r4, r0, #0
 80081d2:	d009      	beq.n	80081e8 <_dtoa_r+0xd0>
 80081d4:	2301      	movs	r3, #1
 80081d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	4ba7      	ldr	r3, [pc, #668]	; (8008478 <_dtoa_r+0x360>)
 80081dc:	9306      	str	r3, [sp, #24]
 80081de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d0e5      	beq.n	80081b0 <_dtoa_r+0x98>
 80081e4:	4ba5      	ldr	r3, [pc, #660]	; (800847c <_dtoa_r+0x364>)
 80081e6:	e7e1      	b.n	80081ac <_dtoa_r+0x94>
 80081e8:	ab1a      	add	r3, sp, #104	; 0x68
 80081ea:	9301      	str	r3, [sp, #4]
 80081ec:	ab1b      	add	r3, sp, #108	; 0x6c
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	0038      	movs	r0, r7
 80081f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081f6:	f001 fd49 	bl	8009c8c <__d2b>
 80081fa:	006e      	lsls	r6, r5, #1
 80081fc:	9005      	str	r0, [sp, #20]
 80081fe:	0d76      	lsrs	r6, r6, #21
 8008200:	d100      	bne.n	8008204 <_dtoa_r+0xec>
 8008202:	e07c      	b.n	80082fe <_dtoa_r+0x1e6>
 8008204:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008206:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008208:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800820a:	4a9d      	ldr	r2, [pc, #628]	; (8008480 <_dtoa_r+0x368>)
 800820c:	031b      	lsls	r3, r3, #12
 800820e:	0b1b      	lsrs	r3, r3, #12
 8008210:	431a      	orrs	r2, r3
 8008212:	0011      	movs	r1, r2
 8008214:	4b9b      	ldr	r3, [pc, #620]	; (8008484 <_dtoa_r+0x36c>)
 8008216:	9418      	str	r4, [sp, #96]	; 0x60
 8008218:	18f6      	adds	r6, r6, r3
 800821a:	2200      	movs	r2, #0
 800821c:	4b9a      	ldr	r3, [pc, #616]	; (8008488 <_dtoa_r+0x370>)
 800821e:	f7f9 fe81 	bl	8001f24 <__aeabi_dsub>
 8008222:	4a9a      	ldr	r2, [pc, #616]	; (800848c <_dtoa_r+0x374>)
 8008224:	4b9a      	ldr	r3, [pc, #616]	; (8008490 <_dtoa_r+0x378>)
 8008226:	f7f9 fc11 	bl	8001a4c <__aeabi_dmul>
 800822a:	4a9a      	ldr	r2, [pc, #616]	; (8008494 <_dtoa_r+0x37c>)
 800822c:	4b9a      	ldr	r3, [pc, #616]	; (8008498 <_dtoa_r+0x380>)
 800822e:	f7f8 fccf 	bl	8000bd0 <__aeabi_dadd>
 8008232:	0004      	movs	r4, r0
 8008234:	0030      	movs	r0, r6
 8008236:	000d      	movs	r5, r1
 8008238:	f7fa fa5a 	bl	80026f0 <__aeabi_i2d>
 800823c:	4a97      	ldr	r2, [pc, #604]	; (800849c <_dtoa_r+0x384>)
 800823e:	4b98      	ldr	r3, [pc, #608]	; (80084a0 <_dtoa_r+0x388>)
 8008240:	f7f9 fc04 	bl	8001a4c <__aeabi_dmul>
 8008244:	0002      	movs	r2, r0
 8008246:	000b      	movs	r3, r1
 8008248:	0020      	movs	r0, r4
 800824a:	0029      	movs	r1, r5
 800824c:	f7f8 fcc0 	bl	8000bd0 <__aeabi_dadd>
 8008250:	0004      	movs	r4, r0
 8008252:	000d      	movs	r5, r1
 8008254:	f7fa fa16 	bl	8002684 <__aeabi_d2iz>
 8008258:	2200      	movs	r2, #0
 800825a:	9002      	str	r0, [sp, #8]
 800825c:	2300      	movs	r3, #0
 800825e:	0020      	movs	r0, r4
 8008260:	0029      	movs	r1, r5
 8008262:	f7f8 f8f9 	bl	8000458 <__aeabi_dcmplt>
 8008266:	2800      	cmp	r0, #0
 8008268:	d00b      	beq.n	8008282 <_dtoa_r+0x16a>
 800826a:	9802      	ldr	r0, [sp, #8]
 800826c:	f7fa fa40 	bl	80026f0 <__aeabi_i2d>
 8008270:	002b      	movs	r3, r5
 8008272:	0022      	movs	r2, r4
 8008274:	f7f8 f8ea 	bl	800044c <__aeabi_dcmpeq>
 8008278:	4243      	negs	r3, r0
 800827a:	4158      	adcs	r0, r3
 800827c:	9b02      	ldr	r3, [sp, #8]
 800827e:	1a1b      	subs	r3, r3, r0
 8008280:	9302      	str	r3, [sp, #8]
 8008282:	2301      	movs	r3, #1
 8008284:	9316      	str	r3, [sp, #88]	; 0x58
 8008286:	9b02      	ldr	r3, [sp, #8]
 8008288:	2b16      	cmp	r3, #22
 800828a:	d80f      	bhi.n	80082ac <_dtoa_r+0x194>
 800828c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800828e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008290:	00da      	lsls	r2, r3, #3
 8008292:	4b84      	ldr	r3, [pc, #528]	; (80084a4 <_dtoa_r+0x38c>)
 8008294:	189b      	adds	r3, r3, r2
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f7f8 f8dd 	bl	8000458 <__aeabi_dcmplt>
 800829e:	2800      	cmp	r0, #0
 80082a0:	d049      	beq.n	8008336 <_dtoa_r+0x21e>
 80082a2:	9b02      	ldr	r3, [sp, #8]
 80082a4:	3b01      	subs	r3, #1
 80082a6:	9302      	str	r3, [sp, #8]
 80082a8:	2300      	movs	r3, #0
 80082aa:	9316      	str	r3, [sp, #88]	; 0x58
 80082ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80082ae:	1b9e      	subs	r6, r3, r6
 80082b0:	2300      	movs	r3, #0
 80082b2:	930a      	str	r3, [sp, #40]	; 0x28
 80082b4:	0033      	movs	r3, r6
 80082b6:	3b01      	subs	r3, #1
 80082b8:	930d      	str	r3, [sp, #52]	; 0x34
 80082ba:	d504      	bpl.n	80082c6 <_dtoa_r+0x1ae>
 80082bc:	2301      	movs	r3, #1
 80082be:	1b9b      	subs	r3, r3, r6
 80082c0:	930a      	str	r3, [sp, #40]	; 0x28
 80082c2:	2300      	movs	r3, #0
 80082c4:	930d      	str	r3, [sp, #52]	; 0x34
 80082c6:	9b02      	ldr	r3, [sp, #8]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	db36      	blt.n	800833a <_dtoa_r+0x222>
 80082cc:	9a02      	ldr	r2, [sp, #8]
 80082ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082d0:	4694      	mov	ip, r2
 80082d2:	4463      	add	r3, ip
 80082d4:	930d      	str	r3, [sp, #52]	; 0x34
 80082d6:	2300      	movs	r3, #0
 80082d8:	9215      	str	r2, [sp, #84]	; 0x54
 80082da:	930e      	str	r3, [sp, #56]	; 0x38
 80082dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082de:	2401      	movs	r4, #1
 80082e0:	2b09      	cmp	r3, #9
 80082e2:	d864      	bhi.n	80083ae <_dtoa_r+0x296>
 80082e4:	2b05      	cmp	r3, #5
 80082e6:	dd02      	ble.n	80082ee <_dtoa_r+0x1d6>
 80082e8:	2400      	movs	r4, #0
 80082ea:	3b04      	subs	r3, #4
 80082ec:	9322      	str	r3, [sp, #136]	; 0x88
 80082ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082f0:	1e98      	subs	r0, r3, #2
 80082f2:	2803      	cmp	r0, #3
 80082f4:	d864      	bhi.n	80083c0 <_dtoa_r+0x2a8>
 80082f6:	f7f7 ff0f 	bl	8000118 <__gnu_thumb1_case_uqi>
 80082fa:	3829      	.short	0x3829
 80082fc:	5836      	.short	0x5836
 80082fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008300:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008302:	189e      	adds	r6, r3, r2
 8008304:	4b68      	ldr	r3, [pc, #416]	; (80084a8 <_dtoa_r+0x390>)
 8008306:	18f2      	adds	r2, r6, r3
 8008308:	2a20      	cmp	r2, #32
 800830a:	dd0f      	ble.n	800832c <_dtoa_r+0x214>
 800830c:	2340      	movs	r3, #64	; 0x40
 800830e:	1a9b      	subs	r3, r3, r2
 8008310:	409d      	lsls	r5, r3
 8008312:	4b66      	ldr	r3, [pc, #408]	; (80084ac <_dtoa_r+0x394>)
 8008314:	9802      	ldr	r0, [sp, #8]
 8008316:	18f3      	adds	r3, r6, r3
 8008318:	40d8      	lsrs	r0, r3
 800831a:	4328      	orrs	r0, r5
 800831c:	f7fa fa18 	bl	8002750 <__aeabi_ui2d>
 8008320:	2301      	movs	r3, #1
 8008322:	4c63      	ldr	r4, [pc, #396]	; (80084b0 <_dtoa_r+0x398>)
 8008324:	3e01      	subs	r6, #1
 8008326:	1909      	adds	r1, r1, r4
 8008328:	9318      	str	r3, [sp, #96]	; 0x60
 800832a:	e776      	b.n	800821a <_dtoa_r+0x102>
 800832c:	2320      	movs	r3, #32
 800832e:	9802      	ldr	r0, [sp, #8]
 8008330:	1a9b      	subs	r3, r3, r2
 8008332:	4098      	lsls	r0, r3
 8008334:	e7f2      	b.n	800831c <_dtoa_r+0x204>
 8008336:	9016      	str	r0, [sp, #88]	; 0x58
 8008338:	e7b8      	b.n	80082ac <_dtoa_r+0x194>
 800833a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800833c:	9a02      	ldr	r2, [sp, #8]
 800833e:	1a9b      	subs	r3, r3, r2
 8008340:	930a      	str	r3, [sp, #40]	; 0x28
 8008342:	4253      	negs	r3, r2
 8008344:	930e      	str	r3, [sp, #56]	; 0x38
 8008346:	2300      	movs	r3, #0
 8008348:	9315      	str	r3, [sp, #84]	; 0x54
 800834a:	e7c7      	b.n	80082dc <_dtoa_r+0x1c4>
 800834c:	2300      	movs	r3, #0
 800834e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008350:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008352:	930c      	str	r3, [sp, #48]	; 0x30
 8008354:	9307      	str	r3, [sp, #28]
 8008356:	2b00      	cmp	r3, #0
 8008358:	dc13      	bgt.n	8008382 <_dtoa_r+0x26a>
 800835a:	2301      	movs	r3, #1
 800835c:	001a      	movs	r2, r3
 800835e:	930c      	str	r3, [sp, #48]	; 0x30
 8008360:	9307      	str	r3, [sp, #28]
 8008362:	9223      	str	r2, [sp, #140]	; 0x8c
 8008364:	e00d      	b.n	8008382 <_dtoa_r+0x26a>
 8008366:	2301      	movs	r3, #1
 8008368:	e7f1      	b.n	800834e <_dtoa_r+0x236>
 800836a:	2300      	movs	r3, #0
 800836c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800836e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008370:	4694      	mov	ip, r2
 8008372:	9b02      	ldr	r3, [sp, #8]
 8008374:	4463      	add	r3, ip
 8008376:	930c      	str	r3, [sp, #48]	; 0x30
 8008378:	3301      	adds	r3, #1
 800837a:	9307      	str	r3, [sp, #28]
 800837c:	2b00      	cmp	r3, #0
 800837e:	dc00      	bgt.n	8008382 <_dtoa_r+0x26a>
 8008380:	2301      	movs	r3, #1
 8008382:	2200      	movs	r2, #0
 8008384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008386:	6042      	str	r2, [r0, #4]
 8008388:	3204      	adds	r2, #4
 800838a:	0015      	movs	r5, r2
 800838c:	3514      	adds	r5, #20
 800838e:	6841      	ldr	r1, [r0, #4]
 8008390:	429d      	cmp	r5, r3
 8008392:	d919      	bls.n	80083c8 <_dtoa_r+0x2b0>
 8008394:	0038      	movs	r0, r7
 8008396:	f001 f881 	bl	800949c <_Balloc>
 800839a:	9006      	str	r0, [sp, #24]
 800839c:	2800      	cmp	r0, #0
 800839e:	d117      	bne.n	80083d0 <_dtoa_r+0x2b8>
 80083a0:	21d5      	movs	r1, #213	; 0xd5
 80083a2:	0002      	movs	r2, r0
 80083a4:	4b43      	ldr	r3, [pc, #268]	; (80084b4 <_dtoa_r+0x39c>)
 80083a6:	0049      	lsls	r1, r1, #1
 80083a8:	e6cb      	b.n	8008142 <_dtoa_r+0x2a>
 80083aa:	2301      	movs	r3, #1
 80083ac:	e7de      	b.n	800836c <_dtoa_r+0x254>
 80083ae:	2300      	movs	r3, #0
 80083b0:	940f      	str	r4, [sp, #60]	; 0x3c
 80083b2:	9322      	str	r3, [sp, #136]	; 0x88
 80083b4:	3b01      	subs	r3, #1
 80083b6:	930c      	str	r3, [sp, #48]	; 0x30
 80083b8:	9307      	str	r3, [sp, #28]
 80083ba:	2200      	movs	r2, #0
 80083bc:	3313      	adds	r3, #19
 80083be:	e7d0      	b.n	8008362 <_dtoa_r+0x24a>
 80083c0:	2301      	movs	r3, #1
 80083c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80083c4:	3b02      	subs	r3, #2
 80083c6:	e7f6      	b.n	80083b6 <_dtoa_r+0x29e>
 80083c8:	3101      	adds	r1, #1
 80083ca:	6041      	str	r1, [r0, #4]
 80083cc:	0052      	lsls	r2, r2, #1
 80083ce:	e7dc      	b.n	800838a <_dtoa_r+0x272>
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	9a06      	ldr	r2, [sp, #24]
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	9b07      	ldr	r3, [sp, #28]
 80083d8:	2b0e      	cmp	r3, #14
 80083da:	d900      	bls.n	80083de <_dtoa_r+0x2c6>
 80083dc:	e0eb      	b.n	80085b6 <_dtoa_r+0x49e>
 80083de:	2c00      	cmp	r4, #0
 80083e0:	d100      	bne.n	80083e4 <_dtoa_r+0x2cc>
 80083e2:	e0e8      	b.n	80085b6 <_dtoa_r+0x49e>
 80083e4:	9b02      	ldr	r3, [sp, #8]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	dd68      	ble.n	80084bc <_dtoa_r+0x3a4>
 80083ea:	001a      	movs	r2, r3
 80083ec:	210f      	movs	r1, #15
 80083ee:	4b2d      	ldr	r3, [pc, #180]	; (80084a4 <_dtoa_r+0x38c>)
 80083f0:	400a      	ands	r2, r1
 80083f2:	00d2      	lsls	r2, r2, #3
 80083f4:	189b      	adds	r3, r3, r2
 80083f6:	681d      	ldr	r5, [r3, #0]
 80083f8:	685e      	ldr	r6, [r3, #4]
 80083fa:	9b02      	ldr	r3, [sp, #8]
 80083fc:	111c      	asrs	r4, r3, #4
 80083fe:	2302      	movs	r3, #2
 8008400:	9310      	str	r3, [sp, #64]	; 0x40
 8008402:	9b02      	ldr	r3, [sp, #8]
 8008404:	05db      	lsls	r3, r3, #23
 8008406:	d50b      	bpl.n	8008420 <_dtoa_r+0x308>
 8008408:	4b2b      	ldr	r3, [pc, #172]	; (80084b8 <_dtoa_r+0x3a0>)
 800840a:	400c      	ands	r4, r1
 800840c:	6a1a      	ldr	r2, [r3, #32]
 800840e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008410:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008412:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008414:	f7f8 ff18 	bl	8001248 <__aeabi_ddiv>
 8008418:	2303      	movs	r3, #3
 800841a:	9008      	str	r0, [sp, #32]
 800841c:	9109      	str	r1, [sp, #36]	; 0x24
 800841e:	9310      	str	r3, [sp, #64]	; 0x40
 8008420:	4b25      	ldr	r3, [pc, #148]	; (80084b8 <_dtoa_r+0x3a0>)
 8008422:	9314      	str	r3, [sp, #80]	; 0x50
 8008424:	2c00      	cmp	r4, #0
 8008426:	d108      	bne.n	800843a <_dtoa_r+0x322>
 8008428:	9808      	ldr	r0, [sp, #32]
 800842a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800842c:	002a      	movs	r2, r5
 800842e:	0033      	movs	r3, r6
 8008430:	f7f8 ff0a 	bl	8001248 <__aeabi_ddiv>
 8008434:	9008      	str	r0, [sp, #32]
 8008436:	9109      	str	r1, [sp, #36]	; 0x24
 8008438:	e05c      	b.n	80084f4 <_dtoa_r+0x3dc>
 800843a:	2301      	movs	r3, #1
 800843c:	421c      	tst	r4, r3
 800843e:	d00b      	beq.n	8008458 <_dtoa_r+0x340>
 8008440:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008442:	0028      	movs	r0, r5
 8008444:	3301      	adds	r3, #1
 8008446:	9310      	str	r3, [sp, #64]	; 0x40
 8008448:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800844a:	0031      	movs	r1, r6
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f7f9 fafc 	bl	8001a4c <__aeabi_dmul>
 8008454:	0005      	movs	r5, r0
 8008456:	000e      	movs	r6, r1
 8008458:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800845a:	1064      	asrs	r4, r4, #1
 800845c:	3308      	adds	r3, #8
 800845e:	e7e0      	b.n	8008422 <_dtoa_r+0x30a>
 8008460:	0800b2ce 	.word	0x0800b2ce
 8008464:	0800b2e5 	.word	0x0800b2e5
 8008468:	7ff00000 	.word	0x7ff00000
 800846c:	0000270f 	.word	0x0000270f
 8008470:	0800b2ca 	.word	0x0800b2ca
 8008474:	0800b2cd 	.word	0x0800b2cd
 8008478:	0800b144 	.word	0x0800b144
 800847c:	0800b145 	.word	0x0800b145
 8008480:	3ff00000 	.word	0x3ff00000
 8008484:	fffffc01 	.word	0xfffffc01
 8008488:	3ff80000 	.word	0x3ff80000
 800848c:	636f4361 	.word	0x636f4361
 8008490:	3fd287a7 	.word	0x3fd287a7
 8008494:	8b60c8b3 	.word	0x8b60c8b3
 8008498:	3fc68a28 	.word	0x3fc68a28
 800849c:	509f79fb 	.word	0x509f79fb
 80084a0:	3fd34413 	.word	0x3fd34413
 80084a4:	0800b450 	.word	0x0800b450
 80084a8:	00000432 	.word	0x00000432
 80084ac:	00000412 	.word	0x00000412
 80084b0:	fe100000 	.word	0xfe100000
 80084b4:	0800b340 	.word	0x0800b340
 80084b8:	0800b428 	.word	0x0800b428
 80084bc:	2302      	movs	r3, #2
 80084be:	9310      	str	r3, [sp, #64]	; 0x40
 80084c0:	9b02      	ldr	r3, [sp, #8]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d016      	beq.n	80084f4 <_dtoa_r+0x3dc>
 80084c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80084c8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80084ca:	425c      	negs	r4, r3
 80084cc:	230f      	movs	r3, #15
 80084ce:	4ab6      	ldr	r2, [pc, #728]	; (80087a8 <_dtoa_r+0x690>)
 80084d0:	4023      	ands	r3, r4
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	18d3      	adds	r3, r2, r3
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f7f9 fab7 	bl	8001a4c <__aeabi_dmul>
 80084de:	2601      	movs	r6, #1
 80084e0:	2300      	movs	r3, #0
 80084e2:	9008      	str	r0, [sp, #32]
 80084e4:	9109      	str	r1, [sp, #36]	; 0x24
 80084e6:	4db1      	ldr	r5, [pc, #708]	; (80087ac <_dtoa_r+0x694>)
 80084e8:	1124      	asrs	r4, r4, #4
 80084ea:	2c00      	cmp	r4, #0
 80084ec:	d000      	beq.n	80084f0 <_dtoa_r+0x3d8>
 80084ee:	e094      	b.n	800861a <_dtoa_r+0x502>
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d19f      	bne.n	8008434 <_dtoa_r+0x31c>
 80084f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d100      	bne.n	80084fc <_dtoa_r+0x3e4>
 80084fa:	e09b      	b.n	8008634 <_dtoa_r+0x51c>
 80084fc:	9c08      	ldr	r4, [sp, #32]
 80084fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008500:	2200      	movs	r2, #0
 8008502:	0020      	movs	r0, r4
 8008504:	0029      	movs	r1, r5
 8008506:	4baa      	ldr	r3, [pc, #680]	; (80087b0 <_dtoa_r+0x698>)
 8008508:	f7f7 ffa6 	bl	8000458 <__aeabi_dcmplt>
 800850c:	2800      	cmp	r0, #0
 800850e:	d100      	bne.n	8008512 <_dtoa_r+0x3fa>
 8008510:	e090      	b.n	8008634 <_dtoa_r+0x51c>
 8008512:	9b07      	ldr	r3, [sp, #28]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d100      	bne.n	800851a <_dtoa_r+0x402>
 8008518:	e08c      	b.n	8008634 <_dtoa_r+0x51c>
 800851a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800851c:	2b00      	cmp	r3, #0
 800851e:	dd46      	ble.n	80085ae <_dtoa_r+0x496>
 8008520:	9b02      	ldr	r3, [sp, #8]
 8008522:	2200      	movs	r2, #0
 8008524:	0020      	movs	r0, r4
 8008526:	0029      	movs	r1, r5
 8008528:	1e5e      	subs	r6, r3, #1
 800852a:	4ba2      	ldr	r3, [pc, #648]	; (80087b4 <_dtoa_r+0x69c>)
 800852c:	f7f9 fa8e 	bl	8001a4c <__aeabi_dmul>
 8008530:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008532:	9008      	str	r0, [sp, #32]
 8008534:	9109      	str	r1, [sp, #36]	; 0x24
 8008536:	3301      	adds	r3, #1
 8008538:	9310      	str	r3, [sp, #64]	; 0x40
 800853a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800853c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800853e:	9c08      	ldr	r4, [sp, #32]
 8008540:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008542:	9314      	str	r3, [sp, #80]	; 0x50
 8008544:	f7fa f8d4 	bl	80026f0 <__aeabi_i2d>
 8008548:	0022      	movs	r2, r4
 800854a:	002b      	movs	r3, r5
 800854c:	f7f9 fa7e 	bl	8001a4c <__aeabi_dmul>
 8008550:	2200      	movs	r2, #0
 8008552:	4b99      	ldr	r3, [pc, #612]	; (80087b8 <_dtoa_r+0x6a0>)
 8008554:	f7f8 fb3c 	bl	8000bd0 <__aeabi_dadd>
 8008558:	9010      	str	r0, [sp, #64]	; 0x40
 800855a:	9111      	str	r1, [sp, #68]	; 0x44
 800855c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800855e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008560:	9208      	str	r2, [sp, #32]
 8008562:	9309      	str	r3, [sp, #36]	; 0x24
 8008564:	4a95      	ldr	r2, [pc, #596]	; (80087bc <_dtoa_r+0x6a4>)
 8008566:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008568:	4694      	mov	ip, r2
 800856a:	4463      	add	r3, ip
 800856c:	9317      	str	r3, [sp, #92]	; 0x5c
 800856e:	9309      	str	r3, [sp, #36]	; 0x24
 8008570:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008572:	2b00      	cmp	r3, #0
 8008574:	d161      	bne.n	800863a <_dtoa_r+0x522>
 8008576:	2200      	movs	r2, #0
 8008578:	0020      	movs	r0, r4
 800857a:	0029      	movs	r1, r5
 800857c:	4b90      	ldr	r3, [pc, #576]	; (80087c0 <_dtoa_r+0x6a8>)
 800857e:	f7f9 fcd1 	bl	8001f24 <__aeabi_dsub>
 8008582:	9a08      	ldr	r2, [sp, #32]
 8008584:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008586:	0004      	movs	r4, r0
 8008588:	000d      	movs	r5, r1
 800858a:	f7f7 ff79 	bl	8000480 <__aeabi_dcmpgt>
 800858e:	2800      	cmp	r0, #0
 8008590:	d000      	beq.n	8008594 <_dtoa_r+0x47c>
 8008592:	e2af      	b.n	8008af4 <_dtoa_r+0x9dc>
 8008594:	488b      	ldr	r0, [pc, #556]	; (80087c4 <_dtoa_r+0x6ac>)
 8008596:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008598:	4684      	mov	ip, r0
 800859a:	4461      	add	r1, ip
 800859c:	000b      	movs	r3, r1
 800859e:	0020      	movs	r0, r4
 80085a0:	0029      	movs	r1, r5
 80085a2:	9a08      	ldr	r2, [sp, #32]
 80085a4:	f7f7 ff58 	bl	8000458 <__aeabi_dcmplt>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d000      	beq.n	80085ae <_dtoa_r+0x496>
 80085ac:	e29f      	b.n	8008aee <_dtoa_r+0x9d6>
 80085ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80085b2:	9308      	str	r3, [sp, #32]
 80085b4:	9409      	str	r4, [sp, #36]	; 0x24
 80085b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	da00      	bge.n	80085be <_dtoa_r+0x4a6>
 80085bc:	e172      	b.n	80088a4 <_dtoa_r+0x78c>
 80085be:	9a02      	ldr	r2, [sp, #8]
 80085c0:	2a0e      	cmp	r2, #14
 80085c2:	dd00      	ble.n	80085c6 <_dtoa_r+0x4ae>
 80085c4:	e16e      	b.n	80088a4 <_dtoa_r+0x78c>
 80085c6:	4b78      	ldr	r3, [pc, #480]	; (80087a8 <_dtoa_r+0x690>)
 80085c8:	00d2      	lsls	r2, r2, #3
 80085ca:	189b      	adds	r3, r3, r2
 80085cc:	685c      	ldr	r4, [r3, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	930a      	str	r3, [sp, #40]	; 0x28
 80085d2:	940b      	str	r4, [sp, #44]	; 0x2c
 80085d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	db00      	blt.n	80085dc <_dtoa_r+0x4c4>
 80085da:	e0f7      	b.n	80087cc <_dtoa_r+0x6b4>
 80085dc:	9b07      	ldr	r3, [sp, #28]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	dd00      	ble.n	80085e4 <_dtoa_r+0x4cc>
 80085e2:	e0f3      	b.n	80087cc <_dtoa_r+0x6b4>
 80085e4:	d000      	beq.n	80085e8 <_dtoa_r+0x4d0>
 80085e6:	e282      	b.n	8008aee <_dtoa_r+0x9d6>
 80085e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80085ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085ec:	2200      	movs	r2, #0
 80085ee:	4b74      	ldr	r3, [pc, #464]	; (80087c0 <_dtoa_r+0x6a8>)
 80085f0:	f7f9 fa2c 	bl	8001a4c <__aeabi_dmul>
 80085f4:	9a08      	ldr	r2, [sp, #32]
 80085f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f8:	f7f7 ff4c 	bl	8000494 <__aeabi_dcmpge>
 80085fc:	9e07      	ldr	r6, [sp, #28]
 80085fe:	0035      	movs	r5, r6
 8008600:	2800      	cmp	r0, #0
 8008602:	d000      	beq.n	8008606 <_dtoa_r+0x4ee>
 8008604:	e259      	b.n	8008aba <_dtoa_r+0x9a2>
 8008606:	9b06      	ldr	r3, [sp, #24]
 8008608:	9a06      	ldr	r2, [sp, #24]
 800860a:	3301      	adds	r3, #1
 800860c:	9308      	str	r3, [sp, #32]
 800860e:	2331      	movs	r3, #49	; 0x31
 8008610:	7013      	strb	r3, [r2, #0]
 8008612:	9b02      	ldr	r3, [sp, #8]
 8008614:	3301      	adds	r3, #1
 8008616:	9302      	str	r3, [sp, #8]
 8008618:	e254      	b.n	8008ac4 <_dtoa_r+0x9ac>
 800861a:	4234      	tst	r4, r6
 800861c:	d007      	beq.n	800862e <_dtoa_r+0x516>
 800861e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008620:	3301      	adds	r3, #1
 8008622:	9310      	str	r3, [sp, #64]	; 0x40
 8008624:	682a      	ldr	r2, [r5, #0]
 8008626:	686b      	ldr	r3, [r5, #4]
 8008628:	f7f9 fa10 	bl	8001a4c <__aeabi_dmul>
 800862c:	0033      	movs	r3, r6
 800862e:	1064      	asrs	r4, r4, #1
 8008630:	3508      	adds	r5, #8
 8008632:	e75a      	b.n	80084ea <_dtoa_r+0x3d2>
 8008634:	9e02      	ldr	r6, [sp, #8]
 8008636:	9b07      	ldr	r3, [sp, #28]
 8008638:	e780      	b.n	800853c <_dtoa_r+0x424>
 800863a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800863c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800863e:	1e5a      	subs	r2, r3, #1
 8008640:	4b59      	ldr	r3, [pc, #356]	; (80087a8 <_dtoa_r+0x690>)
 8008642:	00d2      	lsls	r2, r2, #3
 8008644:	189b      	adds	r3, r3, r2
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	2900      	cmp	r1, #0
 800864c:	d051      	beq.n	80086f2 <_dtoa_r+0x5da>
 800864e:	2000      	movs	r0, #0
 8008650:	495d      	ldr	r1, [pc, #372]	; (80087c8 <_dtoa_r+0x6b0>)
 8008652:	f7f8 fdf9 	bl	8001248 <__aeabi_ddiv>
 8008656:	9a08      	ldr	r2, [sp, #32]
 8008658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800865a:	f7f9 fc63 	bl	8001f24 <__aeabi_dsub>
 800865e:	9a06      	ldr	r2, [sp, #24]
 8008660:	9b06      	ldr	r3, [sp, #24]
 8008662:	4694      	mov	ip, r2
 8008664:	9317      	str	r3, [sp, #92]	; 0x5c
 8008666:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008668:	9010      	str	r0, [sp, #64]	; 0x40
 800866a:	9111      	str	r1, [sp, #68]	; 0x44
 800866c:	4463      	add	r3, ip
 800866e:	9319      	str	r3, [sp, #100]	; 0x64
 8008670:	0029      	movs	r1, r5
 8008672:	0020      	movs	r0, r4
 8008674:	f7fa f806 	bl	8002684 <__aeabi_d2iz>
 8008678:	9014      	str	r0, [sp, #80]	; 0x50
 800867a:	f7fa f839 	bl	80026f0 <__aeabi_i2d>
 800867e:	0002      	movs	r2, r0
 8008680:	000b      	movs	r3, r1
 8008682:	0020      	movs	r0, r4
 8008684:	0029      	movs	r1, r5
 8008686:	f7f9 fc4d 	bl	8001f24 <__aeabi_dsub>
 800868a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800868c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800868e:	3301      	adds	r3, #1
 8008690:	9308      	str	r3, [sp, #32]
 8008692:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008694:	0004      	movs	r4, r0
 8008696:	3330      	adds	r3, #48	; 0x30
 8008698:	7013      	strb	r3, [r2, #0]
 800869a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800869c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800869e:	000d      	movs	r5, r1
 80086a0:	f7f7 feda 	bl	8000458 <__aeabi_dcmplt>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	d175      	bne.n	8008794 <_dtoa_r+0x67c>
 80086a8:	0022      	movs	r2, r4
 80086aa:	002b      	movs	r3, r5
 80086ac:	2000      	movs	r0, #0
 80086ae:	4940      	ldr	r1, [pc, #256]	; (80087b0 <_dtoa_r+0x698>)
 80086b0:	f7f9 fc38 	bl	8001f24 <__aeabi_dsub>
 80086b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086b8:	f7f7 fece 	bl	8000458 <__aeabi_dcmplt>
 80086bc:	2800      	cmp	r0, #0
 80086be:	d000      	beq.n	80086c2 <_dtoa_r+0x5aa>
 80086c0:	e0d2      	b.n	8008868 <_dtoa_r+0x750>
 80086c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80086c4:	9a08      	ldr	r2, [sp, #32]
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d100      	bne.n	80086cc <_dtoa_r+0x5b4>
 80086ca:	e770      	b.n	80085ae <_dtoa_r+0x496>
 80086cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80086ce:	9911      	ldr	r1, [sp, #68]	; 0x44
 80086d0:	2200      	movs	r2, #0
 80086d2:	4b38      	ldr	r3, [pc, #224]	; (80087b4 <_dtoa_r+0x69c>)
 80086d4:	f7f9 f9ba 	bl	8001a4c <__aeabi_dmul>
 80086d8:	4b36      	ldr	r3, [pc, #216]	; (80087b4 <_dtoa_r+0x69c>)
 80086da:	9010      	str	r0, [sp, #64]	; 0x40
 80086dc:	9111      	str	r1, [sp, #68]	; 0x44
 80086de:	2200      	movs	r2, #0
 80086e0:	0020      	movs	r0, r4
 80086e2:	0029      	movs	r1, r5
 80086e4:	f7f9 f9b2 	bl	8001a4c <__aeabi_dmul>
 80086e8:	9b08      	ldr	r3, [sp, #32]
 80086ea:	0004      	movs	r4, r0
 80086ec:	000d      	movs	r5, r1
 80086ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80086f0:	e7be      	b.n	8008670 <_dtoa_r+0x558>
 80086f2:	9808      	ldr	r0, [sp, #32]
 80086f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086f6:	f7f9 f9a9 	bl	8001a4c <__aeabi_dmul>
 80086fa:	9a06      	ldr	r2, [sp, #24]
 80086fc:	9b06      	ldr	r3, [sp, #24]
 80086fe:	4694      	mov	ip, r2
 8008700:	9308      	str	r3, [sp, #32]
 8008702:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008704:	9010      	str	r0, [sp, #64]	; 0x40
 8008706:	9111      	str	r1, [sp, #68]	; 0x44
 8008708:	4463      	add	r3, ip
 800870a:	9319      	str	r3, [sp, #100]	; 0x64
 800870c:	0029      	movs	r1, r5
 800870e:	0020      	movs	r0, r4
 8008710:	f7f9 ffb8 	bl	8002684 <__aeabi_d2iz>
 8008714:	9017      	str	r0, [sp, #92]	; 0x5c
 8008716:	f7f9 ffeb 	bl	80026f0 <__aeabi_i2d>
 800871a:	0002      	movs	r2, r0
 800871c:	000b      	movs	r3, r1
 800871e:	0020      	movs	r0, r4
 8008720:	0029      	movs	r1, r5
 8008722:	f7f9 fbff 	bl	8001f24 <__aeabi_dsub>
 8008726:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008728:	9a08      	ldr	r2, [sp, #32]
 800872a:	3330      	adds	r3, #48	; 0x30
 800872c:	7013      	strb	r3, [r2, #0]
 800872e:	0013      	movs	r3, r2
 8008730:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008732:	3301      	adds	r3, #1
 8008734:	0004      	movs	r4, r0
 8008736:	000d      	movs	r5, r1
 8008738:	9308      	str	r3, [sp, #32]
 800873a:	4293      	cmp	r3, r2
 800873c:	d12c      	bne.n	8008798 <_dtoa_r+0x680>
 800873e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008740:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008742:	9a06      	ldr	r2, [sp, #24]
 8008744:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008746:	4694      	mov	ip, r2
 8008748:	4463      	add	r3, ip
 800874a:	2200      	movs	r2, #0
 800874c:	9308      	str	r3, [sp, #32]
 800874e:	4b1e      	ldr	r3, [pc, #120]	; (80087c8 <_dtoa_r+0x6b0>)
 8008750:	f7f8 fa3e 	bl	8000bd0 <__aeabi_dadd>
 8008754:	0002      	movs	r2, r0
 8008756:	000b      	movs	r3, r1
 8008758:	0020      	movs	r0, r4
 800875a:	0029      	movs	r1, r5
 800875c:	f7f7 fe90 	bl	8000480 <__aeabi_dcmpgt>
 8008760:	2800      	cmp	r0, #0
 8008762:	d000      	beq.n	8008766 <_dtoa_r+0x64e>
 8008764:	e080      	b.n	8008868 <_dtoa_r+0x750>
 8008766:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008768:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800876a:	2000      	movs	r0, #0
 800876c:	4916      	ldr	r1, [pc, #88]	; (80087c8 <_dtoa_r+0x6b0>)
 800876e:	f7f9 fbd9 	bl	8001f24 <__aeabi_dsub>
 8008772:	0002      	movs	r2, r0
 8008774:	000b      	movs	r3, r1
 8008776:	0020      	movs	r0, r4
 8008778:	0029      	movs	r1, r5
 800877a:	f7f7 fe6d 	bl	8000458 <__aeabi_dcmplt>
 800877e:	2800      	cmp	r0, #0
 8008780:	d100      	bne.n	8008784 <_dtoa_r+0x66c>
 8008782:	e714      	b.n	80085ae <_dtoa_r+0x496>
 8008784:	9b08      	ldr	r3, [sp, #32]
 8008786:	001a      	movs	r2, r3
 8008788:	3a01      	subs	r2, #1
 800878a:	9208      	str	r2, [sp, #32]
 800878c:	7812      	ldrb	r2, [r2, #0]
 800878e:	2a30      	cmp	r2, #48	; 0x30
 8008790:	d0f8      	beq.n	8008784 <_dtoa_r+0x66c>
 8008792:	9308      	str	r3, [sp, #32]
 8008794:	9602      	str	r6, [sp, #8]
 8008796:	e055      	b.n	8008844 <_dtoa_r+0x72c>
 8008798:	2200      	movs	r2, #0
 800879a:	4b06      	ldr	r3, [pc, #24]	; (80087b4 <_dtoa_r+0x69c>)
 800879c:	f7f9 f956 	bl	8001a4c <__aeabi_dmul>
 80087a0:	0004      	movs	r4, r0
 80087a2:	000d      	movs	r5, r1
 80087a4:	e7b2      	b.n	800870c <_dtoa_r+0x5f4>
 80087a6:	46c0      	nop			; (mov r8, r8)
 80087a8:	0800b450 	.word	0x0800b450
 80087ac:	0800b428 	.word	0x0800b428
 80087b0:	3ff00000 	.word	0x3ff00000
 80087b4:	40240000 	.word	0x40240000
 80087b8:	401c0000 	.word	0x401c0000
 80087bc:	fcc00000 	.word	0xfcc00000
 80087c0:	40140000 	.word	0x40140000
 80087c4:	7cc00000 	.word	0x7cc00000
 80087c8:	3fe00000 	.word	0x3fe00000
 80087cc:	9b07      	ldr	r3, [sp, #28]
 80087ce:	9e06      	ldr	r6, [sp, #24]
 80087d0:	3b01      	subs	r3, #1
 80087d2:	199b      	adds	r3, r3, r6
 80087d4:	930c      	str	r3, [sp, #48]	; 0x30
 80087d6:	9c08      	ldr	r4, [sp, #32]
 80087d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80087da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087de:	0020      	movs	r0, r4
 80087e0:	0029      	movs	r1, r5
 80087e2:	f7f8 fd31 	bl	8001248 <__aeabi_ddiv>
 80087e6:	f7f9 ff4d 	bl	8002684 <__aeabi_d2iz>
 80087ea:	9007      	str	r0, [sp, #28]
 80087ec:	f7f9 ff80 	bl	80026f0 <__aeabi_i2d>
 80087f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087f4:	f7f9 f92a 	bl	8001a4c <__aeabi_dmul>
 80087f8:	0002      	movs	r2, r0
 80087fa:	000b      	movs	r3, r1
 80087fc:	0020      	movs	r0, r4
 80087fe:	0029      	movs	r1, r5
 8008800:	f7f9 fb90 	bl	8001f24 <__aeabi_dsub>
 8008804:	0033      	movs	r3, r6
 8008806:	9a07      	ldr	r2, [sp, #28]
 8008808:	3601      	adds	r6, #1
 800880a:	3230      	adds	r2, #48	; 0x30
 800880c:	701a      	strb	r2, [r3, #0]
 800880e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008810:	9608      	str	r6, [sp, #32]
 8008812:	429a      	cmp	r2, r3
 8008814:	d139      	bne.n	800888a <_dtoa_r+0x772>
 8008816:	0002      	movs	r2, r0
 8008818:	000b      	movs	r3, r1
 800881a:	f7f8 f9d9 	bl	8000bd0 <__aeabi_dadd>
 800881e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008822:	0004      	movs	r4, r0
 8008824:	000d      	movs	r5, r1
 8008826:	f7f7 fe2b 	bl	8000480 <__aeabi_dcmpgt>
 800882a:	2800      	cmp	r0, #0
 800882c:	d11b      	bne.n	8008866 <_dtoa_r+0x74e>
 800882e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008832:	0020      	movs	r0, r4
 8008834:	0029      	movs	r1, r5
 8008836:	f7f7 fe09 	bl	800044c <__aeabi_dcmpeq>
 800883a:	2800      	cmp	r0, #0
 800883c:	d002      	beq.n	8008844 <_dtoa_r+0x72c>
 800883e:	9b07      	ldr	r3, [sp, #28]
 8008840:	07db      	lsls	r3, r3, #31
 8008842:	d410      	bmi.n	8008866 <_dtoa_r+0x74e>
 8008844:	0038      	movs	r0, r7
 8008846:	9905      	ldr	r1, [sp, #20]
 8008848:	f000 fe6c 	bl	8009524 <_Bfree>
 800884c:	2300      	movs	r3, #0
 800884e:	9a08      	ldr	r2, [sp, #32]
 8008850:	9802      	ldr	r0, [sp, #8]
 8008852:	7013      	strb	r3, [r2, #0]
 8008854:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008856:	3001      	adds	r0, #1
 8008858:	6018      	str	r0, [r3, #0]
 800885a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800885c:	2b00      	cmp	r3, #0
 800885e:	d100      	bne.n	8008862 <_dtoa_r+0x74a>
 8008860:	e4a6      	b.n	80081b0 <_dtoa_r+0x98>
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	e4a4      	b.n	80081b0 <_dtoa_r+0x98>
 8008866:	9e02      	ldr	r6, [sp, #8]
 8008868:	9b08      	ldr	r3, [sp, #32]
 800886a:	9308      	str	r3, [sp, #32]
 800886c:	3b01      	subs	r3, #1
 800886e:	781a      	ldrb	r2, [r3, #0]
 8008870:	2a39      	cmp	r2, #57	; 0x39
 8008872:	d106      	bne.n	8008882 <_dtoa_r+0x76a>
 8008874:	9a06      	ldr	r2, [sp, #24]
 8008876:	429a      	cmp	r2, r3
 8008878:	d1f7      	bne.n	800886a <_dtoa_r+0x752>
 800887a:	2230      	movs	r2, #48	; 0x30
 800887c:	9906      	ldr	r1, [sp, #24]
 800887e:	3601      	adds	r6, #1
 8008880:	700a      	strb	r2, [r1, #0]
 8008882:	781a      	ldrb	r2, [r3, #0]
 8008884:	3201      	adds	r2, #1
 8008886:	701a      	strb	r2, [r3, #0]
 8008888:	e784      	b.n	8008794 <_dtoa_r+0x67c>
 800888a:	2200      	movs	r2, #0
 800888c:	4baa      	ldr	r3, [pc, #680]	; (8008b38 <_dtoa_r+0xa20>)
 800888e:	f7f9 f8dd 	bl	8001a4c <__aeabi_dmul>
 8008892:	2200      	movs	r2, #0
 8008894:	2300      	movs	r3, #0
 8008896:	0004      	movs	r4, r0
 8008898:	000d      	movs	r5, r1
 800889a:	f7f7 fdd7 	bl	800044c <__aeabi_dcmpeq>
 800889e:	2800      	cmp	r0, #0
 80088a0:	d09b      	beq.n	80087da <_dtoa_r+0x6c2>
 80088a2:	e7cf      	b.n	8008844 <_dtoa_r+0x72c>
 80088a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088a6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80088a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80088aa:	2d00      	cmp	r5, #0
 80088ac:	d012      	beq.n	80088d4 <_dtoa_r+0x7bc>
 80088ae:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80088b0:	2a01      	cmp	r2, #1
 80088b2:	dc66      	bgt.n	8008982 <_dtoa_r+0x86a>
 80088b4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	d05d      	beq.n	8008976 <_dtoa_r+0x85e>
 80088ba:	4aa0      	ldr	r2, [pc, #640]	; (8008b3c <_dtoa_r+0xa24>)
 80088bc:	189b      	adds	r3, r3, r2
 80088be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088c0:	2101      	movs	r1, #1
 80088c2:	18d2      	adds	r2, r2, r3
 80088c4:	920a      	str	r2, [sp, #40]	; 0x28
 80088c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088c8:	0038      	movs	r0, r7
 80088ca:	18d3      	adds	r3, r2, r3
 80088cc:	930d      	str	r3, [sp, #52]	; 0x34
 80088ce:	f000 ff25 	bl	800971c <__i2b>
 80088d2:	0005      	movs	r5, r0
 80088d4:	2c00      	cmp	r4, #0
 80088d6:	dd0e      	ble.n	80088f6 <_dtoa_r+0x7de>
 80088d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088da:	2b00      	cmp	r3, #0
 80088dc:	dd0b      	ble.n	80088f6 <_dtoa_r+0x7de>
 80088de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088e0:	0023      	movs	r3, r4
 80088e2:	4294      	cmp	r4, r2
 80088e4:	dd00      	ble.n	80088e8 <_dtoa_r+0x7d0>
 80088e6:	0013      	movs	r3, r2
 80088e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ea:	1ae4      	subs	r4, r4, r3
 80088ec:	1ad2      	subs	r2, r2, r3
 80088ee:	920a      	str	r2, [sp, #40]	; 0x28
 80088f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	930d      	str	r3, [sp, #52]	; 0x34
 80088f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d01f      	beq.n	800893c <_dtoa_r+0x824>
 80088fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d054      	beq.n	80089ac <_dtoa_r+0x894>
 8008902:	2e00      	cmp	r6, #0
 8008904:	dd11      	ble.n	800892a <_dtoa_r+0x812>
 8008906:	0029      	movs	r1, r5
 8008908:	0032      	movs	r2, r6
 800890a:	0038      	movs	r0, r7
 800890c:	f000 ffcc 	bl	80098a8 <__pow5mult>
 8008910:	9a05      	ldr	r2, [sp, #20]
 8008912:	0001      	movs	r1, r0
 8008914:	0005      	movs	r5, r0
 8008916:	0038      	movs	r0, r7
 8008918:	f000 ff16 	bl	8009748 <__multiply>
 800891c:	9905      	ldr	r1, [sp, #20]
 800891e:	9014      	str	r0, [sp, #80]	; 0x50
 8008920:	0038      	movs	r0, r7
 8008922:	f000 fdff 	bl	8009524 <_Bfree>
 8008926:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008928:	9305      	str	r3, [sp, #20]
 800892a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800892c:	1b9a      	subs	r2, r3, r6
 800892e:	42b3      	cmp	r3, r6
 8008930:	d004      	beq.n	800893c <_dtoa_r+0x824>
 8008932:	0038      	movs	r0, r7
 8008934:	9905      	ldr	r1, [sp, #20]
 8008936:	f000 ffb7 	bl	80098a8 <__pow5mult>
 800893a:	9005      	str	r0, [sp, #20]
 800893c:	2101      	movs	r1, #1
 800893e:	0038      	movs	r0, r7
 8008940:	f000 feec 	bl	800971c <__i2b>
 8008944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008946:	0006      	movs	r6, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	dd31      	ble.n	80089b0 <_dtoa_r+0x898>
 800894c:	001a      	movs	r2, r3
 800894e:	0001      	movs	r1, r0
 8008950:	0038      	movs	r0, r7
 8008952:	f000 ffa9 	bl	80098a8 <__pow5mult>
 8008956:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008958:	0006      	movs	r6, r0
 800895a:	2b01      	cmp	r3, #1
 800895c:	dd2d      	ble.n	80089ba <_dtoa_r+0x8a2>
 800895e:	2300      	movs	r3, #0
 8008960:	930e      	str	r3, [sp, #56]	; 0x38
 8008962:	6933      	ldr	r3, [r6, #16]
 8008964:	3303      	adds	r3, #3
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	18f3      	adds	r3, r6, r3
 800896a:	6858      	ldr	r0, [r3, #4]
 800896c:	f000 fe8e 	bl	800968c <__hi0bits>
 8008970:	2320      	movs	r3, #32
 8008972:	1a18      	subs	r0, r3, r0
 8008974:	e039      	b.n	80089ea <_dtoa_r+0x8d2>
 8008976:	2336      	movs	r3, #54	; 0x36
 8008978:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800897a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800897c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800897e:	1a9b      	subs	r3, r3, r2
 8008980:	e79d      	b.n	80088be <_dtoa_r+0x7a6>
 8008982:	9b07      	ldr	r3, [sp, #28]
 8008984:	1e5e      	subs	r6, r3, #1
 8008986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008988:	42b3      	cmp	r3, r6
 800898a:	db07      	blt.n	800899c <_dtoa_r+0x884>
 800898c:	1b9e      	subs	r6, r3, r6
 800898e:	9b07      	ldr	r3, [sp, #28]
 8008990:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008992:	2b00      	cmp	r3, #0
 8008994:	da93      	bge.n	80088be <_dtoa_r+0x7a6>
 8008996:	1ae4      	subs	r4, r4, r3
 8008998:	2300      	movs	r3, #0
 800899a:	e790      	b.n	80088be <_dtoa_r+0x7a6>
 800899c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800899e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80089a0:	1af3      	subs	r3, r6, r3
 80089a2:	18d3      	adds	r3, r2, r3
 80089a4:	960e      	str	r6, [sp, #56]	; 0x38
 80089a6:	9315      	str	r3, [sp, #84]	; 0x54
 80089a8:	2600      	movs	r6, #0
 80089aa:	e7f0      	b.n	800898e <_dtoa_r+0x876>
 80089ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089ae:	e7c0      	b.n	8008932 <_dtoa_r+0x81a>
 80089b0:	2300      	movs	r3, #0
 80089b2:	930e      	str	r3, [sp, #56]	; 0x38
 80089b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	dc13      	bgt.n	80089e2 <_dtoa_r+0x8ca>
 80089ba:	2300      	movs	r3, #0
 80089bc:	930e      	str	r3, [sp, #56]	; 0x38
 80089be:	9b08      	ldr	r3, [sp, #32]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10e      	bne.n	80089e2 <_dtoa_r+0x8ca>
 80089c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c6:	031b      	lsls	r3, r3, #12
 80089c8:	d10b      	bne.n	80089e2 <_dtoa_r+0x8ca>
 80089ca:	4b5d      	ldr	r3, [pc, #372]	; (8008b40 <_dtoa_r+0xa28>)
 80089cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089ce:	4213      	tst	r3, r2
 80089d0:	d007      	beq.n	80089e2 <_dtoa_r+0x8ca>
 80089d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d4:	3301      	adds	r3, #1
 80089d6:	930a      	str	r3, [sp, #40]	; 0x28
 80089d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089da:	3301      	adds	r3, #1
 80089dc:	930d      	str	r3, [sp, #52]	; 0x34
 80089de:	2301      	movs	r3, #1
 80089e0:	930e      	str	r3, [sp, #56]	; 0x38
 80089e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089e4:	2001      	movs	r0, #1
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1bb      	bne.n	8008962 <_dtoa_r+0x84a>
 80089ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089ec:	221f      	movs	r2, #31
 80089ee:	1818      	adds	r0, r3, r0
 80089f0:	0003      	movs	r3, r0
 80089f2:	4013      	ands	r3, r2
 80089f4:	4210      	tst	r0, r2
 80089f6:	d046      	beq.n	8008a86 <_dtoa_r+0x96e>
 80089f8:	3201      	adds	r2, #1
 80089fa:	1ad2      	subs	r2, r2, r3
 80089fc:	2a04      	cmp	r2, #4
 80089fe:	dd3f      	ble.n	8008a80 <_dtoa_r+0x968>
 8008a00:	221c      	movs	r2, #28
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a06:	18e4      	adds	r4, r4, r3
 8008a08:	18d2      	adds	r2, r2, r3
 8008a0a:	920a      	str	r2, [sp, #40]	; 0x28
 8008a0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a0e:	18d3      	adds	r3, r2, r3
 8008a10:	930d      	str	r3, [sp, #52]	; 0x34
 8008a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	dd05      	ble.n	8008a24 <_dtoa_r+0x90c>
 8008a18:	001a      	movs	r2, r3
 8008a1a:	0038      	movs	r0, r7
 8008a1c:	9905      	ldr	r1, [sp, #20]
 8008a1e:	f000 ff9f 	bl	8009960 <__lshift>
 8008a22:	9005      	str	r0, [sp, #20]
 8008a24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	dd05      	ble.n	8008a36 <_dtoa_r+0x91e>
 8008a2a:	0031      	movs	r1, r6
 8008a2c:	001a      	movs	r2, r3
 8008a2e:	0038      	movs	r0, r7
 8008a30:	f000 ff96 	bl	8009960 <__lshift>
 8008a34:	0006      	movs	r6, r0
 8008a36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d026      	beq.n	8008a8a <_dtoa_r+0x972>
 8008a3c:	0031      	movs	r1, r6
 8008a3e:	9805      	ldr	r0, [sp, #20]
 8008a40:	f000 fffc 	bl	8009a3c <__mcmp>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	da20      	bge.n	8008a8a <_dtoa_r+0x972>
 8008a48:	9b02      	ldr	r3, [sp, #8]
 8008a4a:	220a      	movs	r2, #10
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	9302      	str	r3, [sp, #8]
 8008a50:	0038      	movs	r0, r7
 8008a52:	2300      	movs	r3, #0
 8008a54:	9905      	ldr	r1, [sp, #20]
 8008a56:	f000 fd89 	bl	800956c <__multadd>
 8008a5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a5c:	9005      	str	r0, [sp, #20]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d100      	bne.n	8008a64 <_dtoa_r+0x94c>
 8008a62:	e166      	b.n	8008d32 <_dtoa_r+0xc1a>
 8008a64:	2300      	movs	r3, #0
 8008a66:	0029      	movs	r1, r5
 8008a68:	220a      	movs	r2, #10
 8008a6a:	0038      	movs	r0, r7
 8008a6c:	f000 fd7e 	bl	800956c <__multadd>
 8008a70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a72:	0005      	movs	r5, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	dc47      	bgt.n	8008b08 <_dtoa_r+0x9f0>
 8008a78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	dc0d      	bgt.n	8008a9a <_dtoa_r+0x982>
 8008a7e:	e043      	b.n	8008b08 <_dtoa_r+0x9f0>
 8008a80:	2a04      	cmp	r2, #4
 8008a82:	d0c6      	beq.n	8008a12 <_dtoa_r+0x8fa>
 8008a84:	0013      	movs	r3, r2
 8008a86:	331c      	adds	r3, #28
 8008a88:	e7bc      	b.n	8008a04 <_dtoa_r+0x8ec>
 8008a8a:	9b07      	ldr	r3, [sp, #28]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	dc35      	bgt.n	8008afc <_dtoa_r+0x9e4>
 8008a90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	dd32      	ble.n	8008afc <_dtoa_r+0x9e4>
 8008a96:	9b07      	ldr	r3, [sp, #28]
 8008a98:	930c      	str	r3, [sp, #48]	; 0x30
 8008a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10c      	bne.n	8008aba <_dtoa_r+0x9a2>
 8008aa0:	0031      	movs	r1, r6
 8008aa2:	2205      	movs	r2, #5
 8008aa4:	0038      	movs	r0, r7
 8008aa6:	f000 fd61 	bl	800956c <__multadd>
 8008aaa:	0006      	movs	r6, r0
 8008aac:	0001      	movs	r1, r0
 8008aae:	9805      	ldr	r0, [sp, #20]
 8008ab0:	f000 ffc4 	bl	8009a3c <__mcmp>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	dd00      	ble.n	8008aba <_dtoa_r+0x9a2>
 8008ab8:	e5a5      	b.n	8008606 <_dtoa_r+0x4ee>
 8008aba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008abc:	43db      	mvns	r3, r3
 8008abe:	9302      	str	r3, [sp, #8]
 8008ac0:	9b06      	ldr	r3, [sp, #24]
 8008ac2:	9308      	str	r3, [sp, #32]
 8008ac4:	2400      	movs	r4, #0
 8008ac6:	0031      	movs	r1, r6
 8008ac8:	0038      	movs	r0, r7
 8008aca:	f000 fd2b 	bl	8009524 <_Bfree>
 8008ace:	2d00      	cmp	r5, #0
 8008ad0:	d100      	bne.n	8008ad4 <_dtoa_r+0x9bc>
 8008ad2:	e6b7      	b.n	8008844 <_dtoa_r+0x72c>
 8008ad4:	2c00      	cmp	r4, #0
 8008ad6:	d005      	beq.n	8008ae4 <_dtoa_r+0x9cc>
 8008ad8:	42ac      	cmp	r4, r5
 8008ada:	d003      	beq.n	8008ae4 <_dtoa_r+0x9cc>
 8008adc:	0021      	movs	r1, r4
 8008ade:	0038      	movs	r0, r7
 8008ae0:	f000 fd20 	bl	8009524 <_Bfree>
 8008ae4:	0029      	movs	r1, r5
 8008ae6:	0038      	movs	r0, r7
 8008ae8:	f000 fd1c 	bl	8009524 <_Bfree>
 8008aec:	e6aa      	b.n	8008844 <_dtoa_r+0x72c>
 8008aee:	2600      	movs	r6, #0
 8008af0:	0035      	movs	r5, r6
 8008af2:	e7e2      	b.n	8008aba <_dtoa_r+0x9a2>
 8008af4:	9602      	str	r6, [sp, #8]
 8008af6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008af8:	0035      	movs	r5, r6
 8008afa:	e584      	b.n	8008606 <_dtoa_r+0x4ee>
 8008afc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d100      	bne.n	8008b04 <_dtoa_r+0x9ec>
 8008b02:	e0ce      	b.n	8008ca2 <_dtoa_r+0xb8a>
 8008b04:	9b07      	ldr	r3, [sp, #28]
 8008b06:	930c      	str	r3, [sp, #48]	; 0x30
 8008b08:	2c00      	cmp	r4, #0
 8008b0a:	dd05      	ble.n	8008b18 <_dtoa_r+0xa00>
 8008b0c:	0029      	movs	r1, r5
 8008b0e:	0022      	movs	r2, r4
 8008b10:	0038      	movs	r0, r7
 8008b12:	f000 ff25 	bl	8009960 <__lshift>
 8008b16:	0005      	movs	r5, r0
 8008b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b1a:	0028      	movs	r0, r5
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d022      	beq.n	8008b66 <_dtoa_r+0xa4e>
 8008b20:	0038      	movs	r0, r7
 8008b22:	6869      	ldr	r1, [r5, #4]
 8008b24:	f000 fcba 	bl	800949c <_Balloc>
 8008b28:	1e04      	subs	r4, r0, #0
 8008b2a:	d10f      	bne.n	8008b4c <_dtoa_r+0xa34>
 8008b2c:	0002      	movs	r2, r0
 8008b2e:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <_dtoa_r+0xa2c>)
 8008b30:	4905      	ldr	r1, [pc, #20]	; (8008b48 <_dtoa_r+0xa30>)
 8008b32:	f7ff fb06 	bl	8008142 <_dtoa_r+0x2a>
 8008b36:	46c0      	nop			; (mov r8, r8)
 8008b38:	40240000 	.word	0x40240000
 8008b3c:	00000433 	.word	0x00000433
 8008b40:	7ff00000 	.word	0x7ff00000
 8008b44:	0800b340 	.word	0x0800b340
 8008b48:	000002ea 	.word	0x000002ea
 8008b4c:	0029      	movs	r1, r5
 8008b4e:	692b      	ldr	r3, [r5, #16]
 8008b50:	310c      	adds	r1, #12
 8008b52:	1c9a      	adds	r2, r3, #2
 8008b54:	0092      	lsls	r2, r2, #2
 8008b56:	300c      	adds	r0, #12
 8008b58:	f000 fc97 	bl	800948a <memcpy>
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	0021      	movs	r1, r4
 8008b60:	0038      	movs	r0, r7
 8008b62:	f000 fefd 	bl	8009960 <__lshift>
 8008b66:	9b06      	ldr	r3, [sp, #24]
 8008b68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b6a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	189b      	adds	r3, r3, r2
 8008b70:	2201      	movs	r2, #1
 8008b72:	002c      	movs	r4, r5
 8008b74:	0005      	movs	r5, r0
 8008b76:	9314      	str	r3, [sp, #80]	; 0x50
 8008b78:	9b08      	ldr	r3, [sp, #32]
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b7e:	0031      	movs	r1, r6
 8008b80:	9805      	ldr	r0, [sp, #20]
 8008b82:	f7ff fa3d 	bl	8008000 <quorem>
 8008b86:	0003      	movs	r3, r0
 8008b88:	0021      	movs	r1, r4
 8008b8a:	3330      	adds	r3, #48	; 0x30
 8008b8c:	900d      	str	r0, [sp, #52]	; 0x34
 8008b8e:	9805      	ldr	r0, [sp, #20]
 8008b90:	9307      	str	r3, [sp, #28]
 8008b92:	f000 ff53 	bl	8009a3c <__mcmp>
 8008b96:	002a      	movs	r2, r5
 8008b98:	900e      	str	r0, [sp, #56]	; 0x38
 8008b9a:	0031      	movs	r1, r6
 8008b9c:	0038      	movs	r0, r7
 8008b9e:	f000 ff69 	bl	8009a74 <__mdiff>
 8008ba2:	68c3      	ldr	r3, [r0, #12]
 8008ba4:	9008      	str	r0, [sp, #32]
 8008ba6:	9310      	str	r3, [sp, #64]	; 0x40
 8008ba8:	2301      	movs	r3, #1
 8008baa:	930c      	str	r3, [sp, #48]	; 0x30
 8008bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d104      	bne.n	8008bbc <_dtoa_r+0xaa4>
 8008bb2:	0001      	movs	r1, r0
 8008bb4:	9805      	ldr	r0, [sp, #20]
 8008bb6:	f000 ff41 	bl	8009a3c <__mcmp>
 8008bba:	900c      	str	r0, [sp, #48]	; 0x30
 8008bbc:	0038      	movs	r0, r7
 8008bbe:	9908      	ldr	r1, [sp, #32]
 8008bc0:	f000 fcb0 	bl	8009524 <_Bfree>
 8008bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bc8:	3301      	adds	r3, #1
 8008bca:	9308      	str	r3, [sp, #32]
 8008bcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	d10c      	bne.n	8008bf0 <_dtoa_r+0xad8>
 8008bd6:	9b07      	ldr	r3, [sp, #28]
 8008bd8:	2b39      	cmp	r3, #57	; 0x39
 8008bda:	d026      	beq.n	8008c2a <_dtoa_r+0xb12>
 8008bdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	dd02      	ble.n	8008be8 <_dtoa_r+0xad0>
 8008be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008be4:	3331      	adds	r3, #49	; 0x31
 8008be6:	9307      	str	r3, [sp, #28]
 8008be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bea:	9a07      	ldr	r2, [sp, #28]
 8008bec:	701a      	strb	r2, [r3, #0]
 8008bee:	e76a      	b.n	8008ac6 <_dtoa_r+0x9ae>
 8008bf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	db04      	blt.n	8008c00 <_dtoa_r+0xae8>
 8008bf6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	d11f      	bne.n	8008c40 <_dtoa_r+0xb28>
 8008c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	ddf0      	ble.n	8008be8 <_dtoa_r+0xad0>
 8008c06:	9905      	ldr	r1, [sp, #20]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	0038      	movs	r0, r7
 8008c0c:	f000 fea8 	bl	8009960 <__lshift>
 8008c10:	0031      	movs	r1, r6
 8008c12:	9005      	str	r0, [sp, #20]
 8008c14:	f000 ff12 	bl	8009a3c <__mcmp>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	dc03      	bgt.n	8008c24 <_dtoa_r+0xb0c>
 8008c1c:	d1e4      	bne.n	8008be8 <_dtoa_r+0xad0>
 8008c1e:	9b07      	ldr	r3, [sp, #28]
 8008c20:	07db      	lsls	r3, r3, #31
 8008c22:	d5e1      	bpl.n	8008be8 <_dtoa_r+0xad0>
 8008c24:	9b07      	ldr	r3, [sp, #28]
 8008c26:	2b39      	cmp	r3, #57	; 0x39
 8008c28:	d1db      	bne.n	8008be2 <_dtoa_r+0xaca>
 8008c2a:	2339      	movs	r3, #57	; 0x39
 8008c2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c2e:	7013      	strb	r3, [r2, #0]
 8008c30:	9b08      	ldr	r3, [sp, #32]
 8008c32:	9308      	str	r3, [sp, #32]
 8008c34:	3b01      	subs	r3, #1
 8008c36:	781a      	ldrb	r2, [r3, #0]
 8008c38:	2a39      	cmp	r2, #57	; 0x39
 8008c3a:	d068      	beq.n	8008d0e <_dtoa_r+0xbf6>
 8008c3c:	3201      	adds	r2, #1
 8008c3e:	e7d5      	b.n	8008bec <_dtoa_r+0xad4>
 8008c40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	dd07      	ble.n	8008c56 <_dtoa_r+0xb3e>
 8008c46:	9b07      	ldr	r3, [sp, #28]
 8008c48:	2b39      	cmp	r3, #57	; 0x39
 8008c4a:	d0ee      	beq.n	8008c2a <_dtoa_r+0xb12>
 8008c4c:	9b07      	ldr	r3, [sp, #28]
 8008c4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c50:	3301      	adds	r3, #1
 8008c52:	7013      	strb	r3, [r2, #0]
 8008c54:	e737      	b.n	8008ac6 <_dtoa_r+0x9ae>
 8008c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c58:	9a07      	ldr	r2, [sp, #28]
 8008c5a:	701a      	strb	r2, [r3, #0]
 8008c5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d03e      	beq.n	8008ce2 <_dtoa_r+0xbca>
 8008c64:	2300      	movs	r3, #0
 8008c66:	220a      	movs	r2, #10
 8008c68:	9905      	ldr	r1, [sp, #20]
 8008c6a:	0038      	movs	r0, r7
 8008c6c:	f000 fc7e 	bl	800956c <__multadd>
 8008c70:	2300      	movs	r3, #0
 8008c72:	9005      	str	r0, [sp, #20]
 8008c74:	220a      	movs	r2, #10
 8008c76:	0021      	movs	r1, r4
 8008c78:	0038      	movs	r0, r7
 8008c7a:	42ac      	cmp	r4, r5
 8008c7c:	d106      	bne.n	8008c8c <_dtoa_r+0xb74>
 8008c7e:	f000 fc75 	bl	800956c <__multadd>
 8008c82:	0004      	movs	r4, r0
 8008c84:	0005      	movs	r5, r0
 8008c86:	9b08      	ldr	r3, [sp, #32]
 8008c88:	930a      	str	r3, [sp, #40]	; 0x28
 8008c8a:	e778      	b.n	8008b7e <_dtoa_r+0xa66>
 8008c8c:	f000 fc6e 	bl	800956c <__multadd>
 8008c90:	0029      	movs	r1, r5
 8008c92:	0004      	movs	r4, r0
 8008c94:	2300      	movs	r3, #0
 8008c96:	220a      	movs	r2, #10
 8008c98:	0038      	movs	r0, r7
 8008c9a:	f000 fc67 	bl	800956c <__multadd>
 8008c9e:	0005      	movs	r5, r0
 8008ca0:	e7f1      	b.n	8008c86 <_dtoa_r+0xb6e>
 8008ca2:	9b07      	ldr	r3, [sp, #28]
 8008ca4:	930c      	str	r3, [sp, #48]	; 0x30
 8008ca6:	2400      	movs	r4, #0
 8008ca8:	0031      	movs	r1, r6
 8008caa:	9805      	ldr	r0, [sp, #20]
 8008cac:	f7ff f9a8 	bl	8008000 <quorem>
 8008cb0:	9b06      	ldr	r3, [sp, #24]
 8008cb2:	3030      	adds	r0, #48	; 0x30
 8008cb4:	5518      	strb	r0, [r3, r4]
 8008cb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cb8:	3401      	adds	r4, #1
 8008cba:	9007      	str	r0, [sp, #28]
 8008cbc:	42a3      	cmp	r3, r4
 8008cbe:	dd07      	ble.n	8008cd0 <_dtoa_r+0xbb8>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	220a      	movs	r2, #10
 8008cc4:	0038      	movs	r0, r7
 8008cc6:	9905      	ldr	r1, [sp, #20]
 8008cc8:	f000 fc50 	bl	800956c <__multadd>
 8008ccc:	9005      	str	r0, [sp, #20]
 8008cce:	e7eb      	b.n	8008ca8 <_dtoa_r+0xb90>
 8008cd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cd2:	2001      	movs	r0, #1
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	dd00      	ble.n	8008cda <_dtoa_r+0xbc2>
 8008cd8:	0018      	movs	r0, r3
 8008cda:	2400      	movs	r4, #0
 8008cdc:	9b06      	ldr	r3, [sp, #24]
 8008cde:	181b      	adds	r3, r3, r0
 8008ce0:	9308      	str	r3, [sp, #32]
 8008ce2:	9905      	ldr	r1, [sp, #20]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	0038      	movs	r0, r7
 8008ce8:	f000 fe3a 	bl	8009960 <__lshift>
 8008cec:	0031      	movs	r1, r6
 8008cee:	9005      	str	r0, [sp, #20]
 8008cf0:	f000 fea4 	bl	8009a3c <__mcmp>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	dc9b      	bgt.n	8008c30 <_dtoa_r+0xb18>
 8008cf8:	d102      	bne.n	8008d00 <_dtoa_r+0xbe8>
 8008cfa:	9b07      	ldr	r3, [sp, #28]
 8008cfc:	07db      	lsls	r3, r3, #31
 8008cfe:	d497      	bmi.n	8008c30 <_dtoa_r+0xb18>
 8008d00:	9b08      	ldr	r3, [sp, #32]
 8008d02:	9308      	str	r3, [sp, #32]
 8008d04:	3b01      	subs	r3, #1
 8008d06:	781a      	ldrb	r2, [r3, #0]
 8008d08:	2a30      	cmp	r2, #48	; 0x30
 8008d0a:	d0fa      	beq.n	8008d02 <_dtoa_r+0xbea>
 8008d0c:	e6db      	b.n	8008ac6 <_dtoa_r+0x9ae>
 8008d0e:	9a06      	ldr	r2, [sp, #24]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d18e      	bne.n	8008c32 <_dtoa_r+0xb1a>
 8008d14:	9b02      	ldr	r3, [sp, #8]
 8008d16:	3301      	adds	r3, #1
 8008d18:	9302      	str	r3, [sp, #8]
 8008d1a:	2331      	movs	r3, #49	; 0x31
 8008d1c:	e799      	b.n	8008c52 <_dtoa_r+0xb3a>
 8008d1e:	4b09      	ldr	r3, [pc, #36]	; (8008d44 <_dtoa_r+0xc2c>)
 8008d20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008d22:	9306      	str	r3, [sp, #24]
 8008d24:	4b08      	ldr	r3, [pc, #32]	; (8008d48 <_dtoa_r+0xc30>)
 8008d26:	2a00      	cmp	r2, #0
 8008d28:	d001      	beq.n	8008d2e <_dtoa_r+0xc16>
 8008d2a:	f7ff fa3f 	bl	80081ac <_dtoa_r+0x94>
 8008d2e:	f7ff fa3f 	bl	80081b0 <_dtoa_r+0x98>
 8008d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	dcb6      	bgt.n	8008ca6 <_dtoa_r+0xb8e>
 8008d38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	dd00      	ble.n	8008d40 <_dtoa_r+0xc28>
 8008d3e:	e6ac      	b.n	8008a9a <_dtoa_r+0x982>
 8008d40:	e7b1      	b.n	8008ca6 <_dtoa_r+0xb8e>
 8008d42:	46c0      	nop			; (mov r8, r8)
 8008d44:	0800b2c1 	.word	0x0800b2c1
 8008d48:	0800b2c9 	.word	0x0800b2c9

08008d4c <rshift>:
 8008d4c:	0002      	movs	r2, r0
 8008d4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d50:	6904      	ldr	r4, [r0, #16]
 8008d52:	3214      	adds	r2, #20
 8008d54:	0013      	movs	r3, r2
 8008d56:	b085      	sub	sp, #20
 8008d58:	114f      	asrs	r7, r1, #5
 8008d5a:	42bc      	cmp	r4, r7
 8008d5c:	dd31      	ble.n	8008dc2 <rshift+0x76>
 8008d5e:	00bb      	lsls	r3, r7, #2
 8008d60:	18d3      	adds	r3, r2, r3
 8008d62:	261f      	movs	r6, #31
 8008d64:	9301      	str	r3, [sp, #4]
 8008d66:	000b      	movs	r3, r1
 8008d68:	00a5      	lsls	r5, r4, #2
 8008d6a:	4033      	ands	r3, r6
 8008d6c:	1955      	adds	r5, r2, r5
 8008d6e:	9302      	str	r3, [sp, #8]
 8008d70:	4231      	tst	r1, r6
 8008d72:	d10c      	bne.n	8008d8e <rshift+0x42>
 8008d74:	0016      	movs	r6, r2
 8008d76:	9901      	ldr	r1, [sp, #4]
 8008d78:	428d      	cmp	r5, r1
 8008d7a:	d838      	bhi.n	8008dee <rshift+0xa2>
 8008d7c:	9901      	ldr	r1, [sp, #4]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	3903      	subs	r1, #3
 8008d82:	428d      	cmp	r5, r1
 8008d84:	d301      	bcc.n	8008d8a <rshift+0x3e>
 8008d86:	1be3      	subs	r3, r4, r7
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	18d3      	adds	r3, r2, r3
 8008d8c:	e019      	b.n	8008dc2 <rshift+0x76>
 8008d8e:	2120      	movs	r1, #32
 8008d90:	9b02      	ldr	r3, [sp, #8]
 8008d92:	9e01      	ldr	r6, [sp, #4]
 8008d94:	1acb      	subs	r3, r1, r3
 8008d96:	9303      	str	r3, [sp, #12]
 8008d98:	ce02      	ldmia	r6!, {r1}
 8008d9a:	9b02      	ldr	r3, [sp, #8]
 8008d9c:	4694      	mov	ip, r2
 8008d9e:	40d9      	lsrs	r1, r3
 8008da0:	9100      	str	r1, [sp, #0]
 8008da2:	42b5      	cmp	r5, r6
 8008da4:	d816      	bhi.n	8008dd4 <rshift+0x88>
 8008da6:	9e01      	ldr	r6, [sp, #4]
 8008da8:	2300      	movs	r3, #0
 8008daa:	3601      	adds	r6, #1
 8008dac:	42b5      	cmp	r5, r6
 8008dae:	d302      	bcc.n	8008db6 <rshift+0x6a>
 8008db0:	1be3      	subs	r3, r4, r7
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	3b04      	subs	r3, #4
 8008db6:	9900      	ldr	r1, [sp, #0]
 8008db8:	18d3      	adds	r3, r2, r3
 8008dba:	6019      	str	r1, [r3, #0]
 8008dbc:	2900      	cmp	r1, #0
 8008dbe:	d000      	beq.n	8008dc2 <rshift+0x76>
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	1a99      	subs	r1, r3, r2
 8008dc4:	1089      	asrs	r1, r1, #2
 8008dc6:	6101      	str	r1, [r0, #16]
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d101      	bne.n	8008dd0 <rshift+0x84>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	6143      	str	r3, [r0, #20]
 8008dd0:	b005      	add	sp, #20
 8008dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dd4:	6833      	ldr	r3, [r6, #0]
 8008dd6:	9903      	ldr	r1, [sp, #12]
 8008dd8:	408b      	lsls	r3, r1
 8008dda:	9900      	ldr	r1, [sp, #0]
 8008ddc:	4319      	orrs	r1, r3
 8008dde:	4663      	mov	r3, ip
 8008de0:	c302      	stmia	r3!, {r1}
 8008de2:	469c      	mov	ip, r3
 8008de4:	ce02      	ldmia	r6!, {r1}
 8008de6:	9b02      	ldr	r3, [sp, #8]
 8008de8:	40d9      	lsrs	r1, r3
 8008dea:	9100      	str	r1, [sp, #0]
 8008dec:	e7d9      	b.n	8008da2 <rshift+0x56>
 8008dee:	c908      	ldmia	r1!, {r3}
 8008df0:	c608      	stmia	r6!, {r3}
 8008df2:	e7c1      	b.n	8008d78 <rshift+0x2c>

08008df4 <__hexdig_fun>:
 8008df4:	0002      	movs	r2, r0
 8008df6:	3a30      	subs	r2, #48	; 0x30
 8008df8:	0003      	movs	r3, r0
 8008dfa:	2a09      	cmp	r2, #9
 8008dfc:	d802      	bhi.n	8008e04 <__hexdig_fun+0x10>
 8008dfe:	3b20      	subs	r3, #32
 8008e00:	b2d8      	uxtb	r0, r3
 8008e02:	4770      	bx	lr
 8008e04:	0002      	movs	r2, r0
 8008e06:	3a61      	subs	r2, #97	; 0x61
 8008e08:	2a05      	cmp	r2, #5
 8008e0a:	d801      	bhi.n	8008e10 <__hexdig_fun+0x1c>
 8008e0c:	3b47      	subs	r3, #71	; 0x47
 8008e0e:	e7f7      	b.n	8008e00 <__hexdig_fun+0xc>
 8008e10:	001a      	movs	r2, r3
 8008e12:	3a41      	subs	r2, #65	; 0x41
 8008e14:	2000      	movs	r0, #0
 8008e16:	2a05      	cmp	r2, #5
 8008e18:	d8f3      	bhi.n	8008e02 <__hexdig_fun+0xe>
 8008e1a:	3b27      	subs	r3, #39	; 0x27
 8008e1c:	e7f0      	b.n	8008e00 <__hexdig_fun+0xc>
	...

08008e20 <__gethex>:
 8008e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e22:	b08d      	sub	sp, #52	; 0x34
 8008e24:	930a      	str	r3, [sp, #40]	; 0x28
 8008e26:	4bbf      	ldr	r3, [pc, #764]	; (8009124 <__gethex+0x304>)
 8008e28:	9005      	str	r0, [sp, #20]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	9109      	str	r1, [sp, #36]	; 0x24
 8008e2e:	0018      	movs	r0, r3
 8008e30:	9202      	str	r2, [sp, #8]
 8008e32:	9307      	str	r3, [sp, #28]
 8008e34:	f7f7 f968 	bl	8000108 <strlen>
 8008e38:	2202      	movs	r2, #2
 8008e3a:	9b07      	ldr	r3, [sp, #28]
 8008e3c:	4252      	negs	r2, r2
 8008e3e:	181b      	adds	r3, r3, r0
 8008e40:	3b01      	subs	r3, #1
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	9003      	str	r0, [sp, #12]
 8008e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e4a:	6819      	ldr	r1, [r3, #0]
 8008e4c:	1c8b      	adds	r3, r1, #2
 8008e4e:	1a52      	subs	r2, r2, r1
 8008e50:	18d1      	adds	r1, r2, r3
 8008e52:	9301      	str	r3, [sp, #4]
 8008e54:	9108      	str	r1, [sp, #32]
 8008e56:	9901      	ldr	r1, [sp, #4]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	7808      	ldrb	r0, [r1, #0]
 8008e5c:	2830      	cmp	r0, #48	; 0x30
 8008e5e:	d0f7      	beq.n	8008e50 <__gethex+0x30>
 8008e60:	f7ff ffc8 	bl	8008df4 <__hexdig_fun>
 8008e64:	2300      	movs	r3, #0
 8008e66:	001c      	movs	r4, r3
 8008e68:	9304      	str	r3, [sp, #16]
 8008e6a:	4298      	cmp	r0, r3
 8008e6c:	d11f      	bne.n	8008eae <__gethex+0x8e>
 8008e6e:	9a03      	ldr	r2, [sp, #12]
 8008e70:	9907      	ldr	r1, [sp, #28]
 8008e72:	9801      	ldr	r0, [sp, #4]
 8008e74:	f001 fa64 	bl	800a340 <strncmp>
 8008e78:	0007      	movs	r7, r0
 8008e7a:	42a0      	cmp	r0, r4
 8008e7c:	d000      	beq.n	8008e80 <__gethex+0x60>
 8008e7e:	e06b      	b.n	8008f58 <__gethex+0x138>
 8008e80:	9b01      	ldr	r3, [sp, #4]
 8008e82:	9a03      	ldr	r2, [sp, #12]
 8008e84:	5c98      	ldrb	r0, [r3, r2]
 8008e86:	189d      	adds	r5, r3, r2
 8008e88:	f7ff ffb4 	bl	8008df4 <__hexdig_fun>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	9304      	str	r3, [sp, #16]
 8008e90:	42a0      	cmp	r0, r4
 8008e92:	d030      	beq.n	8008ef6 <__gethex+0xd6>
 8008e94:	9501      	str	r5, [sp, #4]
 8008e96:	9b01      	ldr	r3, [sp, #4]
 8008e98:	7818      	ldrb	r0, [r3, #0]
 8008e9a:	2830      	cmp	r0, #48	; 0x30
 8008e9c:	d009      	beq.n	8008eb2 <__gethex+0x92>
 8008e9e:	f7ff ffa9 	bl	8008df4 <__hexdig_fun>
 8008ea2:	4242      	negs	r2, r0
 8008ea4:	4142      	adcs	r2, r0
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	002c      	movs	r4, r5
 8008eaa:	9204      	str	r2, [sp, #16]
 8008eac:	9308      	str	r3, [sp, #32]
 8008eae:	9d01      	ldr	r5, [sp, #4]
 8008eb0:	e004      	b.n	8008ebc <__gethex+0x9c>
 8008eb2:	9b01      	ldr	r3, [sp, #4]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	e7ed      	b.n	8008e96 <__gethex+0x76>
 8008eba:	3501      	adds	r5, #1
 8008ebc:	7828      	ldrb	r0, [r5, #0]
 8008ebe:	f7ff ff99 	bl	8008df4 <__hexdig_fun>
 8008ec2:	1e07      	subs	r7, r0, #0
 8008ec4:	d1f9      	bne.n	8008eba <__gethex+0x9a>
 8008ec6:	0028      	movs	r0, r5
 8008ec8:	9a03      	ldr	r2, [sp, #12]
 8008eca:	9907      	ldr	r1, [sp, #28]
 8008ecc:	f001 fa38 	bl	800a340 <strncmp>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d10e      	bne.n	8008ef2 <__gethex+0xd2>
 8008ed4:	2c00      	cmp	r4, #0
 8008ed6:	d107      	bne.n	8008ee8 <__gethex+0xc8>
 8008ed8:	9b03      	ldr	r3, [sp, #12]
 8008eda:	18ed      	adds	r5, r5, r3
 8008edc:	002c      	movs	r4, r5
 8008ede:	7828      	ldrb	r0, [r5, #0]
 8008ee0:	f7ff ff88 	bl	8008df4 <__hexdig_fun>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d102      	bne.n	8008eee <__gethex+0xce>
 8008ee8:	1b64      	subs	r4, r4, r5
 8008eea:	00a7      	lsls	r7, r4, #2
 8008eec:	e003      	b.n	8008ef6 <__gethex+0xd6>
 8008eee:	3501      	adds	r5, #1
 8008ef0:	e7f5      	b.n	8008ede <__gethex+0xbe>
 8008ef2:	2c00      	cmp	r4, #0
 8008ef4:	d1f8      	bne.n	8008ee8 <__gethex+0xc8>
 8008ef6:	2220      	movs	r2, #32
 8008ef8:	782b      	ldrb	r3, [r5, #0]
 8008efa:	002e      	movs	r6, r5
 8008efc:	4393      	bics	r3, r2
 8008efe:	2b50      	cmp	r3, #80	; 0x50
 8008f00:	d11d      	bne.n	8008f3e <__gethex+0x11e>
 8008f02:	786b      	ldrb	r3, [r5, #1]
 8008f04:	2b2b      	cmp	r3, #43	; 0x2b
 8008f06:	d02c      	beq.n	8008f62 <__gethex+0x142>
 8008f08:	2b2d      	cmp	r3, #45	; 0x2d
 8008f0a:	d02e      	beq.n	8008f6a <__gethex+0x14a>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	1c6e      	adds	r6, r5, #1
 8008f10:	9306      	str	r3, [sp, #24]
 8008f12:	7830      	ldrb	r0, [r6, #0]
 8008f14:	f7ff ff6e 	bl	8008df4 <__hexdig_fun>
 8008f18:	1e43      	subs	r3, r0, #1
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	2b18      	cmp	r3, #24
 8008f1e:	d82b      	bhi.n	8008f78 <__gethex+0x158>
 8008f20:	3810      	subs	r0, #16
 8008f22:	0004      	movs	r4, r0
 8008f24:	7870      	ldrb	r0, [r6, #1]
 8008f26:	f7ff ff65 	bl	8008df4 <__hexdig_fun>
 8008f2a:	1e43      	subs	r3, r0, #1
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	3601      	adds	r6, #1
 8008f30:	2b18      	cmp	r3, #24
 8008f32:	d91c      	bls.n	8008f6e <__gethex+0x14e>
 8008f34:	9b06      	ldr	r3, [sp, #24]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d000      	beq.n	8008f3c <__gethex+0x11c>
 8008f3a:	4264      	negs	r4, r4
 8008f3c:	193f      	adds	r7, r7, r4
 8008f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f40:	601e      	str	r6, [r3, #0]
 8008f42:	9b04      	ldr	r3, [sp, #16]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d019      	beq.n	8008f7c <__gethex+0x15c>
 8008f48:	2600      	movs	r6, #0
 8008f4a:	9b08      	ldr	r3, [sp, #32]
 8008f4c:	42b3      	cmp	r3, r6
 8008f4e:	d100      	bne.n	8008f52 <__gethex+0x132>
 8008f50:	3606      	adds	r6, #6
 8008f52:	0030      	movs	r0, r6
 8008f54:	b00d      	add	sp, #52	; 0x34
 8008f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f58:	2301      	movs	r3, #1
 8008f5a:	2700      	movs	r7, #0
 8008f5c:	9d01      	ldr	r5, [sp, #4]
 8008f5e:	9304      	str	r3, [sp, #16]
 8008f60:	e7c9      	b.n	8008ef6 <__gethex+0xd6>
 8008f62:	2300      	movs	r3, #0
 8008f64:	9306      	str	r3, [sp, #24]
 8008f66:	1cae      	adds	r6, r5, #2
 8008f68:	e7d3      	b.n	8008f12 <__gethex+0xf2>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e7fa      	b.n	8008f64 <__gethex+0x144>
 8008f6e:	230a      	movs	r3, #10
 8008f70:	435c      	muls	r4, r3
 8008f72:	1824      	adds	r4, r4, r0
 8008f74:	3c10      	subs	r4, #16
 8008f76:	e7d5      	b.n	8008f24 <__gethex+0x104>
 8008f78:	002e      	movs	r6, r5
 8008f7a:	e7e0      	b.n	8008f3e <__gethex+0x11e>
 8008f7c:	9b01      	ldr	r3, [sp, #4]
 8008f7e:	9904      	ldr	r1, [sp, #16]
 8008f80:	1aeb      	subs	r3, r5, r3
 8008f82:	3b01      	subs	r3, #1
 8008f84:	2b07      	cmp	r3, #7
 8008f86:	dc0a      	bgt.n	8008f9e <__gethex+0x17e>
 8008f88:	9805      	ldr	r0, [sp, #20]
 8008f8a:	f000 fa87 	bl	800949c <_Balloc>
 8008f8e:	1e04      	subs	r4, r0, #0
 8008f90:	d108      	bne.n	8008fa4 <__gethex+0x184>
 8008f92:	0002      	movs	r2, r0
 8008f94:	21de      	movs	r1, #222	; 0xde
 8008f96:	4b64      	ldr	r3, [pc, #400]	; (8009128 <__gethex+0x308>)
 8008f98:	4864      	ldr	r0, [pc, #400]	; (800912c <__gethex+0x30c>)
 8008f9a:	f001 f9f1 	bl	800a380 <__assert_func>
 8008f9e:	3101      	adds	r1, #1
 8008fa0:	105b      	asrs	r3, r3, #1
 8008fa2:	e7ef      	b.n	8008f84 <__gethex+0x164>
 8008fa4:	0003      	movs	r3, r0
 8008fa6:	3314      	adds	r3, #20
 8008fa8:	9304      	str	r3, [sp, #16]
 8008faa:	9309      	str	r3, [sp, #36]	; 0x24
 8008fac:	2300      	movs	r3, #0
 8008fae:	001e      	movs	r6, r3
 8008fb0:	9306      	str	r3, [sp, #24]
 8008fb2:	9b01      	ldr	r3, [sp, #4]
 8008fb4:	42ab      	cmp	r3, r5
 8008fb6:	d340      	bcc.n	800903a <__gethex+0x21a>
 8008fb8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008fba:	9b04      	ldr	r3, [sp, #16]
 8008fbc:	c540      	stmia	r5!, {r6}
 8008fbe:	1aed      	subs	r5, r5, r3
 8008fc0:	10ad      	asrs	r5, r5, #2
 8008fc2:	0030      	movs	r0, r6
 8008fc4:	6125      	str	r5, [r4, #16]
 8008fc6:	f000 fb61 	bl	800968c <__hi0bits>
 8008fca:	9b02      	ldr	r3, [sp, #8]
 8008fcc:	016d      	lsls	r5, r5, #5
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	1a2e      	subs	r6, r5, r0
 8008fd2:	9301      	str	r3, [sp, #4]
 8008fd4:	429e      	cmp	r6, r3
 8008fd6:	dd5a      	ble.n	800908e <__gethex+0x26e>
 8008fd8:	1af6      	subs	r6, r6, r3
 8008fda:	0031      	movs	r1, r6
 8008fdc:	0020      	movs	r0, r4
 8008fde:	f000 ff03 	bl	8009de8 <__any_on>
 8008fe2:	1e05      	subs	r5, r0, #0
 8008fe4:	d016      	beq.n	8009014 <__gethex+0x1f4>
 8008fe6:	2501      	movs	r5, #1
 8008fe8:	211f      	movs	r1, #31
 8008fea:	0028      	movs	r0, r5
 8008fec:	1e73      	subs	r3, r6, #1
 8008fee:	4019      	ands	r1, r3
 8008ff0:	4088      	lsls	r0, r1
 8008ff2:	0001      	movs	r1, r0
 8008ff4:	115a      	asrs	r2, r3, #5
 8008ff6:	9804      	ldr	r0, [sp, #16]
 8008ff8:	0092      	lsls	r2, r2, #2
 8008ffa:	5812      	ldr	r2, [r2, r0]
 8008ffc:	420a      	tst	r2, r1
 8008ffe:	d009      	beq.n	8009014 <__gethex+0x1f4>
 8009000:	42ab      	cmp	r3, r5
 8009002:	dd06      	ble.n	8009012 <__gethex+0x1f2>
 8009004:	0020      	movs	r0, r4
 8009006:	1eb1      	subs	r1, r6, #2
 8009008:	f000 feee 	bl	8009de8 <__any_on>
 800900c:	3502      	adds	r5, #2
 800900e:	2800      	cmp	r0, #0
 8009010:	d100      	bne.n	8009014 <__gethex+0x1f4>
 8009012:	2502      	movs	r5, #2
 8009014:	0031      	movs	r1, r6
 8009016:	0020      	movs	r0, r4
 8009018:	f7ff fe98 	bl	8008d4c <rshift>
 800901c:	19bf      	adds	r7, r7, r6
 800901e:	9b02      	ldr	r3, [sp, #8]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	9303      	str	r3, [sp, #12]
 8009024:	42bb      	cmp	r3, r7
 8009026:	da42      	bge.n	80090ae <__gethex+0x28e>
 8009028:	0021      	movs	r1, r4
 800902a:	9805      	ldr	r0, [sp, #20]
 800902c:	f000 fa7a 	bl	8009524 <_Bfree>
 8009030:	2300      	movs	r3, #0
 8009032:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009034:	26a3      	movs	r6, #163	; 0xa3
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	e78b      	b.n	8008f52 <__gethex+0x132>
 800903a:	1e6b      	subs	r3, r5, #1
 800903c:	9308      	str	r3, [sp, #32]
 800903e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	4293      	cmp	r3, r2
 8009044:	d014      	beq.n	8009070 <__gethex+0x250>
 8009046:	9b06      	ldr	r3, [sp, #24]
 8009048:	2b20      	cmp	r3, #32
 800904a:	d104      	bne.n	8009056 <__gethex+0x236>
 800904c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800904e:	c340      	stmia	r3!, {r6}
 8009050:	2600      	movs	r6, #0
 8009052:	9309      	str	r3, [sp, #36]	; 0x24
 8009054:	9606      	str	r6, [sp, #24]
 8009056:	9b08      	ldr	r3, [sp, #32]
 8009058:	7818      	ldrb	r0, [r3, #0]
 800905a:	f7ff fecb 	bl	8008df4 <__hexdig_fun>
 800905e:	230f      	movs	r3, #15
 8009060:	4018      	ands	r0, r3
 8009062:	9b06      	ldr	r3, [sp, #24]
 8009064:	9d08      	ldr	r5, [sp, #32]
 8009066:	4098      	lsls	r0, r3
 8009068:	3304      	adds	r3, #4
 800906a:	4306      	orrs	r6, r0
 800906c:	9306      	str	r3, [sp, #24]
 800906e:	e7a0      	b.n	8008fb2 <__gethex+0x192>
 8009070:	2301      	movs	r3, #1
 8009072:	9a03      	ldr	r2, [sp, #12]
 8009074:	1a9d      	subs	r5, r3, r2
 8009076:	9b08      	ldr	r3, [sp, #32]
 8009078:	195d      	adds	r5, r3, r5
 800907a:	9b01      	ldr	r3, [sp, #4]
 800907c:	429d      	cmp	r5, r3
 800907e:	d3e2      	bcc.n	8009046 <__gethex+0x226>
 8009080:	0028      	movs	r0, r5
 8009082:	9907      	ldr	r1, [sp, #28]
 8009084:	f001 f95c 	bl	800a340 <strncmp>
 8009088:	2800      	cmp	r0, #0
 800908a:	d1dc      	bne.n	8009046 <__gethex+0x226>
 800908c:	e791      	b.n	8008fb2 <__gethex+0x192>
 800908e:	9b01      	ldr	r3, [sp, #4]
 8009090:	2500      	movs	r5, #0
 8009092:	429e      	cmp	r6, r3
 8009094:	dac3      	bge.n	800901e <__gethex+0x1fe>
 8009096:	1b9e      	subs	r6, r3, r6
 8009098:	0021      	movs	r1, r4
 800909a:	0032      	movs	r2, r6
 800909c:	9805      	ldr	r0, [sp, #20]
 800909e:	f000 fc5f 	bl	8009960 <__lshift>
 80090a2:	0003      	movs	r3, r0
 80090a4:	3314      	adds	r3, #20
 80090a6:	0004      	movs	r4, r0
 80090a8:	1bbf      	subs	r7, r7, r6
 80090aa:	9304      	str	r3, [sp, #16]
 80090ac:	e7b7      	b.n	800901e <__gethex+0x1fe>
 80090ae:	9b02      	ldr	r3, [sp, #8]
 80090b0:	685e      	ldr	r6, [r3, #4]
 80090b2:	42be      	cmp	r6, r7
 80090b4:	dd71      	ble.n	800919a <__gethex+0x37a>
 80090b6:	9b01      	ldr	r3, [sp, #4]
 80090b8:	1bf6      	subs	r6, r6, r7
 80090ba:	42b3      	cmp	r3, r6
 80090bc:	dc38      	bgt.n	8009130 <__gethex+0x310>
 80090be:	9b02      	ldr	r3, [sp, #8]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d026      	beq.n	8009114 <__gethex+0x2f4>
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d028      	beq.n	800911c <__gethex+0x2fc>
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d119      	bne.n	8009102 <__gethex+0x2e2>
 80090ce:	9b01      	ldr	r3, [sp, #4]
 80090d0:	42b3      	cmp	r3, r6
 80090d2:	d116      	bne.n	8009102 <__gethex+0x2e2>
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d10d      	bne.n	80090f4 <__gethex+0x2d4>
 80090d8:	9b02      	ldr	r3, [sp, #8]
 80090da:	2662      	movs	r6, #98	; 0x62
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	9301      	str	r3, [sp, #4]
 80090e0:	9a01      	ldr	r2, [sp, #4]
 80090e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090e4:	601a      	str	r2, [r3, #0]
 80090e6:	2301      	movs	r3, #1
 80090e8:	9a04      	ldr	r2, [sp, #16]
 80090ea:	6123      	str	r3, [r4, #16]
 80090ec:	6013      	str	r3, [r2, #0]
 80090ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090f0:	601c      	str	r4, [r3, #0]
 80090f2:	e72e      	b.n	8008f52 <__gethex+0x132>
 80090f4:	9901      	ldr	r1, [sp, #4]
 80090f6:	0020      	movs	r0, r4
 80090f8:	3901      	subs	r1, #1
 80090fa:	f000 fe75 	bl	8009de8 <__any_on>
 80090fe:	2800      	cmp	r0, #0
 8009100:	d1ea      	bne.n	80090d8 <__gethex+0x2b8>
 8009102:	0021      	movs	r1, r4
 8009104:	9805      	ldr	r0, [sp, #20]
 8009106:	f000 fa0d 	bl	8009524 <_Bfree>
 800910a:	2300      	movs	r3, #0
 800910c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800910e:	2650      	movs	r6, #80	; 0x50
 8009110:	6013      	str	r3, [r2, #0]
 8009112:	e71e      	b.n	8008f52 <__gethex+0x132>
 8009114:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1f3      	bne.n	8009102 <__gethex+0x2e2>
 800911a:	e7dd      	b.n	80090d8 <__gethex+0x2b8>
 800911c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1da      	bne.n	80090d8 <__gethex+0x2b8>
 8009122:	e7ee      	b.n	8009102 <__gethex+0x2e2>
 8009124:	0800b3b8 	.word	0x0800b3b8
 8009128:	0800b340 	.word	0x0800b340
 800912c:	0800b351 	.word	0x0800b351
 8009130:	1e77      	subs	r7, r6, #1
 8009132:	2d00      	cmp	r5, #0
 8009134:	d12f      	bne.n	8009196 <__gethex+0x376>
 8009136:	2f00      	cmp	r7, #0
 8009138:	d004      	beq.n	8009144 <__gethex+0x324>
 800913a:	0039      	movs	r1, r7
 800913c:	0020      	movs	r0, r4
 800913e:	f000 fe53 	bl	8009de8 <__any_on>
 8009142:	0005      	movs	r5, r0
 8009144:	231f      	movs	r3, #31
 8009146:	117a      	asrs	r2, r7, #5
 8009148:	401f      	ands	r7, r3
 800914a:	3b1e      	subs	r3, #30
 800914c:	40bb      	lsls	r3, r7
 800914e:	9904      	ldr	r1, [sp, #16]
 8009150:	0092      	lsls	r2, r2, #2
 8009152:	5852      	ldr	r2, [r2, r1]
 8009154:	421a      	tst	r2, r3
 8009156:	d001      	beq.n	800915c <__gethex+0x33c>
 8009158:	2302      	movs	r3, #2
 800915a:	431d      	orrs	r5, r3
 800915c:	9b01      	ldr	r3, [sp, #4]
 800915e:	0031      	movs	r1, r6
 8009160:	1b9b      	subs	r3, r3, r6
 8009162:	2602      	movs	r6, #2
 8009164:	0020      	movs	r0, r4
 8009166:	9301      	str	r3, [sp, #4]
 8009168:	f7ff fdf0 	bl	8008d4c <rshift>
 800916c:	9b02      	ldr	r3, [sp, #8]
 800916e:	685f      	ldr	r7, [r3, #4]
 8009170:	2d00      	cmp	r5, #0
 8009172:	d041      	beq.n	80091f8 <__gethex+0x3d8>
 8009174:	9b02      	ldr	r3, [sp, #8]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	2b02      	cmp	r3, #2
 800917a:	d010      	beq.n	800919e <__gethex+0x37e>
 800917c:	2b03      	cmp	r3, #3
 800917e:	d012      	beq.n	80091a6 <__gethex+0x386>
 8009180:	2b01      	cmp	r3, #1
 8009182:	d106      	bne.n	8009192 <__gethex+0x372>
 8009184:	07aa      	lsls	r2, r5, #30
 8009186:	d504      	bpl.n	8009192 <__gethex+0x372>
 8009188:	9a04      	ldr	r2, [sp, #16]
 800918a:	6810      	ldr	r0, [r2, #0]
 800918c:	4305      	orrs	r5, r0
 800918e:	421d      	tst	r5, r3
 8009190:	d10c      	bne.n	80091ac <__gethex+0x38c>
 8009192:	2310      	movs	r3, #16
 8009194:	e02f      	b.n	80091f6 <__gethex+0x3d6>
 8009196:	2501      	movs	r5, #1
 8009198:	e7d4      	b.n	8009144 <__gethex+0x324>
 800919a:	2601      	movs	r6, #1
 800919c:	e7e8      	b.n	8009170 <__gethex+0x350>
 800919e:	2301      	movs	r3, #1
 80091a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80091a2:	1a9b      	subs	r3, r3, r2
 80091a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80091a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d0f2      	beq.n	8009192 <__gethex+0x372>
 80091ac:	6923      	ldr	r3, [r4, #16]
 80091ae:	2000      	movs	r0, #0
 80091b0:	9303      	str	r3, [sp, #12]
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	9304      	str	r3, [sp, #16]
 80091b6:	0023      	movs	r3, r4
 80091b8:	9a04      	ldr	r2, [sp, #16]
 80091ba:	3314      	adds	r3, #20
 80091bc:	1899      	adds	r1, r3, r2
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	1c55      	adds	r5, r2, #1
 80091c2:	d01e      	beq.n	8009202 <__gethex+0x3e2>
 80091c4:	3201      	adds	r2, #1
 80091c6:	601a      	str	r2, [r3, #0]
 80091c8:	0023      	movs	r3, r4
 80091ca:	3314      	adds	r3, #20
 80091cc:	2e02      	cmp	r6, #2
 80091ce:	d140      	bne.n	8009252 <__gethex+0x432>
 80091d0:	9a02      	ldr	r2, [sp, #8]
 80091d2:	9901      	ldr	r1, [sp, #4]
 80091d4:	6812      	ldr	r2, [r2, #0]
 80091d6:	3a01      	subs	r2, #1
 80091d8:	428a      	cmp	r2, r1
 80091da:	d10b      	bne.n	80091f4 <__gethex+0x3d4>
 80091dc:	114a      	asrs	r2, r1, #5
 80091de:	211f      	movs	r1, #31
 80091e0:	9801      	ldr	r0, [sp, #4]
 80091e2:	0092      	lsls	r2, r2, #2
 80091e4:	4001      	ands	r1, r0
 80091e6:	2001      	movs	r0, #1
 80091e8:	0005      	movs	r5, r0
 80091ea:	408d      	lsls	r5, r1
 80091ec:	58d3      	ldr	r3, [r2, r3]
 80091ee:	422b      	tst	r3, r5
 80091f0:	d000      	beq.n	80091f4 <__gethex+0x3d4>
 80091f2:	2601      	movs	r6, #1
 80091f4:	2320      	movs	r3, #32
 80091f6:	431e      	orrs	r6, r3
 80091f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091fa:	601c      	str	r4, [r3, #0]
 80091fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091fe:	601f      	str	r7, [r3, #0]
 8009200:	e6a7      	b.n	8008f52 <__gethex+0x132>
 8009202:	c301      	stmia	r3!, {r0}
 8009204:	4299      	cmp	r1, r3
 8009206:	d8da      	bhi.n	80091be <__gethex+0x39e>
 8009208:	9b03      	ldr	r3, [sp, #12]
 800920a:	68a2      	ldr	r2, [r4, #8]
 800920c:	4293      	cmp	r3, r2
 800920e:	db17      	blt.n	8009240 <__gethex+0x420>
 8009210:	6863      	ldr	r3, [r4, #4]
 8009212:	9805      	ldr	r0, [sp, #20]
 8009214:	1c59      	adds	r1, r3, #1
 8009216:	f000 f941 	bl	800949c <_Balloc>
 800921a:	1e05      	subs	r5, r0, #0
 800921c:	d103      	bne.n	8009226 <__gethex+0x406>
 800921e:	0002      	movs	r2, r0
 8009220:	2184      	movs	r1, #132	; 0x84
 8009222:	4b1c      	ldr	r3, [pc, #112]	; (8009294 <__gethex+0x474>)
 8009224:	e6b8      	b.n	8008f98 <__gethex+0x178>
 8009226:	0021      	movs	r1, r4
 8009228:	6923      	ldr	r3, [r4, #16]
 800922a:	310c      	adds	r1, #12
 800922c:	1c9a      	adds	r2, r3, #2
 800922e:	0092      	lsls	r2, r2, #2
 8009230:	300c      	adds	r0, #12
 8009232:	f000 f92a 	bl	800948a <memcpy>
 8009236:	0021      	movs	r1, r4
 8009238:	9805      	ldr	r0, [sp, #20]
 800923a:	f000 f973 	bl	8009524 <_Bfree>
 800923e:	002c      	movs	r4, r5
 8009240:	6923      	ldr	r3, [r4, #16]
 8009242:	1c5a      	adds	r2, r3, #1
 8009244:	6122      	str	r2, [r4, #16]
 8009246:	2201      	movs	r2, #1
 8009248:	3304      	adds	r3, #4
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	18e3      	adds	r3, r4, r3
 800924e:	605a      	str	r2, [r3, #4]
 8009250:	e7ba      	b.n	80091c8 <__gethex+0x3a8>
 8009252:	6922      	ldr	r2, [r4, #16]
 8009254:	9903      	ldr	r1, [sp, #12]
 8009256:	428a      	cmp	r2, r1
 8009258:	dd09      	ble.n	800926e <__gethex+0x44e>
 800925a:	2101      	movs	r1, #1
 800925c:	0020      	movs	r0, r4
 800925e:	f7ff fd75 	bl	8008d4c <rshift>
 8009262:	9b02      	ldr	r3, [sp, #8]
 8009264:	3701      	adds	r7, #1
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	42bb      	cmp	r3, r7
 800926a:	dac2      	bge.n	80091f2 <__gethex+0x3d2>
 800926c:	e6dc      	b.n	8009028 <__gethex+0x208>
 800926e:	221f      	movs	r2, #31
 8009270:	9d01      	ldr	r5, [sp, #4]
 8009272:	9901      	ldr	r1, [sp, #4]
 8009274:	2601      	movs	r6, #1
 8009276:	4015      	ands	r5, r2
 8009278:	4211      	tst	r1, r2
 800927a:	d0bb      	beq.n	80091f4 <__gethex+0x3d4>
 800927c:	9a04      	ldr	r2, [sp, #16]
 800927e:	189b      	adds	r3, r3, r2
 8009280:	3b04      	subs	r3, #4
 8009282:	6818      	ldr	r0, [r3, #0]
 8009284:	f000 fa02 	bl	800968c <__hi0bits>
 8009288:	2320      	movs	r3, #32
 800928a:	1b5d      	subs	r5, r3, r5
 800928c:	42a8      	cmp	r0, r5
 800928e:	dbe4      	blt.n	800925a <__gethex+0x43a>
 8009290:	e7b0      	b.n	80091f4 <__gethex+0x3d4>
 8009292:	46c0      	nop			; (mov r8, r8)
 8009294:	0800b340 	.word	0x0800b340

08009298 <L_shift>:
 8009298:	2308      	movs	r3, #8
 800929a:	b570      	push	{r4, r5, r6, lr}
 800929c:	2520      	movs	r5, #32
 800929e:	1a9a      	subs	r2, r3, r2
 80092a0:	0092      	lsls	r2, r2, #2
 80092a2:	1aad      	subs	r5, r5, r2
 80092a4:	6843      	ldr	r3, [r0, #4]
 80092a6:	6806      	ldr	r6, [r0, #0]
 80092a8:	001c      	movs	r4, r3
 80092aa:	40ac      	lsls	r4, r5
 80092ac:	40d3      	lsrs	r3, r2
 80092ae:	4334      	orrs	r4, r6
 80092b0:	6004      	str	r4, [r0, #0]
 80092b2:	6043      	str	r3, [r0, #4]
 80092b4:	3004      	adds	r0, #4
 80092b6:	4288      	cmp	r0, r1
 80092b8:	d3f4      	bcc.n	80092a4 <L_shift+0xc>
 80092ba:	bd70      	pop	{r4, r5, r6, pc}

080092bc <__match>:
 80092bc:	b530      	push	{r4, r5, lr}
 80092be:	6803      	ldr	r3, [r0, #0]
 80092c0:	780c      	ldrb	r4, [r1, #0]
 80092c2:	3301      	adds	r3, #1
 80092c4:	2c00      	cmp	r4, #0
 80092c6:	d102      	bne.n	80092ce <__match+0x12>
 80092c8:	6003      	str	r3, [r0, #0]
 80092ca:	2001      	movs	r0, #1
 80092cc:	bd30      	pop	{r4, r5, pc}
 80092ce:	781a      	ldrb	r2, [r3, #0]
 80092d0:	0015      	movs	r5, r2
 80092d2:	3d41      	subs	r5, #65	; 0x41
 80092d4:	2d19      	cmp	r5, #25
 80092d6:	d800      	bhi.n	80092da <__match+0x1e>
 80092d8:	3220      	adds	r2, #32
 80092da:	3101      	adds	r1, #1
 80092dc:	42a2      	cmp	r2, r4
 80092de:	d0ef      	beq.n	80092c0 <__match+0x4>
 80092e0:	2000      	movs	r0, #0
 80092e2:	e7f3      	b.n	80092cc <__match+0x10>

080092e4 <__hexnan>:
 80092e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092e6:	680b      	ldr	r3, [r1, #0]
 80092e8:	b08b      	sub	sp, #44	; 0x2c
 80092ea:	9201      	str	r2, [sp, #4]
 80092ec:	9901      	ldr	r1, [sp, #4]
 80092ee:	115a      	asrs	r2, r3, #5
 80092f0:	0092      	lsls	r2, r2, #2
 80092f2:	188a      	adds	r2, r1, r2
 80092f4:	9202      	str	r2, [sp, #8]
 80092f6:	0019      	movs	r1, r3
 80092f8:	221f      	movs	r2, #31
 80092fa:	4011      	ands	r1, r2
 80092fc:	9008      	str	r0, [sp, #32]
 80092fe:	9106      	str	r1, [sp, #24]
 8009300:	4213      	tst	r3, r2
 8009302:	d002      	beq.n	800930a <__hexnan+0x26>
 8009304:	9b02      	ldr	r3, [sp, #8]
 8009306:	3304      	adds	r3, #4
 8009308:	9302      	str	r3, [sp, #8]
 800930a:	9b02      	ldr	r3, [sp, #8]
 800930c:	2500      	movs	r5, #0
 800930e:	1f1e      	subs	r6, r3, #4
 8009310:	0037      	movs	r7, r6
 8009312:	0034      	movs	r4, r6
 8009314:	9b08      	ldr	r3, [sp, #32]
 8009316:	6035      	str	r5, [r6, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	9507      	str	r5, [sp, #28]
 800931c:	9305      	str	r3, [sp, #20]
 800931e:	9503      	str	r5, [sp, #12]
 8009320:	9b05      	ldr	r3, [sp, #20]
 8009322:	3301      	adds	r3, #1
 8009324:	9309      	str	r3, [sp, #36]	; 0x24
 8009326:	9b05      	ldr	r3, [sp, #20]
 8009328:	785b      	ldrb	r3, [r3, #1]
 800932a:	9304      	str	r3, [sp, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d028      	beq.n	8009382 <__hexnan+0x9e>
 8009330:	9804      	ldr	r0, [sp, #16]
 8009332:	f7ff fd5f 	bl	8008df4 <__hexdig_fun>
 8009336:	2800      	cmp	r0, #0
 8009338:	d154      	bne.n	80093e4 <__hexnan+0x100>
 800933a:	9b04      	ldr	r3, [sp, #16]
 800933c:	2b20      	cmp	r3, #32
 800933e:	d819      	bhi.n	8009374 <__hexnan+0x90>
 8009340:	9b03      	ldr	r3, [sp, #12]
 8009342:	9a07      	ldr	r2, [sp, #28]
 8009344:	4293      	cmp	r3, r2
 8009346:	dd12      	ble.n	800936e <__hexnan+0x8a>
 8009348:	42bc      	cmp	r4, r7
 800934a:	d206      	bcs.n	800935a <__hexnan+0x76>
 800934c:	2d07      	cmp	r5, #7
 800934e:	dc04      	bgt.n	800935a <__hexnan+0x76>
 8009350:	002a      	movs	r2, r5
 8009352:	0039      	movs	r1, r7
 8009354:	0020      	movs	r0, r4
 8009356:	f7ff ff9f 	bl	8009298 <L_shift>
 800935a:	9b01      	ldr	r3, [sp, #4]
 800935c:	2508      	movs	r5, #8
 800935e:	429c      	cmp	r4, r3
 8009360:	d905      	bls.n	800936e <__hexnan+0x8a>
 8009362:	1f27      	subs	r7, r4, #4
 8009364:	2500      	movs	r5, #0
 8009366:	003c      	movs	r4, r7
 8009368:	9b03      	ldr	r3, [sp, #12]
 800936a:	603d      	str	r5, [r7, #0]
 800936c:	9307      	str	r3, [sp, #28]
 800936e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009370:	9305      	str	r3, [sp, #20]
 8009372:	e7d5      	b.n	8009320 <__hexnan+0x3c>
 8009374:	9b04      	ldr	r3, [sp, #16]
 8009376:	2b29      	cmp	r3, #41	; 0x29
 8009378:	d159      	bne.n	800942e <__hexnan+0x14a>
 800937a:	9b05      	ldr	r3, [sp, #20]
 800937c:	9a08      	ldr	r2, [sp, #32]
 800937e:	3302      	adds	r3, #2
 8009380:	6013      	str	r3, [r2, #0]
 8009382:	9b03      	ldr	r3, [sp, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d052      	beq.n	800942e <__hexnan+0x14a>
 8009388:	42bc      	cmp	r4, r7
 800938a:	d206      	bcs.n	800939a <__hexnan+0xb6>
 800938c:	2d07      	cmp	r5, #7
 800938e:	dc04      	bgt.n	800939a <__hexnan+0xb6>
 8009390:	002a      	movs	r2, r5
 8009392:	0039      	movs	r1, r7
 8009394:	0020      	movs	r0, r4
 8009396:	f7ff ff7f 	bl	8009298 <L_shift>
 800939a:	9b01      	ldr	r3, [sp, #4]
 800939c:	429c      	cmp	r4, r3
 800939e:	d935      	bls.n	800940c <__hexnan+0x128>
 80093a0:	001a      	movs	r2, r3
 80093a2:	0023      	movs	r3, r4
 80093a4:	cb02      	ldmia	r3!, {r1}
 80093a6:	c202      	stmia	r2!, {r1}
 80093a8:	429e      	cmp	r6, r3
 80093aa:	d2fb      	bcs.n	80093a4 <__hexnan+0xc0>
 80093ac:	9b02      	ldr	r3, [sp, #8]
 80093ae:	1c61      	adds	r1, r4, #1
 80093b0:	1eda      	subs	r2, r3, #3
 80093b2:	2304      	movs	r3, #4
 80093b4:	4291      	cmp	r1, r2
 80093b6:	d805      	bhi.n	80093c4 <__hexnan+0xe0>
 80093b8:	9b02      	ldr	r3, [sp, #8]
 80093ba:	3b04      	subs	r3, #4
 80093bc:	1b1b      	subs	r3, r3, r4
 80093be:	089b      	lsrs	r3, r3, #2
 80093c0:	3301      	adds	r3, #1
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	9a01      	ldr	r2, [sp, #4]
 80093c6:	18d3      	adds	r3, r2, r3
 80093c8:	2200      	movs	r2, #0
 80093ca:	c304      	stmia	r3!, {r2}
 80093cc:	429e      	cmp	r6, r3
 80093ce:	d2fc      	bcs.n	80093ca <__hexnan+0xe6>
 80093d0:	6833      	ldr	r3, [r6, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d104      	bne.n	80093e0 <__hexnan+0xfc>
 80093d6:	9b01      	ldr	r3, [sp, #4]
 80093d8:	429e      	cmp	r6, r3
 80093da:	d126      	bne.n	800942a <__hexnan+0x146>
 80093dc:	2301      	movs	r3, #1
 80093de:	6033      	str	r3, [r6, #0]
 80093e0:	2005      	movs	r0, #5
 80093e2:	e025      	b.n	8009430 <__hexnan+0x14c>
 80093e4:	9b03      	ldr	r3, [sp, #12]
 80093e6:	3501      	adds	r5, #1
 80093e8:	3301      	adds	r3, #1
 80093ea:	9303      	str	r3, [sp, #12]
 80093ec:	2d08      	cmp	r5, #8
 80093ee:	dd06      	ble.n	80093fe <__hexnan+0x11a>
 80093f0:	9b01      	ldr	r3, [sp, #4]
 80093f2:	429c      	cmp	r4, r3
 80093f4:	d9bb      	bls.n	800936e <__hexnan+0x8a>
 80093f6:	2300      	movs	r3, #0
 80093f8:	2501      	movs	r5, #1
 80093fa:	3c04      	subs	r4, #4
 80093fc:	6023      	str	r3, [r4, #0]
 80093fe:	220f      	movs	r2, #15
 8009400:	6823      	ldr	r3, [r4, #0]
 8009402:	4010      	ands	r0, r2
 8009404:	011b      	lsls	r3, r3, #4
 8009406:	4318      	orrs	r0, r3
 8009408:	6020      	str	r0, [r4, #0]
 800940a:	e7b0      	b.n	800936e <__hexnan+0x8a>
 800940c:	9b06      	ldr	r3, [sp, #24]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d0de      	beq.n	80093d0 <__hexnan+0xec>
 8009412:	2120      	movs	r1, #32
 8009414:	9a06      	ldr	r2, [sp, #24]
 8009416:	9b02      	ldr	r3, [sp, #8]
 8009418:	1a89      	subs	r1, r1, r2
 800941a:	2201      	movs	r2, #1
 800941c:	4252      	negs	r2, r2
 800941e:	40ca      	lsrs	r2, r1
 8009420:	3b04      	subs	r3, #4
 8009422:	6819      	ldr	r1, [r3, #0]
 8009424:	400a      	ands	r2, r1
 8009426:	601a      	str	r2, [r3, #0]
 8009428:	e7d2      	b.n	80093d0 <__hexnan+0xec>
 800942a:	3e04      	subs	r6, #4
 800942c:	e7d0      	b.n	80093d0 <__hexnan+0xec>
 800942e:	2004      	movs	r0, #4
 8009430:	b00b      	add	sp, #44	; 0x2c
 8009432:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009434 <_localeconv_r>:
 8009434:	4800      	ldr	r0, [pc, #0]	; (8009438 <_localeconv_r+0x4>)
 8009436:	4770      	bx	lr
 8009438:	20000164 	.word	0x20000164

0800943c <malloc>:
 800943c:	b510      	push	{r4, lr}
 800943e:	4b03      	ldr	r3, [pc, #12]	; (800944c <malloc+0x10>)
 8009440:	0001      	movs	r1, r0
 8009442:	6818      	ldr	r0, [r3, #0]
 8009444:	f000 fd8c 	bl	8009f60 <_malloc_r>
 8009448:	bd10      	pop	{r4, pc}
 800944a:	46c0      	nop			; (mov r8, r8)
 800944c:	2000000c 	.word	0x2000000c

08009450 <__ascii_mbtowc>:
 8009450:	b082      	sub	sp, #8
 8009452:	2900      	cmp	r1, #0
 8009454:	d100      	bne.n	8009458 <__ascii_mbtowc+0x8>
 8009456:	a901      	add	r1, sp, #4
 8009458:	1e10      	subs	r0, r2, #0
 800945a:	d006      	beq.n	800946a <__ascii_mbtowc+0x1a>
 800945c:	2b00      	cmp	r3, #0
 800945e:	d006      	beq.n	800946e <__ascii_mbtowc+0x1e>
 8009460:	7813      	ldrb	r3, [r2, #0]
 8009462:	600b      	str	r3, [r1, #0]
 8009464:	7810      	ldrb	r0, [r2, #0]
 8009466:	1e43      	subs	r3, r0, #1
 8009468:	4198      	sbcs	r0, r3
 800946a:	b002      	add	sp, #8
 800946c:	4770      	bx	lr
 800946e:	2002      	movs	r0, #2
 8009470:	4240      	negs	r0, r0
 8009472:	e7fa      	b.n	800946a <__ascii_mbtowc+0x1a>

08009474 <memchr>:
 8009474:	b2c9      	uxtb	r1, r1
 8009476:	1882      	adds	r2, r0, r2
 8009478:	4290      	cmp	r0, r2
 800947a:	d101      	bne.n	8009480 <memchr+0xc>
 800947c:	2000      	movs	r0, #0
 800947e:	4770      	bx	lr
 8009480:	7803      	ldrb	r3, [r0, #0]
 8009482:	428b      	cmp	r3, r1
 8009484:	d0fb      	beq.n	800947e <memchr+0xa>
 8009486:	3001      	adds	r0, #1
 8009488:	e7f6      	b.n	8009478 <memchr+0x4>

0800948a <memcpy>:
 800948a:	2300      	movs	r3, #0
 800948c:	b510      	push	{r4, lr}
 800948e:	429a      	cmp	r2, r3
 8009490:	d100      	bne.n	8009494 <memcpy+0xa>
 8009492:	bd10      	pop	{r4, pc}
 8009494:	5ccc      	ldrb	r4, [r1, r3]
 8009496:	54c4      	strb	r4, [r0, r3]
 8009498:	3301      	adds	r3, #1
 800949a:	e7f8      	b.n	800948e <memcpy+0x4>

0800949c <_Balloc>:
 800949c:	b570      	push	{r4, r5, r6, lr}
 800949e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80094a0:	0006      	movs	r6, r0
 80094a2:	000c      	movs	r4, r1
 80094a4:	2d00      	cmp	r5, #0
 80094a6:	d10e      	bne.n	80094c6 <_Balloc+0x2a>
 80094a8:	2010      	movs	r0, #16
 80094aa:	f7ff ffc7 	bl	800943c <malloc>
 80094ae:	1e02      	subs	r2, r0, #0
 80094b0:	6270      	str	r0, [r6, #36]	; 0x24
 80094b2:	d104      	bne.n	80094be <_Balloc+0x22>
 80094b4:	2166      	movs	r1, #102	; 0x66
 80094b6:	4b19      	ldr	r3, [pc, #100]	; (800951c <_Balloc+0x80>)
 80094b8:	4819      	ldr	r0, [pc, #100]	; (8009520 <_Balloc+0x84>)
 80094ba:	f000 ff61 	bl	800a380 <__assert_func>
 80094be:	6045      	str	r5, [r0, #4]
 80094c0:	6085      	str	r5, [r0, #8]
 80094c2:	6005      	str	r5, [r0, #0]
 80094c4:	60c5      	str	r5, [r0, #12]
 80094c6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80094c8:	68eb      	ldr	r3, [r5, #12]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d013      	beq.n	80094f6 <_Balloc+0x5a>
 80094ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80094d0:	00a2      	lsls	r2, r4, #2
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	189b      	adds	r3, r3, r2
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	2800      	cmp	r0, #0
 80094da:	d118      	bne.n	800950e <_Balloc+0x72>
 80094dc:	2101      	movs	r1, #1
 80094de:	000d      	movs	r5, r1
 80094e0:	40a5      	lsls	r5, r4
 80094e2:	1d6a      	adds	r2, r5, #5
 80094e4:	0030      	movs	r0, r6
 80094e6:	0092      	lsls	r2, r2, #2
 80094e8:	f000 fca1 	bl	8009e2e <_calloc_r>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	d00c      	beq.n	800950a <_Balloc+0x6e>
 80094f0:	6044      	str	r4, [r0, #4]
 80094f2:	6085      	str	r5, [r0, #8]
 80094f4:	e00d      	b.n	8009512 <_Balloc+0x76>
 80094f6:	2221      	movs	r2, #33	; 0x21
 80094f8:	2104      	movs	r1, #4
 80094fa:	0030      	movs	r0, r6
 80094fc:	f000 fc97 	bl	8009e2e <_calloc_r>
 8009500:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009502:	60e8      	str	r0, [r5, #12]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1e1      	bne.n	80094ce <_Balloc+0x32>
 800950a:	2000      	movs	r0, #0
 800950c:	bd70      	pop	{r4, r5, r6, pc}
 800950e:	6802      	ldr	r2, [r0, #0]
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	2300      	movs	r3, #0
 8009514:	6103      	str	r3, [r0, #16]
 8009516:	60c3      	str	r3, [r0, #12]
 8009518:	e7f8      	b.n	800950c <_Balloc+0x70>
 800951a:	46c0      	nop			; (mov r8, r8)
 800951c:	0800b2ce 	.word	0x0800b2ce
 8009520:	0800b3cc 	.word	0x0800b3cc

08009524 <_Bfree>:
 8009524:	b570      	push	{r4, r5, r6, lr}
 8009526:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009528:	0005      	movs	r5, r0
 800952a:	000c      	movs	r4, r1
 800952c:	2e00      	cmp	r6, #0
 800952e:	d10e      	bne.n	800954e <_Bfree+0x2a>
 8009530:	2010      	movs	r0, #16
 8009532:	f7ff ff83 	bl	800943c <malloc>
 8009536:	1e02      	subs	r2, r0, #0
 8009538:	6268      	str	r0, [r5, #36]	; 0x24
 800953a:	d104      	bne.n	8009546 <_Bfree+0x22>
 800953c:	218a      	movs	r1, #138	; 0x8a
 800953e:	4b09      	ldr	r3, [pc, #36]	; (8009564 <_Bfree+0x40>)
 8009540:	4809      	ldr	r0, [pc, #36]	; (8009568 <_Bfree+0x44>)
 8009542:	f000 ff1d 	bl	800a380 <__assert_func>
 8009546:	6046      	str	r6, [r0, #4]
 8009548:	6086      	str	r6, [r0, #8]
 800954a:	6006      	str	r6, [r0, #0]
 800954c:	60c6      	str	r6, [r0, #12]
 800954e:	2c00      	cmp	r4, #0
 8009550:	d007      	beq.n	8009562 <_Bfree+0x3e>
 8009552:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009554:	6862      	ldr	r2, [r4, #4]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	0092      	lsls	r2, r2, #2
 800955a:	189b      	adds	r3, r3, r2
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	6022      	str	r2, [r4, #0]
 8009560:	601c      	str	r4, [r3, #0]
 8009562:	bd70      	pop	{r4, r5, r6, pc}
 8009564:	0800b2ce 	.word	0x0800b2ce
 8009568:	0800b3cc 	.word	0x0800b3cc

0800956c <__multadd>:
 800956c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800956e:	000e      	movs	r6, r1
 8009570:	9001      	str	r0, [sp, #4]
 8009572:	000c      	movs	r4, r1
 8009574:	001d      	movs	r5, r3
 8009576:	2000      	movs	r0, #0
 8009578:	690f      	ldr	r7, [r1, #16]
 800957a:	3614      	adds	r6, #20
 800957c:	6833      	ldr	r3, [r6, #0]
 800957e:	3001      	adds	r0, #1
 8009580:	b299      	uxth	r1, r3
 8009582:	4351      	muls	r1, r2
 8009584:	0c1b      	lsrs	r3, r3, #16
 8009586:	4353      	muls	r3, r2
 8009588:	1949      	adds	r1, r1, r5
 800958a:	0c0d      	lsrs	r5, r1, #16
 800958c:	195b      	adds	r3, r3, r5
 800958e:	0c1d      	lsrs	r5, r3, #16
 8009590:	b289      	uxth	r1, r1
 8009592:	041b      	lsls	r3, r3, #16
 8009594:	185b      	adds	r3, r3, r1
 8009596:	c608      	stmia	r6!, {r3}
 8009598:	4287      	cmp	r7, r0
 800959a:	dcef      	bgt.n	800957c <__multadd+0x10>
 800959c:	2d00      	cmp	r5, #0
 800959e:	d022      	beq.n	80095e6 <__multadd+0x7a>
 80095a0:	68a3      	ldr	r3, [r4, #8]
 80095a2:	42bb      	cmp	r3, r7
 80095a4:	dc19      	bgt.n	80095da <__multadd+0x6e>
 80095a6:	6863      	ldr	r3, [r4, #4]
 80095a8:	9801      	ldr	r0, [sp, #4]
 80095aa:	1c59      	adds	r1, r3, #1
 80095ac:	f7ff ff76 	bl	800949c <_Balloc>
 80095b0:	1e06      	subs	r6, r0, #0
 80095b2:	d105      	bne.n	80095c0 <__multadd+0x54>
 80095b4:	0002      	movs	r2, r0
 80095b6:	21b5      	movs	r1, #181	; 0xb5
 80095b8:	4b0c      	ldr	r3, [pc, #48]	; (80095ec <__multadd+0x80>)
 80095ba:	480d      	ldr	r0, [pc, #52]	; (80095f0 <__multadd+0x84>)
 80095bc:	f000 fee0 	bl	800a380 <__assert_func>
 80095c0:	0021      	movs	r1, r4
 80095c2:	6923      	ldr	r3, [r4, #16]
 80095c4:	310c      	adds	r1, #12
 80095c6:	1c9a      	adds	r2, r3, #2
 80095c8:	0092      	lsls	r2, r2, #2
 80095ca:	300c      	adds	r0, #12
 80095cc:	f7ff ff5d 	bl	800948a <memcpy>
 80095d0:	0021      	movs	r1, r4
 80095d2:	9801      	ldr	r0, [sp, #4]
 80095d4:	f7ff ffa6 	bl	8009524 <_Bfree>
 80095d8:	0034      	movs	r4, r6
 80095da:	1d3b      	adds	r3, r7, #4
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	18e3      	adds	r3, r4, r3
 80095e0:	605d      	str	r5, [r3, #4]
 80095e2:	1c7b      	adds	r3, r7, #1
 80095e4:	6123      	str	r3, [r4, #16]
 80095e6:	0020      	movs	r0, r4
 80095e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095ea:	46c0      	nop			; (mov r8, r8)
 80095ec:	0800b340 	.word	0x0800b340
 80095f0:	0800b3cc 	.word	0x0800b3cc

080095f4 <__s2b>:
 80095f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095f6:	0006      	movs	r6, r0
 80095f8:	0018      	movs	r0, r3
 80095fa:	000c      	movs	r4, r1
 80095fc:	3008      	adds	r0, #8
 80095fe:	2109      	movs	r1, #9
 8009600:	9301      	str	r3, [sp, #4]
 8009602:	0015      	movs	r5, r2
 8009604:	f7f6 fe26 	bl	8000254 <__divsi3>
 8009608:	2301      	movs	r3, #1
 800960a:	2100      	movs	r1, #0
 800960c:	4283      	cmp	r3, r0
 800960e:	db0a      	blt.n	8009626 <__s2b+0x32>
 8009610:	0030      	movs	r0, r6
 8009612:	f7ff ff43 	bl	800949c <_Balloc>
 8009616:	1e01      	subs	r1, r0, #0
 8009618:	d108      	bne.n	800962c <__s2b+0x38>
 800961a:	0002      	movs	r2, r0
 800961c:	4b19      	ldr	r3, [pc, #100]	; (8009684 <__s2b+0x90>)
 800961e:	481a      	ldr	r0, [pc, #104]	; (8009688 <__s2b+0x94>)
 8009620:	31ce      	adds	r1, #206	; 0xce
 8009622:	f000 fead 	bl	800a380 <__assert_func>
 8009626:	005b      	lsls	r3, r3, #1
 8009628:	3101      	adds	r1, #1
 800962a:	e7ef      	b.n	800960c <__s2b+0x18>
 800962c:	9b08      	ldr	r3, [sp, #32]
 800962e:	6143      	str	r3, [r0, #20]
 8009630:	2301      	movs	r3, #1
 8009632:	6103      	str	r3, [r0, #16]
 8009634:	2d09      	cmp	r5, #9
 8009636:	dd18      	ble.n	800966a <__s2b+0x76>
 8009638:	0023      	movs	r3, r4
 800963a:	3309      	adds	r3, #9
 800963c:	001f      	movs	r7, r3
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	1964      	adds	r4, r4, r5
 8009642:	783b      	ldrb	r3, [r7, #0]
 8009644:	220a      	movs	r2, #10
 8009646:	0030      	movs	r0, r6
 8009648:	3b30      	subs	r3, #48	; 0x30
 800964a:	f7ff ff8f 	bl	800956c <__multadd>
 800964e:	3701      	adds	r7, #1
 8009650:	0001      	movs	r1, r0
 8009652:	42a7      	cmp	r7, r4
 8009654:	d1f5      	bne.n	8009642 <__s2b+0x4e>
 8009656:	002c      	movs	r4, r5
 8009658:	9b00      	ldr	r3, [sp, #0]
 800965a:	3c08      	subs	r4, #8
 800965c:	191c      	adds	r4, r3, r4
 800965e:	002f      	movs	r7, r5
 8009660:	9b01      	ldr	r3, [sp, #4]
 8009662:	429f      	cmp	r7, r3
 8009664:	db04      	blt.n	8009670 <__s2b+0x7c>
 8009666:	0008      	movs	r0, r1
 8009668:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800966a:	2509      	movs	r5, #9
 800966c:	340a      	adds	r4, #10
 800966e:	e7f6      	b.n	800965e <__s2b+0x6a>
 8009670:	1b63      	subs	r3, r4, r5
 8009672:	5ddb      	ldrb	r3, [r3, r7]
 8009674:	220a      	movs	r2, #10
 8009676:	0030      	movs	r0, r6
 8009678:	3b30      	subs	r3, #48	; 0x30
 800967a:	f7ff ff77 	bl	800956c <__multadd>
 800967e:	3701      	adds	r7, #1
 8009680:	0001      	movs	r1, r0
 8009682:	e7ed      	b.n	8009660 <__s2b+0x6c>
 8009684:	0800b340 	.word	0x0800b340
 8009688:	0800b3cc 	.word	0x0800b3cc

0800968c <__hi0bits>:
 800968c:	0003      	movs	r3, r0
 800968e:	0c02      	lsrs	r2, r0, #16
 8009690:	2000      	movs	r0, #0
 8009692:	4282      	cmp	r2, r0
 8009694:	d101      	bne.n	800969a <__hi0bits+0xe>
 8009696:	041b      	lsls	r3, r3, #16
 8009698:	3010      	adds	r0, #16
 800969a:	0e1a      	lsrs	r2, r3, #24
 800969c:	d101      	bne.n	80096a2 <__hi0bits+0x16>
 800969e:	3008      	adds	r0, #8
 80096a0:	021b      	lsls	r3, r3, #8
 80096a2:	0f1a      	lsrs	r2, r3, #28
 80096a4:	d101      	bne.n	80096aa <__hi0bits+0x1e>
 80096a6:	3004      	adds	r0, #4
 80096a8:	011b      	lsls	r3, r3, #4
 80096aa:	0f9a      	lsrs	r2, r3, #30
 80096ac:	d101      	bne.n	80096b2 <__hi0bits+0x26>
 80096ae:	3002      	adds	r0, #2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	db03      	blt.n	80096be <__hi0bits+0x32>
 80096b6:	3001      	adds	r0, #1
 80096b8:	005b      	lsls	r3, r3, #1
 80096ba:	d400      	bmi.n	80096be <__hi0bits+0x32>
 80096bc:	2020      	movs	r0, #32
 80096be:	4770      	bx	lr

080096c0 <__lo0bits>:
 80096c0:	6803      	ldr	r3, [r0, #0]
 80096c2:	0002      	movs	r2, r0
 80096c4:	2107      	movs	r1, #7
 80096c6:	0018      	movs	r0, r3
 80096c8:	4008      	ands	r0, r1
 80096ca:	420b      	tst	r3, r1
 80096cc:	d00d      	beq.n	80096ea <__lo0bits+0x2a>
 80096ce:	3906      	subs	r1, #6
 80096d0:	2000      	movs	r0, #0
 80096d2:	420b      	tst	r3, r1
 80096d4:	d105      	bne.n	80096e2 <__lo0bits+0x22>
 80096d6:	3002      	adds	r0, #2
 80096d8:	4203      	tst	r3, r0
 80096da:	d003      	beq.n	80096e4 <__lo0bits+0x24>
 80096dc:	40cb      	lsrs	r3, r1
 80096de:	0008      	movs	r0, r1
 80096e0:	6013      	str	r3, [r2, #0]
 80096e2:	4770      	bx	lr
 80096e4:	089b      	lsrs	r3, r3, #2
 80096e6:	6013      	str	r3, [r2, #0]
 80096e8:	e7fb      	b.n	80096e2 <__lo0bits+0x22>
 80096ea:	b299      	uxth	r1, r3
 80096ec:	2900      	cmp	r1, #0
 80096ee:	d101      	bne.n	80096f4 <__lo0bits+0x34>
 80096f0:	2010      	movs	r0, #16
 80096f2:	0c1b      	lsrs	r3, r3, #16
 80096f4:	b2d9      	uxtb	r1, r3
 80096f6:	2900      	cmp	r1, #0
 80096f8:	d101      	bne.n	80096fe <__lo0bits+0x3e>
 80096fa:	3008      	adds	r0, #8
 80096fc:	0a1b      	lsrs	r3, r3, #8
 80096fe:	0719      	lsls	r1, r3, #28
 8009700:	d101      	bne.n	8009706 <__lo0bits+0x46>
 8009702:	3004      	adds	r0, #4
 8009704:	091b      	lsrs	r3, r3, #4
 8009706:	0799      	lsls	r1, r3, #30
 8009708:	d101      	bne.n	800970e <__lo0bits+0x4e>
 800970a:	3002      	adds	r0, #2
 800970c:	089b      	lsrs	r3, r3, #2
 800970e:	07d9      	lsls	r1, r3, #31
 8009710:	d4e9      	bmi.n	80096e6 <__lo0bits+0x26>
 8009712:	3001      	adds	r0, #1
 8009714:	085b      	lsrs	r3, r3, #1
 8009716:	d1e6      	bne.n	80096e6 <__lo0bits+0x26>
 8009718:	2020      	movs	r0, #32
 800971a:	e7e2      	b.n	80096e2 <__lo0bits+0x22>

0800971c <__i2b>:
 800971c:	b510      	push	{r4, lr}
 800971e:	000c      	movs	r4, r1
 8009720:	2101      	movs	r1, #1
 8009722:	f7ff febb 	bl	800949c <_Balloc>
 8009726:	2800      	cmp	r0, #0
 8009728:	d106      	bne.n	8009738 <__i2b+0x1c>
 800972a:	21a0      	movs	r1, #160	; 0xa0
 800972c:	0002      	movs	r2, r0
 800972e:	4b04      	ldr	r3, [pc, #16]	; (8009740 <__i2b+0x24>)
 8009730:	4804      	ldr	r0, [pc, #16]	; (8009744 <__i2b+0x28>)
 8009732:	0049      	lsls	r1, r1, #1
 8009734:	f000 fe24 	bl	800a380 <__assert_func>
 8009738:	2301      	movs	r3, #1
 800973a:	6144      	str	r4, [r0, #20]
 800973c:	6103      	str	r3, [r0, #16]
 800973e:	bd10      	pop	{r4, pc}
 8009740:	0800b340 	.word	0x0800b340
 8009744:	0800b3cc 	.word	0x0800b3cc

08009748 <__multiply>:
 8009748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800974a:	690b      	ldr	r3, [r1, #16]
 800974c:	0014      	movs	r4, r2
 800974e:	6912      	ldr	r2, [r2, #16]
 8009750:	000d      	movs	r5, r1
 8009752:	b089      	sub	sp, #36	; 0x24
 8009754:	4293      	cmp	r3, r2
 8009756:	da01      	bge.n	800975c <__multiply+0x14>
 8009758:	0025      	movs	r5, r4
 800975a:	000c      	movs	r4, r1
 800975c:	692f      	ldr	r7, [r5, #16]
 800975e:	6926      	ldr	r6, [r4, #16]
 8009760:	6869      	ldr	r1, [r5, #4]
 8009762:	19bb      	adds	r3, r7, r6
 8009764:	9302      	str	r3, [sp, #8]
 8009766:	68ab      	ldr	r3, [r5, #8]
 8009768:	19ba      	adds	r2, r7, r6
 800976a:	4293      	cmp	r3, r2
 800976c:	da00      	bge.n	8009770 <__multiply+0x28>
 800976e:	3101      	adds	r1, #1
 8009770:	f7ff fe94 	bl	800949c <_Balloc>
 8009774:	9001      	str	r0, [sp, #4]
 8009776:	2800      	cmp	r0, #0
 8009778:	d106      	bne.n	8009788 <__multiply+0x40>
 800977a:	215e      	movs	r1, #94	; 0x5e
 800977c:	0002      	movs	r2, r0
 800977e:	4b48      	ldr	r3, [pc, #288]	; (80098a0 <__multiply+0x158>)
 8009780:	4848      	ldr	r0, [pc, #288]	; (80098a4 <__multiply+0x15c>)
 8009782:	31ff      	adds	r1, #255	; 0xff
 8009784:	f000 fdfc 	bl	800a380 <__assert_func>
 8009788:	9b01      	ldr	r3, [sp, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	3314      	adds	r3, #20
 800978e:	469c      	mov	ip, r3
 8009790:	19bb      	adds	r3, r7, r6
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4463      	add	r3, ip
 8009796:	9303      	str	r3, [sp, #12]
 8009798:	4663      	mov	r3, ip
 800979a:	9903      	ldr	r1, [sp, #12]
 800979c:	428b      	cmp	r3, r1
 800979e:	d32c      	bcc.n	80097fa <__multiply+0xb2>
 80097a0:	002b      	movs	r3, r5
 80097a2:	0022      	movs	r2, r4
 80097a4:	3314      	adds	r3, #20
 80097a6:	00bf      	lsls	r7, r7, #2
 80097a8:	3214      	adds	r2, #20
 80097aa:	9306      	str	r3, [sp, #24]
 80097ac:	00b6      	lsls	r6, r6, #2
 80097ae:	19db      	adds	r3, r3, r7
 80097b0:	9304      	str	r3, [sp, #16]
 80097b2:	1993      	adds	r3, r2, r6
 80097b4:	9307      	str	r3, [sp, #28]
 80097b6:	2304      	movs	r3, #4
 80097b8:	9305      	str	r3, [sp, #20]
 80097ba:	002b      	movs	r3, r5
 80097bc:	9904      	ldr	r1, [sp, #16]
 80097be:	3315      	adds	r3, #21
 80097c0:	9200      	str	r2, [sp, #0]
 80097c2:	4299      	cmp	r1, r3
 80097c4:	d305      	bcc.n	80097d2 <__multiply+0x8a>
 80097c6:	1b4b      	subs	r3, r1, r5
 80097c8:	3b15      	subs	r3, #21
 80097ca:	089b      	lsrs	r3, r3, #2
 80097cc:	3301      	adds	r3, #1
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	9305      	str	r3, [sp, #20]
 80097d2:	9b07      	ldr	r3, [sp, #28]
 80097d4:	9a00      	ldr	r2, [sp, #0]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d311      	bcc.n	80097fe <__multiply+0xb6>
 80097da:	9b02      	ldr	r3, [sp, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	dd06      	ble.n	80097ee <__multiply+0xa6>
 80097e0:	9b03      	ldr	r3, [sp, #12]
 80097e2:	3b04      	subs	r3, #4
 80097e4:	9303      	str	r3, [sp, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	9300      	str	r3, [sp, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d053      	beq.n	8009896 <__multiply+0x14e>
 80097ee:	9b01      	ldr	r3, [sp, #4]
 80097f0:	9a02      	ldr	r2, [sp, #8]
 80097f2:	0018      	movs	r0, r3
 80097f4:	611a      	str	r2, [r3, #16]
 80097f6:	b009      	add	sp, #36	; 0x24
 80097f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097fa:	c304      	stmia	r3!, {r2}
 80097fc:	e7cd      	b.n	800979a <__multiply+0x52>
 80097fe:	9b00      	ldr	r3, [sp, #0]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	b298      	uxth	r0, r3
 8009804:	2800      	cmp	r0, #0
 8009806:	d01b      	beq.n	8009840 <__multiply+0xf8>
 8009808:	4667      	mov	r7, ip
 800980a:	2400      	movs	r4, #0
 800980c:	9e06      	ldr	r6, [sp, #24]
 800980e:	ce02      	ldmia	r6!, {r1}
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	b28b      	uxth	r3, r1
 8009814:	4343      	muls	r3, r0
 8009816:	b292      	uxth	r2, r2
 8009818:	189b      	adds	r3, r3, r2
 800981a:	191b      	adds	r3, r3, r4
 800981c:	0c0c      	lsrs	r4, r1, #16
 800981e:	4344      	muls	r4, r0
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	0c11      	lsrs	r1, r2, #16
 8009824:	1861      	adds	r1, r4, r1
 8009826:	0c1c      	lsrs	r4, r3, #16
 8009828:	1909      	adds	r1, r1, r4
 800982a:	0c0c      	lsrs	r4, r1, #16
 800982c:	b29b      	uxth	r3, r3
 800982e:	0409      	lsls	r1, r1, #16
 8009830:	430b      	orrs	r3, r1
 8009832:	c708      	stmia	r7!, {r3}
 8009834:	9b04      	ldr	r3, [sp, #16]
 8009836:	42b3      	cmp	r3, r6
 8009838:	d8e9      	bhi.n	800980e <__multiply+0xc6>
 800983a:	4663      	mov	r3, ip
 800983c:	9a05      	ldr	r2, [sp, #20]
 800983e:	509c      	str	r4, [r3, r2]
 8009840:	9b00      	ldr	r3, [sp, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	0c1e      	lsrs	r6, r3, #16
 8009846:	d020      	beq.n	800988a <__multiply+0x142>
 8009848:	4663      	mov	r3, ip
 800984a:	002c      	movs	r4, r5
 800984c:	4660      	mov	r0, ip
 800984e:	2700      	movs	r7, #0
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3414      	adds	r4, #20
 8009854:	6822      	ldr	r2, [r4, #0]
 8009856:	b29b      	uxth	r3, r3
 8009858:	b291      	uxth	r1, r2
 800985a:	4371      	muls	r1, r6
 800985c:	6802      	ldr	r2, [r0, #0]
 800985e:	0c12      	lsrs	r2, r2, #16
 8009860:	1889      	adds	r1, r1, r2
 8009862:	19cf      	adds	r7, r1, r7
 8009864:	0439      	lsls	r1, r7, #16
 8009866:	430b      	orrs	r3, r1
 8009868:	6003      	str	r3, [r0, #0]
 800986a:	cc02      	ldmia	r4!, {r1}
 800986c:	6843      	ldr	r3, [r0, #4]
 800986e:	0c09      	lsrs	r1, r1, #16
 8009870:	4371      	muls	r1, r6
 8009872:	b29b      	uxth	r3, r3
 8009874:	0c3f      	lsrs	r7, r7, #16
 8009876:	18cb      	adds	r3, r1, r3
 8009878:	9a04      	ldr	r2, [sp, #16]
 800987a:	19db      	adds	r3, r3, r7
 800987c:	0c1f      	lsrs	r7, r3, #16
 800987e:	3004      	adds	r0, #4
 8009880:	42a2      	cmp	r2, r4
 8009882:	d8e7      	bhi.n	8009854 <__multiply+0x10c>
 8009884:	4662      	mov	r2, ip
 8009886:	9905      	ldr	r1, [sp, #20]
 8009888:	5053      	str	r3, [r2, r1]
 800988a:	9b00      	ldr	r3, [sp, #0]
 800988c:	3304      	adds	r3, #4
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	2304      	movs	r3, #4
 8009892:	449c      	add	ip, r3
 8009894:	e79d      	b.n	80097d2 <__multiply+0x8a>
 8009896:	9b02      	ldr	r3, [sp, #8]
 8009898:	3b01      	subs	r3, #1
 800989a:	9302      	str	r3, [sp, #8]
 800989c:	e79d      	b.n	80097da <__multiply+0x92>
 800989e:	46c0      	nop			; (mov r8, r8)
 80098a0:	0800b340 	.word	0x0800b340
 80098a4:	0800b3cc 	.word	0x0800b3cc

080098a8 <__pow5mult>:
 80098a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098aa:	2303      	movs	r3, #3
 80098ac:	0015      	movs	r5, r2
 80098ae:	0007      	movs	r7, r0
 80098b0:	000e      	movs	r6, r1
 80098b2:	401a      	ands	r2, r3
 80098b4:	421d      	tst	r5, r3
 80098b6:	d008      	beq.n	80098ca <__pow5mult+0x22>
 80098b8:	4925      	ldr	r1, [pc, #148]	; (8009950 <__pow5mult+0xa8>)
 80098ba:	3a01      	subs	r2, #1
 80098bc:	0092      	lsls	r2, r2, #2
 80098be:	5852      	ldr	r2, [r2, r1]
 80098c0:	2300      	movs	r3, #0
 80098c2:	0031      	movs	r1, r6
 80098c4:	f7ff fe52 	bl	800956c <__multadd>
 80098c8:	0006      	movs	r6, r0
 80098ca:	10ad      	asrs	r5, r5, #2
 80098cc:	d03d      	beq.n	800994a <__pow5mult+0xa2>
 80098ce:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80098d0:	2c00      	cmp	r4, #0
 80098d2:	d10f      	bne.n	80098f4 <__pow5mult+0x4c>
 80098d4:	2010      	movs	r0, #16
 80098d6:	f7ff fdb1 	bl	800943c <malloc>
 80098da:	1e02      	subs	r2, r0, #0
 80098dc:	6278      	str	r0, [r7, #36]	; 0x24
 80098de:	d105      	bne.n	80098ec <__pow5mult+0x44>
 80098e0:	21d7      	movs	r1, #215	; 0xd7
 80098e2:	4b1c      	ldr	r3, [pc, #112]	; (8009954 <__pow5mult+0xac>)
 80098e4:	481c      	ldr	r0, [pc, #112]	; (8009958 <__pow5mult+0xb0>)
 80098e6:	0049      	lsls	r1, r1, #1
 80098e8:	f000 fd4a 	bl	800a380 <__assert_func>
 80098ec:	6044      	str	r4, [r0, #4]
 80098ee:	6084      	str	r4, [r0, #8]
 80098f0:	6004      	str	r4, [r0, #0]
 80098f2:	60c4      	str	r4, [r0, #12]
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	689c      	ldr	r4, [r3, #8]
 80098f8:	9301      	str	r3, [sp, #4]
 80098fa:	2c00      	cmp	r4, #0
 80098fc:	d108      	bne.n	8009910 <__pow5mult+0x68>
 80098fe:	0038      	movs	r0, r7
 8009900:	4916      	ldr	r1, [pc, #88]	; (800995c <__pow5mult+0xb4>)
 8009902:	f7ff ff0b 	bl	800971c <__i2b>
 8009906:	9b01      	ldr	r3, [sp, #4]
 8009908:	0004      	movs	r4, r0
 800990a:	6098      	str	r0, [r3, #8]
 800990c:	2300      	movs	r3, #0
 800990e:	6003      	str	r3, [r0, #0]
 8009910:	2301      	movs	r3, #1
 8009912:	421d      	tst	r5, r3
 8009914:	d00a      	beq.n	800992c <__pow5mult+0x84>
 8009916:	0031      	movs	r1, r6
 8009918:	0022      	movs	r2, r4
 800991a:	0038      	movs	r0, r7
 800991c:	f7ff ff14 	bl	8009748 <__multiply>
 8009920:	0031      	movs	r1, r6
 8009922:	9001      	str	r0, [sp, #4]
 8009924:	0038      	movs	r0, r7
 8009926:	f7ff fdfd 	bl	8009524 <_Bfree>
 800992a:	9e01      	ldr	r6, [sp, #4]
 800992c:	106d      	asrs	r5, r5, #1
 800992e:	d00c      	beq.n	800994a <__pow5mult+0xa2>
 8009930:	6820      	ldr	r0, [r4, #0]
 8009932:	2800      	cmp	r0, #0
 8009934:	d107      	bne.n	8009946 <__pow5mult+0x9e>
 8009936:	0022      	movs	r2, r4
 8009938:	0021      	movs	r1, r4
 800993a:	0038      	movs	r0, r7
 800993c:	f7ff ff04 	bl	8009748 <__multiply>
 8009940:	2300      	movs	r3, #0
 8009942:	6020      	str	r0, [r4, #0]
 8009944:	6003      	str	r3, [r0, #0]
 8009946:	0004      	movs	r4, r0
 8009948:	e7e2      	b.n	8009910 <__pow5mult+0x68>
 800994a:	0030      	movs	r0, r6
 800994c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800994e:	46c0      	nop			; (mov r8, r8)
 8009950:	0800b518 	.word	0x0800b518
 8009954:	0800b2ce 	.word	0x0800b2ce
 8009958:	0800b3cc 	.word	0x0800b3cc
 800995c:	00000271 	.word	0x00000271

08009960 <__lshift>:
 8009960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009962:	000c      	movs	r4, r1
 8009964:	0017      	movs	r7, r2
 8009966:	6923      	ldr	r3, [r4, #16]
 8009968:	1155      	asrs	r5, r2, #5
 800996a:	b087      	sub	sp, #28
 800996c:	18eb      	adds	r3, r5, r3
 800996e:	9302      	str	r3, [sp, #8]
 8009970:	3301      	adds	r3, #1
 8009972:	9301      	str	r3, [sp, #4]
 8009974:	6849      	ldr	r1, [r1, #4]
 8009976:	68a3      	ldr	r3, [r4, #8]
 8009978:	9004      	str	r0, [sp, #16]
 800997a:	9a01      	ldr	r2, [sp, #4]
 800997c:	4293      	cmp	r3, r2
 800997e:	db10      	blt.n	80099a2 <__lshift+0x42>
 8009980:	9804      	ldr	r0, [sp, #16]
 8009982:	f7ff fd8b 	bl	800949c <_Balloc>
 8009986:	2300      	movs	r3, #0
 8009988:	0002      	movs	r2, r0
 800998a:	0006      	movs	r6, r0
 800998c:	0019      	movs	r1, r3
 800998e:	3214      	adds	r2, #20
 8009990:	4298      	cmp	r0, r3
 8009992:	d10c      	bne.n	80099ae <__lshift+0x4e>
 8009994:	21da      	movs	r1, #218	; 0xda
 8009996:	0002      	movs	r2, r0
 8009998:	4b26      	ldr	r3, [pc, #152]	; (8009a34 <__lshift+0xd4>)
 800999a:	4827      	ldr	r0, [pc, #156]	; (8009a38 <__lshift+0xd8>)
 800999c:	31ff      	adds	r1, #255	; 0xff
 800999e:	f000 fcef 	bl	800a380 <__assert_func>
 80099a2:	3101      	adds	r1, #1
 80099a4:	005b      	lsls	r3, r3, #1
 80099a6:	e7e8      	b.n	800997a <__lshift+0x1a>
 80099a8:	0098      	lsls	r0, r3, #2
 80099aa:	5011      	str	r1, [r2, r0]
 80099ac:	3301      	adds	r3, #1
 80099ae:	42ab      	cmp	r3, r5
 80099b0:	dbfa      	blt.n	80099a8 <__lshift+0x48>
 80099b2:	43eb      	mvns	r3, r5
 80099b4:	17db      	asrs	r3, r3, #31
 80099b6:	401d      	ands	r5, r3
 80099b8:	211f      	movs	r1, #31
 80099ba:	0023      	movs	r3, r4
 80099bc:	0038      	movs	r0, r7
 80099be:	00ad      	lsls	r5, r5, #2
 80099c0:	1955      	adds	r5, r2, r5
 80099c2:	6922      	ldr	r2, [r4, #16]
 80099c4:	3314      	adds	r3, #20
 80099c6:	0092      	lsls	r2, r2, #2
 80099c8:	4008      	ands	r0, r1
 80099ca:	4684      	mov	ip, r0
 80099cc:	189a      	adds	r2, r3, r2
 80099ce:	420f      	tst	r7, r1
 80099d0:	d02a      	beq.n	8009a28 <__lshift+0xc8>
 80099d2:	3101      	adds	r1, #1
 80099d4:	1a09      	subs	r1, r1, r0
 80099d6:	9105      	str	r1, [sp, #20]
 80099d8:	2100      	movs	r1, #0
 80099da:	9503      	str	r5, [sp, #12]
 80099dc:	4667      	mov	r7, ip
 80099de:	6818      	ldr	r0, [r3, #0]
 80099e0:	40b8      	lsls	r0, r7
 80099e2:	4301      	orrs	r1, r0
 80099e4:	9803      	ldr	r0, [sp, #12]
 80099e6:	c002      	stmia	r0!, {r1}
 80099e8:	cb02      	ldmia	r3!, {r1}
 80099ea:	9003      	str	r0, [sp, #12]
 80099ec:	9805      	ldr	r0, [sp, #20]
 80099ee:	40c1      	lsrs	r1, r0
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d8f3      	bhi.n	80099dc <__lshift+0x7c>
 80099f4:	0020      	movs	r0, r4
 80099f6:	3015      	adds	r0, #21
 80099f8:	2304      	movs	r3, #4
 80099fa:	4282      	cmp	r2, r0
 80099fc:	d304      	bcc.n	8009a08 <__lshift+0xa8>
 80099fe:	1b13      	subs	r3, r2, r4
 8009a00:	3b15      	subs	r3, #21
 8009a02:	089b      	lsrs	r3, r3, #2
 8009a04:	3301      	adds	r3, #1
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	50e9      	str	r1, [r5, r3]
 8009a0a:	2900      	cmp	r1, #0
 8009a0c:	d002      	beq.n	8009a14 <__lshift+0xb4>
 8009a0e:	9b02      	ldr	r3, [sp, #8]
 8009a10:	3302      	adds	r3, #2
 8009a12:	9301      	str	r3, [sp, #4]
 8009a14:	9b01      	ldr	r3, [sp, #4]
 8009a16:	9804      	ldr	r0, [sp, #16]
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	0021      	movs	r1, r4
 8009a1c:	6133      	str	r3, [r6, #16]
 8009a1e:	f7ff fd81 	bl	8009524 <_Bfree>
 8009a22:	0030      	movs	r0, r6
 8009a24:	b007      	add	sp, #28
 8009a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a28:	cb02      	ldmia	r3!, {r1}
 8009a2a:	c502      	stmia	r5!, {r1}
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d8fb      	bhi.n	8009a28 <__lshift+0xc8>
 8009a30:	e7f0      	b.n	8009a14 <__lshift+0xb4>
 8009a32:	46c0      	nop			; (mov r8, r8)
 8009a34:	0800b340 	.word	0x0800b340
 8009a38:	0800b3cc 	.word	0x0800b3cc

08009a3c <__mcmp>:
 8009a3c:	6902      	ldr	r2, [r0, #16]
 8009a3e:	690b      	ldr	r3, [r1, #16]
 8009a40:	b530      	push	{r4, r5, lr}
 8009a42:	0004      	movs	r4, r0
 8009a44:	1ad0      	subs	r0, r2, r3
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d10d      	bne.n	8009a66 <__mcmp+0x2a>
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	3414      	adds	r4, #20
 8009a4e:	3114      	adds	r1, #20
 8009a50:	18e2      	adds	r2, r4, r3
 8009a52:	18c9      	adds	r1, r1, r3
 8009a54:	3a04      	subs	r2, #4
 8009a56:	3904      	subs	r1, #4
 8009a58:	6815      	ldr	r5, [r2, #0]
 8009a5a:	680b      	ldr	r3, [r1, #0]
 8009a5c:	429d      	cmp	r5, r3
 8009a5e:	d003      	beq.n	8009a68 <__mcmp+0x2c>
 8009a60:	2001      	movs	r0, #1
 8009a62:	429d      	cmp	r5, r3
 8009a64:	d303      	bcc.n	8009a6e <__mcmp+0x32>
 8009a66:	bd30      	pop	{r4, r5, pc}
 8009a68:	4294      	cmp	r4, r2
 8009a6a:	d3f3      	bcc.n	8009a54 <__mcmp+0x18>
 8009a6c:	e7fb      	b.n	8009a66 <__mcmp+0x2a>
 8009a6e:	4240      	negs	r0, r0
 8009a70:	e7f9      	b.n	8009a66 <__mcmp+0x2a>
	...

08009a74 <__mdiff>:
 8009a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a76:	000e      	movs	r6, r1
 8009a78:	0007      	movs	r7, r0
 8009a7a:	0011      	movs	r1, r2
 8009a7c:	0030      	movs	r0, r6
 8009a7e:	b087      	sub	sp, #28
 8009a80:	0014      	movs	r4, r2
 8009a82:	f7ff ffdb 	bl	8009a3c <__mcmp>
 8009a86:	1e05      	subs	r5, r0, #0
 8009a88:	d110      	bne.n	8009aac <__mdiff+0x38>
 8009a8a:	0001      	movs	r1, r0
 8009a8c:	0038      	movs	r0, r7
 8009a8e:	f7ff fd05 	bl	800949c <_Balloc>
 8009a92:	1e02      	subs	r2, r0, #0
 8009a94:	d104      	bne.n	8009aa0 <__mdiff+0x2c>
 8009a96:	4b40      	ldr	r3, [pc, #256]	; (8009b98 <__mdiff+0x124>)
 8009a98:	4940      	ldr	r1, [pc, #256]	; (8009b9c <__mdiff+0x128>)
 8009a9a:	4841      	ldr	r0, [pc, #260]	; (8009ba0 <__mdiff+0x12c>)
 8009a9c:	f000 fc70 	bl	800a380 <__assert_func>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	6145      	str	r5, [r0, #20]
 8009aa4:	6103      	str	r3, [r0, #16]
 8009aa6:	0010      	movs	r0, r2
 8009aa8:	b007      	add	sp, #28
 8009aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aac:	2301      	movs	r3, #1
 8009aae:	9301      	str	r3, [sp, #4]
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	db04      	blt.n	8009abe <__mdiff+0x4a>
 8009ab4:	0023      	movs	r3, r4
 8009ab6:	0034      	movs	r4, r6
 8009ab8:	001e      	movs	r6, r3
 8009aba:	2300      	movs	r3, #0
 8009abc:	9301      	str	r3, [sp, #4]
 8009abe:	0038      	movs	r0, r7
 8009ac0:	6861      	ldr	r1, [r4, #4]
 8009ac2:	f7ff fceb 	bl	800949c <_Balloc>
 8009ac6:	1e02      	subs	r2, r0, #0
 8009ac8:	d103      	bne.n	8009ad2 <__mdiff+0x5e>
 8009aca:	2190      	movs	r1, #144	; 0x90
 8009acc:	4b32      	ldr	r3, [pc, #200]	; (8009b98 <__mdiff+0x124>)
 8009ace:	0089      	lsls	r1, r1, #2
 8009ad0:	e7e3      	b.n	8009a9a <__mdiff+0x26>
 8009ad2:	9b01      	ldr	r3, [sp, #4]
 8009ad4:	2700      	movs	r7, #0
 8009ad6:	60c3      	str	r3, [r0, #12]
 8009ad8:	6920      	ldr	r0, [r4, #16]
 8009ada:	3414      	adds	r4, #20
 8009adc:	9401      	str	r4, [sp, #4]
 8009ade:	9b01      	ldr	r3, [sp, #4]
 8009ae0:	0084      	lsls	r4, r0, #2
 8009ae2:	191b      	adds	r3, r3, r4
 8009ae4:	0034      	movs	r4, r6
 8009ae6:	9302      	str	r3, [sp, #8]
 8009ae8:	6933      	ldr	r3, [r6, #16]
 8009aea:	3414      	adds	r4, #20
 8009aec:	0099      	lsls	r1, r3, #2
 8009aee:	1863      	adds	r3, r4, r1
 8009af0:	9303      	str	r3, [sp, #12]
 8009af2:	0013      	movs	r3, r2
 8009af4:	3314      	adds	r3, #20
 8009af6:	469c      	mov	ip, r3
 8009af8:	9305      	str	r3, [sp, #20]
 8009afa:	9b01      	ldr	r3, [sp, #4]
 8009afc:	9304      	str	r3, [sp, #16]
 8009afe:	9b04      	ldr	r3, [sp, #16]
 8009b00:	cc02      	ldmia	r4!, {r1}
 8009b02:	cb20      	ldmia	r3!, {r5}
 8009b04:	9304      	str	r3, [sp, #16]
 8009b06:	b2ab      	uxth	r3, r5
 8009b08:	19df      	adds	r7, r3, r7
 8009b0a:	b28b      	uxth	r3, r1
 8009b0c:	1afb      	subs	r3, r7, r3
 8009b0e:	0c09      	lsrs	r1, r1, #16
 8009b10:	0c2d      	lsrs	r5, r5, #16
 8009b12:	1a6d      	subs	r5, r5, r1
 8009b14:	1419      	asrs	r1, r3, #16
 8009b16:	186d      	adds	r5, r5, r1
 8009b18:	4661      	mov	r1, ip
 8009b1a:	142f      	asrs	r7, r5, #16
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	042d      	lsls	r5, r5, #16
 8009b20:	432b      	orrs	r3, r5
 8009b22:	c108      	stmia	r1!, {r3}
 8009b24:	9b03      	ldr	r3, [sp, #12]
 8009b26:	468c      	mov	ip, r1
 8009b28:	42a3      	cmp	r3, r4
 8009b2a:	d8e8      	bhi.n	8009afe <__mdiff+0x8a>
 8009b2c:	0031      	movs	r1, r6
 8009b2e:	9c03      	ldr	r4, [sp, #12]
 8009b30:	3115      	adds	r1, #21
 8009b32:	2304      	movs	r3, #4
 8009b34:	428c      	cmp	r4, r1
 8009b36:	d304      	bcc.n	8009b42 <__mdiff+0xce>
 8009b38:	1ba3      	subs	r3, r4, r6
 8009b3a:	3b15      	subs	r3, #21
 8009b3c:	089b      	lsrs	r3, r3, #2
 8009b3e:	3301      	adds	r3, #1
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	9901      	ldr	r1, [sp, #4]
 8009b44:	18cc      	adds	r4, r1, r3
 8009b46:	9905      	ldr	r1, [sp, #20]
 8009b48:	0026      	movs	r6, r4
 8009b4a:	18cb      	adds	r3, r1, r3
 8009b4c:	469c      	mov	ip, r3
 8009b4e:	9902      	ldr	r1, [sp, #8]
 8009b50:	428e      	cmp	r6, r1
 8009b52:	d310      	bcc.n	8009b76 <__mdiff+0x102>
 8009b54:	9e02      	ldr	r6, [sp, #8]
 8009b56:	1ee1      	subs	r1, r4, #3
 8009b58:	2500      	movs	r5, #0
 8009b5a:	428e      	cmp	r6, r1
 8009b5c:	d304      	bcc.n	8009b68 <__mdiff+0xf4>
 8009b5e:	0031      	movs	r1, r6
 8009b60:	3103      	adds	r1, #3
 8009b62:	1b0c      	subs	r4, r1, r4
 8009b64:	08a4      	lsrs	r4, r4, #2
 8009b66:	00a5      	lsls	r5, r4, #2
 8009b68:	195b      	adds	r3, r3, r5
 8009b6a:	3b04      	subs	r3, #4
 8009b6c:	6819      	ldr	r1, [r3, #0]
 8009b6e:	2900      	cmp	r1, #0
 8009b70:	d00f      	beq.n	8009b92 <__mdiff+0x11e>
 8009b72:	6110      	str	r0, [r2, #16]
 8009b74:	e797      	b.n	8009aa6 <__mdiff+0x32>
 8009b76:	ce02      	ldmia	r6!, {r1}
 8009b78:	b28d      	uxth	r5, r1
 8009b7a:	19ed      	adds	r5, r5, r7
 8009b7c:	0c0f      	lsrs	r7, r1, #16
 8009b7e:	1429      	asrs	r1, r5, #16
 8009b80:	1879      	adds	r1, r7, r1
 8009b82:	140f      	asrs	r7, r1, #16
 8009b84:	b2ad      	uxth	r5, r5
 8009b86:	0409      	lsls	r1, r1, #16
 8009b88:	430d      	orrs	r5, r1
 8009b8a:	4661      	mov	r1, ip
 8009b8c:	c120      	stmia	r1!, {r5}
 8009b8e:	468c      	mov	ip, r1
 8009b90:	e7dd      	b.n	8009b4e <__mdiff+0xda>
 8009b92:	3801      	subs	r0, #1
 8009b94:	e7e9      	b.n	8009b6a <__mdiff+0xf6>
 8009b96:	46c0      	nop			; (mov r8, r8)
 8009b98:	0800b340 	.word	0x0800b340
 8009b9c:	00000232 	.word	0x00000232
 8009ba0:	0800b3cc 	.word	0x0800b3cc

08009ba4 <__ulp>:
 8009ba4:	4b0f      	ldr	r3, [pc, #60]	; (8009be4 <__ulp+0x40>)
 8009ba6:	4019      	ands	r1, r3
 8009ba8:	4b0f      	ldr	r3, [pc, #60]	; (8009be8 <__ulp+0x44>)
 8009baa:	18c9      	adds	r1, r1, r3
 8009bac:	2900      	cmp	r1, #0
 8009bae:	dd04      	ble.n	8009bba <__ulp+0x16>
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	000b      	movs	r3, r1
 8009bb4:	0010      	movs	r0, r2
 8009bb6:	0019      	movs	r1, r3
 8009bb8:	4770      	bx	lr
 8009bba:	4249      	negs	r1, r1
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	1509      	asrs	r1, r1, #20
 8009bc2:	2913      	cmp	r1, #19
 8009bc4:	dc04      	bgt.n	8009bd0 <__ulp+0x2c>
 8009bc6:	2080      	movs	r0, #128	; 0x80
 8009bc8:	0300      	lsls	r0, r0, #12
 8009bca:	4108      	asrs	r0, r1
 8009bcc:	0003      	movs	r3, r0
 8009bce:	e7f1      	b.n	8009bb4 <__ulp+0x10>
 8009bd0:	3914      	subs	r1, #20
 8009bd2:	2001      	movs	r0, #1
 8009bd4:	291e      	cmp	r1, #30
 8009bd6:	dc02      	bgt.n	8009bde <__ulp+0x3a>
 8009bd8:	2080      	movs	r0, #128	; 0x80
 8009bda:	0600      	lsls	r0, r0, #24
 8009bdc:	40c8      	lsrs	r0, r1
 8009bde:	0002      	movs	r2, r0
 8009be0:	e7e8      	b.n	8009bb4 <__ulp+0x10>
 8009be2:	46c0      	nop			; (mov r8, r8)
 8009be4:	7ff00000 	.word	0x7ff00000
 8009be8:	fcc00000 	.word	0xfcc00000

08009bec <__b2d>:
 8009bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bee:	0006      	movs	r6, r0
 8009bf0:	6903      	ldr	r3, [r0, #16]
 8009bf2:	3614      	adds	r6, #20
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	18f3      	adds	r3, r6, r3
 8009bf8:	1f1d      	subs	r5, r3, #4
 8009bfa:	682c      	ldr	r4, [r5, #0]
 8009bfc:	000f      	movs	r7, r1
 8009bfe:	0020      	movs	r0, r4
 8009c00:	9301      	str	r3, [sp, #4]
 8009c02:	f7ff fd43 	bl	800968c <__hi0bits>
 8009c06:	2320      	movs	r3, #32
 8009c08:	1a1b      	subs	r3, r3, r0
 8009c0a:	491f      	ldr	r1, [pc, #124]	; (8009c88 <__b2d+0x9c>)
 8009c0c:	603b      	str	r3, [r7, #0]
 8009c0e:	280a      	cmp	r0, #10
 8009c10:	dc16      	bgt.n	8009c40 <__b2d+0x54>
 8009c12:	230b      	movs	r3, #11
 8009c14:	0027      	movs	r7, r4
 8009c16:	1a1b      	subs	r3, r3, r0
 8009c18:	40df      	lsrs	r7, r3
 8009c1a:	4339      	orrs	r1, r7
 8009c1c:	469c      	mov	ip, r3
 8009c1e:	000b      	movs	r3, r1
 8009c20:	2100      	movs	r1, #0
 8009c22:	42ae      	cmp	r6, r5
 8009c24:	d202      	bcs.n	8009c2c <__b2d+0x40>
 8009c26:	9901      	ldr	r1, [sp, #4]
 8009c28:	3908      	subs	r1, #8
 8009c2a:	6809      	ldr	r1, [r1, #0]
 8009c2c:	3015      	adds	r0, #21
 8009c2e:	4084      	lsls	r4, r0
 8009c30:	4660      	mov	r0, ip
 8009c32:	40c1      	lsrs	r1, r0
 8009c34:	430c      	orrs	r4, r1
 8009c36:	0022      	movs	r2, r4
 8009c38:	0010      	movs	r0, r2
 8009c3a:	0019      	movs	r1, r3
 8009c3c:	b003      	add	sp, #12
 8009c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c40:	2700      	movs	r7, #0
 8009c42:	42ae      	cmp	r6, r5
 8009c44:	d202      	bcs.n	8009c4c <__b2d+0x60>
 8009c46:	9d01      	ldr	r5, [sp, #4]
 8009c48:	3d08      	subs	r5, #8
 8009c4a:	682f      	ldr	r7, [r5, #0]
 8009c4c:	230b      	movs	r3, #11
 8009c4e:	425b      	negs	r3, r3
 8009c50:	469c      	mov	ip, r3
 8009c52:	4484      	add	ip, r0
 8009c54:	280b      	cmp	r0, #11
 8009c56:	d013      	beq.n	8009c80 <__b2d+0x94>
 8009c58:	4663      	mov	r3, ip
 8009c5a:	2020      	movs	r0, #32
 8009c5c:	409c      	lsls	r4, r3
 8009c5e:	1ac0      	subs	r0, r0, r3
 8009c60:	003b      	movs	r3, r7
 8009c62:	40c3      	lsrs	r3, r0
 8009c64:	431c      	orrs	r4, r3
 8009c66:	4321      	orrs	r1, r4
 8009c68:	000b      	movs	r3, r1
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	42b5      	cmp	r5, r6
 8009c6e:	d901      	bls.n	8009c74 <__b2d+0x88>
 8009c70:	3d04      	subs	r5, #4
 8009c72:	6829      	ldr	r1, [r5, #0]
 8009c74:	4664      	mov	r4, ip
 8009c76:	40c1      	lsrs	r1, r0
 8009c78:	40a7      	lsls	r7, r4
 8009c7a:	430f      	orrs	r7, r1
 8009c7c:	003a      	movs	r2, r7
 8009c7e:	e7db      	b.n	8009c38 <__b2d+0x4c>
 8009c80:	4321      	orrs	r1, r4
 8009c82:	000b      	movs	r3, r1
 8009c84:	e7fa      	b.n	8009c7c <__b2d+0x90>
 8009c86:	46c0      	nop			; (mov r8, r8)
 8009c88:	3ff00000 	.word	0x3ff00000

08009c8c <__d2b>:
 8009c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c8e:	2101      	movs	r1, #1
 8009c90:	0014      	movs	r4, r2
 8009c92:	001e      	movs	r6, r3
 8009c94:	9f08      	ldr	r7, [sp, #32]
 8009c96:	f7ff fc01 	bl	800949c <_Balloc>
 8009c9a:	1e05      	subs	r5, r0, #0
 8009c9c:	d105      	bne.n	8009caa <__d2b+0x1e>
 8009c9e:	0002      	movs	r2, r0
 8009ca0:	4b26      	ldr	r3, [pc, #152]	; (8009d3c <__d2b+0xb0>)
 8009ca2:	4927      	ldr	r1, [pc, #156]	; (8009d40 <__d2b+0xb4>)
 8009ca4:	4827      	ldr	r0, [pc, #156]	; (8009d44 <__d2b+0xb8>)
 8009ca6:	f000 fb6b 	bl	800a380 <__assert_func>
 8009caa:	0333      	lsls	r3, r6, #12
 8009cac:	0076      	lsls	r6, r6, #1
 8009cae:	0b1b      	lsrs	r3, r3, #12
 8009cb0:	0d76      	lsrs	r6, r6, #21
 8009cb2:	d124      	bne.n	8009cfe <__d2b+0x72>
 8009cb4:	9301      	str	r3, [sp, #4]
 8009cb6:	2c00      	cmp	r4, #0
 8009cb8:	d027      	beq.n	8009d0a <__d2b+0x7e>
 8009cba:	4668      	mov	r0, sp
 8009cbc:	9400      	str	r4, [sp, #0]
 8009cbe:	f7ff fcff 	bl	80096c0 <__lo0bits>
 8009cc2:	9c00      	ldr	r4, [sp, #0]
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d01e      	beq.n	8009d06 <__d2b+0x7a>
 8009cc8:	9b01      	ldr	r3, [sp, #4]
 8009cca:	2120      	movs	r1, #32
 8009ccc:	001a      	movs	r2, r3
 8009cce:	1a09      	subs	r1, r1, r0
 8009cd0:	408a      	lsls	r2, r1
 8009cd2:	40c3      	lsrs	r3, r0
 8009cd4:	4322      	orrs	r2, r4
 8009cd6:	616a      	str	r2, [r5, #20]
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	9c01      	ldr	r4, [sp, #4]
 8009cdc:	61ac      	str	r4, [r5, #24]
 8009cde:	1e63      	subs	r3, r4, #1
 8009ce0:	419c      	sbcs	r4, r3
 8009ce2:	3401      	adds	r4, #1
 8009ce4:	612c      	str	r4, [r5, #16]
 8009ce6:	2e00      	cmp	r6, #0
 8009ce8:	d018      	beq.n	8009d1c <__d2b+0x90>
 8009cea:	4b17      	ldr	r3, [pc, #92]	; (8009d48 <__d2b+0xbc>)
 8009cec:	18f6      	adds	r6, r6, r3
 8009cee:	2335      	movs	r3, #53	; 0x35
 8009cf0:	1836      	adds	r6, r6, r0
 8009cf2:	1a18      	subs	r0, r3, r0
 8009cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf6:	603e      	str	r6, [r7, #0]
 8009cf8:	6018      	str	r0, [r3, #0]
 8009cfa:	0028      	movs	r0, r5
 8009cfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009cfe:	2280      	movs	r2, #128	; 0x80
 8009d00:	0352      	lsls	r2, r2, #13
 8009d02:	4313      	orrs	r3, r2
 8009d04:	e7d6      	b.n	8009cb4 <__d2b+0x28>
 8009d06:	616c      	str	r4, [r5, #20]
 8009d08:	e7e7      	b.n	8009cda <__d2b+0x4e>
 8009d0a:	a801      	add	r0, sp, #4
 8009d0c:	f7ff fcd8 	bl	80096c0 <__lo0bits>
 8009d10:	2401      	movs	r4, #1
 8009d12:	9b01      	ldr	r3, [sp, #4]
 8009d14:	612c      	str	r4, [r5, #16]
 8009d16:	616b      	str	r3, [r5, #20]
 8009d18:	3020      	adds	r0, #32
 8009d1a:	e7e4      	b.n	8009ce6 <__d2b+0x5a>
 8009d1c:	4b0b      	ldr	r3, [pc, #44]	; (8009d4c <__d2b+0xc0>)
 8009d1e:	18c0      	adds	r0, r0, r3
 8009d20:	4b0b      	ldr	r3, [pc, #44]	; (8009d50 <__d2b+0xc4>)
 8009d22:	6038      	str	r0, [r7, #0]
 8009d24:	18e3      	adds	r3, r4, r3
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	18eb      	adds	r3, r5, r3
 8009d2a:	6958      	ldr	r0, [r3, #20]
 8009d2c:	f7ff fcae 	bl	800968c <__hi0bits>
 8009d30:	0164      	lsls	r4, r4, #5
 8009d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d34:	1a24      	subs	r4, r4, r0
 8009d36:	601c      	str	r4, [r3, #0]
 8009d38:	e7df      	b.n	8009cfa <__d2b+0x6e>
 8009d3a:	46c0      	nop			; (mov r8, r8)
 8009d3c:	0800b340 	.word	0x0800b340
 8009d40:	0000030a 	.word	0x0000030a
 8009d44:	0800b3cc 	.word	0x0800b3cc
 8009d48:	fffffbcd 	.word	0xfffffbcd
 8009d4c:	fffffbce 	.word	0xfffffbce
 8009d50:	3fffffff 	.word	0x3fffffff

08009d54 <__ratio>:
 8009d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d56:	b087      	sub	sp, #28
 8009d58:	000f      	movs	r7, r1
 8009d5a:	a904      	add	r1, sp, #16
 8009d5c:	0006      	movs	r6, r0
 8009d5e:	f7ff ff45 	bl	8009bec <__b2d>
 8009d62:	9000      	str	r0, [sp, #0]
 8009d64:	9101      	str	r1, [sp, #4]
 8009d66:	9c00      	ldr	r4, [sp, #0]
 8009d68:	9d01      	ldr	r5, [sp, #4]
 8009d6a:	0038      	movs	r0, r7
 8009d6c:	a905      	add	r1, sp, #20
 8009d6e:	f7ff ff3d 	bl	8009bec <__b2d>
 8009d72:	9002      	str	r0, [sp, #8]
 8009d74:	9103      	str	r1, [sp, #12]
 8009d76:	9a02      	ldr	r2, [sp, #8]
 8009d78:	9b03      	ldr	r3, [sp, #12]
 8009d7a:	6931      	ldr	r1, [r6, #16]
 8009d7c:	6938      	ldr	r0, [r7, #16]
 8009d7e:	9e05      	ldr	r6, [sp, #20]
 8009d80:	1a08      	subs	r0, r1, r0
 8009d82:	9904      	ldr	r1, [sp, #16]
 8009d84:	0140      	lsls	r0, r0, #5
 8009d86:	1b89      	subs	r1, r1, r6
 8009d88:	1841      	adds	r1, r0, r1
 8009d8a:	0508      	lsls	r0, r1, #20
 8009d8c:	2900      	cmp	r1, #0
 8009d8e:	dd07      	ble.n	8009da0 <__ratio+0x4c>
 8009d90:	9901      	ldr	r1, [sp, #4]
 8009d92:	1845      	adds	r5, r0, r1
 8009d94:	0020      	movs	r0, r4
 8009d96:	0029      	movs	r1, r5
 8009d98:	f7f7 fa56 	bl	8001248 <__aeabi_ddiv>
 8009d9c:	b007      	add	sp, #28
 8009d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009da0:	9903      	ldr	r1, [sp, #12]
 8009da2:	1a0b      	subs	r3, r1, r0
 8009da4:	e7f6      	b.n	8009d94 <__ratio+0x40>

08009da6 <__copybits>:
 8009da6:	b570      	push	{r4, r5, r6, lr}
 8009da8:	0014      	movs	r4, r2
 8009daa:	0005      	movs	r5, r0
 8009dac:	3901      	subs	r1, #1
 8009dae:	6913      	ldr	r3, [r2, #16]
 8009db0:	1149      	asrs	r1, r1, #5
 8009db2:	3101      	adds	r1, #1
 8009db4:	0089      	lsls	r1, r1, #2
 8009db6:	3414      	adds	r4, #20
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	1841      	adds	r1, r0, r1
 8009dbc:	18e3      	adds	r3, r4, r3
 8009dbe:	42a3      	cmp	r3, r4
 8009dc0:	d80d      	bhi.n	8009dde <__copybits+0x38>
 8009dc2:	0014      	movs	r4, r2
 8009dc4:	3411      	adds	r4, #17
 8009dc6:	2500      	movs	r5, #0
 8009dc8:	429c      	cmp	r4, r3
 8009dca:	d803      	bhi.n	8009dd4 <__copybits+0x2e>
 8009dcc:	1a9b      	subs	r3, r3, r2
 8009dce:	3b11      	subs	r3, #17
 8009dd0:	089b      	lsrs	r3, r3, #2
 8009dd2:	009d      	lsls	r5, r3, #2
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	1940      	adds	r0, r0, r5
 8009dd8:	4281      	cmp	r1, r0
 8009dda:	d803      	bhi.n	8009de4 <__copybits+0x3e>
 8009ddc:	bd70      	pop	{r4, r5, r6, pc}
 8009dde:	cc40      	ldmia	r4!, {r6}
 8009de0:	c540      	stmia	r5!, {r6}
 8009de2:	e7ec      	b.n	8009dbe <__copybits+0x18>
 8009de4:	c008      	stmia	r0!, {r3}
 8009de6:	e7f7      	b.n	8009dd8 <__copybits+0x32>

08009de8 <__any_on>:
 8009de8:	0002      	movs	r2, r0
 8009dea:	6900      	ldr	r0, [r0, #16]
 8009dec:	b510      	push	{r4, lr}
 8009dee:	3214      	adds	r2, #20
 8009df0:	114b      	asrs	r3, r1, #5
 8009df2:	4298      	cmp	r0, r3
 8009df4:	db13      	blt.n	8009e1e <__any_on+0x36>
 8009df6:	dd0c      	ble.n	8009e12 <__any_on+0x2a>
 8009df8:	241f      	movs	r4, #31
 8009dfa:	0008      	movs	r0, r1
 8009dfc:	4020      	ands	r0, r4
 8009dfe:	4221      	tst	r1, r4
 8009e00:	d007      	beq.n	8009e12 <__any_on+0x2a>
 8009e02:	0099      	lsls	r1, r3, #2
 8009e04:	588c      	ldr	r4, [r1, r2]
 8009e06:	0021      	movs	r1, r4
 8009e08:	40c1      	lsrs	r1, r0
 8009e0a:	4081      	lsls	r1, r0
 8009e0c:	2001      	movs	r0, #1
 8009e0e:	428c      	cmp	r4, r1
 8009e10:	d104      	bne.n	8009e1c <__any_on+0x34>
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	18d3      	adds	r3, r2, r3
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d803      	bhi.n	8009e22 <__any_on+0x3a>
 8009e1a:	2000      	movs	r0, #0
 8009e1c:	bd10      	pop	{r4, pc}
 8009e1e:	0003      	movs	r3, r0
 8009e20:	e7f7      	b.n	8009e12 <__any_on+0x2a>
 8009e22:	3b04      	subs	r3, #4
 8009e24:	6819      	ldr	r1, [r3, #0]
 8009e26:	2900      	cmp	r1, #0
 8009e28:	d0f5      	beq.n	8009e16 <__any_on+0x2e>
 8009e2a:	2001      	movs	r0, #1
 8009e2c:	e7f6      	b.n	8009e1c <__any_on+0x34>

08009e2e <_calloc_r>:
 8009e2e:	b570      	push	{r4, r5, r6, lr}
 8009e30:	0c13      	lsrs	r3, r2, #16
 8009e32:	0c0d      	lsrs	r5, r1, #16
 8009e34:	d11e      	bne.n	8009e74 <_calloc_r+0x46>
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10c      	bne.n	8009e54 <_calloc_r+0x26>
 8009e3a:	b289      	uxth	r1, r1
 8009e3c:	b294      	uxth	r4, r2
 8009e3e:	434c      	muls	r4, r1
 8009e40:	0021      	movs	r1, r4
 8009e42:	f000 f88d 	bl	8009f60 <_malloc_r>
 8009e46:	1e05      	subs	r5, r0, #0
 8009e48:	d01b      	beq.n	8009e82 <_calloc_r+0x54>
 8009e4a:	0022      	movs	r2, r4
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	f7fc fb6f 	bl	8006530 <memset>
 8009e52:	e016      	b.n	8009e82 <_calloc_r+0x54>
 8009e54:	1c1d      	adds	r5, r3, #0
 8009e56:	1c0b      	adds	r3, r1, #0
 8009e58:	b292      	uxth	r2, r2
 8009e5a:	b289      	uxth	r1, r1
 8009e5c:	b29c      	uxth	r4, r3
 8009e5e:	4351      	muls	r1, r2
 8009e60:	b2ab      	uxth	r3, r5
 8009e62:	4363      	muls	r3, r4
 8009e64:	0c0c      	lsrs	r4, r1, #16
 8009e66:	191c      	adds	r4, r3, r4
 8009e68:	0c22      	lsrs	r2, r4, #16
 8009e6a:	d107      	bne.n	8009e7c <_calloc_r+0x4e>
 8009e6c:	0424      	lsls	r4, r4, #16
 8009e6e:	b289      	uxth	r1, r1
 8009e70:	430c      	orrs	r4, r1
 8009e72:	e7e5      	b.n	8009e40 <_calloc_r+0x12>
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d101      	bne.n	8009e7c <_calloc_r+0x4e>
 8009e78:	1c13      	adds	r3, r2, #0
 8009e7a:	e7ed      	b.n	8009e58 <_calloc_r+0x2a>
 8009e7c:	230c      	movs	r3, #12
 8009e7e:	2500      	movs	r5, #0
 8009e80:	6003      	str	r3, [r0, #0]
 8009e82:	0028      	movs	r0, r5
 8009e84:	bd70      	pop	{r4, r5, r6, pc}
	...

08009e88 <_free_r>:
 8009e88:	b570      	push	{r4, r5, r6, lr}
 8009e8a:	0005      	movs	r5, r0
 8009e8c:	2900      	cmp	r1, #0
 8009e8e:	d010      	beq.n	8009eb2 <_free_r+0x2a>
 8009e90:	1f0c      	subs	r4, r1, #4
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	da00      	bge.n	8009e9a <_free_r+0x12>
 8009e98:	18e4      	adds	r4, r4, r3
 8009e9a:	0028      	movs	r0, r5
 8009e9c:	f000 fab2 	bl	800a404 <__malloc_lock>
 8009ea0:	4a1d      	ldr	r2, [pc, #116]	; (8009f18 <_free_r+0x90>)
 8009ea2:	6813      	ldr	r3, [r2, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d105      	bne.n	8009eb4 <_free_r+0x2c>
 8009ea8:	6063      	str	r3, [r4, #4]
 8009eaa:	6014      	str	r4, [r2, #0]
 8009eac:	0028      	movs	r0, r5
 8009eae:	f000 fab1 	bl	800a414 <__malloc_unlock>
 8009eb2:	bd70      	pop	{r4, r5, r6, pc}
 8009eb4:	42a3      	cmp	r3, r4
 8009eb6:	d908      	bls.n	8009eca <_free_r+0x42>
 8009eb8:	6821      	ldr	r1, [r4, #0]
 8009eba:	1860      	adds	r0, r4, r1
 8009ebc:	4283      	cmp	r3, r0
 8009ebe:	d1f3      	bne.n	8009ea8 <_free_r+0x20>
 8009ec0:	6818      	ldr	r0, [r3, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	1841      	adds	r1, r0, r1
 8009ec6:	6021      	str	r1, [r4, #0]
 8009ec8:	e7ee      	b.n	8009ea8 <_free_r+0x20>
 8009eca:	001a      	movs	r2, r3
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <_free_r+0x4e>
 8009ed2:	42a3      	cmp	r3, r4
 8009ed4:	d9f9      	bls.n	8009eca <_free_r+0x42>
 8009ed6:	6811      	ldr	r1, [r2, #0]
 8009ed8:	1850      	adds	r0, r2, r1
 8009eda:	42a0      	cmp	r0, r4
 8009edc:	d10b      	bne.n	8009ef6 <_free_r+0x6e>
 8009ede:	6820      	ldr	r0, [r4, #0]
 8009ee0:	1809      	adds	r1, r1, r0
 8009ee2:	1850      	adds	r0, r2, r1
 8009ee4:	6011      	str	r1, [r2, #0]
 8009ee6:	4283      	cmp	r3, r0
 8009ee8:	d1e0      	bne.n	8009eac <_free_r+0x24>
 8009eea:	6818      	ldr	r0, [r3, #0]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	1841      	adds	r1, r0, r1
 8009ef0:	6011      	str	r1, [r2, #0]
 8009ef2:	6053      	str	r3, [r2, #4]
 8009ef4:	e7da      	b.n	8009eac <_free_r+0x24>
 8009ef6:	42a0      	cmp	r0, r4
 8009ef8:	d902      	bls.n	8009f00 <_free_r+0x78>
 8009efa:	230c      	movs	r3, #12
 8009efc:	602b      	str	r3, [r5, #0]
 8009efe:	e7d5      	b.n	8009eac <_free_r+0x24>
 8009f00:	6821      	ldr	r1, [r4, #0]
 8009f02:	1860      	adds	r0, r4, r1
 8009f04:	4283      	cmp	r3, r0
 8009f06:	d103      	bne.n	8009f10 <_free_r+0x88>
 8009f08:	6818      	ldr	r0, [r3, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	1841      	adds	r1, r0, r1
 8009f0e:	6021      	str	r1, [r4, #0]
 8009f10:	6063      	str	r3, [r4, #4]
 8009f12:	6054      	str	r4, [r2, #4]
 8009f14:	e7ca      	b.n	8009eac <_free_r+0x24>
 8009f16:	46c0      	nop			; (mov r8, r8)
 8009f18:	20000314 	.word	0x20000314

08009f1c <sbrk_aligned>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	4e0f      	ldr	r6, [pc, #60]	; (8009f5c <sbrk_aligned+0x40>)
 8009f20:	000d      	movs	r5, r1
 8009f22:	6831      	ldr	r1, [r6, #0]
 8009f24:	0004      	movs	r4, r0
 8009f26:	2900      	cmp	r1, #0
 8009f28:	d102      	bne.n	8009f30 <sbrk_aligned+0x14>
 8009f2a:	f000 f9f7 	bl	800a31c <_sbrk_r>
 8009f2e:	6030      	str	r0, [r6, #0]
 8009f30:	0029      	movs	r1, r5
 8009f32:	0020      	movs	r0, r4
 8009f34:	f000 f9f2 	bl	800a31c <_sbrk_r>
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	d00a      	beq.n	8009f52 <sbrk_aligned+0x36>
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	1cc5      	adds	r5, r0, #3
 8009f40:	439d      	bics	r5, r3
 8009f42:	42a8      	cmp	r0, r5
 8009f44:	d007      	beq.n	8009f56 <sbrk_aligned+0x3a>
 8009f46:	1a29      	subs	r1, r5, r0
 8009f48:	0020      	movs	r0, r4
 8009f4a:	f000 f9e7 	bl	800a31c <_sbrk_r>
 8009f4e:	1c43      	adds	r3, r0, #1
 8009f50:	d101      	bne.n	8009f56 <sbrk_aligned+0x3a>
 8009f52:	2501      	movs	r5, #1
 8009f54:	426d      	negs	r5, r5
 8009f56:	0028      	movs	r0, r5
 8009f58:	bd70      	pop	{r4, r5, r6, pc}
 8009f5a:	46c0      	nop			; (mov r8, r8)
 8009f5c:	20000318 	.word	0x20000318

08009f60 <_malloc_r>:
 8009f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f62:	2203      	movs	r2, #3
 8009f64:	1ccb      	adds	r3, r1, #3
 8009f66:	4393      	bics	r3, r2
 8009f68:	3308      	adds	r3, #8
 8009f6a:	0006      	movs	r6, r0
 8009f6c:	001f      	movs	r7, r3
 8009f6e:	2b0c      	cmp	r3, #12
 8009f70:	d232      	bcs.n	8009fd8 <_malloc_r+0x78>
 8009f72:	270c      	movs	r7, #12
 8009f74:	42b9      	cmp	r1, r7
 8009f76:	d831      	bhi.n	8009fdc <_malloc_r+0x7c>
 8009f78:	0030      	movs	r0, r6
 8009f7a:	f000 fa43 	bl	800a404 <__malloc_lock>
 8009f7e:	4d32      	ldr	r5, [pc, #200]	; (800a048 <_malloc_r+0xe8>)
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	001c      	movs	r4, r3
 8009f84:	2c00      	cmp	r4, #0
 8009f86:	d12e      	bne.n	8009fe6 <_malloc_r+0x86>
 8009f88:	0039      	movs	r1, r7
 8009f8a:	0030      	movs	r0, r6
 8009f8c:	f7ff ffc6 	bl	8009f1c <sbrk_aligned>
 8009f90:	0004      	movs	r4, r0
 8009f92:	1c43      	adds	r3, r0, #1
 8009f94:	d11e      	bne.n	8009fd4 <_malloc_r+0x74>
 8009f96:	682c      	ldr	r4, [r5, #0]
 8009f98:	0025      	movs	r5, r4
 8009f9a:	2d00      	cmp	r5, #0
 8009f9c:	d14a      	bne.n	800a034 <_malloc_r+0xd4>
 8009f9e:	6823      	ldr	r3, [r4, #0]
 8009fa0:	0029      	movs	r1, r5
 8009fa2:	18e3      	adds	r3, r4, r3
 8009fa4:	0030      	movs	r0, r6
 8009fa6:	9301      	str	r3, [sp, #4]
 8009fa8:	f000 f9b8 	bl	800a31c <_sbrk_r>
 8009fac:	9b01      	ldr	r3, [sp, #4]
 8009fae:	4283      	cmp	r3, r0
 8009fb0:	d143      	bne.n	800a03a <_malloc_r+0xda>
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	3703      	adds	r7, #3
 8009fb6:	1aff      	subs	r7, r7, r3
 8009fb8:	2303      	movs	r3, #3
 8009fba:	439f      	bics	r7, r3
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	2f0c      	cmp	r7, #12
 8009fc0:	d200      	bcs.n	8009fc4 <_malloc_r+0x64>
 8009fc2:	270c      	movs	r7, #12
 8009fc4:	0039      	movs	r1, r7
 8009fc6:	0030      	movs	r0, r6
 8009fc8:	f7ff ffa8 	bl	8009f1c <sbrk_aligned>
 8009fcc:	1c43      	adds	r3, r0, #1
 8009fce:	d034      	beq.n	800a03a <_malloc_r+0xda>
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	19df      	adds	r7, r3, r7
 8009fd4:	6027      	str	r7, [r4, #0]
 8009fd6:	e013      	b.n	800a000 <_malloc_r+0xa0>
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	dacb      	bge.n	8009f74 <_malloc_r+0x14>
 8009fdc:	230c      	movs	r3, #12
 8009fde:	2500      	movs	r5, #0
 8009fe0:	6033      	str	r3, [r6, #0]
 8009fe2:	0028      	movs	r0, r5
 8009fe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009fe6:	6822      	ldr	r2, [r4, #0]
 8009fe8:	1bd1      	subs	r1, r2, r7
 8009fea:	d420      	bmi.n	800a02e <_malloc_r+0xce>
 8009fec:	290b      	cmp	r1, #11
 8009fee:	d917      	bls.n	800a020 <_malloc_r+0xc0>
 8009ff0:	19e2      	adds	r2, r4, r7
 8009ff2:	6027      	str	r7, [r4, #0]
 8009ff4:	42a3      	cmp	r3, r4
 8009ff6:	d111      	bne.n	800a01c <_malloc_r+0xbc>
 8009ff8:	602a      	str	r2, [r5, #0]
 8009ffa:	6863      	ldr	r3, [r4, #4]
 8009ffc:	6011      	str	r1, [r2, #0]
 8009ffe:	6053      	str	r3, [r2, #4]
 800a000:	0030      	movs	r0, r6
 800a002:	0025      	movs	r5, r4
 800a004:	f000 fa06 	bl	800a414 <__malloc_unlock>
 800a008:	2207      	movs	r2, #7
 800a00a:	350b      	adds	r5, #11
 800a00c:	1d23      	adds	r3, r4, #4
 800a00e:	4395      	bics	r5, r2
 800a010:	1aea      	subs	r2, r5, r3
 800a012:	429d      	cmp	r5, r3
 800a014:	d0e5      	beq.n	8009fe2 <_malloc_r+0x82>
 800a016:	1b5b      	subs	r3, r3, r5
 800a018:	50a3      	str	r3, [r4, r2]
 800a01a:	e7e2      	b.n	8009fe2 <_malloc_r+0x82>
 800a01c:	605a      	str	r2, [r3, #4]
 800a01e:	e7ec      	b.n	8009ffa <_malloc_r+0x9a>
 800a020:	6862      	ldr	r2, [r4, #4]
 800a022:	42a3      	cmp	r3, r4
 800a024:	d101      	bne.n	800a02a <_malloc_r+0xca>
 800a026:	602a      	str	r2, [r5, #0]
 800a028:	e7ea      	b.n	800a000 <_malloc_r+0xa0>
 800a02a:	605a      	str	r2, [r3, #4]
 800a02c:	e7e8      	b.n	800a000 <_malloc_r+0xa0>
 800a02e:	0023      	movs	r3, r4
 800a030:	6864      	ldr	r4, [r4, #4]
 800a032:	e7a7      	b.n	8009f84 <_malloc_r+0x24>
 800a034:	002c      	movs	r4, r5
 800a036:	686d      	ldr	r5, [r5, #4]
 800a038:	e7af      	b.n	8009f9a <_malloc_r+0x3a>
 800a03a:	230c      	movs	r3, #12
 800a03c:	0030      	movs	r0, r6
 800a03e:	6033      	str	r3, [r6, #0]
 800a040:	f000 f9e8 	bl	800a414 <__malloc_unlock>
 800a044:	e7cd      	b.n	8009fe2 <_malloc_r+0x82>
 800a046:	46c0      	nop			; (mov r8, r8)
 800a048:	20000314 	.word	0x20000314

0800a04c <__ssputs_r>:
 800a04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a04e:	688e      	ldr	r6, [r1, #8]
 800a050:	b085      	sub	sp, #20
 800a052:	0007      	movs	r7, r0
 800a054:	000c      	movs	r4, r1
 800a056:	9203      	str	r2, [sp, #12]
 800a058:	9301      	str	r3, [sp, #4]
 800a05a:	429e      	cmp	r6, r3
 800a05c:	d83c      	bhi.n	800a0d8 <__ssputs_r+0x8c>
 800a05e:	2390      	movs	r3, #144	; 0x90
 800a060:	898a      	ldrh	r2, [r1, #12]
 800a062:	00db      	lsls	r3, r3, #3
 800a064:	421a      	tst	r2, r3
 800a066:	d034      	beq.n	800a0d2 <__ssputs_r+0x86>
 800a068:	6909      	ldr	r1, [r1, #16]
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	6960      	ldr	r0, [r4, #20]
 800a06e:	1a5b      	subs	r3, r3, r1
 800a070:	9302      	str	r3, [sp, #8]
 800a072:	2303      	movs	r3, #3
 800a074:	4343      	muls	r3, r0
 800a076:	0fdd      	lsrs	r5, r3, #31
 800a078:	18ed      	adds	r5, r5, r3
 800a07a:	9b01      	ldr	r3, [sp, #4]
 800a07c:	9802      	ldr	r0, [sp, #8]
 800a07e:	3301      	adds	r3, #1
 800a080:	181b      	adds	r3, r3, r0
 800a082:	106d      	asrs	r5, r5, #1
 800a084:	42ab      	cmp	r3, r5
 800a086:	d900      	bls.n	800a08a <__ssputs_r+0x3e>
 800a088:	001d      	movs	r5, r3
 800a08a:	0553      	lsls	r3, r2, #21
 800a08c:	d532      	bpl.n	800a0f4 <__ssputs_r+0xa8>
 800a08e:	0029      	movs	r1, r5
 800a090:	0038      	movs	r0, r7
 800a092:	f7ff ff65 	bl	8009f60 <_malloc_r>
 800a096:	1e06      	subs	r6, r0, #0
 800a098:	d109      	bne.n	800a0ae <__ssputs_r+0x62>
 800a09a:	230c      	movs	r3, #12
 800a09c:	603b      	str	r3, [r7, #0]
 800a09e:	2340      	movs	r3, #64	; 0x40
 800a0a0:	2001      	movs	r0, #1
 800a0a2:	89a2      	ldrh	r2, [r4, #12]
 800a0a4:	4240      	negs	r0, r0
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	81a3      	strh	r3, [r4, #12]
 800a0aa:	b005      	add	sp, #20
 800a0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ae:	9a02      	ldr	r2, [sp, #8]
 800a0b0:	6921      	ldr	r1, [r4, #16]
 800a0b2:	f7ff f9ea 	bl	800948a <memcpy>
 800a0b6:	89a3      	ldrh	r3, [r4, #12]
 800a0b8:	4a14      	ldr	r2, [pc, #80]	; (800a10c <__ssputs_r+0xc0>)
 800a0ba:	401a      	ands	r2, r3
 800a0bc:	2380      	movs	r3, #128	; 0x80
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	81a3      	strh	r3, [r4, #12]
 800a0c2:	9b02      	ldr	r3, [sp, #8]
 800a0c4:	6126      	str	r6, [r4, #16]
 800a0c6:	18f6      	adds	r6, r6, r3
 800a0c8:	6026      	str	r6, [r4, #0]
 800a0ca:	6165      	str	r5, [r4, #20]
 800a0cc:	9e01      	ldr	r6, [sp, #4]
 800a0ce:	1aed      	subs	r5, r5, r3
 800a0d0:	60a5      	str	r5, [r4, #8]
 800a0d2:	9b01      	ldr	r3, [sp, #4]
 800a0d4:	429e      	cmp	r6, r3
 800a0d6:	d900      	bls.n	800a0da <__ssputs_r+0x8e>
 800a0d8:	9e01      	ldr	r6, [sp, #4]
 800a0da:	0032      	movs	r2, r6
 800a0dc:	9903      	ldr	r1, [sp, #12]
 800a0de:	6820      	ldr	r0, [r4, #0]
 800a0e0:	f000 f97c 	bl	800a3dc <memmove>
 800a0e4:	68a3      	ldr	r3, [r4, #8]
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	1b9b      	subs	r3, r3, r6
 800a0ea:	60a3      	str	r3, [r4, #8]
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	199e      	adds	r6, r3, r6
 800a0f0:	6026      	str	r6, [r4, #0]
 800a0f2:	e7da      	b.n	800a0aa <__ssputs_r+0x5e>
 800a0f4:	002a      	movs	r2, r5
 800a0f6:	0038      	movs	r0, r7
 800a0f8:	f000 f994 	bl	800a424 <_realloc_r>
 800a0fc:	1e06      	subs	r6, r0, #0
 800a0fe:	d1e0      	bne.n	800a0c2 <__ssputs_r+0x76>
 800a100:	0038      	movs	r0, r7
 800a102:	6921      	ldr	r1, [r4, #16]
 800a104:	f7ff fec0 	bl	8009e88 <_free_r>
 800a108:	e7c7      	b.n	800a09a <__ssputs_r+0x4e>
 800a10a:	46c0      	nop			; (mov r8, r8)
 800a10c:	fffffb7f 	.word	0xfffffb7f

0800a110 <_svfiprintf_r>:
 800a110:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a112:	b0a1      	sub	sp, #132	; 0x84
 800a114:	9003      	str	r0, [sp, #12]
 800a116:	001d      	movs	r5, r3
 800a118:	898b      	ldrh	r3, [r1, #12]
 800a11a:	000f      	movs	r7, r1
 800a11c:	0016      	movs	r6, r2
 800a11e:	061b      	lsls	r3, r3, #24
 800a120:	d511      	bpl.n	800a146 <_svfiprintf_r+0x36>
 800a122:	690b      	ldr	r3, [r1, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10e      	bne.n	800a146 <_svfiprintf_r+0x36>
 800a128:	2140      	movs	r1, #64	; 0x40
 800a12a:	f7ff ff19 	bl	8009f60 <_malloc_r>
 800a12e:	6038      	str	r0, [r7, #0]
 800a130:	6138      	str	r0, [r7, #16]
 800a132:	2800      	cmp	r0, #0
 800a134:	d105      	bne.n	800a142 <_svfiprintf_r+0x32>
 800a136:	230c      	movs	r3, #12
 800a138:	9a03      	ldr	r2, [sp, #12]
 800a13a:	3801      	subs	r0, #1
 800a13c:	6013      	str	r3, [r2, #0]
 800a13e:	b021      	add	sp, #132	; 0x84
 800a140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a142:	2340      	movs	r3, #64	; 0x40
 800a144:	617b      	str	r3, [r7, #20]
 800a146:	2300      	movs	r3, #0
 800a148:	ac08      	add	r4, sp, #32
 800a14a:	6163      	str	r3, [r4, #20]
 800a14c:	3320      	adds	r3, #32
 800a14e:	7663      	strb	r3, [r4, #25]
 800a150:	3310      	adds	r3, #16
 800a152:	76a3      	strb	r3, [r4, #26]
 800a154:	9507      	str	r5, [sp, #28]
 800a156:	0035      	movs	r5, r6
 800a158:	782b      	ldrb	r3, [r5, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <_svfiprintf_r+0x52>
 800a15e:	2b25      	cmp	r3, #37	; 0x25
 800a160:	d147      	bne.n	800a1f2 <_svfiprintf_r+0xe2>
 800a162:	1bab      	subs	r3, r5, r6
 800a164:	9305      	str	r3, [sp, #20]
 800a166:	42b5      	cmp	r5, r6
 800a168:	d00c      	beq.n	800a184 <_svfiprintf_r+0x74>
 800a16a:	0032      	movs	r2, r6
 800a16c:	0039      	movs	r1, r7
 800a16e:	9803      	ldr	r0, [sp, #12]
 800a170:	f7ff ff6c 	bl	800a04c <__ssputs_r>
 800a174:	1c43      	adds	r3, r0, #1
 800a176:	d100      	bne.n	800a17a <_svfiprintf_r+0x6a>
 800a178:	e0ae      	b.n	800a2d8 <_svfiprintf_r+0x1c8>
 800a17a:	6962      	ldr	r2, [r4, #20]
 800a17c:	9b05      	ldr	r3, [sp, #20]
 800a17e:	4694      	mov	ip, r2
 800a180:	4463      	add	r3, ip
 800a182:	6163      	str	r3, [r4, #20]
 800a184:	782b      	ldrb	r3, [r5, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d100      	bne.n	800a18c <_svfiprintf_r+0x7c>
 800a18a:	e0a5      	b.n	800a2d8 <_svfiprintf_r+0x1c8>
 800a18c:	2201      	movs	r2, #1
 800a18e:	2300      	movs	r3, #0
 800a190:	4252      	negs	r2, r2
 800a192:	6062      	str	r2, [r4, #4]
 800a194:	a904      	add	r1, sp, #16
 800a196:	3254      	adds	r2, #84	; 0x54
 800a198:	1852      	adds	r2, r2, r1
 800a19a:	1c6e      	adds	r6, r5, #1
 800a19c:	6023      	str	r3, [r4, #0]
 800a19e:	60e3      	str	r3, [r4, #12]
 800a1a0:	60a3      	str	r3, [r4, #8]
 800a1a2:	7013      	strb	r3, [r2, #0]
 800a1a4:	65a3      	str	r3, [r4, #88]	; 0x58
 800a1a6:	2205      	movs	r2, #5
 800a1a8:	7831      	ldrb	r1, [r6, #0]
 800a1aa:	4854      	ldr	r0, [pc, #336]	; (800a2fc <_svfiprintf_r+0x1ec>)
 800a1ac:	f7ff f962 	bl	8009474 <memchr>
 800a1b0:	1c75      	adds	r5, r6, #1
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d11f      	bne.n	800a1f6 <_svfiprintf_r+0xe6>
 800a1b6:	6822      	ldr	r2, [r4, #0]
 800a1b8:	06d3      	lsls	r3, r2, #27
 800a1ba:	d504      	bpl.n	800a1c6 <_svfiprintf_r+0xb6>
 800a1bc:	2353      	movs	r3, #83	; 0x53
 800a1be:	a904      	add	r1, sp, #16
 800a1c0:	185b      	adds	r3, r3, r1
 800a1c2:	2120      	movs	r1, #32
 800a1c4:	7019      	strb	r1, [r3, #0]
 800a1c6:	0713      	lsls	r3, r2, #28
 800a1c8:	d504      	bpl.n	800a1d4 <_svfiprintf_r+0xc4>
 800a1ca:	2353      	movs	r3, #83	; 0x53
 800a1cc:	a904      	add	r1, sp, #16
 800a1ce:	185b      	adds	r3, r3, r1
 800a1d0:	212b      	movs	r1, #43	; 0x2b
 800a1d2:	7019      	strb	r1, [r3, #0]
 800a1d4:	7833      	ldrb	r3, [r6, #0]
 800a1d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a1d8:	d016      	beq.n	800a208 <_svfiprintf_r+0xf8>
 800a1da:	0035      	movs	r5, r6
 800a1dc:	2100      	movs	r1, #0
 800a1de:	200a      	movs	r0, #10
 800a1e0:	68e3      	ldr	r3, [r4, #12]
 800a1e2:	782a      	ldrb	r2, [r5, #0]
 800a1e4:	1c6e      	adds	r6, r5, #1
 800a1e6:	3a30      	subs	r2, #48	; 0x30
 800a1e8:	2a09      	cmp	r2, #9
 800a1ea:	d94e      	bls.n	800a28a <_svfiprintf_r+0x17a>
 800a1ec:	2900      	cmp	r1, #0
 800a1ee:	d111      	bne.n	800a214 <_svfiprintf_r+0x104>
 800a1f0:	e017      	b.n	800a222 <_svfiprintf_r+0x112>
 800a1f2:	3501      	adds	r5, #1
 800a1f4:	e7b0      	b.n	800a158 <_svfiprintf_r+0x48>
 800a1f6:	4b41      	ldr	r3, [pc, #260]	; (800a2fc <_svfiprintf_r+0x1ec>)
 800a1f8:	6822      	ldr	r2, [r4, #0]
 800a1fa:	1ac0      	subs	r0, r0, r3
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	4083      	lsls	r3, r0
 800a200:	4313      	orrs	r3, r2
 800a202:	002e      	movs	r6, r5
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	e7ce      	b.n	800a1a6 <_svfiprintf_r+0x96>
 800a208:	9b07      	ldr	r3, [sp, #28]
 800a20a:	1d19      	adds	r1, r3, #4
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	9107      	str	r1, [sp, #28]
 800a210:	2b00      	cmp	r3, #0
 800a212:	db01      	blt.n	800a218 <_svfiprintf_r+0x108>
 800a214:	930b      	str	r3, [sp, #44]	; 0x2c
 800a216:	e004      	b.n	800a222 <_svfiprintf_r+0x112>
 800a218:	425b      	negs	r3, r3
 800a21a:	60e3      	str	r3, [r4, #12]
 800a21c:	2302      	movs	r3, #2
 800a21e:	4313      	orrs	r3, r2
 800a220:	6023      	str	r3, [r4, #0]
 800a222:	782b      	ldrb	r3, [r5, #0]
 800a224:	2b2e      	cmp	r3, #46	; 0x2e
 800a226:	d10a      	bne.n	800a23e <_svfiprintf_r+0x12e>
 800a228:	786b      	ldrb	r3, [r5, #1]
 800a22a:	2b2a      	cmp	r3, #42	; 0x2a
 800a22c:	d135      	bne.n	800a29a <_svfiprintf_r+0x18a>
 800a22e:	9b07      	ldr	r3, [sp, #28]
 800a230:	3502      	adds	r5, #2
 800a232:	1d1a      	adds	r2, r3, #4
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	9207      	str	r2, [sp, #28]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	db2b      	blt.n	800a294 <_svfiprintf_r+0x184>
 800a23c:	9309      	str	r3, [sp, #36]	; 0x24
 800a23e:	4e30      	ldr	r6, [pc, #192]	; (800a300 <_svfiprintf_r+0x1f0>)
 800a240:	2203      	movs	r2, #3
 800a242:	0030      	movs	r0, r6
 800a244:	7829      	ldrb	r1, [r5, #0]
 800a246:	f7ff f915 	bl	8009474 <memchr>
 800a24a:	2800      	cmp	r0, #0
 800a24c:	d006      	beq.n	800a25c <_svfiprintf_r+0x14c>
 800a24e:	2340      	movs	r3, #64	; 0x40
 800a250:	1b80      	subs	r0, r0, r6
 800a252:	4083      	lsls	r3, r0
 800a254:	6822      	ldr	r2, [r4, #0]
 800a256:	3501      	adds	r5, #1
 800a258:	4313      	orrs	r3, r2
 800a25a:	6023      	str	r3, [r4, #0]
 800a25c:	7829      	ldrb	r1, [r5, #0]
 800a25e:	2206      	movs	r2, #6
 800a260:	4828      	ldr	r0, [pc, #160]	; (800a304 <_svfiprintf_r+0x1f4>)
 800a262:	1c6e      	adds	r6, r5, #1
 800a264:	7621      	strb	r1, [r4, #24]
 800a266:	f7ff f905 	bl	8009474 <memchr>
 800a26a:	2800      	cmp	r0, #0
 800a26c:	d03c      	beq.n	800a2e8 <_svfiprintf_r+0x1d8>
 800a26e:	4b26      	ldr	r3, [pc, #152]	; (800a308 <_svfiprintf_r+0x1f8>)
 800a270:	2b00      	cmp	r3, #0
 800a272:	d125      	bne.n	800a2c0 <_svfiprintf_r+0x1b0>
 800a274:	2207      	movs	r2, #7
 800a276:	9b07      	ldr	r3, [sp, #28]
 800a278:	3307      	adds	r3, #7
 800a27a:	4393      	bics	r3, r2
 800a27c:	3308      	adds	r3, #8
 800a27e:	9307      	str	r3, [sp, #28]
 800a280:	6963      	ldr	r3, [r4, #20]
 800a282:	9a04      	ldr	r2, [sp, #16]
 800a284:	189b      	adds	r3, r3, r2
 800a286:	6163      	str	r3, [r4, #20]
 800a288:	e765      	b.n	800a156 <_svfiprintf_r+0x46>
 800a28a:	4343      	muls	r3, r0
 800a28c:	0035      	movs	r5, r6
 800a28e:	2101      	movs	r1, #1
 800a290:	189b      	adds	r3, r3, r2
 800a292:	e7a6      	b.n	800a1e2 <_svfiprintf_r+0xd2>
 800a294:	2301      	movs	r3, #1
 800a296:	425b      	negs	r3, r3
 800a298:	e7d0      	b.n	800a23c <_svfiprintf_r+0x12c>
 800a29a:	2300      	movs	r3, #0
 800a29c:	200a      	movs	r0, #10
 800a29e:	001a      	movs	r2, r3
 800a2a0:	3501      	adds	r5, #1
 800a2a2:	6063      	str	r3, [r4, #4]
 800a2a4:	7829      	ldrb	r1, [r5, #0]
 800a2a6:	1c6e      	adds	r6, r5, #1
 800a2a8:	3930      	subs	r1, #48	; 0x30
 800a2aa:	2909      	cmp	r1, #9
 800a2ac:	d903      	bls.n	800a2b6 <_svfiprintf_r+0x1a6>
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d0c5      	beq.n	800a23e <_svfiprintf_r+0x12e>
 800a2b2:	9209      	str	r2, [sp, #36]	; 0x24
 800a2b4:	e7c3      	b.n	800a23e <_svfiprintf_r+0x12e>
 800a2b6:	4342      	muls	r2, r0
 800a2b8:	0035      	movs	r5, r6
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	1852      	adds	r2, r2, r1
 800a2be:	e7f1      	b.n	800a2a4 <_svfiprintf_r+0x194>
 800a2c0:	ab07      	add	r3, sp, #28
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	003a      	movs	r2, r7
 800a2c6:	0021      	movs	r1, r4
 800a2c8:	4b10      	ldr	r3, [pc, #64]	; (800a30c <_svfiprintf_r+0x1fc>)
 800a2ca:	9803      	ldr	r0, [sp, #12]
 800a2cc:	f7fc f9e2 	bl	8006694 <_printf_float>
 800a2d0:	9004      	str	r0, [sp, #16]
 800a2d2:	9b04      	ldr	r3, [sp, #16]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	d1d3      	bne.n	800a280 <_svfiprintf_r+0x170>
 800a2d8:	89bb      	ldrh	r3, [r7, #12]
 800a2da:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a2dc:	065b      	lsls	r3, r3, #25
 800a2de:	d400      	bmi.n	800a2e2 <_svfiprintf_r+0x1d2>
 800a2e0:	e72d      	b.n	800a13e <_svfiprintf_r+0x2e>
 800a2e2:	2001      	movs	r0, #1
 800a2e4:	4240      	negs	r0, r0
 800a2e6:	e72a      	b.n	800a13e <_svfiprintf_r+0x2e>
 800a2e8:	ab07      	add	r3, sp, #28
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	003a      	movs	r2, r7
 800a2ee:	0021      	movs	r1, r4
 800a2f0:	4b06      	ldr	r3, [pc, #24]	; (800a30c <_svfiprintf_r+0x1fc>)
 800a2f2:	9803      	ldr	r0, [sp, #12]
 800a2f4:	f7fc fc80 	bl	8006bf8 <_printf_i>
 800a2f8:	e7ea      	b.n	800a2d0 <_svfiprintf_r+0x1c0>
 800a2fa:	46c0      	nop			; (mov r8, r8)
 800a2fc:	0800b524 	.word	0x0800b524
 800a300:	0800b52a 	.word	0x0800b52a
 800a304:	0800b52e 	.word	0x0800b52e
 800a308:	08006695 	.word	0x08006695
 800a30c:	0800a04d 	.word	0x0800a04d

0800a310 <nan>:
 800a310:	2000      	movs	r0, #0
 800a312:	4901      	ldr	r1, [pc, #4]	; (800a318 <nan+0x8>)
 800a314:	4770      	bx	lr
 800a316:	46c0      	nop			; (mov r8, r8)
 800a318:	7ff80000 	.word	0x7ff80000

0800a31c <_sbrk_r>:
 800a31c:	2300      	movs	r3, #0
 800a31e:	b570      	push	{r4, r5, r6, lr}
 800a320:	4d06      	ldr	r5, [pc, #24]	; (800a33c <_sbrk_r+0x20>)
 800a322:	0004      	movs	r4, r0
 800a324:	0008      	movs	r0, r1
 800a326:	602b      	str	r3, [r5, #0]
 800a328:	f7f9 fd3a 	bl	8003da0 <_sbrk>
 800a32c:	1c43      	adds	r3, r0, #1
 800a32e:	d103      	bne.n	800a338 <_sbrk_r+0x1c>
 800a330:	682b      	ldr	r3, [r5, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d000      	beq.n	800a338 <_sbrk_r+0x1c>
 800a336:	6023      	str	r3, [r4, #0]
 800a338:	bd70      	pop	{r4, r5, r6, pc}
 800a33a:	46c0      	nop			; (mov r8, r8)
 800a33c:	2000031c 	.word	0x2000031c

0800a340 <strncmp>:
 800a340:	b530      	push	{r4, r5, lr}
 800a342:	0005      	movs	r5, r0
 800a344:	1e10      	subs	r0, r2, #0
 800a346:	d008      	beq.n	800a35a <strncmp+0x1a>
 800a348:	2400      	movs	r4, #0
 800a34a:	3a01      	subs	r2, #1
 800a34c:	5d2b      	ldrb	r3, [r5, r4]
 800a34e:	5d08      	ldrb	r0, [r1, r4]
 800a350:	4283      	cmp	r3, r0
 800a352:	d101      	bne.n	800a358 <strncmp+0x18>
 800a354:	4294      	cmp	r4, r2
 800a356:	d101      	bne.n	800a35c <strncmp+0x1c>
 800a358:	1a18      	subs	r0, r3, r0
 800a35a:	bd30      	pop	{r4, r5, pc}
 800a35c:	3401      	adds	r4, #1
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1f4      	bne.n	800a34c <strncmp+0xc>
 800a362:	e7f9      	b.n	800a358 <strncmp+0x18>

0800a364 <__ascii_wctomb>:
 800a364:	0003      	movs	r3, r0
 800a366:	1e08      	subs	r0, r1, #0
 800a368:	d005      	beq.n	800a376 <__ascii_wctomb+0x12>
 800a36a:	2aff      	cmp	r2, #255	; 0xff
 800a36c:	d904      	bls.n	800a378 <__ascii_wctomb+0x14>
 800a36e:	228a      	movs	r2, #138	; 0x8a
 800a370:	2001      	movs	r0, #1
 800a372:	601a      	str	r2, [r3, #0]
 800a374:	4240      	negs	r0, r0
 800a376:	4770      	bx	lr
 800a378:	2001      	movs	r0, #1
 800a37a:	700a      	strb	r2, [r1, #0]
 800a37c:	e7fb      	b.n	800a376 <__ascii_wctomb+0x12>
	...

0800a380 <__assert_func>:
 800a380:	b530      	push	{r4, r5, lr}
 800a382:	0014      	movs	r4, r2
 800a384:	001a      	movs	r2, r3
 800a386:	4b09      	ldr	r3, [pc, #36]	; (800a3ac <__assert_func+0x2c>)
 800a388:	0005      	movs	r5, r0
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	b085      	sub	sp, #20
 800a38e:	68d8      	ldr	r0, [r3, #12]
 800a390:	4b07      	ldr	r3, [pc, #28]	; (800a3b0 <__assert_func+0x30>)
 800a392:	2c00      	cmp	r4, #0
 800a394:	d101      	bne.n	800a39a <__assert_func+0x1a>
 800a396:	4b07      	ldr	r3, [pc, #28]	; (800a3b4 <__assert_func+0x34>)
 800a398:	001c      	movs	r4, r3
 800a39a:	9301      	str	r3, [sp, #4]
 800a39c:	9100      	str	r1, [sp, #0]
 800a39e:	002b      	movs	r3, r5
 800a3a0:	4905      	ldr	r1, [pc, #20]	; (800a3b8 <__assert_func+0x38>)
 800a3a2:	9402      	str	r4, [sp, #8]
 800a3a4:	f000 f80a 	bl	800a3bc <fiprintf>
 800a3a8:	f000 fa9a 	bl	800a8e0 <abort>
 800a3ac:	2000000c 	.word	0x2000000c
 800a3b0:	0800b535 	.word	0x0800b535
 800a3b4:	0800b570 	.word	0x0800b570
 800a3b8:	0800b542 	.word	0x0800b542

0800a3bc <fiprintf>:
 800a3bc:	b40e      	push	{r1, r2, r3}
 800a3be:	b503      	push	{r0, r1, lr}
 800a3c0:	0001      	movs	r1, r0
 800a3c2:	ab03      	add	r3, sp, #12
 800a3c4:	4804      	ldr	r0, [pc, #16]	; (800a3d8 <fiprintf+0x1c>)
 800a3c6:	cb04      	ldmia	r3!, {r2}
 800a3c8:	6800      	ldr	r0, [r0, #0]
 800a3ca:	9301      	str	r3, [sp, #4]
 800a3cc:	f000 f880 	bl	800a4d0 <_vfiprintf_r>
 800a3d0:	b002      	add	sp, #8
 800a3d2:	bc08      	pop	{r3}
 800a3d4:	b003      	add	sp, #12
 800a3d6:	4718      	bx	r3
 800a3d8:	2000000c 	.word	0x2000000c

0800a3dc <memmove>:
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	4288      	cmp	r0, r1
 800a3e0:	d902      	bls.n	800a3e8 <memmove+0xc>
 800a3e2:	188b      	adds	r3, r1, r2
 800a3e4:	4298      	cmp	r0, r3
 800a3e6:	d303      	bcc.n	800a3f0 <memmove+0x14>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	e007      	b.n	800a3fc <memmove+0x20>
 800a3ec:	5c8b      	ldrb	r3, [r1, r2]
 800a3ee:	5483      	strb	r3, [r0, r2]
 800a3f0:	3a01      	subs	r2, #1
 800a3f2:	d2fb      	bcs.n	800a3ec <memmove+0x10>
 800a3f4:	bd10      	pop	{r4, pc}
 800a3f6:	5ccc      	ldrb	r4, [r1, r3]
 800a3f8:	54c4      	strb	r4, [r0, r3]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d1fa      	bne.n	800a3f6 <memmove+0x1a>
 800a400:	e7f8      	b.n	800a3f4 <memmove+0x18>
	...

0800a404 <__malloc_lock>:
 800a404:	b510      	push	{r4, lr}
 800a406:	4802      	ldr	r0, [pc, #8]	; (800a410 <__malloc_lock+0xc>)
 800a408:	f000 fc41 	bl	800ac8e <__retarget_lock_acquire_recursive>
 800a40c:	bd10      	pop	{r4, pc}
 800a40e:	46c0      	nop			; (mov r8, r8)
 800a410:	20000320 	.word	0x20000320

0800a414 <__malloc_unlock>:
 800a414:	b510      	push	{r4, lr}
 800a416:	4802      	ldr	r0, [pc, #8]	; (800a420 <__malloc_unlock+0xc>)
 800a418:	f000 fc3a 	bl	800ac90 <__retarget_lock_release_recursive>
 800a41c:	bd10      	pop	{r4, pc}
 800a41e:	46c0      	nop			; (mov r8, r8)
 800a420:	20000320 	.word	0x20000320

0800a424 <_realloc_r>:
 800a424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a426:	0007      	movs	r7, r0
 800a428:	000e      	movs	r6, r1
 800a42a:	0014      	movs	r4, r2
 800a42c:	2900      	cmp	r1, #0
 800a42e:	d105      	bne.n	800a43c <_realloc_r+0x18>
 800a430:	0011      	movs	r1, r2
 800a432:	f7ff fd95 	bl	8009f60 <_malloc_r>
 800a436:	0005      	movs	r5, r0
 800a438:	0028      	movs	r0, r5
 800a43a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a43c:	2a00      	cmp	r2, #0
 800a43e:	d103      	bne.n	800a448 <_realloc_r+0x24>
 800a440:	f7ff fd22 	bl	8009e88 <_free_r>
 800a444:	0025      	movs	r5, r4
 800a446:	e7f7      	b.n	800a438 <_realloc_r+0x14>
 800a448:	f000 fc90 	bl	800ad6c <_malloc_usable_size_r>
 800a44c:	9001      	str	r0, [sp, #4]
 800a44e:	4284      	cmp	r4, r0
 800a450:	d803      	bhi.n	800a45a <_realloc_r+0x36>
 800a452:	0035      	movs	r5, r6
 800a454:	0843      	lsrs	r3, r0, #1
 800a456:	42a3      	cmp	r3, r4
 800a458:	d3ee      	bcc.n	800a438 <_realloc_r+0x14>
 800a45a:	0021      	movs	r1, r4
 800a45c:	0038      	movs	r0, r7
 800a45e:	f7ff fd7f 	bl	8009f60 <_malloc_r>
 800a462:	1e05      	subs	r5, r0, #0
 800a464:	d0e8      	beq.n	800a438 <_realloc_r+0x14>
 800a466:	9b01      	ldr	r3, [sp, #4]
 800a468:	0022      	movs	r2, r4
 800a46a:	429c      	cmp	r4, r3
 800a46c:	d900      	bls.n	800a470 <_realloc_r+0x4c>
 800a46e:	001a      	movs	r2, r3
 800a470:	0031      	movs	r1, r6
 800a472:	0028      	movs	r0, r5
 800a474:	f7ff f809 	bl	800948a <memcpy>
 800a478:	0031      	movs	r1, r6
 800a47a:	0038      	movs	r0, r7
 800a47c:	f7ff fd04 	bl	8009e88 <_free_r>
 800a480:	e7da      	b.n	800a438 <_realloc_r+0x14>

0800a482 <__sfputc_r>:
 800a482:	6893      	ldr	r3, [r2, #8]
 800a484:	b510      	push	{r4, lr}
 800a486:	3b01      	subs	r3, #1
 800a488:	6093      	str	r3, [r2, #8]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	da04      	bge.n	800a498 <__sfputc_r+0x16>
 800a48e:	6994      	ldr	r4, [r2, #24]
 800a490:	42a3      	cmp	r3, r4
 800a492:	db07      	blt.n	800a4a4 <__sfputc_r+0x22>
 800a494:	290a      	cmp	r1, #10
 800a496:	d005      	beq.n	800a4a4 <__sfputc_r+0x22>
 800a498:	6813      	ldr	r3, [r2, #0]
 800a49a:	1c58      	adds	r0, r3, #1
 800a49c:	6010      	str	r0, [r2, #0]
 800a49e:	7019      	strb	r1, [r3, #0]
 800a4a0:	0008      	movs	r0, r1
 800a4a2:	bd10      	pop	{r4, pc}
 800a4a4:	f000 f94e 	bl	800a744 <__swbuf_r>
 800a4a8:	0001      	movs	r1, r0
 800a4aa:	e7f9      	b.n	800a4a0 <__sfputc_r+0x1e>

0800a4ac <__sfputs_r>:
 800a4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ae:	0006      	movs	r6, r0
 800a4b0:	000f      	movs	r7, r1
 800a4b2:	0014      	movs	r4, r2
 800a4b4:	18d5      	adds	r5, r2, r3
 800a4b6:	42ac      	cmp	r4, r5
 800a4b8:	d101      	bne.n	800a4be <__sfputs_r+0x12>
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	e007      	b.n	800a4ce <__sfputs_r+0x22>
 800a4be:	7821      	ldrb	r1, [r4, #0]
 800a4c0:	003a      	movs	r2, r7
 800a4c2:	0030      	movs	r0, r6
 800a4c4:	f7ff ffdd 	bl	800a482 <__sfputc_r>
 800a4c8:	3401      	adds	r4, #1
 800a4ca:	1c43      	adds	r3, r0, #1
 800a4cc:	d1f3      	bne.n	800a4b6 <__sfputs_r+0xa>
 800a4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a4d0 <_vfiprintf_r>:
 800a4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4d2:	b0a1      	sub	sp, #132	; 0x84
 800a4d4:	0006      	movs	r6, r0
 800a4d6:	000c      	movs	r4, r1
 800a4d8:	001f      	movs	r7, r3
 800a4da:	9203      	str	r2, [sp, #12]
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	d004      	beq.n	800a4ea <_vfiprintf_r+0x1a>
 800a4e0:	6983      	ldr	r3, [r0, #24]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d101      	bne.n	800a4ea <_vfiprintf_r+0x1a>
 800a4e6:	f000 fb31 	bl	800ab4c <__sinit>
 800a4ea:	4b8e      	ldr	r3, [pc, #568]	; (800a724 <_vfiprintf_r+0x254>)
 800a4ec:	429c      	cmp	r4, r3
 800a4ee:	d11c      	bne.n	800a52a <_vfiprintf_r+0x5a>
 800a4f0:	6874      	ldr	r4, [r6, #4]
 800a4f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4f4:	07db      	lsls	r3, r3, #31
 800a4f6:	d405      	bmi.n	800a504 <_vfiprintf_r+0x34>
 800a4f8:	89a3      	ldrh	r3, [r4, #12]
 800a4fa:	059b      	lsls	r3, r3, #22
 800a4fc:	d402      	bmi.n	800a504 <_vfiprintf_r+0x34>
 800a4fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a500:	f000 fbc5 	bl	800ac8e <__retarget_lock_acquire_recursive>
 800a504:	89a3      	ldrh	r3, [r4, #12]
 800a506:	071b      	lsls	r3, r3, #28
 800a508:	d502      	bpl.n	800a510 <_vfiprintf_r+0x40>
 800a50a:	6923      	ldr	r3, [r4, #16]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d11d      	bne.n	800a54c <_vfiprintf_r+0x7c>
 800a510:	0021      	movs	r1, r4
 800a512:	0030      	movs	r0, r6
 800a514:	f000 f96c 	bl	800a7f0 <__swsetup_r>
 800a518:	2800      	cmp	r0, #0
 800a51a:	d017      	beq.n	800a54c <_vfiprintf_r+0x7c>
 800a51c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a51e:	07db      	lsls	r3, r3, #31
 800a520:	d50d      	bpl.n	800a53e <_vfiprintf_r+0x6e>
 800a522:	2001      	movs	r0, #1
 800a524:	4240      	negs	r0, r0
 800a526:	b021      	add	sp, #132	; 0x84
 800a528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a52a:	4b7f      	ldr	r3, [pc, #508]	; (800a728 <_vfiprintf_r+0x258>)
 800a52c:	429c      	cmp	r4, r3
 800a52e:	d101      	bne.n	800a534 <_vfiprintf_r+0x64>
 800a530:	68b4      	ldr	r4, [r6, #8]
 800a532:	e7de      	b.n	800a4f2 <_vfiprintf_r+0x22>
 800a534:	4b7d      	ldr	r3, [pc, #500]	; (800a72c <_vfiprintf_r+0x25c>)
 800a536:	429c      	cmp	r4, r3
 800a538:	d1db      	bne.n	800a4f2 <_vfiprintf_r+0x22>
 800a53a:	68f4      	ldr	r4, [r6, #12]
 800a53c:	e7d9      	b.n	800a4f2 <_vfiprintf_r+0x22>
 800a53e:	89a3      	ldrh	r3, [r4, #12]
 800a540:	059b      	lsls	r3, r3, #22
 800a542:	d4ee      	bmi.n	800a522 <_vfiprintf_r+0x52>
 800a544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a546:	f000 fba3 	bl	800ac90 <__retarget_lock_release_recursive>
 800a54a:	e7ea      	b.n	800a522 <_vfiprintf_r+0x52>
 800a54c:	2300      	movs	r3, #0
 800a54e:	ad08      	add	r5, sp, #32
 800a550:	616b      	str	r3, [r5, #20]
 800a552:	3320      	adds	r3, #32
 800a554:	766b      	strb	r3, [r5, #25]
 800a556:	3310      	adds	r3, #16
 800a558:	76ab      	strb	r3, [r5, #26]
 800a55a:	9707      	str	r7, [sp, #28]
 800a55c:	9f03      	ldr	r7, [sp, #12]
 800a55e:	783b      	ldrb	r3, [r7, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d001      	beq.n	800a568 <_vfiprintf_r+0x98>
 800a564:	2b25      	cmp	r3, #37	; 0x25
 800a566:	d14e      	bne.n	800a606 <_vfiprintf_r+0x136>
 800a568:	9b03      	ldr	r3, [sp, #12]
 800a56a:	1afb      	subs	r3, r7, r3
 800a56c:	9305      	str	r3, [sp, #20]
 800a56e:	9b03      	ldr	r3, [sp, #12]
 800a570:	429f      	cmp	r7, r3
 800a572:	d00d      	beq.n	800a590 <_vfiprintf_r+0xc0>
 800a574:	9b05      	ldr	r3, [sp, #20]
 800a576:	0021      	movs	r1, r4
 800a578:	0030      	movs	r0, r6
 800a57a:	9a03      	ldr	r2, [sp, #12]
 800a57c:	f7ff ff96 	bl	800a4ac <__sfputs_r>
 800a580:	1c43      	adds	r3, r0, #1
 800a582:	d100      	bne.n	800a586 <_vfiprintf_r+0xb6>
 800a584:	e0b5      	b.n	800a6f2 <_vfiprintf_r+0x222>
 800a586:	696a      	ldr	r2, [r5, #20]
 800a588:	9b05      	ldr	r3, [sp, #20]
 800a58a:	4694      	mov	ip, r2
 800a58c:	4463      	add	r3, ip
 800a58e:	616b      	str	r3, [r5, #20]
 800a590:	783b      	ldrb	r3, [r7, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d100      	bne.n	800a598 <_vfiprintf_r+0xc8>
 800a596:	e0ac      	b.n	800a6f2 <_vfiprintf_r+0x222>
 800a598:	2201      	movs	r2, #1
 800a59a:	1c7b      	adds	r3, r7, #1
 800a59c:	9303      	str	r3, [sp, #12]
 800a59e:	2300      	movs	r3, #0
 800a5a0:	4252      	negs	r2, r2
 800a5a2:	606a      	str	r2, [r5, #4]
 800a5a4:	a904      	add	r1, sp, #16
 800a5a6:	3254      	adds	r2, #84	; 0x54
 800a5a8:	1852      	adds	r2, r2, r1
 800a5aa:	602b      	str	r3, [r5, #0]
 800a5ac:	60eb      	str	r3, [r5, #12]
 800a5ae:	60ab      	str	r3, [r5, #8]
 800a5b0:	7013      	strb	r3, [r2, #0]
 800a5b2:	65ab      	str	r3, [r5, #88]	; 0x58
 800a5b4:	9b03      	ldr	r3, [sp, #12]
 800a5b6:	2205      	movs	r2, #5
 800a5b8:	7819      	ldrb	r1, [r3, #0]
 800a5ba:	485d      	ldr	r0, [pc, #372]	; (800a730 <_vfiprintf_r+0x260>)
 800a5bc:	f7fe ff5a 	bl	8009474 <memchr>
 800a5c0:	9b03      	ldr	r3, [sp, #12]
 800a5c2:	1c5f      	adds	r7, r3, #1
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	d120      	bne.n	800a60a <_vfiprintf_r+0x13a>
 800a5c8:	682a      	ldr	r2, [r5, #0]
 800a5ca:	06d3      	lsls	r3, r2, #27
 800a5cc:	d504      	bpl.n	800a5d8 <_vfiprintf_r+0x108>
 800a5ce:	2353      	movs	r3, #83	; 0x53
 800a5d0:	a904      	add	r1, sp, #16
 800a5d2:	185b      	adds	r3, r3, r1
 800a5d4:	2120      	movs	r1, #32
 800a5d6:	7019      	strb	r1, [r3, #0]
 800a5d8:	0713      	lsls	r3, r2, #28
 800a5da:	d504      	bpl.n	800a5e6 <_vfiprintf_r+0x116>
 800a5dc:	2353      	movs	r3, #83	; 0x53
 800a5de:	a904      	add	r1, sp, #16
 800a5e0:	185b      	adds	r3, r3, r1
 800a5e2:	212b      	movs	r1, #43	; 0x2b
 800a5e4:	7019      	strb	r1, [r3, #0]
 800a5e6:	9b03      	ldr	r3, [sp, #12]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	2b2a      	cmp	r3, #42	; 0x2a
 800a5ec:	d016      	beq.n	800a61c <_vfiprintf_r+0x14c>
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	68eb      	ldr	r3, [r5, #12]
 800a5f2:	9f03      	ldr	r7, [sp, #12]
 800a5f4:	783a      	ldrb	r2, [r7, #0]
 800a5f6:	1c78      	adds	r0, r7, #1
 800a5f8:	3a30      	subs	r2, #48	; 0x30
 800a5fa:	4684      	mov	ip, r0
 800a5fc:	2a09      	cmp	r2, #9
 800a5fe:	d94f      	bls.n	800a6a0 <_vfiprintf_r+0x1d0>
 800a600:	2900      	cmp	r1, #0
 800a602:	d111      	bne.n	800a628 <_vfiprintf_r+0x158>
 800a604:	e017      	b.n	800a636 <_vfiprintf_r+0x166>
 800a606:	3701      	adds	r7, #1
 800a608:	e7a9      	b.n	800a55e <_vfiprintf_r+0x8e>
 800a60a:	4b49      	ldr	r3, [pc, #292]	; (800a730 <_vfiprintf_r+0x260>)
 800a60c:	682a      	ldr	r2, [r5, #0]
 800a60e:	1ac0      	subs	r0, r0, r3
 800a610:	2301      	movs	r3, #1
 800a612:	4083      	lsls	r3, r0
 800a614:	4313      	orrs	r3, r2
 800a616:	602b      	str	r3, [r5, #0]
 800a618:	9703      	str	r7, [sp, #12]
 800a61a:	e7cb      	b.n	800a5b4 <_vfiprintf_r+0xe4>
 800a61c:	9b07      	ldr	r3, [sp, #28]
 800a61e:	1d19      	adds	r1, r3, #4
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	9107      	str	r1, [sp, #28]
 800a624:	2b00      	cmp	r3, #0
 800a626:	db01      	blt.n	800a62c <_vfiprintf_r+0x15c>
 800a628:	930b      	str	r3, [sp, #44]	; 0x2c
 800a62a:	e004      	b.n	800a636 <_vfiprintf_r+0x166>
 800a62c:	425b      	negs	r3, r3
 800a62e:	60eb      	str	r3, [r5, #12]
 800a630:	2302      	movs	r3, #2
 800a632:	4313      	orrs	r3, r2
 800a634:	602b      	str	r3, [r5, #0]
 800a636:	783b      	ldrb	r3, [r7, #0]
 800a638:	2b2e      	cmp	r3, #46	; 0x2e
 800a63a:	d10a      	bne.n	800a652 <_vfiprintf_r+0x182>
 800a63c:	787b      	ldrb	r3, [r7, #1]
 800a63e:	2b2a      	cmp	r3, #42	; 0x2a
 800a640:	d137      	bne.n	800a6b2 <_vfiprintf_r+0x1e2>
 800a642:	9b07      	ldr	r3, [sp, #28]
 800a644:	3702      	adds	r7, #2
 800a646:	1d1a      	adds	r2, r3, #4
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	9207      	str	r2, [sp, #28]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	db2d      	blt.n	800a6ac <_vfiprintf_r+0x1dc>
 800a650:	9309      	str	r3, [sp, #36]	; 0x24
 800a652:	2203      	movs	r2, #3
 800a654:	7839      	ldrb	r1, [r7, #0]
 800a656:	4837      	ldr	r0, [pc, #220]	; (800a734 <_vfiprintf_r+0x264>)
 800a658:	f7fe ff0c 	bl	8009474 <memchr>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d007      	beq.n	800a670 <_vfiprintf_r+0x1a0>
 800a660:	4b34      	ldr	r3, [pc, #208]	; (800a734 <_vfiprintf_r+0x264>)
 800a662:	682a      	ldr	r2, [r5, #0]
 800a664:	1ac0      	subs	r0, r0, r3
 800a666:	2340      	movs	r3, #64	; 0x40
 800a668:	4083      	lsls	r3, r0
 800a66a:	4313      	orrs	r3, r2
 800a66c:	3701      	adds	r7, #1
 800a66e:	602b      	str	r3, [r5, #0]
 800a670:	7839      	ldrb	r1, [r7, #0]
 800a672:	1c7b      	adds	r3, r7, #1
 800a674:	2206      	movs	r2, #6
 800a676:	4830      	ldr	r0, [pc, #192]	; (800a738 <_vfiprintf_r+0x268>)
 800a678:	9303      	str	r3, [sp, #12]
 800a67a:	7629      	strb	r1, [r5, #24]
 800a67c:	f7fe fefa 	bl	8009474 <memchr>
 800a680:	2800      	cmp	r0, #0
 800a682:	d045      	beq.n	800a710 <_vfiprintf_r+0x240>
 800a684:	4b2d      	ldr	r3, [pc, #180]	; (800a73c <_vfiprintf_r+0x26c>)
 800a686:	2b00      	cmp	r3, #0
 800a688:	d127      	bne.n	800a6da <_vfiprintf_r+0x20a>
 800a68a:	2207      	movs	r2, #7
 800a68c:	9b07      	ldr	r3, [sp, #28]
 800a68e:	3307      	adds	r3, #7
 800a690:	4393      	bics	r3, r2
 800a692:	3308      	adds	r3, #8
 800a694:	9307      	str	r3, [sp, #28]
 800a696:	696b      	ldr	r3, [r5, #20]
 800a698:	9a04      	ldr	r2, [sp, #16]
 800a69a:	189b      	adds	r3, r3, r2
 800a69c:	616b      	str	r3, [r5, #20]
 800a69e:	e75d      	b.n	800a55c <_vfiprintf_r+0x8c>
 800a6a0:	210a      	movs	r1, #10
 800a6a2:	434b      	muls	r3, r1
 800a6a4:	4667      	mov	r7, ip
 800a6a6:	189b      	adds	r3, r3, r2
 800a6a8:	3909      	subs	r1, #9
 800a6aa:	e7a3      	b.n	800a5f4 <_vfiprintf_r+0x124>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	425b      	negs	r3, r3
 800a6b0:	e7ce      	b.n	800a650 <_vfiprintf_r+0x180>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	001a      	movs	r2, r3
 800a6b6:	3701      	adds	r7, #1
 800a6b8:	606b      	str	r3, [r5, #4]
 800a6ba:	7839      	ldrb	r1, [r7, #0]
 800a6bc:	1c78      	adds	r0, r7, #1
 800a6be:	3930      	subs	r1, #48	; 0x30
 800a6c0:	4684      	mov	ip, r0
 800a6c2:	2909      	cmp	r1, #9
 800a6c4:	d903      	bls.n	800a6ce <_vfiprintf_r+0x1fe>
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d0c3      	beq.n	800a652 <_vfiprintf_r+0x182>
 800a6ca:	9209      	str	r2, [sp, #36]	; 0x24
 800a6cc:	e7c1      	b.n	800a652 <_vfiprintf_r+0x182>
 800a6ce:	230a      	movs	r3, #10
 800a6d0:	435a      	muls	r2, r3
 800a6d2:	4667      	mov	r7, ip
 800a6d4:	1852      	adds	r2, r2, r1
 800a6d6:	3b09      	subs	r3, #9
 800a6d8:	e7ef      	b.n	800a6ba <_vfiprintf_r+0x1ea>
 800a6da:	ab07      	add	r3, sp, #28
 800a6dc:	9300      	str	r3, [sp, #0]
 800a6de:	0022      	movs	r2, r4
 800a6e0:	0029      	movs	r1, r5
 800a6e2:	0030      	movs	r0, r6
 800a6e4:	4b16      	ldr	r3, [pc, #88]	; (800a740 <_vfiprintf_r+0x270>)
 800a6e6:	f7fb ffd5 	bl	8006694 <_printf_float>
 800a6ea:	9004      	str	r0, [sp, #16]
 800a6ec:	9b04      	ldr	r3, [sp, #16]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	d1d1      	bne.n	800a696 <_vfiprintf_r+0x1c6>
 800a6f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6f4:	07db      	lsls	r3, r3, #31
 800a6f6:	d405      	bmi.n	800a704 <_vfiprintf_r+0x234>
 800a6f8:	89a3      	ldrh	r3, [r4, #12]
 800a6fa:	059b      	lsls	r3, r3, #22
 800a6fc:	d402      	bmi.n	800a704 <_vfiprintf_r+0x234>
 800a6fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a700:	f000 fac6 	bl	800ac90 <__retarget_lock_release_recursive>
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	065b      	lsls	r3, r3, #25
 800a708:	d500      	bpl.n	800a70c <_vfiprintf_r+0x23c>
 800a70a:	e70a      	b.n	800a522 <_vfiprintf_r+0x52>
 800a70c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a70e:	e70a      	b.n	800a526 <_vfiprintf_r+0x56>
 800a710:	ab07      	add	r3, sp, #28
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	0022      	movs	r2, r4
 800a716:	0029      	movs	r1, r5
 800a718:	0030      	movs	r0, r6
 800a71a:	4b09      	ldr	r3, [pc, #36]	; (800a740 <_vfiprintf_r+0x270>)
 800a71c:	f7fc fa6c 	bl	8006bf8 <_printf_i>
 800a720:	e7e3      	b.n	800a6ea <_vfiprintf_r+0x21a>
 800a722:	46c0      	nop			; (mov r8, r8)
 800a724:	0800b594 	.word	0x0800b594
 800a728:	0800b5b4 	.word	0x0800b5b4
 800a72c:	0800b574 	.word	0x0800b574
 800a730:	0800b524 	.word	0x0800b524
 800a734:	0800b52a 	.word	0x0800b52a
 800a738:	0800b52e 	.word	0x0800b52e
 800a73c:	08006695 	.word	0x08006695
 800a740:	0800a4ad 	.word	0x0800a4ad

0800a744 <__swbuf_r>:
 800a744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a746:	0005      	movs	r5, r0
 800a748:	000e      	movs	r6, r1
 800a74a:	0014      	movs	r4, r2
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d004      	beq.n	800a75a <__swbuf_r+0x16>
 800a750:	6983      	ldr	r3, [r0, #24]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d101      	bne.n	800a75a <__swbuf_r+0x16>
 800a756:	f000 f9f9 	bl	800ab4c <__sinit>
 800a75a:	4b22      	ldr	r3, [pc, #136]	; (800a7e4 <__swbuf_r+0xa0>)
 800a75c:	429c      	cmp	r4, r3
 800a75e:	d12e      	bne.n	800a7be <__swbuf_r+0x7a>
 800a760:	686c      	ldr	r4, [r5, #4]
 800a762:	69a3      	ldr	r3, [r4, #24]
 800a764:	60a3      	str	r3, [r4, #8]
 800a766:	89a3      	ldrh	r3, [r4, #12]
 800a768:	071b      	lsls	r3, r3, #28
 800a76a:	d532      	bpl.n	800a7d2 <__swbuf_r+0x8e>
 800a76c:	6923      	ldr	r3, [r4, #16]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d02f      	beq.n	800a7d2 <__swbuf_r+0x8e>
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	6922      	ldr	r2, [r4, #16]
 800a776:	b2f7      	uxtb	r7, r6
 800a778:	1a98      	subs	r0, r3, r2
 800a77a:	6963      	ldr	r3, [r4, #20]
 800a77c:	b2f6      	uxtb	r6, r6
 800a77e:	4283      	cmp	r3, r0
 800a780:	dc05      	bgt.n	800a78e <__swbuf_r+0x4a>
 800a782:	0021      	movs	r1, r4
 800a784:	0028      	movs	r0, r5
 800a786:	f000 f93f 	bl	800aa08 <_fflush_r>
 800a78a:	2800      	cmp	r0, #0
 800a78c:	d127      	bne.n	800a7de <__swbuf_r+0x9a>
 800a78e:	68a3      	ldr	r3, [r4, #8]
 800a790:	3001      	adds	r0, #1
 800a792:	3b01      	subs	r3, #1
 800a794:	60a3      	str	r3, [r4, #8]
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	1c5a      	adds	r2, r3, #1
 800a79a:	6022      	str	r2, [r4, #0]
 800a79c:	701f      	strb	r7, [r3, #0]
 800a79e:	6963      	ldr	r3, [r4, #20]
 800a7a0:	4283      	cmp	r3, r0
 800a7a2:	d004      	beq.n	800a7ae <__swbuf_r+0x6a>
 800a7a4:	89a3      	ldrh	r3, [r4, #12]
 800a7a6:	07db      	lsls	r3, r3, #31
 800a7a8:	d507      	bpl.n	800a7ba <__swbuf_r+0x76>
 800a7aa:	2e0a      	cmp	r6, #10
 800a7ac:	d105      	bne.n	800a7ba <__swbuf_r+0x76>
 800a7ae:	0021      	movs	r1, r4
 800a7b0:	0028      	movs	r0, r5
 800a7b2:	f000 f929 	bl	800aa08 <_fflush_r>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d111      	bne.n	800a7de <__swbuf_r+0x9a>
 800a7ba:	0030      	movs	r0, r6
 800a7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7be:	4b0a      	ldr	r3, [pc, #40]	; (800a7e8 <__swbuf_r+0xa4>)
 800a7c0:	429c      	cmp	r4, r3
 800a7c2:	d101      	bne.n	800a7c8 <__swbuf_r+0x84>
 800a7c4:	68ac      	ldr	r4, [r5, #8]
 800a7c6:	e7cc      	b.n	800a762 <__swbuf_r+0x1e>
 800a7c8:	4b08      	ldr	r3, [pc, #32]	; (800a7ec <__swbuf_r+0xa8>)
 800a7ca:	429c      	cmp	r4, r3
 800a7cc:	d1c9      	bne.n	800a762 <__swbuf_r+0x1e>
 800a7ce:	68ec      	ldr	r4, [r5, #12]
 800a7d0:	e7c7      	b.n	800a762 <__swbuf_r+0x1e>
 800a7d2:	0021      	movs	r1, r4
 800a7d4:	0028      	movs	r0, r5
 800a7d6:	f000 f80b 	bl	800a7f0 <__swsetup_r>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d0c9      	beq.n	800a772 <__swbuf_r+0x2e>
 800a7de:	2601      	movs	r6, #1
 800a7e0:	4276      	negs	r6, r6
 800a7e2:	e7ea      	b.n	800a7ba <__swbuf_r+0x76>
 800a7e4:	0800b594 	.word	0x0800b594
 800a7e8:	0800b5b4 	.word	0x0800b5b4
 800a7ec:	0800b574 	.word	0x0800b574

0800a7f0 <__swsetup_r>:
 800a7f0:	4b37      	ldr	r3, [pc, #220]	; (800a8d0 <__swsetup_r+0xe0>)
 800a7f2:	b570      	push	{r4, r5, r6, lr}
 800a7f4:	681d      	ldr	r5, [r3, #0]
 800a7f6:	0006      	movs	r6, r0
 800a7f8:	000c      	movs	r4, r1
 800a7fa:	2d00      	cmp	r5, #0
 800a7fc:	d005      	beq.n	800a80a <__swsetup_r+0x1a>
 800a7fe:	69ab      	ldr	r3, [r5, #24]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d102      	bne.n	800a80a <__swsetup_r+0x1a>
 800a804:	0028      	movs	r0, r5
 800a806:	f000 f9a1 	bl	800ab4c <__sinit>
 800a80a:	4b32      	ldr	r3, [pc, #200]	; (800a8d4 <__swsetup_r+0xe4>)
 800a80c:	429c      	cmp	r4, r3
 800a80e:	d10f      	bne.n	800a830 <__swsetup_r+0x40>
 800a810:	686c      	ldr	r4, [r5, #4]
 800a812:	230c      	movs	r3, #12
 800a814:	5ee2      	ldrsh	r2, [r4, r3]
 800a816:	b293      	uxth	r3, r2
 800a818:	0711      	lsls	r1, r2, #28
 800a81a:	d42d      	bmi.n	800a878 <__swsetup_r+0x88>
 800a81c:	06d9      	lsls	r1, r3, #27
 800a81e:	d411      	bmi.n	800a844 <__swsetup_r+0x54>
 800a820:	2309      	movs	r3, #9
 800a822:	2001      	movs	r0, #1
 800a824:	6033      	str	r3, [r6, #0]
 800a826:	3337      	adds	r3, #55	; 0x37
 800a828:	4313      	orrs	r3, r2
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	4240      	negs	r0, r0
 800a82e:	bd70      	pop	{r4, r5, r6, pc}
 800a830:	4b29      	ldr	r3, [pc, #164]	; (800a8d8 <__swsetup_r+0xe8>)
 800a832:	429c      	cmp	r4, r3
 800a834:	d101      	bne.n	800a83a <__swsetup_r+0x4a>
 800a836:	68ac      	ldr	r4, [r5, #8]
 800a838:	e7eb      	b.n	800a812 <__swsetup_r+0x22>
 800a83a:	4b28      	ldr	r3, [pc, #160]	; (800a8dc <__swsetup_r+0xec>)
 800a83c:	429c      	cmp	r4, r3
 800a83e:	d1e8      	bne.n	800a812 <__swsetup_r+0x22>
 800a840:	68ec      	ldr	r4, [r5, #12]
 800a842:	e7e6      	b.n	800a812 <__swsetup_r+0x22>
 800a844:	075b      	lsls	r3, r3, #29
 800a846:	d513      	bpl.n	800a870 <__swsetup_r+0x80>
 800a848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a84a:	2900      	cmp	r1, #0
 800a84c:	d008      	beq.n	800a860 <__swsetup_r+0x70>
 800a84e:	0023      	movs	r3, r4
 800a850:	3344      	adds	r3, #68	; 0x44
 800a852:	4299      	cmp	r1, r3
 800a854:	d002      	beq.n	800a85c <__swsetup_r+0x6c>
 800a856:	0030      	movs	r0, r6
 800a858:	f7ff fb16 	bl	8009e88 <_free_r>
 800a85c:	2300      	movs	r3, #0
 800a85e:	6363      	str	r3, [r4, #52]	; 0x34
 800a860:	2224      	movs	r2, #36	; 0x24
 800a862:	89a3      	ldrh	r3, [r4, #12]
 800a864:	4393      	bics	r3, r2
 800a866:	81a3      	strh	r3, [r4, #12]
 800a868:	2300      	movs	r3, #0
 800a86a:	6063      	str	r3, [r4, #4]
 800a86c:	6923      	ldr	r3, [r4, #16]
 800a86e:	6023      	str	r3, [r4, #0]
 800a870:	2308      	movs	r3, #8
 800a872:	89a2      	ldrh	r2, [r4, #12]
 800a874:	4313      	orrs	r3, r2
 800a876:	81a3      	strh	r3, [r4, #12]
 800a878:	6923      	ldr	r3, [r4, #16]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10b      	bne.n	800a896 <__swsetup_r+0xa6>
 800a87e:	21a0      	movs	r1, #160	; 0xa0
 800a880:	2280      	movs	r2, #128	; 0x80
 800a882:	89a3      	ldrh	r3, [r4, #12]
 800a884:	0089      	lsls	r1, r1, #2
 800a886:	0092      	lsls	r2, r2, #2
 800a888:	400b      	ands	r3, r1
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d003      	beq.n	800a896 <__swsetup_r+0xa6>
 800a88e:	0021      	movs	r1, r4
 800a890:	0030      	movs	r0, r6
 800a892:	f000 fa27 	bl	800ace4 <__smakebuf_r>
 800a896:	220c      	movs	r2, #12
 800a898:	5ea3      	ldrsh	r3, [r4, r2]
 800a89a:	2001      	movs	r0, #1
 800a89c:	001a      	movs	r2, r3
 800a89e:	b299      	uxth	r1, r3
 800a8a0:	4002      	ands	r2, r0
 800a8a2:	4203      	tst	r3, r0
 800a8a4:	d00f      	beq.n	800a8c6 <__swsetup_r+0xd6>
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	60a2      	str	r2, [r4, #8]
 800a8aa:	6962      	ldr	r2, [r4, #20]
 800a8ac:	4252      	negs	r2, r2
 800a8ae:	61a2      	str	r2, [r4, #24]
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	6922      	ldr	r2, [r4, #16]
 800a8b4:	4282      	cmp	r2, r0
 800a8b6:	d1ba      	bne.n	800a82e <__swsetup_r+0x3e>
 800a8b8:	060a      	lsls	r2, r1, #24
 800a8ba:	d5b8      	bpl.n	800a82e <__swsetup_r+0x3e>
 800a8bc:	2240      	movs	r2, #64	; 0x40
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	81a3      	strh	r3, [r4, #12]
 800a8c2:	3801      	subs	r0, #1
 800a8c4:	e7b3      	b.n	800a82e <__swsetup_r+0x3e>
 800a8c6:	0788      	lsls	r0, r1, #30
 800a8c8:	d400      	bmi.n	800a8cc <__swsetup_r+0xdc>
 800a8ca:	6962      	ldr	r2, [r4, #20]
 800a8cc:	60a2      	str	r2, [r4, #8]
 800a8ce:	e7ef      	b.n	800a8b0 <__swsetup_r+0xc0>
 800a8d0:	2000000c 	.word	0x2000000c
 800a8d4:	0800b594 	.word	0x0800b594
 800a8d8:	0800b5b4 	.word	0x0800b5b4
 800a8dc:	0800b574 	.word	0x0800b574

0800a8e0 <abort>:
 800a8e0:	2006      	movs	r0, #6
 800a8e2:	b510      	push	{r4, lr}
 800a8e4:	f000 fa74 	bl	800add0 <raise>
 800a8e8:	2001      	movs	r0, #1
 800a8ea:	f7f9 f9e8 	bl	8003cbe <_exit>
	...

0800a8f0 <__sflush_r>:
 800a8f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8f2:	898b      	ldrh	r3, [r1, #12]
 800a8f4:	0005      	movs	r5, r0
 800a8f6:	000c      	movs	r4, r1
 800a8f8:	071a      	lsls	r2, r3, #28
 800a8fa:	d45f      	bmi.n	800a9bc <__sflush_r+0xcc>
 800a8fc:	684a      	ldr	r2, [r1, #4]
 800a8fe:	2a00      	cmp	r2, #0
 800a900:	dc04      	bgt.n	800a90c <__sflush_r+0x1c>
 800a902:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a904:	2a00      	cmp	r2, #0
 800a906:	dc01      	bgt.n	800a90c <__sflush_r+0x1c>
 800a908:	2000      	movs	r0, #0
 800a90a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a90c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a90e:	2f00      	cmp	r7, #0
 800a910:	d0fa      	beq.n	800a908 <__sflush_r+0x18>
 800a912:	2200      	movs	r2, #0
 800a914:	2180      	movs	r1, #128	; 0x80
 800a916:	682e      	ldr	r6, [r5, #0]
 800a918:	602a      	str	r2, [r5, #0]
 800a91a:	001a      	movs	r2, r3
 800a91c:	0149      	lsls	r1, r1, #5
 800a91e:	400a      	ands	r2, r1
 800a920:	420b      	tst	r3, r1
 800a922:	d034      	beq.n	800a98e <__sflush_r+0x9e>
 800a924:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a926:	89a3      	ldrh	r3, [r4, #12]
 800a928:	075b      	lsls	r3, r3, #29
 800a92a:	d506      	bpl.n	800a93a <__sflush_r+0x4a>
 800a92c:	6863      	ldr	r3, [r4, #4]
 800a92e:	1ac0      	subs	r0, r0, r3
 800a930:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a932:	2b00      	cmp	r3, #0
 800a934:	d001      	beq.n	800a93a <__sflush_r+0x4a>
 800a936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a938:	1ac0      	subs	r0, r0, r3
 800a93a:	0002      	movs	r2, r0
 800a93c:	6a21      	ldr	r1, [r4, #32]
 800a93e:	2300      	movs	r3, #0
 800a940:	0028      	movs	r0, r5
 800a942:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a944:	47b8      	blx	r7
 800a946:	89a1      	ldrh	r1, [r4, #12]
 800a948:	1c43      	adds	r3, r0, #1
 800a94a:	d106      	bne.n	800a95a <__sflush_r+0x6a>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	2b1d      	cmp	r3, #29
 800a950:	d831      	bhi.n	800a9b6 <__sflush_r+0xc6>
 800a952:	4a2c      	ldr	r2, [pc, #176]	; (800aa04 <__sflush_r+0x114>)
 800a954:	40da      	lsrs	r2, r3
 800a956:	07d3      	lsls	r3, r2, #31
 800a958:	d52d      	bpl.n	800a9b6 <__sflush_r+0xc6>
 800a95a:	2300      	movs	r3, #0
 800a95c:	6063      	str	r3, [r4, #4]
 800a95e:	6923      	ldr	r3, [r4, #16]
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	04cb      	lsls	r3, r1, #19
 800a964:	d505      	bpl.n	800a972 <__sflush_r+0x82>
 800a966:	1c43      	adds	r3, r0, #1
 800a968:	d102      	bne.n	800a970 <__sflush_r+0x80>
 800a96a:	682b      	ldr	r3, [r5, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d100      	bne.n	800a972 <__sflush_r+0x82>
 800a970:	6560      	str	r0, [r4, #84]	; 0x54
 800a972:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a974:	602e      	str	r6, [r5, #0]
 800a976:	2900      	cmp	r1, #0
 800a978:	d0c6      	beq.n	800a908 <__sflush_r+0x18>
 800a97a:	0023      	movs	r3, r4
 800a97c:	3344      	adds	r3, #68	; 0x44
 800a97e:	4299      	cmp	r1, r3
 800a980:	d002      	beq.n	800a988 <__sflush_r+0x98>
 800a982:	0028      	movs	r0, r5
 800a984:	f7ff fa80 	bl	8009e88 <_free_r>
 800a988:	2000      	movs	r0, #0
 800a98a:	6360      	str	r0, [r4, #52]	; 0x34
 800a98c:	e7bd      	b.n	800a90a <__sflush_r+0x1a>
 800a98e:	2301      	movs	r3, #1
 800a990:	0028      	movs	r0, r5
 800a992:	6a21      	ldr	r1, [r4, #32]
 800a994:	47b8      	blx	r7
 800a996:	1c43      	adds	r3, r0, #1
 800a998:	d1c5      	bne.n	800a926 <__sflush_r+0x36>
 800a99a:	682b      	ldr	r3, [r5, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d0c2      	beq.n	800a926 <__sflush_r+0x36>
 800a9a0:	2b1d      	cmp	r3, #29
 800a9a2:	d001      	beq.n	800a9a8 <__sflush_r+0xb8>
 800a9a4:	2b16      	cmp	r3, #22
 800a9a6:	d101      	bne.n	800a9ac <__sflush_r+0xbc>
 800a9a8:	602e      	str	r6, [r5, #0]
 800a9aa:	e7ad      	b.n	800a908 <__sflush_r+0x18>
 800a9ac:	2340      	movs	r3, #64	; 0x40
 800a9ae:	89a2      	ldrh	r2, [r4, #12]
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	81a3      	strh	r3, [r4, #12]
 800a9b4:	e7a9      	b.n	800a90a <__sflush_r+0x1a>
 800a9b6:	2340      	movs	r3, #64	; 0x40
 800a9b8:	430b      	orrs	r3, r1
 800a9ba:	e7fa      	b.n	800a9b2 <__sflush_r+0xc2>
 800a9bc:	690f      	ldr	r7, [r1, #16]
 800a9be:	2f00      	cmp	r7, #0
 800a9c0:	d0a2      	beq.n	800a908 <__sflush_r+0x18>
 800a9c2:	680a      	ldr	r2, [r1, #0]
 800a9c4:	600f      	str	r7, [r1, #0]
 800a9c6:	1bd2      	subs	r2, r2, r7
 800a9c8:	9201      	str	r2, [sp, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	079b      	lsls	r3, r3, #30
 800a9ce:	d100      	bne.n	800a9d2 <__sflush_r+0xe2>
 800a9d0:	694a      	ldr	r2, [r1, #20]
 800a9d2:	60a2      	str	r2, [r4, #8]
 800a9d4:	9b01      	ldr	r3, [sp, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	dc00      	bgt.n	800a9dc <__sflush_r+0xec>
 800a9da:	e795      	b.n	800a908 <__sflush_r+0x18>
 800a9dc:	003a      	movs	r2, r7
 800a9de:	0028      	movs	r0, r5
 800a9e0:	9b01      	ldr	r3, [sp, #4]
 800a9e2:	6a21      	ldr	r1, [r4, #32]
 800a9e4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9e6:	47b0      	blx	r6
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	dc06      	bgt.n	800a9fa <__sflush_r+0x10a>
 800a9ec:	2340      	movs	r3, #64	; 0x40
 800a9ee:	2001      	movs	r0, #1
 800a9f0:	89a2      	ldrh	r2, [r4, #12]
 800a9f2:	4240      	negs	r0, r0
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	81a3      	strh	r3, [r4, #12]
 800a9f8:	e787      	b.n	800a90a <__sflush_r+0x1a>
 800a9fa:	9b01      	ldr	r3, [sp, #4]
 800a9fc:	183f      	adds	r7, r7, r0
 800a9fe:	1a1b      	subs	r3, r3, r0
 800aa00:	9301      	str	r3, [sp, #4]
 800aa02:	e7e7      	b.n	800a9d4 <__sflush_r+0xe4>
 800aa04:	20400001 	.word	0x20400001

0800aa08 <_fflush_r>:
 800aa08:	690b      	ldr	r3, [r1, #16]
 800aa0a:	b570      	push	{r4, r5, r6, lr}
 800aa0c:	0005      	movs	r5, r0
 800aa0e:	000c      	movs	r4, r1
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d102      	bne.n	800aa1a <_fflush_r+0x12>
 800aa14:	2500      	movs	r5, #0
 800aa16:	0028      	movs	r0, r5
 800aa18:	bd70      	pop	{r4, r5, r6, pc}
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	d004      	beq.n	800aa28 <_fflush_r+0x20>
 800aa1e:	6983      	ldr	r3, [r0, #24]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d101      	bne.n	800aa28 <_fflush_r+0x20>
 800aa24:	f000 f892 	bl	800ab4c <__sinit>
 800aa28:	4b14      	ldr	r3, [pc, #80]	; (800aa7c <_fflush_r+0x74>)
 800aa2a:	429c      	cmp	r4, r3
 800aa2c:	d11b      	bne.n	800aa66 <_fflush_r+0x5e>
 800aa2e:	686c      	ldr	r4, [r5, #4]
 800aa30:	220c      	movs	r2, #12
 800aa32:	5ea3      	ldrsh	r3, [r4, r2]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d0ed      	beq.n	800aa14 <_fflush_r+0xc>
 800aa38:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa3a:	07d2      	lsls	r2, r2, #31
 800aa3c:	d404      	bmi.n	800aa48 <_fflush_r+0x40>
 800aa3e:	059b      	lsls	r3, r3, #22
 800aa40:	d402      	bmi.n	800aa48 <_fflush_r+0x40>
 800aa42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa44:	f000 f923 	bl	800ac8e <__retarget_lock_acquire_recursive>
 800aa48:	0028      	movs	r0, r5
 800aa4a:	0021      	movs	r1, r4
 800aa4c:	f7ff ff50 	bl	800a8f0 <__sflush_r>
 800aa50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa52:	0005      	movs	r5, r0
 800aa54:	07db      	lsls	r3, r3, #31
 800aa56:	d4de      	bmi.n	800aa16 <_fflush_r+0xe>
 800aa58:	89a3      	ldrh	r3, [r4, #12]
 800aa5a:	059b      	lsls	r3, r3, #22
 800aa5c:	d4db      	bmi.n	800aa16 <_fflush_r+0xe>
 800aa5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa60:	f000 f916 	bl	800ac90 <__retarget_lock_release_recursive>
 800aa64:	e7d7      	b.n	800aa16 <_fflush_r+0xe>
 800aa66:	4b06      	ldr	r3, [pc, #24]	; (800aa80 <_fflush_r+0x78>)
 800aa68:	429c      	cmp	r4, r3
 800aa6a:	d101      	bne.n	800aa70 <_fflush_r+0x68>
 800aa6c:	68ac      	ldr	r4, [r5, #8]
 800aa6e:	e7df      	b.n	800aa30 <_fflush_r+0x28>
 800aa70:	4b04      	ldr	r3, [pc, #16]	; (800aa84 <_fflush_r+0x7c>)
 800aa72:	429c      	cmp	r4, r3
 800aa74:	d1dc      	bne.n	800aa30 <_fflush_r+0x28>
 800aa76:	68ec      	ldr	r4, [r5, #12]
 800aa78:	e7da      	b.n	800aa30 <_fflush_r+0x28>
 800aa7a:	46c0      	nop			; (mov r8, r8)
 800aa7c:	0800b594 	.word	0x0800b594
 800aa80:	0800b5b4 	.word	0x0800b5b4
 800aa84:	0800b574 	.word	0x0800b574

0800aa88 <std>:
 800aa88:	2300      	movs	r3, #0
 800aa8a:	b510      	push	{r4, lr}
 800aa8c:	0004      	movs	r4, r0
 800aa8e:	6003      	str	r3, [r0, #0]
 800aa90:	6043      	str	r3, [r0, #4]
 800aa92:	6083      	str	r3, [r0, #8]
 800aa94:	8181      	strh	r1, [r0, #12]
 800aa96:	6643      	str	r3, [r0, #100]	; 0x64
 800aa98:	0019      	movs	r1, r3
 800aa9a:	81c2      	strh	r2, [r0, #14]
 800aa9c:	6103      	str	r3, [r0, #16]
 800aa9e:	6143      	str	r3, [r0, #20]
 800aaa0:	6183      	str	r3, [r0, #24]
 800aaa2:	2208      	movs	r2, #8
 800aaa4:	305c      	adds	r0, #92	; 0x5c
 800aaa6:	f7fb fd43 	bl	8006530 <memset>
 800aaaa:	4b05      	ldr	r3, [pc, #20]	; (800aac0 <std+0x38>)
 800aaac:	6224      	str	r4, [r4, #32]
 800aaae:	6263      	str	r3, [r4, #36]	; 0x24
 800aab0:	4b04      	ldr	r3, [pc, #16]	; (800aac4 <std+0x3c>)
 800aab2:	62a3      	str	r3, [r4, #40]	; 0x28
 800aab4:	4b04      	ldr	r3, [pc, #16]	; (800aac8 <std+0x40>)
 800aab6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aab8:	4b04      	ldr	r3, [pc, #16]	; (800aacc <std+0x44>)
 800aaba:	6323      	str	r3, [r4, #48]	; 0x30
 800aabc:	bd10      	pop	{r4, pc}
 800aabe:	46c0      	nop			; (mov r8, r8)
 800aac0:	0800ae11 	.word	0x0800ae11
 800aac4:	0800ae39 	.word	0x0800ae39
 800aac8:	0800ae71 	.word	0x0800ae71
 800aacc:	0800ae9d 	.word	0x0800ae9d

0800aad0 <_cleanup_r>:
 800aad0:	b510      	push	{r4, lr}
 800aad2:	4902      	ldr	r1, [pc, #8]	; (800aadc <_cleanup_r+0xc>)
 800aad4:	f000 f8ba 	bl	800ac4c <_fwalk_reent>
 800aad8:	bd10      	pop	{r4, pc}
 800aada:	46c0      	nop			; (mov r8, r8)
 800aadc:	0800aa09 	.word	0x0800aa09

0800aae0 <__sfmoreglue>:
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	2568      	movs	r5, #104	; 0x68
 800aae4:	1e4a      	subs	r2, r1, #1
 800aae6:	4355      	muls	r5, r2
 800aae8:	000e      	movs	r6, r1
 800aaea:	0029      	movs	r1, r5
 800aaec:	3174      	adds	r1, #116	; 0x74
 800aaee:	f7ff fa37 	bl	8009f60 <_malloc_r>
 800aaf2:	1e04      	subs	r4, r0, #0
 800aaf4:	d008      	beq.n	800ab08 <__sfmoreglue+0x28>
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	002a      	movs	r2, r5
 800aafa:	6001      	str	r1, [r0, #0]
 800aafc:	6046      	str	r6, [r0, #4]
 800aafe:	300c      	adds	r0, #12
 800ab00:	60a0      	str	r0, [r4, #8]
 800ab02:	3268      	adds	r2, #104	; 0x68
 800ab04:	f7fb fd14 	bl	8006530 <memset>
 800ab08:	0020      	movs	r0, r4
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}

0800ab0c <__sfp_lock_acquire>:
 800ab0c:	b510      	push	{r4, lr}
 800ab0e:	4802      	ldr	r0, [pc, #8]	; (800ab18 <__sfp_lock_acquire+0xc>)
 800ab10:	f000 f8bd 	bl	800ac8e <__retarget_lock_acquire_recursive>
 800ab14:	bd10      	pop	{r4, pc}
 800ab16:	46c0      	nop			; (mov r8, r8)
 800ab18:	20000321 	.word	0x20000321

0800ab1c <__sfp_lock_release>:
 800ab1c:	b510      	push	{r4, lr}
 800ab1e:	4802      	ldr	r0, [pc, #8]	; (800ab28 <__sfp_lock_release+0xc>)
 800ab20:	f000 f8b6 	bl	800ac90 <__retarget_lock_release_recursive>
 800ab24:	bd10      	pop	{r4, pc}
 800ab26:	46c0      	nop			; (mov r8, r8)
 800ab28:	20000321 	.word	0x20000321

0800ab2c <__sinit_lock_acquire>:
 800ab2c:	b510      	push	{r4, lr}
 800ab2e:	4802      	ldr	r0, [pc, #8]	; (800ab38 <__sinit_lock_acquire+0xc>)
 800ab30:	f000 f8ad 	bl	800ac8e <__retarget_lock_acquire_recursive>
 800ab34:	bd10      	pop	{r4, pc}
 800ab36:	46c0      	nop			; (mov r8, r8)
 800ab38:	20000322 	.word	0x20000322

0800ab3c <__sinit_lock_release>:
 800ab3c:	b510      	push	{r4, lr}
 800ab3e:	4802      	ldr	r0, [pc, #8]	; (800ab48 <__sinit_lock_release+0xc>)
 800ab40:	f000 f8a6 	bl	800ac90 <__retarget_lock_release_recursive>
 800ab44:	bd10      	pop	{r4, pc}
 800ab46:	46c0      	nop			; (mov r8, r8)
 800ab48:	20000322 	.word	0x20000322

0800ab4c <__sinit>:
 800ab4c:	b513      	push	{r0, r1, r4, lr}
 800ab4e:	0004      	movs	r4, r0
 800ab50:	f7ff ffec 	bl	800ab2c <__sinit_lock_acquire>
 800ab54:	69a3      	ldr	r3, [r4, #24]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d002      	beq.n	800ab60 <__sinit+0x14>
 800ab5a:	f7ff ffef 	bl	800ab3c <__sinit_lock_release>
 800ab5e:	bd13      	pop	{r0, r1, r4, pc}
 800ab60:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab62:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ab64:	6523      	str	r3, [r4, #80]	; 0x50
 800ab66:	4b13      	ldr	r3, [pc, #76]	; (800abb4 <__sinit+0x68>)
 800ab68:	4a13      	ldr	r2, [pc, #76]	; (800abb8 <__sinit+0x6c>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	42a3      	cmp	r3, r4
 800ab72:	d101      	bne.n	800ab78 <__sinit+0x2c>
 800ab74:	2301      	movs	r3, #1
 800ab76:	61a3      	str	r3, [r4, #24]
 800ab78:	0020      	movs	r0, r4
 800ab7a:	f000 f81f 	bl	800abbc <__sfp>
 800ab7e:	6060      	str	r0, [r4, #4]
 800ab80:	0020      	movs	r0, r4
 800ab82:	f000 f81b 	bl	800abbc <__sfp>
 800ab86:	60a0      	str	r0, [r4, #8]
 800ab88:	0020      	movs	r0, r4
 800ab8a:	f000 f817 	bl	800abbc <__sfp>
 800ab8e:	2200      	movs	r2, #0
 800ab90:	2104      	movs	r1, #4
 800ab92:	60e0      	str	r0, [r4, #12]
 800ab94:	6860      	ldr	r0, [r4, #4]
 800ab96:	f7ff ff77 	bl	800aa88 <std>
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	2109      	movs	r1, #9
 800ab9e:	68a0      	ldr	r0, [r4, #8]
 800aba0:	f7ff ff72 	bl	800aa88 <std>
 800aba4:	2202      	movs	r2, #2
 800aba6:	2112      	movs	r1, #18
 800aba8:	68e0      	ldr	r0, [r4, #12]
 800abaa:	f7ff ff6d 	bl	800aa88 <std>
 800abae:	2301      	movs	r3, #1
 800abb0:	61a3      	str	r3, [r4, #24]
 800abb2:	e7d2      	b.n	800ab5a <__sinit+0xe>
 800abb4:	0800b130 	.word	0x0800b130
 800abb8:	0800aad1 	.word	0x0800aad1

0800abbc <__sfp>:
 800abbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abbe:	0007      	movs	r7, r0
 800abc0:	f7ff ffa4 	bl	800ab0c <__sfp_lock_acquire>
 800abc4:	4b1f      	ldr	r3, [pc, #124]	; (800ac44 <__sfp+0x88>)
 800abc6:	681e      	ldr	r6, [r3, #0]
 800abc8:	69b3      	ldr	r3, [r6, #24]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d102      	bne.n	800abd4 <__sfp+0x18>
 800abce:	0030      	movs	r0, r6
 800abd0:	f7ff ffbc 	bl	800ab4c <__sinit>
 800abd4:	3648      	adds	r6, #72	; 0x48
 800abd6:	68b4      	ldr	r4, [r6, #8]
 800abd8:	6873      	ldr	r3, [r6, #4]
 800abda:	3b01      	subs	r3, #1
 800abdc:	d504      	bpl.n	800abe8 <__sfp+0x2c>
 800abde:	6833      	ldr	r3, [r6, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d022      	beq.n	800ac2a <__sfp+0x6e>
 800abe4:	6836      	ldr	r6, [r6, #0]
 800abe6:	e7f6      	b.n	800abd6 <__sfp+0x1a>
 800abe8:	220c      	movs	r2, #12
 800abea:	5ea5      	ldrsh	r5, [r4, r2]
 800abec:	2d00      	cmp	r5, #0
 800abee:	d11a      	bne.n	800ac26 <__sfp+0x6a>
 800abf0:	0020      	movs	r0, r4
 800abf2:	4b15      	ldr	r3, [pc, #84]	; (800ac48 <__sfp+0x8c>)
 800abf4:	3058      	adds	r0, #88	; 0x58
 800abf6:	60e3      	str	r3, [r4, #12]
 800abf8:	6665      	str	r5, [r4, #100]	; 0x64
 800abfa:	f000 f847 	bl	800ac8c <__retarget_lock_init_recursive>
 800abfe:	f7ff ff8d 	bl	800ab1c <__sfp_lock_release>
 800ac02:	0020      	movs	r0, r4
 800ac04:	2208      	movs	r2, #8
 800ac06:	0029      	movs	r1, r5
 800ac08:	6025      	str	r5, [r4, #0]
 800ac0a:	60a5      	str	r5, [r4, #8]
 800ac0c:	6065      	str	r5, [r4, #4]
 800ac0e:	6125      	str	r5, [r4, #16]
 800ac10:	6165      	str	r5, [r4, #20]
 800ac12:	61a5      	str	r5, [r4, #24]
 800ac14:	305c      	adds	r0, #92	; 0x5c
 800ac16:	f7fb fc8b 	bl	8006530 <memset>
 800ac1a:	6365      	str	r5, [r4, #52]	; 0x34
 800ac1c:	63a5      	str	r5, [r4, #56]	; 0x38
 800ac1e:	64a5      	str	r5, [r4, #72]	; 0x48
 800ac20:	64e5      	str	r5, [r4, #76]	; 0x4c
 800ac22:	0020      	movs	r0, r4
 800ac24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac26:	3468      	adds	r4, #104	; 0x68
 800ac28:	e7d7      	b.n	800abda <__sfp+0x1e>
 800ac2a:	2104      	movs	r1, #4
 800ac2c:	0038      	movs	r0, r7
 800ac2e:	f7ff ff57 	bl	800aae0 <__sfmoreglue>
 800ac32:	1e04      	subs	r4, r0, #0
 800ac34:	6030      	str	r0, [r6, #0]
 800ac36:	d1d5      	bne.n	800abe4 <__sfp+0x28>
 800ac38:	f7ff ff70 	bl	800ab1c <__sfp_lock_release>
 800ac3c:	230c      	movs	r3, #12
 800ac3e:	603b      	str	r3, [r7, #0]
 800ac40:	e7ef      	b.n	800ac22 <__sfp+0x66>
 800ac42:	46c0      	nop			; (mov r8, r8)
 800ac44:	0800b130 	.word	0x0800b130
 800ac48:	ffff0001 	.word	0xffff0001

0800ac4c <_fwalk_reent>:
 800ac4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac4e:	0004      	movs	r4, r0
 800ac50:	0006      	movs	r6, r0
 800ac52:	2700      	movs	r7, #0
 800ac54:	9101      	str	r1, [sp, #4]
 800ac56:	3448      	adds	r4, #72	; 0x48
 800ac58:	6863      	ldr	r3, [r4, #4]
 800ac5a:	68a5      	ldr	r5, [r4, #8]
 800ac5c:	9300      	str	r3, [sp, #0]
 800ac5e:	9b00      	ldr	r3, [sp, #0]
 800ac60:	3b01      	subs	r3, #1
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	d504      	bpl.n	800ac70 <_fwalk_reent+0x24>
 800ac66:	6824      	ldr	r4, [r4, #0]
 800ac68:	2c00      	cmp	r4, #0
 800ac6a:	d1f5      	bne.n	800ac58 <_fwalk_reent+0xc>
 800ac6c:	0038      	movs	r0, r7
 800ac6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac70:	89ab      	ldrh	r3, [r5, #12]
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d908      	bls.n	800ac88 <_fwalk_reent+0x3c>
 800ac76:	220e      	movs	r2, #14
 800ac78:	5eab      	ldrsh	r3, [r5, r2]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	d004      	beq.n	800ac88 <_fwalk_reent+0x3c>
 800ac7e:	0029      	movs	r1, r5
 800ac80:	0030      	movs	r0, r6
 800ac82:	9b01      	ldr	r3, [sp, #4]
 800ac84:	4798      	blx	r3
 800ac86:	4307      	orrs	r7, r0
 800ac88:	3568      	adds	r5, #104	; 0x68
 800ac8a:	e7e8      	b.n	800ac5e <_fwalk_reent+0x12>

0800ac8c <__retarget_lock_init_recursive>:
 800ac8c:	4770      	bx	lr

0800ac8e <__retarget_lock_acquire_recursive>:
 800ac8e:	4770      	bx	lr

0800ac90 <__retarget_lock_release_recursive>:
 800ac90:	4770      	bx	lr
	...

0800ac94 <__swhatbuf_r>:
 800ac94:	b570      	push	{r4, r5, r6, lr}
 800ac96:	000e      	movs	r6, r1
 800ac98:	001d      	movs	r5, r3
 800ac9a:	230e      	movs	r3, #14
 800ac9c:	5ec9      	ldrsh	r1, [r1, r3]
 800ac9e:	0014      	movs	r4, r2
 800aca0:	b096      	sub	sp, #88	; 0x58
 800aca2:	2900      	cmp	r1, #0
 800aca4:	da08      	bge.n	800acb8 <__swhatbuf_r+0x24>
 800aca6:	220c      	movs	r2, #12
 800aca8:	5eb3      	ldrsh	r3, [r6, r2]
 800acaa:	2200      	movs	r2, #0
 800acac:	602a      	str	r2, [r5, #0]
 800acae:	061b      	lsls	r3, r3, #24
 800acb0:	d411      	bmi.n	800acd6 <__swhatbuf_r+0x42>
 800acb2:	2380      	movs	r3, #128	; 0x80
 800acb4:	00db      	lsls	r3, r3, #3
 800acb6:	e00f      	b.n	800acd8 <__swhatbuf_r+0x44>
 800acb8:	466a      	mov	r2, sp
 800acba:	f000 f91b 	bl	800aef4 <_fstat_r>
 800acbe:	2800      	cmp	r0, #0
 800acc0:	dbf1      	blt.n	800aca6 <__swhatbuf_r+0x12>
 800acc2:	23f0      	movs	r3, #240	; 0xf0
 800acc4:	9901      	ldr	r1, [sp, #4]
 800acc6:	021b      	lsls	r3, r3, #8
 800acc8:	4019      	ands	r1, r3
 800acca:	4b05      	ldr	r3, [pc, #20]	; (800ace0 <__swhatbuf_r+0x4c>)
 800accc:	18c9      	adds	r1, r1, r3
 800acce:	424b      	negs	r3, r1
 800acd0:	4159      	adcs	r1, r3
 800acd2:	6029      	str	r1, [r5, #0]
 800acd4:	e7ed      	b.n	800acb2 <__swhatbuf_r+0x1e>
 800acd6:	2340      	movs	r3, #64	; 0x40
 800acd8:	2000      	movs	r0, #0
 800acda:	6023      	str	r3, [r4, #0]
 800acdc:	b016      	add	sp, #88	; 0x58
 800acde:	bd70      	pop	{r4, r5, r6, pc}
 800ace0:	ffffe000 	.word	0xffffe000

0800ace4 <__smakebuf_r>:
 800ace4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ace6:	2602      	movs	r6, #2
 800ace8:	898b      	ldrh	r3, [r1, #12]
 800acea:	0005      	movs	r5, r0
 800acec:	000c      	movs	r4, r1
 800acee:	4233      	tst	r3, r6
 800acf0:	d006      	beq.n	800ad00 <__smakebuf_r+0x1c>
 800acf2:	0023      	movs	r3, r4
 800acf4:	3347      	adds	r3, #71	; 0x47
 800acf6:	6023      	str	r3, [r4, #0]
 800acf8:	6123      	str	r3, [r4, #16]
 800acfa:	2301      	movs	r3, #1
 800acfc:	6163      	str	r3, [r4, #20]
 800acfe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ad00:	466a      	mov	r2, sp
 800ad02:	ab01      	add	r3, sp, #4
 800ad04:	f7ff ffc6 	bl	800ac94 <__swhatbuf_r>
 800ad08:	9900      	ldr	r1, [sp, #0]
 800ad0a:	0007      	movs	r7, r0
 800ad0c:	0028      	movs	r0, r5
 800ad0e:	f7ff f927 	bl	8009f60 <_malloc_r>
 800ad12:	2800      	cmp	r0, #0
 800ad14:	d108      	bne.n	800ad28 <__smakebuf_r+0x44>
 800ad16:	220c      	movs	r2, #12
 800ad18:	5ea3      	ldrsh	r3, [r4, r2]
 800ad1a:	059a      	lsls	r2, r3, #22
 800ad1c:	d4ef      	bmi.n	800acfe <__smakebuf_r+0x1a>
 800ad1e:	2203      	movs	r2, #3
 800ad20:	4393      	bics	r3, r2
 800ad22:	431e      	orrs	r6, r3
 800ad24:	81a6      	strh	r6, [r4, #12]
 800ad26:	e7e4      	b.n	800acf2 <__smakebuf_r+0xe>
 800ad28:	4b0f      	ldr	r3, [pc, #60]	; (800ad68 <__smakebuf_r+0x84>)
 800ad2a:	62ab      	str	r3, [r5, #40]	; 0x28
 800ad2c:	2380      	movs	r3, #128	; 0x80
 800ad2e:	89a2      	ldrh	r2, [r4, #12]
 800ad30:	6020      	str	r0, [r4, #0]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	81a3      	strh	r3, [r4, #12]
 800ad36:	9b00      	ldr	r3, [sp, #0]
 800ad38:	6120      	str	r0, [r4, #16]
 800ad3a:	6163      	str	r3, [r4, #20]
 800ad3c:	9b01      	ldr	r3, [sp, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00d      	beq.n	800ad5e <__smakebuf_r+0x7a>
 800ad42:	0028      	movs	r0, r5
 800ad44:	230e      	movs	r3, #14
 800ad46:	5ee1      	ldrsh	r1, [r4, r3]
 800ad48:	f000 f8e6 	bl	800af18 <_isatty_r>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d006      	beq.n	800ad5e <__smakebuf_r+0x7a>
 800ad50:	2203      	movs	r2, #3
 800ad52:	89a3      	ldrh	r3, [r4, #12]
 800ad54:	4393      	bics	r3, r2
 800ad56:	001a      	movs	r2, r3
 800ad58:	2301      	movs	r3, #1
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	81a3      	strh	r3, [r4, #12]
 800ad5e:	89a0      	ldrh	r0, [r4, #12]
 800ad60:	4307      	orrs	r7, r0
 800ad62:	81a7      	strh	r7, [r4, #12]
 800ad64:	e7cb      	b.n	800acfe <__smakebuf_r+0x1a>
 800ad66:	46c0      	nop			; (mov r8, r8)
 800ad68:	0800aad1 	.word	0x0800aad1

0800ad6c <_malloc_usable_size_r>:
 800ad6c:	1f0b      	subs	r3, r1, #4
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	1f18      	subs	r0, r3, #4
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	da01      	bge.n	800ad7a <_malloc_usable_size_r+0xe>
 800ad76:	580b      	ldr	r3, [r1, r0]
 800ad78:	18c0      	adds	r0, r0, r3
 800ad7a:	4770      	bx	lr

0800ad7c <_raise_r>:
 800ad7c:	b570      	push	{r4, r5, r6, lr}
 800ad7e:	0004      	movs	r4, r0
 800ad80:	000d      	movs	r5, r1
 800ad82:	291f      	cmp	r1, #31
 800ad84:	d904      	bls.n	800ad90 <_raise_r+0x14>
 800ad86:	2316      	movs	r3, #22
 800ad88:	6003      	str	r3, [r0, #0]
 800ad8a:	2001      	movs	r0, #1
 800ad8c:	4240      	negs	r0, r0
 800ad8e:	bd70      	pop	{r4, r5, r6, pc}
 800ad90:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d004      	beq.n	800ada0 <_raise_r+0x24>
 800ad96:	008a      	lsls	r2, r1, #2
 800ad98:	189b      	adds	r3, r3, r2
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	2a00      	cmp	r2, #0
 800ad9e:	d108      	bne.n	800adb2 <_raise_r+0x36>
 800ada0:	0020      	movs	r0, r4
 800ada2:	f000 f831 	bl	800ae08 <_getpid_r>
 800ada6:	002a      	movs	r2, r5
 800ada8:	0001      	movs	r1, r0
 800adaa:	0020      	movs	r0, r4
 800adac:	f000 f81a 	bl	800ade4 <_kill_r>
 800adb0:	e7ed      	b.n	800ad8e <_raise_r+0x12>
 800adb2:	2000      	movs	r0, #0
 800adb4:	2a01      	cmp	r2, #1
 800adb6:	d0ea      	beq.n	800ad8e <_raise_r+0x12>
 800adb8:	1c51      	adds	r1, r2, #1
 800adba:	d103      	bne.n	800adc4 <_raise_r+0x48>
 800adbc:	2316      	movs	r3, #22
 800adbe:	3001      	adds	r0, #1
 800adc0:	6023      	str	r3, [r4, #0]
 800adc2:	e7e4      	b.n	800ad8e <_raise_r+0x12>
 800adc4:	2400      	movs	r4, #0
 800adc6:	0028      	movs	r0, r5
 800adc8:	601c      	str	r4, [r3, #0]
 800adca:	4790      	blx	r2
 800adcc:	0020      	movs	r0, r4
 800adce:	e7de      	b.n	800ad8e <_raise_r+0x12>

0800add0 <raise>:
 800add0:	b510      	push	{r4, lr}
 800add2:	4b03      	ldr	r3, [pc, #12]	; (800ade0 <raise+0x10>)
 800add4:	0001      	movs	r1, r0
 800add6:	6818      	ldr	r0, [r3, #0]
 800add8:	f7ff ffd0 	bl	800ad7c <_raise_r>
 800addc:	bd10      	pop	{r4, pc}
 800adde:	46c0      	nop			; (mov r8, r8)
 800ade0:	2000000c 	.word	0x2000000c

0800ade4 <_kill_r>:
 800ade4:	2300      	movs	r3, #0
 800ade6:	b570      	push	{r4, r5, r6, lr}
 800ade8:	4d06      	ldr	r5, [pc, #24]	; (800ae04 <_kill_r+0x20>)
 800adea:	0004      	movs	r4, r0
 800adec:	0008      	movs	r0, r1
 800adee:	0011      	movs	r1, r2
 800adf0:	602b      	str	r3, [r5, #0]
 800adf2:	f7f8 ff54 	bl	8003c9e <_kill>
 800adf6:	1c43      	adds	r3, r0, #1
 800adf8:	d103      	bne.n	800ae02 <_kill_r+0x1e>
 800adfa:	682b      	ldr	r3, [r5, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d000      	beq.n	800ae02 <_kill_r+0x1e>
 800ae00:	6023      	str	r3, [r4, #0]
 800ae02:	bd70      	pop	{r4, r5, r6, pc}
 800ae04:	2000031c 	.word	0x2000031c

0800ae08 <_getpid_r>:
 800ae08:	b510      	push	{r4, lr}
 800ae0a:	f7f8 ff42 	bl	8003c92 <_getpid>
 800ae0e:	bd10      	pop	{r4, pc}

0800ae10 <__sread>:
 800ae10:	b570      	push	{r4, r5, r6, lr}
 800ae12:	000c      	movs	r4, r1
 800ae14:	250e      	movs	r5, #14
 800ae16:	5f49      	ldrsh	r1, [r1, r5]
 800ae18:	f000 f8a4 	bl	800af64 <_read_r>
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	db03      	blt.n	800ae28 <__sread+0x18>
 800ae20:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ae22:	181b      	adds	r3, r3, r0
 800ae24:	6563      	str	r3, [r4, #84]	; 0x54
 800ae26:	bd70      	pop	{r4, r5, r6, pc}
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	4a02      	ldr	r2, [pc, #8]	; (800ae34 <__sread+0x24>)
 800ae2c:	4013      	ands	r3, r2
 800ae2e:	81a3      	strh	r3, [r4, #12]
 800ae30:	e7f9      	b.n	800ae26 <__sread+0x16>
 800ae32:	46c0      	nop			; (mov r8, r8)
 800ae34:	ffffefff 	.word	0xffffefff

0800ae38 <__swrite>:
 800ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3a:	001f      	movs	r7, r3
 800ae3c:	898b      	ldrh	r3, [r1, #12]
 800ae3e:	0005      	movs	r5, r0
 800ae40:	000c      	movs	r4, r1
 800ae42:	0016      	movs	r6, r2
 800ae44:	05db      	lsls	r3, r3, #23
 800ae46:	d505      	bpl.n	800ae54 <__swrite+0x1c>
 800ae48:	230e      	movs	r3, #14
 800ae4a:	5ec9      	ldrsh	r1, [r1, r3]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	2302      	movs	r3, #2
 800ae50:	f000 f874 	bl	800af3c <_lseek_r>
 800ae54:	89a3      	ldrh	r3, [r4, #12]
 800ae56:	4a05      	ldr	r2, [pc, #20]	; (800ae6c <__swrite+0x34>)
 800ae58:	0028      	movs	r0, r5
 800ae5a:	4013      	ands	r3, r2
 800ae5c:	81a3      	strh	r3, [r4, #12]
 800ae5e:	0032      	movs	r2, r6
 800ae60:	230e      	movs	r3, #14
 800ae62:	5ee1      	ldrsh	r1, [r4, r3]
 800ae64:	003b      	movs	r3, r7
 800ae66:	f000 f81f 	bl	800aea8 <_write_r>
 800ae6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae6c:	ffffefff 	.word	0xffffefff

0800ae70 <__sseek>:
 800ae70:	b570      	push	{r4, r5, r6, lr}
 800ae72:	000c      	movs	r4, r1
 800ae74:	250e      	movs	r5, #14
 800ae76:	5f49      	ldrsh	r1, [r1, r5]
 800ae78:	f000 f860 	bl	800af3c <_lseek_r>
 800ae7c:	89a3      	ldrh	r3, [r4, #12]
 800ae7e:	1c42      	adds	r2, r0, #1
 800ae80:	d103      	bne.n	800ae8a <__sseek+0x1a>
 800ae82:	4a05      	ldr	r2, [pc, #20]	; (800ae98 <__sseek+0x28>)
 800ae84:	4013      	ands	r3, r2
 800ae86:	81a3      	strh	r3, [r4, #12]
 800ae88:	bd70      	pop	{r4, r5, r6, pc}
 800ae8a:	2280      	movs	r2, #128	; 0x80
 800ae8c:	0152      	lsls	r2, r2, #5
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	81a3      	strh	r3, [r4, #12]
 800ae92:	6560      	str	r0, [r4, #84]	; 0x54
 800ae94:	e7f8      	b.n	800ae88 <__sseek+0x18>
 800ae96:	46c0      	nop			; (mov r8, r8)
 800ae98:	ffffefff 	.word	0xffffefff

0800ae9c <__sclose>:
 800ae9c:	b510      	push	{r4, lr}
 800ae9e:	230e      	movs	r3, #14
 800aea0:	5ec9      	ldrsh	r1, [r1, r3]
 800aea2:	f000 f815 	bl	800aed0 <_close_r>
 800aea6:	bd10      	pop	{r4, pc}

0800aea8 <_write_r>:
 800aea8:	b570      	push	{r4, r5, r6, lr}
 800aeaa:	0004      	movs	r4, r0
 800aeac:	0008      	movs	r0, r1
 800aeae:	0011      	movs	r1, r2
 800aeb0:	001a      	movs	r2, r3
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	4d05      	ldr	r5, [pc, #20]	; (800aecc <_write_r+0x24>)
 800aeb6:	602b      	str	r3, [r5, #0]
 800aeb8:	f7f8 ff2a 	bl	8003d10 <_write>
 800aebc:	1c43      	adds	r3, r0, #1
 800aebe:	d103      	bne.n	800aec8 <_write_r+0x20>
 800aec0:	682b      	ldr	r3, [r5, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d000      	beq.n	800aec8 <_write_r+0x20>
 800aec6:	6023      	str	r3, [r4, #0]
 800aec8:	bd70      	pop	{r4, r5, r6, pc}
 800aeca:	46c0      	nop			; (mov r8, r8)
 800aecc:	2000031c 	.word	0x2000031c

0800aed0 <_close_r>:
 800aed0:	2300      	movs	r3, #0
 800aed2:	b570      	push	{r4, r5, r6, lr}
 800aed4:	4d06      	ldr	r5, [pc, #24]	; (800aef0 <_close_r+0x20>)
 800aed6:	0004      	movs	r4, r0
 800aed8:	0008      	movs	r0, r1
 800aeda:	602b      	str	r3, [r5, #0]
 800aedc:	f7f8 ff34 	bl	8003d48 <_close>
 800aee0:	1c43      	adds	r3, r0, #1
 800aee2:	d103      	bne.n	800aeec <_close_r+0x1c>
 800aee4:	682b      	ldr	r3, [r5, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d000      	beq.n	800aeec <_close_r+0x1c>
 800aeea:	6023      	str	r3, [r4, #0]
 800aeec:	bd70      	pop	{r4, r5, r6, pc}
 800aeee:	46c0      	nop			; (mov r8, r8)
 800aef0:	2000031c 	.word	0x2000031c

0800aef4 <_fstat_r>:
 800aef4:	2300      	movs	r3, #0
 800aef6:	b570      	push	{r4, r5, r6, lr}
 800aef8:	4d06      	ldr	r5, [pc, #24]	; (800af14 <_fstat_r+0x20>)
 800aefa:	0004      	movs	r4, r0
 800aefc:	0008      	movs	r0, r1
 800aefe:	0011      	movs	r1, r2
 800af00:	602b      	str	r3, [r5, #0]
 800af02:	f7f8 ff2b 	bl	8003d5c <_fstat>
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	d103      	bne.n	800af12 <_fstat_r+0x1e>
 800af0a:	682b      	ldr	r3, [r5, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d000      	beq.n	800af12 <_fstat_r+0x1e>
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	bd70      	pop	{r4, r5, r6, pc}
 800af14:	2000031c 	.word	0x2000031c

0800af18 <_isatty_r>:
 800af18:	2300      	movs	r3, #0
 800af1a:	b570      	push	{r4, r5, r6, lr}
 800af1c:	4d06      	ldr	r5, [pc, #24]	; (800af38 <_isatty_r+0x20>)
 800af1e:	0004      	movs	r4, r0
 800af20:	0008      	movs	r0, r1
 800af22:	602b      	str	r3, [r5, #0]
 800af24:	f7f8 ff28 	bl	8003d78 <_isatty>
 800af28:	1c43      	adds	r3, r0, #1
 800af2a:	d103      	bne.n	800af34 <_isatty_r+0x1c>
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d000      	beq.n	800af34 <_isatty_r+0x1c>
 800af32:	6023      	str	r3, [r4, #0]
 800af34:	bd70      	pop	{r4, r5, r6, pc}
 800af36:	46c0      	nop			; (mov r8, r8)
 800af38:	2000031c 	.word	0x2000031c

0800af3c <_lseek_r>:
 800af3c:	b570      	push	{r4, r5, r6, lr}
 800af3e:	0004      	movs	r4, r0
 800af40:	0008      	movs	r0, r1
 800af42:	0011      	movs	r1, r2
 800af44:	001a      	movs	r2, r3
 800af46:	2300      	movs	r3, #0
 800af48:	4d05      	ldr	r5, [pc, #20]	; (800af60 <_lseek_r+0x24>)
 800af4a:	602b      	str	r3, [r5, #0]
 800af4c:	f7f8 ff1d 	bl	8003d8a <_lseek>
 800af50:	1c43      	adds	r3, r0, #1
 800af52:	d103      	bne.n	800af5c <_lseek_r+0x20>
 800af54:	682b      	ldr	r3, [r5, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d000      	beq.n	800af5c <_lseek_r+0x20>
 800af5a:	6023      	str	r3, [r4, #0]
 800af5c:	bd70      	pop	{r4, r5, r6, pc}
 800af5e:	46c0      	nop			; (mov r8, r8)
 800af60:	2000031c 	.word	0x2000031c

0800af64 <_read_r>:
 800af64:	b570      	push	{r4, r5, r6, lr}
 800af66:	0004      	movs	r4, r0
 800af68:	0008      	movs	r0, r1
 800af6a:	0011      	movs	r1, r2
 800af6c:	001a      	movs	r2, r3
 800af6e:	2300      	movs	r3, #0
 800af70:	4d05      	ldr	r5, [pc, #20]	; (800af88 <_read_r+0x24>)
 800af72:	602b      	str	r3, [r5, #0]
 800af74:	f7f8 feaf 	bl	8003cd6 <_read>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d103      	bne.n	800af84 <_read_r+0x20>
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d000      	beq.n	800af84 <_read_r+0x20>
 800af82:	6023      	str	r3, [r4, #0]
 800af84:	bd70      	pop	{r4, r5, r6, pc}
 800af86:	46c0      	nop			; (mov r8, r8)
 800af88:	2000031c 	.word	0x2000031c

0800af8c <_init>:
 800af8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8e:	46c0      	nop			; (mov r8, r8)
 800af90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af92:	bc08      	pop	{r3}
 800af94:	469e      	mov	lr, r3
 800af96:	4770      	bx	lr

0800af98 <_fini>:
 800af98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9a:	46c0      	nop			; (mov r8, r8)
 800af9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af9e:	bc08      	pop	{r3}
 800afa0:	469e      	mov	lr, r3
 800afa2:	4770      	bx	lr

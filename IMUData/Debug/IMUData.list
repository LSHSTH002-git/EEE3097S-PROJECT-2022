
IMUData.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae78  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d4  0800af38  0800af38  0001af38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b60c  0800b60c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b60c  0800b60c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b60c  0800b60c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b60c  0800b60c  0001b60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b610  0800b610  0001b610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200001e0  0800b7f4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  0800b7f4  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa8e  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018bc  00000000  00000000  0002ac96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002c558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002cf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012dcf  00000000  00000000  0002d840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b549  00000000  00000000  0004060f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d6f9  00000000  00000000  0004bb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b9251  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038a4  00000000  00000000  000b92a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800af20 	.word	0x0800af20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800af20 	.word	0x0800af20

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 faa1 	bl	8001984 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9f1 	bl	8001834 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa93 	bl	8001984 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa89 	bl	8001984 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa19 	bl	80018b8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa0f 	bl	80018b8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f002 f8e1 	bl	8002684 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fd2a 	bl	8001f24 <__aeabi_dsub>
 80004d0:	f002 f8d8 	bl	8002684 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f001 fa8f 	bl	8001a4c <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f002 f90c 	bl	8002750 <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f001 fa86 	bl	8001a4c <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fcec 	bl	8001f24 <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f002 f8c5 	bl	80026f0 <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f001 fa6f 	bl	8001a4c <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f002 f8ec 	bl	8002750 <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 fb28 	bl	8000bd0 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_fadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	46c6      	mov	lr, r8
 800058c:	0243      	lsls	r3, r0, #9
 800058e:	0a5b      	lsrs	r3, r3, #9
 8000590:	024e      	lsls	r6, r1, #9
 8000592:	0045      	lsls	r5, r0, #1
 8000594:	004f      	lsls	r7, r1, #1
 8000596:	00da      	lsls	r2, r3, #3
 8000598:	0fc4      	lsrs	r4, r0, #31
 800059a:	469c      	mov	ip, r3
 800059c:	0a70      	lsrs	r0, r6, #9
 800059e:	4690      	mov	r8, r2
 80005a0:	b500      	push	{lr}
 80005a2:	0e2d      	lsrs	r5, r5, #24
 80005a4:	0e3f      	lsrs	r7, r7, #24
 80005a6:	0fc9      	lsrs	r1, r1, #31
 80005a8:	09b6      	lsrs	r6, r6, #6
 80005aa:	428c      	cmp	r4, r1
 80005ac:	d04b      	beq.n	8000646 <__aeabi_fadd+0xbe>
 80005ae:	1bea      	subs	r2, r5, r7
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	dd36      	ble.n	8000622 <__aeabi_fadd+0x9a>
 80005b4:	2f00      	cmp	r7, #0
 80005b6:	d061      	beq.n	800067c <__aeabi_fadd+0xf4>
 80005b8:	2dff      	cmp	r5, #255	; 0xff
 80005ba:	d100      	bne.n	80005be <__aeabi_fadd+0x36>
 80005bc:	e0ad      	b.n	800071a <__aeabi_fadd+0x192>
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	04db      	lsls	r3, r3, #19
 80005c2:	431e      	orrs	r6, r3
 80005c4:	2a1b      	cmp	r2, #27
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_fadd+0x42>
 80005c8:	e0d3      	b.n	8000772 <__aeabi_fadd+0x1ea>
 80005ca:	2001      	movs	r0, #1
 80005cc:	4643      	mov	r3, r8
 80005ce:	1a18      	subs	r0, r3, r0
 80005d0:	0143      	lsls	r3, r0, #5
 80005d2:	d400      	bmi.n	80005d6 <__aeabi_fadd+0x4e>
 80005d4:	e08c      	b.n	80006f0 <__aeabi_fadd+0x168>
 80005d6:	0180      	lsls	r0, r0, #6
 80005d8:	0987      	lsrs	r7, r0, #6
 80005da:	0038      	movs	r0, r7
 80005dc:	f002 f9ae 	bl	800293c <__clzsi2>
 80005e0:	3805      	subs	r0, #5
 80005e2:	4087      	lsls	r7, r0
 80005e4:	4285      	cmp	r5, r0
 80005e6:	dc00      	bgt.n	80005ea <__aeabi_fadd+0x62>
 80005e8:	e0b6      	b.n	8000758 <__aeabi_fadd+0x1d0>
 80005ea:	1a2d      	subs	r5, r5, r0
 80005ec:	48b3      	ldr	r0, [pc, #716]	; (80008bc <__aeabi_fadd+0x334>)
 80005ee:	4038      	ands	r0, r7
 80005f0:	0743      	lsls	r3, r0, #29
 80005f2:	d004      	beq.n	80005fe <__aeabi_fadd+0x76>
 80005f4:	230f      	movs	r3, #15
 80005f6:	4003      	ands	r3, r0
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	d000      	beq.n	80005fe <__aeabi_fadd+0x76>
 80005fc:	3004      	adds	r0, #4
 80005fe:	0143      	lsls	r3, r0, #5
 8000600:	d400      	bmi.n	8000604 <__aeabi_fadd+0x7c>
 8000602:	e078      	b.n	80006f6 <__aeabi_fadd+0x16e>
 8000604:	1c6a      	adds	r2, r5, #1
 8000606:	2dfe      	cmp	r5, #254	; 0xfe
 8000608:	d065      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 800060a:	0180      	lsls	r0, r0, #6
 800060c:	0a43      	lsrs	r3, r0, #9
 800060e:	469c      	mov	ip, r3
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	4663      	mov	r3, ip
 8000614:	05d0      	lsls	r0, r2, #23
 8000616:	4318      	orrs	r0, r3
 8000618:	07e4      	lsls	r4, r4, #31
 800061a:	4320      	orrs	r0, r4
 800061c:	bc80      	pop	{r7}
 800061e:	46b8      	mov	r8, r7
 8000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000622:	2a00      	cmp	r2, #0
 8000624:	d035      	beq.n	8000692 <__aeabi_fadd+0x10a>
 8000626:	1b7a      	subs	r2, r7, r5
 8000628:	2d00      	cmp	r5, #0
 800062a:	d000      	beq.n	800062e <__aeabi_fadd+0xa6>
 800062c:	e0af      	b.n	800078e <__aeabi_fadd+0x206>
 800062e:	4643      	mov	r3, r8
 8000630:	2b00      	cmp	r3, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_fadd+0xae>
 8000634:	e0a7      	b.n	8000786 <__aeabi_fadd+0x1fe>
 8000636:	1e53      	subs	r3, r2, #1
 8000638:	2a01      	cmp	r2, #1
 800063a:	d100      	bne.n	800063e <__aeabi_fadd+0xb6>
 800063c:	e12f      	b.n	800089e <__aeabi_fadd+0x316>
 800063e:	2aff      	cmp	r2, #255	; 0xff
 8000640:	d069      	beq.n	8000716 <__aeabi_fadd+0x18e>
 8000642:	001a      	movs	r2, r3
 8000644:	e0aa      	b.n	800079c <__aeabi_fadd+0x214>
 8000646:	1be9      	subs	r1, r5, r7
 8000648:	2900      	cmp	r1, #0
 800064a:	dd70      	ble.n	800072e <__aeabi_fadd+0x1a6>
 800064c:	2f00      	cmp	r7, #0
 800064e:	d037      	beq.n	80006c0 <__aeabi_fadd+0x138>
 8000650:	2dff      	cmp	r5, #255	; 0xff
 8000652:	d062      	beq.n	800071a <__aeabi_fadd+0x192>
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	04db      	lsls	r3, r3, #19
 8000658:	431e      	orrs	r6, r3
 800065a:	291b      	cmp	r1, #27
 800065c:	dc00      	bgt.n	8000660 <__aeabi_fadd+0xd8>
 800065e:	e0b0      	b.n	80007c2 <__aeabi_fadd+0x23a>
 8000660:	2001      	movs	r0, #1
 8000662:	4440      	add	r0, r8
 8000664:	0143      	lsls	r3, r0, #5
 8000666:	d543      	bpl.n	80006f0 <__aeabi_fadd+0x168>
 8000668:	3501      	adds	r5, #1
 800066a:	2dff      	cmp	r5, #255	; 0xff
 800066c:	d033      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 800066e:	2301      	movs	r3, #1
 8000670:	4a93      	ldr	r2, [pc, #588]	; (80008c0 <__aeabi_fadd+0x338>)
 8000672:	4003      	ands	r3, r0
 8000674:	0840      	lsrs	r0, r0, #1
 8000676:	4010      	ands	r0, r2
 8000678:	4318      	orrs	r0, r3
 800067a:	e7b9      	b.n	80005f0 <__aeabi_fadd+0x68>
 800067c:	2e00      	cmp	r6, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_fadd+0xfa>
 8000680:	e083      	b.n	800078a <__aeabi_fadd+0x202>
 8000682:	1e51      	subs	r1, r2, #1
 8000684:	2a01      	cmp	r2, #1
 8000686:	d100      	bne.n	800068a <__aeabi_fadd+0x102>
 8000688:	e0d8      	b.n	800083c <__aeabi_fadd+0x2b4>
 800068a:	2aff      	cmp	r2, #255	; 0xff
 800068c:	d045      	beq.n	800071a <__aeabi_fadd+0x192>
 800068e:	000a      	movs	r2, r1
 8000690:	e798      	b.n	80005c4 <__aeabi_fadd+0x3c>
 8000692:	27fe      	movs	r7, #254	; 0xfe
 8000694:	1c6a      	adds	r2, r5, #1
 8000696:	4217      	tst	r7, r2
 8000698:	d000      	beq.n	800069c <__aeabi_fadd+0x114>
 800069a:	e086      	b.n	80007aa <__aeabi_fadd+0x222>
 800069c:	2d00      	cmp	r5, #0
 800069e:	d000      	beq.n	80006a2 <__aeabi_fadd+0x11a>
 80006a0:	e0b7      	b.n	8000812 <__aeabi_fadd+0x28a>
 80006a2:	4643      	mov	r3, r8
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_fadd+0x122>
 80006a8:	e0f3      	b.n	8000892 <__aeabi_fadd+0x30a>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2e00      	cmp	r6, #0
 80006ae:	d0b0      	beq.n	8000612 <__aeabi_fadd+0x8a>
 80006b0:	1b98      	subs	r0, r3, r6
 80006b2:	0143      	lsls	r3, r0, #5
 80006b4:	d400      	bmi.n	80006b8 <__aeabi_fadd+0x130>
 80006b6:	e0fa      	b.n	80008ae <__aeabi_fadd+0x326>
 80006b8:	4643      	mov	r3, r8
 80006ba:	000c      	movs	r4, r1
 80006bc:	1af0      	subs	r0, r6, r3
 80006be:	e797      	b.n	80005f0 <__aeabi_fadd+0x68>
 80006c0:	2e00      	cmp	r6, #0
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fadd+0x13e>
 80006c4:	e0c8      	b.n	8000858 <__aeabi_fadd+0x2d0>
 80006c6:	1e4a      	subs	r2, r1, #1
 80006c8:	2901      	cmp	r1, #1
 80006ca:	d100      	bne.n	80006ce <__aeabi_fadd+0x146>
 80006cc:	e0ae      	b.n	800082c <__aeabi_fadd+0x2a4>
 80006ce:	29ff      	cmp	r1, #255	; 0xff
 80006d0:	d023      	beq.n	800071a <__aeabi_fadd+0x192>
 80006d2:	0011      	movs	r1, r2
 80006d4:	e7c1      	b.n	800065a <__aeabi_fadd+0xd2>
 80006d6:	2300      	movs	r3, #0
 80006d8:	22ff      	movs	r2, #255	; 0xff
 80006da:	469c      	mov	ip, r3
 80006dc:	e799      	b.n	8000612 <__aeabi_fadd+0x8a>
 80006de:	21fe      	movs	r1, #254	; 0xfe
 80006e0:	1c6a      	adds	r2, r5, #1
 80006e2:	4211      	tst	r1, r2
 80006e4:	d077      	beq.n	80007d6 <__aeabi_fadd+0x24e>
 80006e6:	2aff      	cmp	r2, #255	; 0xff
 80006e8:	d0f5      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 80006ea:	0015      	movs	r5, r2
 80006ec:	4446      	add	r6, r8
 80006ee:	0870      	lsrs	r0, r6, #1
 80006f0:	0743      	lsls	r3, r0, #29
 80006f2:	d000      	beq.n	80006f6 <__aeabi_fadd+0x16e>
 80006f4:	e77e      	b.n	80005f4 <__aeabi_fadd+0x6c>
 80006f6:	08c3      	lsrs	r3, r0, #3
 80006f8:	2dff      	cmp	r5, #255	; 0xff
 80006fa:	d00e      	beq.n	800071a <__aeabi_fadd+0x192>
 80006fc:	025b      	lsls	r3, r3, #9
 80006fe:	0a5b      	lsrs	r3, r3, #9
 8000700:	469c      	mov	ip, r3
 8000702:	b2ea      	uxtb	r2, r5
 8000704:	e785      	b.n	8000612 <__aeabi_fadd+0x8a>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d007      	beq.n	800071a <__aeabi_fadd+0x192>
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	03d2      	lsls	r2, r2, #15
 800070e:	4213      	tst	r3, r2
 8000710:	d003      	beq.n	800071a <__aeabi_fadd+0x192>
 8000712:	4210      	tst	r0, r2
 8000714:	d101      	bne.n	800071a <__aeabi_fadd+0x192>
 8000716:	000c      	movs	r4, r1
 8000718:	0003      	movs	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d0db      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 800071e:	2080      	movs	r0, #128	; 0x80
 8000720:	03c0      	lsls	r0, r0, #15
 8000722:	4318      	orrs	r0, r3
 8000724:	0240      	lsls	r0, r0, #9
 8000726:	0a43      	lsrs	r3, r0, #9
 8000728:	469c      	mov	ip, r3
 800072a:	22ff      	movs	r2, #255	; 0xff
 800072c:	e771      	b.n	8000612 <__aeabi_fadd+0x8a>
 800072e:	2900      	cmp	r1, #0
 8000730:	d0d5      	beq.n	80006de <__aeabi_fadd+0x156>
 8000732:	1b7a      	subs	r2, r7, r5
 8000734:	2d00      	cmp	r5, #0
 8000736:	d160      	bne.n	80007fa <__aeabi_fadd+0x272>
 8000738:	4643      	mov	r3, r8
 800073a:	2b00      	cmp	r3, #0
 800073c:	d024      	beq.n	8000788 <__aeabi_fadd+0x200>
 800073e:	1e53      	subs	r3, r2, #1
 8000740:	2a01      	cmp	r2, #1
 8000742:	d073      	beq.n	800082c <__aeabi_fadd+0x2a4>
 8000744:	2aff      	cmp	r2, #255	; 0xff
 8000746:	d0e7      	beq.n	8000718 <__aeabi_fadd+0x190>
 8000748:	001a      	movs	r2, r3
 800074a:	2a1b      	cmp	r2, #27
 800074c:	dc00      	bgt.n	8000750 <__aeabi_fadd+0x1c8>
 800074e:	e085      	b.n	800085c <__aeabi_fadd+0x2d4>
 8000750:	2001      	movs	r0, #1
 8000752:	003d      	movs	r5, r7
 8000754:	1980      	adds	r0, r0, r6
 8000756:	e785      	b.n	8000664 <__aeabi_fadd+0xdc>
 8000758:	2320      	movs	r3, #32
 800075a:	003a      	movs	r2, r7
 800075c:	1b45      	subs	r5, r0, r5
 800075e:	0038      	movs	r0, r7
 8000760:	3501      	adds	r5, #1
 8000762:	40ea      	lsrs	r2, r5
 8000764:	1b5d      	subs	r5, r3, r5
 8000766:	40a8      	lsls	r0, r5
 8000768:	1e43      	subs	r3, r0, #1
 800076a:	4198      	sbcs	r0, r3
 800076c:	2500      	movs	r5, #0
 800076e:	4310      	orrs	r0, r2
 8000770:	e73e      	b.n	80005f0 <__aeabi_fadd+0x68>
 8000772:	2320      	movs	r3, #32
 8000774:	0030      	movs	r0, r6
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	0031      	movs	r1, r6
 800077a:	4098      	lsls	r0, r3
 800077c:	40d1      	lsrs	r1, r2
 800077e:	1e43      	subs	r3, r0, #1
 8000780:	4198      	sbcs	r0, r3
 8000782:	4308      	orrs	r0, r1
 8000784:	e722      	b.n	80005cc <__aeabi_fadd+0x44>
 8000786:	000c      	movs	r4, r1
 8000788:	0003      	movs	r3, r0
 800078a:	0015      	movs	r5, r2
 800078c:	e7b4      	b.n	80006f8 <__aeabi_fadd+0x170>
 800078e:	2fff      	cmp	r7, #255	; 0xff
 8000790:	d0c1      	beq.n	8000716 <__aeabi_fadd+0x18e>
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	4640      	mov	r0, r8
 8000796:	04db      	lsls	r3, r3, #19
 8000798:	4318      	orrs	r0, r3
 800079a:	4680      	mov	r8, r0
 800079c:	2a1b      	cmp	r2, #27
 800079e:	dd51      	ble.n	8000844 <__aeabi_fadd+0x2bc>
 80007a0:	2001      	movs	r0, #1
 80007a2:	000c      	movs	r4, r1
 80007a4:	003d      	movs	r5, r7
 80007a6:	1a30      	subs	r0, r6, r0
 80007a8:	e712      	b.n	80005d0 <__aeabi_fadd+0x48>
 80007aa:	4643      	mov	r3, r8
 80007ac:	1b9f      	subs	r7, r3, r6
 80007ae:	017b      	lsls	r3, r7, #5
 80007b0:	d42b      	bmi.n	800080a <__aeabi_fadd+0x282>
 80007b2:	2f00      	cmp	r7, #0
 80007b4:	d000      	beq.n	80007b8 <__aeabi_fadd+0x230>
 80007b6:	e710      	b.n	80005da <__aeabi_fadd+0x52>
 80007b8:	2300      	movs	r3, #0
 80007ba:	2400      	movs	r4, #0
 80007bc:	2200      	movs	r2, #0
 80007be:	469c      	mov	ip, r3
 80007c0:	e727      	b.n	8000612 <__aeabi_fadd+0x8a>
 80007c2:	2320      	movs	r3, #32
 80007c4:	0032      	movs	r2, r6
 80007c6:	0030      	movs	r0, r6
 80007c8:	40ca      	lsrs	r2, r1
 80007ca:	1a59      	subs	r1, r3, r1
 80007cc:	4088      	lsls	r0, r1
 80007ce:	1e43      	subs	r3, r0, #1
 80007d0:	4198      	sbcs	r0, r3
 80007d2:	4310      	orrs	r0, r2
 80007d4:	e745      	b.n	8000662 <__aeabi_fadd+0xda>
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	d14a      	bne.n	8000870 <__aeabi_fadd+0x2e8>
 80007da:	4643      	mov	r3, r8
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d063      	beq.n	80008a8 <__aeabi_fadd+0x320>
 80007e0:	2200      	movs	r2, #0
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fadd+0x260>
 80007e6:	e714      	b.n	8000612 <__aeabi_fadd+0x8a>
 80007e8:	0030      	movs	r0, r6
 80007ea:	4440      	add	r0, r8
 80007ec:	0143      	lsls	r3, r0, #5
 80007ee:	d400      	bmi.n	80007f2 <__aeabi_fadd+0x26a>
 80007f0:	e77e      	b.n	80006f0 <__aeabi_fadd+0x168>
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <__aeabi_fadd+0x334>)
 80007f4:	3501      	adds	r5, #1
 80007f6:	4018      	ands	r0, r3
 80007f8:	e77a      	b.n	80006f0 <__aeabi_fadd+0x168>
 80007fa:	2fff      	cmp	r7, #255	; 0xff
 80007fc:	d08c      	beq.n	8000718 <__aeabi_fadd+0x190>
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	4641      	mov	r1, r8
 8000802:	04db      	lsls	r3, r3, #19
 8000804:	4319      	orrs	r1, r3
 8000806:	4688      	mov	r8, r1
 8000808:	e79f      	b.n	800074a <__aeabi_fadd+0x1c2>
 800080a:	4643      	mov	r3, r8
 800080c:	000c      	movs	r4, r1
 800080e:	1af7      	subs	r7, r6, r3
 8000810:	e6e3      	b.n	80005da <__aeabi_fadd+0x52>
 8000812:	4642      	mov	r2, r8
 8000814:	2a00      	cmp	r2, #0
 8000816:	d000      	beq.n	800081a <__aeabi_fadd+0x292>
 8000818:	e775      	b.n	8000706 <__aeabi_fadd+0x17e>
 800081a:	2e00      	cmp	r6, #0
 800081c:	d000      	beq.n	8000820 <__aeabi_fadd+0x298>
 800081e:	e77a      	b.n	8000716 <__aeabi_fadd+0x18e>
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	03db      	lsls	r3, r3, #15
 8000824:	2400      	movs	r4, #0
 8000826:	469c      	mov	ip, r3
 8000828:	22ff      	movs	r2, #255	; 0xff
 800082a:	e6f2      	b.n	8000612 <__aeabi_fadd+0x8a>
 800082c:	0030      	movs	r0, r6
 800082e:	4440      	add	r0, r8
 8000830:	2501      	movs	r5, #1
 8000832:	0143      	lsls	r3, r0, #5
 8000834:	d400      	bmi.n	8000838 <__aeabi_fadd+0x2b0>
 8000836:	e75b      	b.n	80006f0 <__aeabi_fadd+0x168>
 8000838:	2502      	movs	r5, #2
 800083a:	e718      	b.n	800066e <__aeabi_fadd+0xe6>
 800083c:	4643      	mov	r3, r8
 800083e:	2501      	movs	r5, #1
 8000840:	1b98      	subs	r0, r3, r6
 8000842:	e6c5      	b.n	80005d0 <__aeabi_fadd+0x48>
 8000844:	2320      	movs	r3, #32
 8000846:	4644      	mov	r4, r8
 8000848:	4640      	mov	r0, r8
 800084a:	40d4      	lsrs	r4, r2
 800084c:	1a9a      	subs	r2, r3, r2
 800084e:	4090      	lsls	r0, r2
 8000850:	1e43      	subs	r3, r0, #1
 8000852:	4198      	sbcs	r0, r3
 8000854:	4320      	orrs	r0, r4
 8000856:	e7a4      	b.n	80007a2 <__aeabi_fadd+0x21a>
 8000858:	000d      	movs	r5, r1
 800085a:	e74d      	b.n	80006f8 <__aeabi_fadd+0x170>
 800085c:	2320      	movs	r3, #32
 800085e:	4641      	mov	r1, r8
 8000860:	4640      	mov	r0, r8
 8000862:	40d1      	lsrs	r1, r2
 8000864:	1a9a      	subs	r2, r3, r2
 8000866:	4090      	lsls	r0, r2
 8000868:	1e43      	subs	r3, r0, #1
 800086a:	4198      	sbcs	r0, r3
 800086c:	4308      	orrs	r0, r1
 800086e:	e770      	b.n	8000752 <__aeabi_fadd+0x1ca>
 8000870:	4642      	mov	r2, r8
 8000872:	2a00      	cmp	r2, #0
 8000874:	d100      	bne.n	8000878 <__aeabi_fadd+0x2f0>
 8000876:	e74f      	b.n	8000718 <__aeabi_fadd+0x190>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d100      	bne.n	800087e <__aeabi_fadd+0x2f6>
 800087c:	e74d      	b.n	800071a <__aeabi_fadd+0x192>
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	03d2      	lsls	r2, r2, #15
 8000882:	4213      	tst	r3, r2
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x300>
 8000886:	e748      	b.n	800071a <__aeabi_fadd+0x192>
 8000888:	4210      	tst	r0, r2
 800088a:	d000      	beq.n	800088e <__aeabi_fadd+0x306>
 800088c:	e745      	b.n	800071a <__aeabi_fadd+0x192>
 800088e:	0003      	movs	r3, r0
 8000890:	e743      	b.n	800071a <__aeabi_fadd+0x192>
 8000892:	2e00      	cmp	r6, #0
 8000894:	d090      	beq.n	80007b8 <__aeabi_fadd+0x230>
 8000896:	000c      	movs	r4, r1
 8000898:	4684      	mov	ip, r0
 800089a:	2200      	movs	r2, #0
 800089c:	e6b9      	b.n	8000612 <__aeabi_fadd+0x8a>
 800089e:	4643      	mov	r3, r8
 80008a0:	000c      	movs	r4, r1
 80008a2:	1af0      	subs	r0, r6, r3
 80008a4:	3501      	adds	r5, #1
 80008a6:	e693      	b.n	80005d0 <__aeabi_fadd+0x48>
 80008a8:	4684      	mov	ip, r0
 80008aa:	2200      	movs	r2, #0
 80008ac:	e6b1      	b.n	8000612 <__aeabi_fadd+0x8a>
 80008ae:	2800      	cmp	r0, #0
 80008b0:	d000      	beq.n	80008b4 <__aeabi_fadd+0x32c>
 80008b2:	e71d      	b.n	80006f0 <__aeabi_fadd+0x168>
 80008b4:	2300      	movs	r3, #0
 80008b6:	2400      	movs	r4, #0
 80008b8:	469c      	mov	ip, r3
 80008ba:	e6aa      	b.n	8000612 <__aeabi_fadd+0x8a>
 80008bc:	fbffffff 	.word	0xfbffffff
 80008c0:	7dffffff 	.word	0x7dffffff

080008c4 <__aeabi_fdiv>:
 80008c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c6:	464f      	mov	r7, r9
 80008c8:	4646      	mov	r6, r8
 80008ca:	46d6      	mov	lr, sl
 80008cc:	0245      	lsls	r5, r0, #9
 80008ce:	b5c0      	push	{r6, r7, lr}
 80008d0:	0047      	lsls	r7, r0, #1
 80008d2:	1c0c      	adds	r4, r1, #0
 80008d4:	0a6d      	lsrs	r5, r5, #9
 80008d6:	0e3f      	lsrs	r7, r7, #24
 80008d8:	0fc6      	lsrs	r6, r0, #31
 80008da:	2f00      	cmp	r7, #0
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fdiv+0x1c>
 80008de:	e070      	b.n	80009c2 <__aeabi_fdiv+0xfe>
 80008e0:	2fff      	cmp	r7, #255	; 0xff
 80008e2:	d100      	bne.n	80008e6 <__aeabi_fdiv+0x22>
 80008e4:	e075      	b.n	80009d2 <__aeabi_fdiv+0x10e>
 80008e6:	00eb      	lsls	r3, r5, #3
 80008e8:	2580      	movs	r5, #128	; 0x80
 80008ea:	04ed      	lsls	r5, r5, #19
 80008ec:	431d      	orrs	r5, r3
 80008ee:	2300      	movs	r3, #0
 80008f0:	4699      	mov	r9, r3
 80008f2:	469a      	mov	sl, r3
 80008f4:	3f7f      	subs	r7, #127	; 0x7f
 80008f6:	0260      	lsls	r0, r4, #9
 80008f8:	0a43      	lsrs	r3, r0, #9
 80008fa:	4698      	mov	r8, r3
 80008fc:	0063      	lsls	r3, r4, #1
 80008fe:	0e1b      	lsrs	r3, r3, #24
 8000900:	0fe4      	lsrs	r4, r4, #31
 8000902:	2b00      	cmp	r3, #0
 8000904:	d04e      	beq.n	80009a4 <__aeabi_fdiv+0xe0>
 8000906:	2bff      	cmp	r3, #255	; 0xff
 8000908:	d046      	beq.n	8000998 <__aeabi_fdiv+0xd4>
 800090a:	4642      	mov	r2, r8
 800090c:	00d0      	lsls	r0, r2, #3
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	04d2      	lsls	r2, r2, #19
 8000912:	4302      	orrs	r2, r0
 8000914:	4690      	mov	r8, r2
 8000916:	2200      	movs	r2, #0
 8000918:	3b7f      	subs	r3, #127	; 0x7f
 800091a:	0031      	movs	r1, r6
 800091c:	1aff      	subs	r7, r7, r3
 800091e:	464b      	mov	r3, r9
 8000920:	4061      	eors	r1, r4
 8000922:	b2c9      	uxtb	r1, r1
 8000924:	4313      	orrs	r3, r2
 8000926:	2b0f      	cmp	r3, #15
 8000928:	d900      	bls.n	800092c <__aeabi_fdiv+0x68>
 800092a:	e0b5      	b.n	8000a98 <__aeabi_fdiv+0x1d4>
 800092c:	486e      	ldr	r0, [pc, #440]	; (8000ae8 <__aeabi_fdiv+0x224>)
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	58c3      	ldr	r3, [r0, r3]
 8000932:	469f      	mov	pc, r3
 8000934:	2300      	movs	r3, #0
 8000936:	4698      	mov	r8, r3
 8000938:	0026      	movs	r6, r4
 800093a:	4645      	mov	r5, r8
 800093c:	4692      	mov	sl, r2
 800093e:	4653      	mov	r3, sl
 8000940:	2b02      	cmp	r3, #2
 8000942:	d100      	bne.n	8000946 <__aeabi_fdiv+0x82>
 8000944:	e089      	b.n	8000a5a <__aeabi_fdiv+0x196>
 8000946:	2b03      	cmp	r3, #3
 8000948:	d100      	bne.n	800094c <__aeabi_fdiv+0x88>
 800094a:	e09e      	b.n	8000a8a <__aeabi_fdiv+0x1c6>
 800094c:	2b01      	cmp	r3, #1
 800094e:	d018      	beq.n	8000982 <__aeabi_fdiv+0xbe>
 8000950:	003b      	movs	r3, r7
 8000952:	337f      	adds	r3, #127	; 0x7f
 8000954:	2b00      	cmp	r3, #0
 8000956:	dd69      	ble.n	8000a2c <__aeabi_fdiv+0x168>
 8000958:	076a      	lsls	r2, r5, #29
 800095a:	d004      	beq.n	8000966 <__aeabi_fdiv+0xa2>
 800095c:	220f      	movs	r2, #15
 800095e:	402a      	ands	r2, r5
 8000960:	2a04      	cmp	r2, #4
 8000962:	d000      	beq.n	8000966 <__aeabi_fdiv+0xa2>
 8000964:	3504      	adds	r5, #4
 8000966:	012a      	lsls	r2, r5, #4
 8000968:	d503      	bpl.n	8000972 <__aeabi_fdiv+0xae>
 800096a:	4b60      	ldr	r3, [pc, #384]	; (8000aec <__aeabi_fdiv+0x228>)
 800096c:	401d      	ands	r5, r3
 800096e:	003b      	movs	r3, r7
 8000970:	3380      	adds	r3, #128	; 0x80
 8000972:	2bfe      	cmp	r3, #254	; 0xfe
 8000974:	dd00      	ble.n	8000978 <__aeabi_fdiv+0xb4>
 8000976:	e070      	b.n	8000a5a <__aeabi_fdiv+0x196>
 8000978:	01ad      	lsls	r5, r5, #6
 800097a:	0a6d      	lsrs	r5, r5, #9
 800097c:	b2d8      	uxtb	r0, r3
 800097e:	e002      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000980:	000e      	movs	r6, r1
 8000982:	2000      	movs	r0, #0
 8000984:	2500      	movs	r5, #0
 8000986:	05c0      	lsls	r0, r0, #23
 8000988:	4328      	orrs	r0, r5
 800098a:	07f6      	lsls	r6, r6, #31
 800098c:	4330      	orrs	r0, r6
 800098e:	bce0      	pop	{r5, r6, r7}
 8000990:	46ba      	mov	sl, r7
 8000992:	46b1      	mov	r9, r6
 8000994:	46a8      	mov	r8, r5
 8000996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000998:	4643      	mov	r3, r8
 800099a:	2b00      	cmp	r3, #0
 800099c:	d13f      	bne.n	8000a1e <__aeabi_fdiv+0x15a>
 800099e:	2202      	movs	r2, #2
 80009a0:	3fff      	subs	r7, #255	; 0xff
 80009a2:	e003      	b.n	80009ac <__aeabi_fdiv+0xe8>
 80009a4:	4643      	mov	r3, r8
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d12d      	bne.n	8000a06 <__aeabi_fdiv+0x142>
 80009aa:	2201      	movs	r2, #1
 80009ac:	0031      	movs	r1, r6
 80009ae:	464b      	mov	r3, r9
 80009b0:	4061      	eors	r1, r4
 80009b2:	b2c9      	uxtb	r1, r1
 80009b4:	4313      	orrs	r3, r2
 80009b6:	2b0f      	cmp	r3, #15
 80009b8:	d834      	bhi.n	8000a24 <__aeabi_fdiv+0x160>
 80009ba:	484d      	ldr	r0, [pc, #308]	; (8000af0 <__aeabi_fdiv+0x22c>)
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	58c3      	ldr	r3, [r0, r3]
 80009c0:	469f      	mov	pc, r3
 80009c2:	2d00      	cmp	r5, #0
 80009c4:	d113      	bne.n	80009ee <__aeabi_fdiv+0x12a>
 80009c6:	2304      	movs	r3, #4
 80009c8:	4699      	mov	r9, r3
 80009ca:	3b03      	subs	r3, #3
 80009cc:	2700      	movs	r7, #0
 80009ce:	469a      	mov	sl, r3
 80009d0:	e791      	b.n	80008f6 <__aeabi_fdiv+0x32>
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d105      	bne.n	80009e2 <__aeabi_fdiv+0x11e>
 80009d6:	2308      	movs	r3, #8
 80009d8:	4699      	mov	r9, r3
 80009da:	3b06      	subs	r3, #6
 80009dc:	27ff      	movs	r7, #255	; 0xff
 80009de:	469a      	mov	sl, r3
 80009e0:	e789      	b.n	80008f6 <__aeabi_fdiv+0x32>
 80009e2:	230c      	movs	r3, #12
 80009e4:	4699      	mov	r9, r3
 80009e6:	3b09      	subs	r3, #9
 80009e8:	27ff      	movs	r7, #255	; 0xff
 80009ea:	469a      	mov	sl, r3
 80009ec:	e783      	b.n	80008f6 <__aeabi_fdiv+0x32>
 80009ee:	0028      	movs	r0, r5
 80009f0:	f001 ffa4 	bl	800293c <__clzsi2>
 80009f4:	2776      	movs	r7, #118	; 0x76
 80009f6:	1f43      	subs	r3, r0, #5
 80009f8:	409d      	lsls	r5, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	427f      	negs	r7, r7
 80009fe:	4699      	mov	r9, r3
 8000a00:	469a      	mov	sl, r3
 8000a02:	1a3f      	subs	r7, r7, r0
 8000a04:	e777      	b.n	80008f6 <__aeabi_fdiv+0x32>
 8000a06:	4640      	mov	r0, r8
 8000a08:	f001 ff98 	bl	800293c <__clzsi2>
 8000a0c:	4642      	mov	r2, r8
 8000a0e:	1f43      	subs	r3, r0, #5
 8000a10:	409a      	lsls	r2, r3
 8000a12:	2376      	movs	r3, #118	; 0x76
 8000a14:	425b      	negs	r3, r3
 8000a16:	4690      	mov	r8, r2
 8000a18:	1a1b      	subs	r3, r3, r0
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	e77d      	b.n	800091a <__aeabi_fdiv+0x56>
 8000a1e:	23ff      	movs	r3, #255	; 0xff
 8000a20:	2203      	movs	r2, #3
 8000a22:	e77a      	b.n	800091a <__aeabi_fdiv+0x56>
 8000a24:	000e      	movs	r6, r1
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	2500      	movs	r5, #0
 8000a2a:	e7ac      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	1ac0      	subs	r0, r0, r3
 8000a30:	281b      	cmp	r0, #27
 8000a32:	dca6      	bgt.n	8000982 <__aeabi_fdiv+0xbe>
 8000a34:	379e      	adds	r7, #158	; 0x9e
 8000a36:	002a      	movs	r2, r5
 8000a38:	40bd      	lsls	r5, r7
 8000a3a:	40c2      	lsrs	r2, r0
 8000a3c:	1e6b      	subs	r3, r5, #1
 8000a3e:	419d      	sbcs	r5, r3
 8000a40:	4315      	orrs	r5, r2
 8000a42:	076b      	lsls	r3, r5, #29
 8000a44:	d004      	beq.n	8000a50 <__aeabi_fdiv+0x18c>
 8000a46:	230f      	movs	r3, #15
 8000a48:	402b      	ands	r3, r5
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_fdiv+0x18c>
 8000a4e:	3504      	adds	r5, #4
 8000a50:	016b      	lsls	r3, r5, #5
 8000a52:	d544      	bpl.n	8000ade <__aeabi_fdiv+0x21a>
 8000a54:	2001      	movs	r0, #1
 8000a56:	2500      	movs	r5, #0
 8000a58:	e795      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000a5a:	20ff      	movs	r0, #255	; 0xff
 8000a5c:	2500      	movs	r5, #0
 8000a5e:	e792      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000a60:	2580      	movs	r5, #128	; 0x80
 8000a62:	2600      	movs	r6, #0
 8000a64:	20ff      	movs	r0, #255	; 0xff
 8000a66:	03ed      	lsls	r5, r5, #15
 8000a68:	e78d      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	4698      	mov	r8, r3
 8000a6e:	2080      	movs	r0, #128	; 0x80
 8000a70:	03c0      	lsls	r0, r0, #15
 8000a72:	4205      	tst	r5, r0
 8000a74:	d009      	beq.n	8000a8a <__aeabi_fdiv+0x1c6>
 8000a76:	4643      	mov	r3, r8
 8000a78:	4203      	tst	r3, r0
 8000a7a:	d106      	bne.n	8000a8a <__aeabi_fdiv+0x1c6>
 8000a7c:	4645      	mov	r5, r8
 8000a7e:	4305      	orrs	r5, r0
 8000a80:	026d      	lsls	r5, r5, #9
 8000a82:	0026      	movs	r6, r4
 8000a84:	20ff      	movs	r0, #255	; 0xff
 8000a86:	0a6d      	lsrs	r5, r5, #9
 8000a88:	e77d      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000a8a:	2080      	movs	r0, #128	; 0x80
 8000a8c:	03c0      	lsls	r0, r0, #15
 8000a8e:	4305      	orrs	r5, r0
 8000a90:	026d      	lsls	r5, r5, #9
 8000a92:	20ff      	movs	r0, #255	; 0xff
 8000a94:	0a6d      	lsrs	r5, r5, #9
 8000a96:	e776      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000a98:	4642      	mov	r2, r8
 8000a9a:	016b      	lsls	r3, r5, #5
 8000a9c:	0150      	lsls	r0, r2, #5
 8000a9e:	4283      	cmp	r3, r0
 8000aa0:	d219      	bcs.n	8000ad6 <__aeabi_fdiv+0x212>
 8000aa2:	221b      	movs	r2, #27
 8000aa4:	2500      	movs	r5, #0
 8000aa6:	3f01      	subs	r7, #1
 8000aa8:	2601      	movs	r6, #1
 8000aaa:	001c      	movs	r4, r3
 8000aac:	006d      	lsls	r5, r5, #1
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	2c00      	cmp	r4, #0
 8000ab2:	db01      	blt.n	8000ab8 <__aeabi_fdiv+0x1f4>
 8000ab4:	4298      	cmp	r0, r3
 8000ab6:	d801      	bhi.n	8000abc <__aeabi_fdiv+0x1f8>
 8000ab8:	1a1b      	subs	r3, r3, r0
 8000aba:	4335      	orrs	r5, r6
 8000abc:	3a01      	subs	r2, #1
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	d1f3      	bne.n	8000aaa <__aeabi_fdiv+0x1e6>
 8000ac2:	1e5a      	subs	r2, r3, #1
 8000ac4:	4193      	sbcs	r3, r2
 8000ac6:	431d      	orrs	r5, r3
 8000ac8:	003b      	movs	r3, r7
 8000aca:	337f      	adds	r3, #127	; 0x7f
 8000acc:	000e      	movs	r6, r1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	dd00      	ble.n	8000ad4 <__aeabi_fdiv+0x210>
 8000ad2:	e741      	b.n	8000958 <__aeabi_fdiv+0x94>
 8000ad4:	e7aa      	b.n	8000a2c <__aeabi_fdiv+0x168>
 8000ad6:	221a      	movs	r2, #26
 8000ad8:	2501      	movs	r5, #1
 8000ada:	1a1b      	subs	r3, r3, r0
 8000adc:	e7e4      	b.n	8000aa8 <__aeabi_fdiv+0x1e4>
 8000ade:	01ad      	lsls	r5, r5, #6
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	0a6d      	lsrs	r5, r5, #9
 8000ae4:	e74f      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	0800b050 	.word	0x0800b050
 8000aec:	f7ffffff 	.word	0xf7ffffff
 8000af0:	0800b090 	.word	0x0800b090

08000af4 <__aeabi_f2iz>:
 8000af4:	0241      	lsls	r1, r0, #9
 8000af6:	0042      	lsls	r2, r0, #1
 8000af8:	0fc3      	lsrs	r3, r0, #31
 8000afa:	0a49      	lsrs	r1, r1, #9
 8000afc:	2000      	movs	r0, #0
 8000afe:	0e12      	lsrs	r2, r2, #24
 8000b00:	2a7e      	cmp	r2, #126	; 0x7e
 8000b02:	dd03      	ble.n	8000b0c <__aeabi_f2iz+0x18>
 8000b04:	2a9d      	cmp	r2, #157	; 0x9d
 8000b06:	dd02      	ble.n	8000b0e <__aeabi_f2iz+0x1a>
 8000b08:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <__aeabi_f2iz+0x3c>)
 8000b0a:	1898      	adds	r0, r3, r2
 8000b0c:	4770      	bx	lr
 8000b0e:	2080      	movs	r0, #128	; 0x80
 8000b10:	0400      	lsls	r0, r0, #16
 8000b12:	4301      	orrs	r1, r0
 8000b14:	2a95      	cmp	r2, #149	; 0x95
 8000b16:	dc07      	bgt.n	8000b28 <__aeabi_f2iz+0x34>
 8000b18:	2096      	movs	r0, #150	; 0x96
 8000b1a:	1a82      	subs	r2, r0, r2
 8000b1c:	40d1      	lsrs	r1, r2
 8000b1e:	4248      	negs	r0, r1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1f3      	bne.n	8000b0c <__aeabi_f2iz+0x18>
 8000b24:	0008      	movs	r0, r1
 8000b26:	e7f1      	b.n	8000b0c <__aeabi_f2iz+0x18>
 8000b28:	3a96      	subs	r2, #150	; 0x96
 8000b2a:	4091      	lsls	r1, r2
 8000b2c:	e7f7      	b.n	8000b1e <__aeabi_f2iz+0x2a>
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	7fffffff 	.word	0x7fffffff

08000b34 <__aeabi_i2f>:
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b36:	2800      	cmp	r0, #0
 8000b38:	d013      	beq.n	8000b62 <__aeabi_i2f+0x2e>
 8000b3a:	17c3      	asrs	r3, r0, #31
 8000b3c:	18c6      	adds	r6, r0, r3
 8000b3e:	405e      	eors	r6, r3
 8000b40:	0fc4      	lsrs	r4, r0, #31
 8000b42:	0030      	movs	r0, r6
 8000b44:	f001 fefa 	bl	800293c <__clzsi2>
 8000b48:	239e      	movs	r3, #158	; 0x9e
 8000b4a:	0005      	movs	r5, r0
 8000b4c:	1a1b      	subs	r3, r3, r0
 8000b4e:	2b96      	cmp	r3, #150	; 0x96
 8000b50:	dc0f      	bgt.n	8000b72 <__aeabi_i2f+0x3e>
 8000b52:	2808      	cmp	r0, #8
 8000b54:	dd01      	ble.n	8000b5a <__aeabi_i2f+0x26>
 8000b56:	3d08      	subs	r5, #8
 8000b58:	40ae      	lsls	r6, r5
 8000b5a:	0276      	lsls	r6, r6, #9
 8000b5c:	0a76      	lsrs	r6, r6, #9
 8000b5e:	b2d8      	uxtb	r0, r3
 8000b60:	e002      	b.n	8000b68 <__aeabi_i2f+0x34>
 8000b62:	2400      	movs	r4, #0
 8000b64:	2000      	movs	r0, #0
 8000b66:	2600      	movs	r6, #0
 8000b68:	05c0      	lsls	r0, r0, #23
 8000b6a:	4330      	orrs	r0, r6
 8000b6c:	07e4      	lsls	r4, r4, #31
 8000b6e:	4320      	orrs	r0, r4
 8000b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b72:	2b99      	cmp	r3, #153	; 0x99
 8000b74:	dd0c      	ble.n	8000b90 <__aeabi_i2f+0x5c>
 8000b76:	2205      	movs	r2, #5
 8000b78:	0031      	movs	r1, r6
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	40d1      	lsrs	r1, r2
 8000b7e:	000a      	movs	r2, r1
 8000b80:	0001      	movs	r1, r0
 8000b82:	0030      	movs	r0, r6
 8000b84:	311b      	adds	r1, #27
 8000b86:	4088      	lsls	r0, r1
 8000b88:	1e41      	subs	r1, r0, #1
 8000b8a:	4188      	sbcs	r0, r1
 8000b8c:	4302      	orrs	r2, r0
 8000b8e:	0016      	movs	r6, r2
 8000b90:	2d05      	cmp	r5, #5
 8000b92:	dc12      	bgt.n	8000bba <__aeabi_i2f+0x86>
 8000b94:	0031      	movs	r1, r6
 8000b96:	4f0d      	ldr	r7, [pc, #52]	; (8000bcc <__aeabi_i2f+0x98>)
 8000b98:	4039      	ands	r1, r7
 8000b9a:	0772      	lsls	r2, r6, #29
 8000b9c:	d009      	beq.n	8000bb2 <__aeabi_i2f+0x7e>
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	4030      	ands	r0, r6
 8000ba2:	2804      	cmp	r0, #4
 8000ba4:	d005      	beq.n	8000bb2 <__aeabi_i2f+0x7e>
 8000ba6:	3104      	adds	r1, #4
 8000ba8:	014a      	lsls	r2, r1, #5
 8000baa:	d502      	bpl.n	8000bb2 <__aeabi_i2f+0x7e>
 8000bac:	239f      	movs	r3, #159	; 0x9f
 8000bae:	4039      	ands	r1, r7
 8000bb0:	1b5b      	subs	r3, r3, r5
 8000bb2:	0189      	lsls	r1, r1, #6
 8000bb4:	0a4e      	lsrs	r6, r1, #9
 8000bb6:	b2d8      	uxtb	r0, r3
 8000bb8:	e7d6      	b.n	8000b68 <__aeabi_i2f+0x34>
 8000bba:	1f6a      	subs	r2, r5, #5
 8000bbc:	4096      	lsls	r6, r2
 8000bbe:	0031      	movs	r1, r6
 8000bc0:	4f02      	ldr	r7, [pc, #8]	; (8000bcc <__aeabi_i2f+0x98>)
 8000bc2:	4039      	ands	r1, r7
 8000bc4:	0772      	lsls	r2, r6, #29
 8000bc6:	d0f4      	beq.n	8000bb2 <__aeabi_i2f+0x7e>
 8000bc8:	e7e9      	b.n	8000b9e <__aeabi_i2f+0x6a>
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff

08000bd0 <__aeabi_dadd>:
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd2:	464f      	mov	r7, r9
 8000bd4:	4646      	mov	r6, r8
 8000bd6:	46d6      	mov	lr, sl
 8000bd8:	000d      	movs	r5, r1
 8000bda:	0004      	movs	r4, r0
 8000bdc:	b5c0      	push	{r6, r7, lr}
 8000bde:	001f      	movs	r7, r3
 8000be0:	0011      	movs	r1, r2
 8000be2:	0328      	lsls	r0, r5, #12
 8000be4:	0f62      	lsrs	r2, r4, #29
 8000be6:	0a40      	lsrs	r0, r0, #9
 8000be8:	4310      	orrs	r0, r2
 8000bea:	007a      	lsls	r2, r7, #1
 8000bec:	0d52      	lsrs	r2, r2, #21
 8000bee:	00e3      	lsls	r3, r4, #3
 8000bf0:	033c      	lsls	r4, r7, #12
 8000bf2:	4691      	mov	r9, r2
 8000bf4:	0a64      	lsrs	r4, r4, #9
 8000bf6:	0ffa      	lsrs	r2, r7, #31
 8000bf8:	0f4f      	lsrs	r7, r1, #29
 8000bfa:	006e      	lsls	r6, r5, #1
 8000bfc:	4327      	orrs	r7, r4
 8000bfe:	4692      	mov	sl, r2
 8000c00:	46b8      	mov	r8, r7
 8000c02:	0d76      	lsrs	r6, r6, #21
 8000c04:	0fed      	lsrs	r5, r5, #31
 8000c06:	00c9      	lsls	r1, r1, #3
 8000c08:	4295      	cmp	r5, r2
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_dadd+0x3e>
 8000c0c:	e099      	b.n	8000d42 <__aeabi_dadd+0x172>
 8000c0e:	464c      	mov	r4, r9
 8000c10:	1b34      	subs	r4, r6, r4
 8000c12:	46a4      	mov	ip, r4
 8000c14:	2c00      	cmp	r4, #0
 8000c16:	dc00      	bgt.n	8000c1a <__aeabi_dadd+0x4a>
 8000c18:	e07c      	b.n	8000d14 <__aeabi_dadd+0x144>
 8000c1a:	464a      	mov	r2, r9
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_dadd+0x52>
 8000c20:	e0b8      	b.n	8000d94 <__aeabi_dadd+0x1c4>
 8000c22:	4ac5      	ldr	r2, [pc, #788]	; (8000f38 <__aeabi_dadd+0x368>)
 8000c24:	4296      	cmp	r6, r2
 8000c26:	d100      	bne.n	8000c2a <__aeabi_dadd+0x5a>
 8000c28:	e11c      	b.n	8000e64 <__aeabi_dadd+0x294>
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	003c      	movs	r4, r7
 8000c2e:	0412      	lsls	r2, r2, #16
 8000c30:	4314      	orrs	r4, r2
 8000c32:	46a0      	mov	r8, r4
 8000c34:	4662      	mov	r2, ip
 8000c36:	2a38      	cmp	r2, #56	; 0x38
 8000c38:	dd00      	ble.n	8000c3c <__aeabi_dadd+0x6c>
 8000c3a:	e161      	b.n	8000f00 <__aeabi_dadd+0x330>
 8000c3c:	2a1f      	cmp	r2, #31
 8000c3e:	dd00      	ble.n	8000c42 <__aeabi_dadd+0x72>
 8000c40:	e1cc      	b.n	8000fdc <__aeabi_dadd+0x40c>
 8000c42:	4664      	mov	r4, ip
 8000c44:	2220      	movs	r2, #32
 8000c46:	1b12      	subs	r2, r2, r4
 8000c48:	4644      	mov	r4, r8
 8000c4a:	4094      	lsls	r4, r2
 8000c4c:	000f      	movs	r7, r1
 8000c4e:	46a1      	mov	r9, r4
 8000c50:	4664      	mov	r4, ip
 8000c52:	4091      	lsls	r1, r2
 8000c54:	40e7      	lsrs	r7, r4
 8000c56:	464c      	mov	r4, r9
 8000c58:	1e4a      	subs	r2, r1, #1
 8000c5a:	4191      	sbcs	r1, r2
 8000c5c:	433c      	orrs	r4, r7
 8000c5e:	4642      	mov	r2, r8
 8000c60:	4321      	orrs	r1, r4
 8000c62:	4664      	mov	r4, ip
 8000c64:	40e2      	lsrs	r2, r4
 8000c66:	1a80      	subs	r0, r0, r2
 8000c68:	1a5c      	subs	r4, r3, r1
 8000c6a:	42a3      	cmp	r3, r4
 8000c6c:	419b      	sbcs	r3, r3
 8000c6e:	425f      	negs	r7, r3
 8000c70:	1bc7      	subs	r7, r0, r7
 8000c72:	023b      	lsls	r3, r7, #8
 8000c74:	d400      	bmi.n	8000c78 <__aeabi_dadd+0xa8>
 8000c76:	e0d0      	b.n	8000e1a <__aeabi_dadd+0x24a>
 8000c78:	027f      	lsls	r7, r7, #9
 8000c7a:	0a7f      	lsrs	r7, r7, #9
 8000c7c:	2f00      	cmp	r7, #0
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_dadd+0xb2>
 8000c80:	e0ff      	b.n	8000e82 <__aeabi_dadd+0x2b2>
 8000c82:	0038      	movs	r0, r7
 8000c84:	f001 fe5a 	bl	800293c <__clzsi2>
 8000c88:	0001      	movs	r1, r0
 8000c8a:	3908      	subs	r1, #8
 8000c8c:	2320      	movs	r3, #32
 8000c8e:	0022      	movs	r2, r4
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	408f      	lsls	r7, r1
 8000c94:	40da      	lsrs	r2, r3
 8000c96:	408c      	lsls	r4, r1
 8000c98:	4317      	orrs	r7, r2
 8000c9a:	42b1      	cmp	r1, r6
 8000c9c:	da00      	bge.n	8000ca0 <__aeabi_dadd+0xd0>
 8000c9e:	e0ff      	b.n	8000ea0 <__aeabi_dadd+0x2d0>
 8000ca0:	1b89      	subs	r1, r1, r6
 8000ca2:	1c4b      	adds	r3, r1, #1
 8000ca4:	2b1f      	cmp	r3, #31
 8000ca6:	dd00      	ble.n	8000caa <__aeabi_dadd+0xda>
 8000ca8:	e0a8      	b.n	8000dfc <__aeabi_dadd+0x22c>
 8000caa:	2220      	movs	r2, #32
 8000cac:	0039      	movs	r1, r7
 8000cae:	1ad2      	subs	r2, r2, r3
 8000cb0:	0020      	movs	r0, r4
 8000cb2:	4094      	lsls	r4, r2
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	40d8      	lsrs	r0, r3
 8000cb8:	1e62      	subs	r2, r4, #1
 8000cba:	4194      	sbcs	r4, r2
 8000cbc:	40df      	lsrs	r7, r3
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4301      	orrs	r1, r0
 8000cc2:	430c      	orrs	r4, r1
 8000cc4:	0763      	lsls	r3, r4, #29
 8000cc6:	d009      	beq.n	8000cdc <__aeabi_dadd+0x10c>
 8000cc8:	230f      	movs	r3, #15
 8000cca:	4023      	ands	r3, r4
 8000ccc:	2b04      	cmp	r3, #4
 8000cce:	d005      	beq.n	8000cdc <__aeabi_dadd+0x10c>
 8000cd0:	1d23      	adds	r3, r4, #4
 8000cd2:	42a3      	cmp	r3, r4
 8000cd4:	41a4      	sbcs	r4, r4
 8000cd6:	4264      	negs	r4, r4
 8000cd8:	193f      	adds	r7, r7, r4
 8000cda:	001c      	movs	r4, r3
 8000cdc:	023b      	lsls	r3, r7, #8
 8000cde:	d400      	bmi.n	8000ce2 <__aeabi_dadd+0x112>
 8000ce0:	e09e      	b.n	8000e20 <__aeabi_dadd+0x250>
 8000ce2:	4b95      	ldr	r3, [pc, #596]	; (8000f38 <__aeabi_dadd+0x368>)
 8000ce4:	3601      	adds	r6, #1
 8000ce6:	429e      	cmp	r6, r3
 8000ce8:	d100      	bne.n	8000cec <__aeabi_dadd+0x11c>
 8000cea:	e0b7      	b.n	8000e5c <__aeabi_dadd+0x28c>
 8000cec:	4a93      	ldr	r2, [pc, #588]	; (8000f3c <__aeabi_dadd+0x36c>)
 8000cee:	08e4      	lsrs	r4, r4, #3
 8000cf0:	4017      	ands	r7, r2
 8000cf2:	077b      	lsls	r3, r7, #29
 8000cf4:	0571      	lsls	r1, r6, #21
 8000cf6:	027f      	lsls	r7, r7, #9
 8000cf8:	4323      	orrs	r3, r4
 8000cfa:	0b3f      	lsrs	r7, r7, #12
 8000cfc:	0d4a      	lsrs	r2, r1, #21
 8000cfe:	0512      	lsls	r2, r2, #20
 8000d00:	433a      	orrs	r2, r7
 8000d02:	07ed      	lsls	r5, r5, #31
 8000d04:	432a      	orrs	r2, r5
 8000d06:	0018      	movs	r0, r3
 8000d08:	0011      	movs	r1, r2
 8000d0a:	bce0      	pop	{r5, r6, r7}
 8000d0c:	46ba      	mov	sl, r7
 8000d0e:	46b1      	mov	r9, r6
 8000d10:	46a8      	mov	r8, r5
 8000d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d14:	2c00      	cmp	r4, #0
 8000d16:	d04b      	beq.n	8000db0 <__aeabi_dadd+0x1e0>
 8000d18:	464c      	mov	r4, r9
 8000d1a:	1ba4      	subs	r4, r4, r6
 8000d1c:	46a4      	mov	ip, r4
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d000      	beq.n	8000d24 <__aeabi_dadd+0x154>
 8000d22:	e123      	b.n	8000f6c <__aeabi_dadd+0x39c>
 8000d24:	0004      	movs	r4, r0
 8000d26:	431c      	orrs	r4, r3
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dadd+0x15c>
 8000d2a:	e1af      	b.n	800108c <__aeabi_dadd+0x4bc>
 8000d2c:	4662      	mov	r2, ip
 8000d2e:	1e54      	subs	r4, r2, #1
 8000d30:	2a01      	cmp	r2, #1
 8000d32:	d100      	bne.n	8000d36 <__aeabi_dadd+0x166>
 8000d34:	e215      	b.n	8001162 <__aeabi_dadd+0x592>
 8000d36:	4d80      	ldr	r5, [pc, #512]	; (8000f38 <__aeabi_dadd+0x368>)
 8000d38:	45ac      	cmp	ip, r5
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_dadd+0x16e>
 8000d3c:	e1c8      	b.n	80010d0 <__aeabi_dadd+0x500>
 8000d3e:	46a4      	mov	ip, r4
 8000d40:	e11b      	b.n	8000f7a <__aeabi_dadd+0x3aa>
 8000d42:	464a      	mov	r2, r9
 8000d44:	1ab2      	subs	r2, r6, r2
 8000d46:	4694      	mov	ip, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	dc00      	bgt.n	8000d4e <__aeabi_dadd+0x17e>
 8000d4c:	e0ac      	b.n	8000ea8 <__aeabi_dadd+0x2d8>
 8000d4e:	464a      	mov	r2, r9
 8000d50:	2a00      	cmp	r2, #0
 8000d52:	d043      	beq.n	8000ddc <__aeabi_dadd+0x20c>
 8000d54:	4a78      	ldr	r2, [pc, #480]	; (8000f38 <__aeabi_dadd+0x368>)
 8000d56:	4296      	cmp	r6, r2
 8000d58:	d100      	bne.n	8000d5c <__aeabi_dadd+0x18c>
 8000d5a:	e1af      	b.n	80010bc <__aeabi_dadd+0x4ec>
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	003c      	movs	r4, r7
 8000d60:	0412      	lsls	r2, r2, #16
 8000d62:	4314      	orrs	r4, r2
 8000d64:	46a0      	mov	r8, r4
 8000d66:	4662      	mov	r2, ip
 8000d68:	2a38      	cmp	r2, #56	; 0x38
 8000d6a:	dc67      	bgt.n	8000e3c <__aeabi_dadd+0x26c>
 8000d6c:	2a1f      	cmp	r2, #31
 8000d6e:	dc00      	bgt.n	8000d72 <__aeabi_dadd+0x1a2>
 8000d70:	e15f      	b.n	8001032 <__aeabi_dadd+0x462>
 8000d72:	4647      	mov	r7, r8
 8000d74:	3a20      	subs	r2, #32
 8000d76:	40d7      	lsrs	r7, r2
 8000d78:	4662      	mov	r2, ip
 8000d7a:	2a20      	cmp	r2, #32
 8000d7c:	d005      	beq.n	8000d8a <__aeabi_dadd+0x1ba>
 8000d7e:	4664      	mov	r4, ip
 8000d80:	2240      	movs	r2, #64	; 0x40
 8000d82:	1b12      	subs	r2, r2, r4
 8000d84:	4644      	mov	r4, r8
 8000d86:	4094      	lsls	r4, r2
 8000d88:	4321      	orrs	r1, r4
 8000d8a:	1e4a      	subs	r2, r1, #1
 8000d8c:	4191      	sbcs	r1, r2
 8000d8e:	000c      	movs	r4, r1
 8000d90:	433c      	orrs	r4, r7
 8000d92:	e057      	b.n	8000e44 <__aeabi_dadd+0x274>
 8000d94:	003a      	movs	r2, r7
 8000d96:	430a      	orrs	r2, r1
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dadd+0x1cc>
 8000d9a:	e105      	b.n	8000fa8 <__aeabi_dadd+0x3d8>
 8000d9c:	0022      	movs	r2, r4
 8000d9e:	3a01      	subs	r2, #1
 8000da0:	2c01      	cmp	r4, #1
 8000da2:	d100      	bne.n	8000da6 <__aeabi_dadd+0x1d6>
 8000da4:	e182      	b.n	80010ac <__aeabi_dadd+0x4dc>
 8000da6:	4c64      	ldr	r4, [pc, #400]	; (8000f38 <__aeabi_dadd+0x368>)
 8000da8:	45a4      	cmp	ip, r4
 8000daa:	d05b      	beq.n	8000e64 <__aeabi_dadd+0x294>
 8000dac:	4694      	mov	ip, r2
 8000dae:	e741      	b.n	8000c34 <__aeabi_dadd+0x64>
 8000db0:	4c63      	ldr	r4, [pc, #396]	; (8000f40 <__aeabi_dadd+0x370>)
 8000db2:	1c77      	adds	r7, r6, #1
 8000db4:	4227      	tst	r7, r4
 8000db6:	d000      	beq.n	8000dba <__aeabi_dadd+0x1ea>
 8000db8:	e0c4      	b.n	8000f44 <__aeabi_dadd+0x374>
 8000dba:	0004      	movs	r4, r0
 8000dbc:	431c      	orrs	r4, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_dadd+0x1f4>
 8000dc2:	e169      	b.n	8001098 <__aeabi_dadd+0x4c8>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d100      	bne.n	8000dca <__aeabi_dadd+0x1fa>
 8000dc8:	e1bf      	b.n	800114a <__aeabi_dadd+0x57a>
 8000dca:	4644      	mov	r4, r8
 8000dcc:	430c      	orrs	r4, r1
 8000dce:	d000      	beq.n	8000dd2 <__aeabi_dadd+0x202>
 8000dd0:	e1d0      	b.n	8001174 <__aeabi_dadd+0x5a4>
 8000dd2:	0742      	lsls	r2, r0, #29
 8000dd4:	08db      	lsrs	r3, r3, #3
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	08c0      	lsrs	r0, r0, #3
 8000dda:	e029      	b.n	8000e30 <__aeabi_dadd+0x260>
 8000ddc:	003a      	movs	r2, r7
 8000dde:	430a      	orrs	r2, r1
 8000de0:	d100      	bne.n	8000de4 <__aeabi_dadd+0x214>
 8000de2:	e170      	b.n	80010c6 <__aeabi_dadd+0x4f6>
 8000de4:	4662      	mov	r2, ip
 8000de6:	4664      	mov	r4, ip
 8000de8:	3a01      	subs	r2, #1
 8000dea:	2c01      	cmp	r4, #1
 8000dec:	d100      	bne.n	8000df0 <__aeabi_dadd+0x220>
 8000dee:	e0e0      	b.n	8000fb2 <__aeabi_dadd+0x3e2>
 8000df0:	4c51      	ldr	r4, [pc, #324]	; (8000f38 <__aeabi_dadd+0x368>)
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d100      	bne.n	8000df8 <__aeabi_dadd+0x228>
 8000df6:	e161      	b.n	80010bc <__aeabi_dadd+0x4ec>
 8000df8:	4694      	mov	ip, r2
 8000dfa:	e7b4      	b.n	8000d66 <__aeabi_dadd+0x196>
 8000dfc:	003a      	movs	r2, r7
 8000dfe:	391f      	subs	r1, #31
 8000e00:	40ca      	lsrs	r2, r1
 8000e02:	0011      	movs	r1, r2
 8000e04:	2b20      	cmp	r3, #32
 8000e06:	d003      	beq.n	8000e10 <__aeabi_dadd+0x240>
 8000e08:	2240      	movs	r2, #64	; 0x40
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	409f      	lsls	r7, r3
 8000e0e:	433c      	orrs	r4, r7
 8000e10:	1e63      	subs	r3, r4, #1
 8000e12:	419c      	sbcs	r4, r3
 8000e14:	2700      	movs	r7, #0
 8000e16:	2600      	movs	r6, #0
 8000e18:	430c      	orrs	r4, r1
 8000e1a:	0763      	lsls	r3, r4, #29
 8000e1c:	d000      	beq.n	8000e20 <__aeabi_dadd+0x250>
 8000e1e:	e753      	b.n	8000cc8 <__aeabi_dadd+0xf8>
 8000e20:	46b4      	mov	ip, r6
 8000e22:	08e4      	lsrs	r4, r4, #3
 8000e24:	077b      	lsls	r3, r7, #29
 8000e26:	4323      	orrs	r3, r4
 8000e28:	08f8      	lsrs	r0, r7, #3
 8000e2a:	4a43      	ldr	r2, [pc, #268]	; (8000f38 <__aeabi_dadd+0x368>)
 8000e2c:	4594      	cmp	ip, r2
 8000e2e:	d01d      	beq.n	8000e6c <__aeabi_dadd+0x29c>
 8000e30:	4662      	mov	r2, ip
 8000e32:	0307      	lsls	r7, r0, #12
 8000e34:	0552      	lsls	r2, r2, #21
 8000e36:	0b3f      	lsrs	r7, r7, #12
 8000e38:	0d52      	lsrs	r2, r2, #21
 8000e3a:	e760      	b.n	8000cfe <__aeabi_dadd+0x12e>
 8000e3c:	4644      	mov	r4, r8
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	1e62      	subs	r2, r4, #1
 8000e42:	4194      	sbcs	r4, r2
 8000e44:	18e4      	adds	r4, r4, r3
 8000e46:	429c      	cmp	r4, r3
 8000e48:	419b      	sbcs	r3, r3
 8000e4a:	425f      	negs	r7, r3
 8000e4c:	183f      	adds	r7, r7, r0
 8000e4e:	023b      	lsls	r3, r7, #8
 8000e50:	d5e3      	bpl.n	8000e1a <__aeabi_dadd+0x24a>
 8000e52:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <__aeabi_dadd+0x368>)
 8000e54:	3601      	adds	r6, #1
 8000e56:	429e      	cmp	r6, r3
 8000e58:	d000      	beq.n	8000e5c <__aeabi_dadd+0x28c>
 8000e5a:	e0b5      	b.n	8000fc8 <__aeabi_dadd+0x3f8>
 8000e5c:	0032      	movs	r2, r6
 8000e5e:	2700      	movs	r7, #0
 8000e60:	2300      	movs	r3, #0
 8000e62:	e74c      	b.n	8000cfe <__aeabi_dadd+0x12e>
 8000e64:	0742      	lsls	r2, r0, #29
 8000e66:	08db      	lsrs	r3, r3, #3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	08c0      	lsrs	r0, r0, #3
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	4302      	orrs	r2, r0
 8000e70:	d100      	bne.n	8000e74 <__aeabi_dadd+0x2a4>
 8000e72:	e1e1      	b.n	8001238 <__aeabi_dadd+0x668>
 8000e74:	2780      	movs	r7, #128	; 0x80
 8000e76:	033f      	lsls	r7, r7, #12
 8000e78:	4307      	orrs	r7, r0
 8000e7a:	033f      	lsls	r7, r7, #12
 8000e7c:	4a2e      	ldr	r2, [pc, #184]	; (8000f38 <__aeabi_dadd+0x368>)
 8000e7e:	0b3f      	lsrs	r7, r7, #12
 8000e80:	e73d      	b.n	8000cfe <__aeabi_dadd+0x12e>
 8000e82:	0020      	movs	r0, r4
 8000e84:	f001 fd5a 	bl	800293c <__clzsi2>
 8000e88:	0001      	movs	r1, r0
 8000e8a:	3118      	adds	r1, #24
 8000e8c:	291f      	cmp	r1, #31
 8000e8e:	dc00      	bgt.n	8000e92 <__aeabi_dadd+0x2c2>
 8000e90:	e6fc      	b.n	8000c8c <__aeabi_dadd+0xbc>
 8000e92:	3808      	subs	r0, #8
 8000e94:	4084      	lsls	r4, r0
 8000e96:	0027      	movs	r7, r4
 8000e98:	2400      	movs	r4, #0
 8000e9a:	42b1      	cmp	r1, r6
 8000e9c:	db00      	blt.n	8000ea0 <__aeabi_dadd+0x2d0>
 8000e9e:	e6ff      	b.n	8000ca0 <__aeabi_dadd+0xd0>
 8000ea0:	4a26      	ldr	r2, [pc, #152]	; (8000f3c <__aeabi_dadd+0x36c>)
 8000ea2:	1a76      	subs	r6, r6, r1
 8000ea4:	4017      	ands	r7, r2
 8000ea6:	e70d      	b.n	8000cc4 <__aeabi_dadd+0xf4>
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	d02f      	beq.n	8000f0c <__aeabi_dadd+0x33c>
 8000eac:	464a      	mov	r2, r9
 8000eae:	1b92      	subs	r2, r2, r6
 8000eb0:	4694      	mov	ip, r2
 8000eb2:	2e00      	cmp	r6, #0
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_dadd+0x2e8>
 8000eb6:	e0ad      	b.n	8001014 <__aeabi_dadd+0x444>
 8000eb8:	4a1f      	ldr	r2, [pc, #124]	; (8000f38 <__aeabi_dadd+0x368>)
 8000eba:	4591      	cmp	r9, r2
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_dadd+0x2f0>
 8000ebe:	e10f      	b.n	80010e0 <__aeabi_dadd+0x510>
 8000ec0:	2280      	movs	r2, #128	; 0x80
 8000ec2:	0412      	lsls	r2, r2, #16
 8000ec4:	4310      	orrs	r0, r2
 8000ec6:	4662      	mov	r2, ip
 8000ec8:	2a38      	cmp	r2, #56	; 0x38
 8000eca:	dd00      	ble.n	8000ece <__aeabi_dadd+0x2fe>
 8000ecc:	e10f      	b.n	80010ee <__aeabi_dadd+0x51e>
 8000ece:	2a1f      	cmp	r2, #31
 8000ed0:	dd00      	ble.n	8000ed4 <__aeabi_dadd+0x304>
 8000ed2:	e180      	b.n	80011d6 <__aeabi_dadd+0x606>
 8000ed4:	4664      	mov	r4, ip
 8000ed6:	2220      	movs	r2, #32
 8000ed8:	001e      	movs	r6, r3
 8000eda:	1b12      	subs	r2, r2, r4
 8000edc:	4667      	mov	r7, ip
 8000ede:	0004      	movs	r4, r0
 8000ee0:	4093      	lsls	r3, r2
 8000ee2:	4094      	lsls	r4, r2
 8000ee4:	40fe      	lsrs	r6, r7
 8000ee6:	1e5a      	subs	r2, r3, #1
 8000ee8:	4193      	sbcs	r3, r2
 8000eea:	40f8      	lsrs	r0, r7
 8000eec:	4334      	orrs	r4, r6
 8000eee:	431c      	orrs	r4, r3
 8000ef0:	4480      	add	r8, r0
 8000ef2:	1864      	adds	r4, r4, r1
 8000ef4:	428c      	cmp	r4, r1
 8000ef6:	41bf      	sbcs	r7, r7
 8000ef8:	427f      	negs	r7, r7
 8000efa:	464e      	mov	r6, r9
 8000efc:	4447      	add	r7, r8
 8000efe:	e7a6      	b.n	8000e4e <__aeabi_dadd+0x27e>
 8000f00:	4642      	mov	r2, r8
 8000f02:	430a      	orrs	r2, r1
 8000f04:	0011      	movs	r1, r2
 8000f06:	1e4a      	subs	r2, r1, #1
 8000f08:	4191      	sbcs	r1, r2
 8000f0a:	e6ad      	b.n	8000c68 <__aeabi_dadd+0x98>
 8000f0c:	4c0c      	ldr	r4, [pc, #48]	; (8000f40 <__aeabi_dadd+0x370>)
 8000f0e:	1c72      	adds	r2, r6, #1
 8000f10:	4222      	tst	r2, r4
 8000f12:	d000      	beq.n	8000f16 <__aeabi_dadd+0x346>
 8000f14:	e0a1      	b.n	800105a <__aeabi_dadd+0x48a>
 8000f16:	0002      	movs	r2, r0
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	2e00      	cmp	r6, #0
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_dadd+0x350>
 8000f1e:	e0fa      	b.n	8001116 <__aeabi_dadd+0x546>
 8000f20:	2a00      	cmp	r2, #0
 8000f22:	d100      	bne.n	8000f26 <__aeabi_dadd+0x356>
 8000f24:	e145      	b.n	80011b2 <__aeabi_dadd+0x5e2>
 8000f26:	003a      	movs	r2, r7
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_dadd+0x35e>
 8000f2c:	e146      	b.n	80011bc <__aeabi_dadd+0x5ec>
 8000f2e:	0742      	lsls	r2, r0, #29
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	4313      	orrs	r3, r2
 8000f34:	08c0      	lsrs	r0, r0, #3
 8000f36:	e77b      	b.n	8000e30 <__aeabi_dadd+0x260>
 8000f38:	000007ff 	.word	0x000007ff
 8000f3c:	ff7fffff 	.word	0xff7fffff
 8000f40:	000007fe 	.word	0x000007fe
 8000f44:	4647      	mov	r7, r8
 8000f46:	1a5c      	subs	r4, r3, r1
 8000f48:	1bc2      	subs	r2, r0, r7
 8000f4a:	42a3      	cmp	r3, r4
 8000f4c:	41bf      	sbcs	r7, r7
 8000f4e:	427f      	negs	r7, r7
 8000f50:	46b9      	mov	r9, r7
 8000f52:	0017      	movs	r7, r2
 8000f54:	464a      	mov	r2, r9
 8000f56:	1abf      	subs	r7, r7, r2
 8000f58:	023a      	lsls	r2, r7, #8
 8000f5a:	d500      	bpl.n	8000f5e <__aeabi_dadd+0x38e>
 8000f5c:	e08d      	b.n	800107a <__aeabi_dadd+0x4aa>
 8000f5e:	0023      	movs	r3, r4
 8000f60:	433b      	orrs	r3, r7
 8000f62:	d000      	beq.n	8000f66 <__aeabi_dadd+0x396>
 8000f64:	e68a      	b.n	8000c7c <__aeabi_dadd+0xac>
 8000f66:	2000      	movs	r0, #0
 8000f68:	2500      	movs	r5, #0
 8000f6a:	e761      	b.n	8000e30 <__aeabi_dadd+0x260>
 8000f6c:	4cb4      	ldr	r4, [pc, #720]	; (8001240 <__aeabi_dadd+0x670>)
 8000f6e:	45a1      	cmp	r9, r4
 8000f70:	d100      	bne.n	8000f74 <__aeabi_dadd+0x3a4>
 8000f72:	e0ad      	b.n	80010d0 <__aeabi_dadd+0x500>
 8000f74:	2480      	movs	r4, #128	; 0x80
 8000f76:	0424      	lsls	r4, r4, #16
 8000f78:	4320      	orrs	r0, r4
 8000f7a:	4664      	mov	r4, ip
 8000f7c:	2c38      	cmp	r4, #56	; 0x38
 8000f7e:	dc3d      	bgt.n	8000ffc <__aeabi_dadd+0x42c>
 8000f80:	4662      	mov	r2, ip
 8000f82:	2c1f      	cmp	r4, #31
 8000f84:	dd00      	ble.n	8000f88 <__aeabi_dadd+0x3b8>
 8000f86:	e0b7      	b.n	80010f8 <__aeabi_dadd+0x528>
 8000f88:	2520      	movs	r5, #32
 8000f8a:	001e      	movs	r6, r3
 8000f8c:	1b2d      	subs	r5, r5, r4
 8000f8e:	0004      	movs	r4, r0
 8000f90:	40ab      	lsls	r3, r5
 8000f92:	40ac      	lsls	r4, r5
 8000f94:	40d6      	lsrs	r6, r2
 8000f96:	40d0      	lsrs	r0, r2
 8000f98:	4642      	mov	r2, r8
 8000f9a:	1e5d      	subs	r5, r3, #1
 8000f9c:	41ab      	sbcs	r3, r5
 8000f9e:	4334      	orrs	r4, r6
 8000fa0:	1a12      	subs	r2, r2, r0
 8000fa2:	4690      	mov	r8, r2
 8000fa4:	4323      	orrs	r3, r4
 8000fa6:	e02c      	b.n	8001002 <__aeabi_dadd+0x432>
 8000fa8:	0742      	lsls	r2, r0, #29
 8000faa:	08db      	lsrs	r3, r3, #3
 8000fac:	4313      	orrs	r3, r2
 8000fae:	08c0      	lsrs	r0, r0, #3
 8000fb0:	e73b      	b.n	8000e2a <__aeabi_dadd+0x25a>
 8000fb2:	185c      	adds	r4, r3, r1
 8000fb4:	429c      	cmp	r4, r3
 8000fb6:	419b      	sbcs	r3, r3
 8000fb8:	4440      	add	r0, r8
 8000fba:	425b      	negs	r3, r3
 8000fbc:	18c7      	adds	r7, r0, r3
 8000fbe:	2601      	movs	r6, #1
 8000fc0:	023b      	lsls	r3, r7, #8
 8000fc2:	d400      	bmi.n	8000fc6 <__aeabi_dadd+0x3f6>
 8000fc4:	e729      	b.n	8000e1a <__aeabi_dadd+0x24a>
 8000fc6:	2602      	movs	r6, #2
 8000fc8:	4a9e      	ldr	r2, [pc, #632]	; (8001244 <__aeabi_dadd+0x674>)
 8000fca:	0863      	lsrs	r3, r4, #1
 8000fcc:	4017      	ands	r7, r2
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4014      	ands	r4, r2
 8000fd2:	431c      	orrs	r4, r3
 8000fd4:	07fb      	lsls	r3, r7, #31
 8000fd6:	431c      	orrs	r4, r3
 8000fd8:	087f      	lsrs	r7, r7, #1
 8000fda:	e673      	b.n	8000cc4 <__aeabi_dadd+0xf4>
 8000fdc:	4644      	mov	r4, r8
 8000fde:	3a20      	subs	r2, #32
 8000fe0:	40d4      	lsrs	r4, r2
 8000fe2:	4662      	mov	r2, ip
 8000fe4:	2a20      	cmp	r2, #32
 8000fe6:	d005      	beq.n	8000ff4 <__aeabi_dadd+0x424>
 8000fe8:	4667      	mov	r7, ip
 8000fea:	2240      	movs	r2, #64	; 0x40
 8000fec:	1bd2      	subs	r2, r2, r7
 8000fee:	4647      	mov	r7, r8
 8000ff0:	4097      	lsls	r7, r2
 8000ff2:	4339      	orrs	r1, r7
 8000ff4:	1e4a      	subs	r2, r1, #1
 8000ff6:	4191      	sbcs	r1, r2
 8000ff8:	4321      	orrs	r1, r4
 8000ffa:	e635      	b.n	8000c68 <__aeabi_dadd+0x98>
 8000ffc:	4303      	orrs	r3, r0
 8000ffe:	1e58      	subs	r0, r3, #1
 8001000:	4183      	sbcs	r3, r0
 8001002:	1acc      	subs	r4, r1, r3
 8001004:	42a1      	cmp	r1, r4
 8001006:	41bf      	sbcs	r7, r7
 8001008:	4643      	mov	r3, r8
 800100a:	427f      	negs	r7, r7
 800100c:	4655      	mov	r5, sl
 800100e:	464e      	mov	r6, r9
 8001010:	1bdf      	subs	r7, r3, r7
 8001012:	e62e      	b.n	8000c72 <__aeabi_dadd+0xa2>
 8001014:	0002      	movs	r2, r0
 8001016:	431a      	orrs	r2, r3
 8001018:	d100      	bne.n	800101c <__aeabi_dadd+0x44c>
 800101a:	e0bd      	b.n	8001198 <__aeabi_dadd+0x5c8>
 800101c:	4662      	mov	r2, ip
 800101e:	4664      	mov	r4, ip
 8001020:	3a01      	subs	r2, #1
 8001022:	2c01      	cmp	r4, #1
 8001024:	d100      	bne.n	8001028 <__aeabi_dadd+0x458>
 8001026:	e0e5      	b.n	80011f4 <__aeabi_dadd+0x624>
 8001028:	4c85      	ldr	r4, [pc, #532]	; (8001240 <__aeabi_dadd+0x670>)
 800102a:	45a4      	cmp	ip, r4
 800102c:	d058      	beq.n	80010e0 <__aeabi_dadd+0x510>
 800102e:	4694      	mov	ip, r2
 8001030:	e749      	b.n	8000ec6 <__aeabi_dadd+0x2f6>
 8001032:	4664      	mov	r4, ip
 8001034:	2220      	movs	r2, #32
 8001036:	1b12      	subs	r2, r2, r4
 8001038:	4644      	mov	r4, r8
 800103a:	4094      	lsls	r4, r2
 800103c:	000f      	movs	r7, r1
 800103e:	46a1      	mov	r9, r4
 8001040:	4664      	mov	r4, ip
 8001042:	4091      	lsls	r1, r2
 8001044:	40e7      	lsrs	r7, r4
 8001046:	464c      	mov	r4, r9
 8001048:	1e4a      	subs	r2, r1, #1
 800104a:	4191      	sbcs	r1, r2
 800104c:	433c      	orrs	r4, r7
 800104e:	4642      	mov	r2, r8
 8001050:	430c      	orrs	r4, r1
 8001052:	4661      	mov	r1, ip
 8001054:	40ca      	lsrs	r2, r1
 8001056:	1880      	adds	r0, r0, r2
 8001058:	e6f4      	b.n	8000e44 <__aeabi_dadd+0x274>
 800105a:	4c79      	ldr	r4, [pc, #484]	; (8001240 <__aeabi_dadd+0x670>)
 800105c:	42a2      	cmp	r2, r4
 800105e:	d100      	bne.n	8001062 <__aeabi_dadd+0x492>
 8001060:	e6fd      	b.n	8000e5e <__aeabi_dadd+0x28e>
 8001062:	1859      	adds	r1, r3, r1
 8001064:	4299      	cmp	r1, r3
 8001066:	419b      	sbcs	r3, r3
 8001068:	4440      	add	r0, r8
 800106a:	425f      	negs	r7, r3
 800106c:	19c7      	adds	r7, r0, r7
 800106e:	07fc      	lsls	r4, r7, #31
 8001070:	0849      	lsrs	r1, r1, #1
 8001072:	0016      	movs	r6, r2
 8001074:	430c      	orrs	r4, r1
 8001076:	087f      	lsrs	r7, r7, #1
 8001078:	e6cf      	b.n	8000e1a <__aeabi_dadd+0x24a>
 800107a:	1acc      	subs	r4, r1, r3
 800107c:	42a1      	cmp	r1, r4
 800107e:	41bf      	sbcs	r7, r7
 8001080:	4643      	mov	r3, r8
 8001082:	427f      	negs	r7, r7
 8001084:	1a18      	subs	r0, r3, r0
 8001086:	4655      	mov	r5, sl
 8001088:	1bc7      	subs	r7, r0, r7
 800108a:	e5f7      	b.n	8000c7c <__aeabi_dadd+0xac>
 800108c:	08c9      	lsrs	r1, r1, #3
 800108e:	077b      	lsls	r3, r7, #29
 8001090:	4655      	mov	r5, sl
 8001092:	430b      	orrs	r3, r1
 8001094:	08f8      	lsrs	r0, r7, #3
 8001096:	e6c8      	b.n	8000e2a <__aeabi_dadd+0x25a>
 8001098:	2c00      	cmp	r4, #0
 800109a:	d000      	beq.n	800109e <__aeabi_dadd+0x4ce>
 800109c:	e081      	b.n	80011a2 <__aeabi_dadd+0x5d2>
 800109e:	4643      	mov	r3, r8
 80010a0:	430b      	orrs	r3, r1
 80010a2:	d115      	bne.n	80010d0 <__aeabi_dadd+0x500>
 80010a4:	2080      	movs	r0, #128	; 0x80
 80010a6:	2500      	movs	r5, #0
 80010a8:	0300      	lsls	r0, r0, #12
 80010aa:	e6e3      	b.n	8000e74 <__aeabi_dadd+0x2a4>
 80010ac:	1a5c      	subs	r4, r3, r1
 80010ae:	42a3      	cmp	r3, r4
 80010b0:	419b      	sbcs	r3, r3
 80010b2:	1bc7      	subs	r7, r0, r7
 80010b4:	425b      	negs	r3, r3
 80010b6:	2601      	movs	r6, #1
 80010b8:	1aff      	subs	r7, r7, r3
 80010ba:	e5da      	b.n	8000c72 <__aeabi_dadd+0xa2>
 80010bc:	0742      	lsls	r2, r0, #29
 80010be:	08db      	lsrs	r3, r3, #3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	08c0      	lsrs	r0, r0, #3
 80010c4:	e6d2      	b.n	8000e6c <__aeabi_dadd+0x29c>
 80010c6:	0742      	lsls	r2, r0, #29
 80010c8:	08db      	lsrs	r3, r3, #3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	08c0      	lsrs	r0, r0, #3
 80010ce:	e6ac      	b.n	8000e2a <__aeabi_dadd+0x25a>
 80010d0:	4643      	mov	r3, r8
 80010d2:	4642      	mov	r2, r8
 80010d4:	08c9      	lsrs	r1, r1, #3
 80010d6:	075b      	lsls	r3, r3, #29
 80010d8:	4655      	mov	r5, sl
 80010da:	430b      	orrs	r3, r1
 80010dc:	08d0      	lsrs	r0, r2, #3
 80010de:	e6c5      	b.n	8000e6c <__aeabi_dadd+0x29c>
 80010e0:	4643      	mov	r3, r8
 80010e2:	4642      	mov	r2, r8
 80010e4:	075b      	lsls	r3, r3, #29
 80010e6:	08c9      	lsrs	r1, r1, #3
 80010e8:	430b      	orrs	r3, r1
 80010ea:	08d0      	lsrs	r0, r2, #3
 80010ec:	e6be      	b.n	8000e6c <__aeabi_dadd+0x29c>
 80010ee:	4303      	orrs	r3, r0
 80010f0:	001c      	movs	r4, r3
 80010f2:	1e63      	subs	r3, r4, #1
 80010f4:	419c      	sbcs	r4, r3
 80010f6:	e6fc      	b.n	8000ef2 <__aeabi_dadd+0x322>
 80010f8:	0002      	movs	r2, r0
 80010fa:	3c20      	subs	r4, #32
 80010fc:	40e2      	lsrs	r2, r4
 80010fe:	0014      	movs	r4, r2
 8001100:	4662      	mov	r2, ip
 8001102:	2a20      	cmp	r2, #32
 8001104:	d003      	beq.n	800110e <__aeabi_dadd+0x53e>
 8001106:	2540      	movs	r5, #64	; 0x40
 8001108:	1aad      	subs	r5, r5, r2
 800110a:	40a8      	lsls	r0, r5
 800110c:	4303      	orrs	r3, r0
 800110e:	1e58      	subs	r0, r3, #1
 8001110:	4183      	sbcs	r3, r0
 8001112:	4323      	orrs	r3, r4
 8001114:	e775      	b.n	8001002 <__aeabi_dadd+0x432>
 8001116:	2a00      	cmp	r2, #0
 8001118:	d0e2      	beq.n	80010e0 <__aeabi_dadd+0x510>
 800111a:	003a      	movs	r2, r7
 800111c:	430a      	orrs	r2, r1
 800111e:	d0cd      	beq.n	80010bc <__aeabi_dadd+0x4ec>
 8001120:	0742      	lsls	r2, r0, #29
 8001122:	08db      	lsrs	r3, r3, #3
 8001124:	4313      	orrs	r3, r2
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	08c0      	lsrs	r0, r0, #3
 800112a:	0312      	lsls	r2, r2, #12
 800112c:	4210      	tst	r0, r2
 800112e:	d006      	beq.n	800113e <__aeabi_dadd+0x56e>
 8001130:	08fc      	lsrs	r4, r7, #3
 8001132:	4214      	tst	r4, r2
 8001134:	d103      	bne.n	800113e <__aeabi_dadd+0x56e>
 8001136:	0020      	movs	r0, r4
 8001138:	08cb      	lsrs	r3, r1, #3
 800113a:	077a      	lsls	r2, r7, #29
 800113c:	4313      	orrs	r3, r2
 800113e:	0f5a      	lsrs	r2, r3, #29
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	0752      	lsls	r2, r2, #29
 8001144:	08db      	lsrs	r3, r3, #3
 8001146:	4313      	orrs	r3, r2
 8001148:	e690      	b.n	8000e6c <__aeabi_dadd+0x29c>
 800114a:	4643      	mov	r3, r8
 800114c:	430b      	orrs	r3, r1
 800114e:	d100      	bne.n	8001152 <__aeabi_dadd+0x582>
 8001150:	e709      	b.n	8000f66 <__aeabi_dadd+0x396>
 8001152:	4643      	mov	r3, r8
 8001154:	4642      	mov	r2, r8
 8001156:	08c9      	lsrs	r1, r1, #3
 8001158:	075b      	lsls	r3, r3, #29
 800115a:	4655      	mov	r5, sl
 800115c:	430b      	orrs	r3, r1
 800115e:	08d0      	lsrs	r0, r2, #3
 8001160:	e666      	b.n	8000e30 <__aeabi_dadd+0x260>
 8001162:	1acc      	subs	r4, r1, r3
 8001164:	42a1      	cmp	r1, r4
 8001166:	4189      	sbcs	r1, r1
 8001168:	1a3f      	subs	r7, r7, r0
 800116a:	4249      	negs	r1, r1
 800116c:	4655      	mov	r5, sl
 800116e:	2601      	movs	r6, #1
 8001170:	1a7f      	subs	r7, r7, r1
 8001172:	e57e      	b.n	8000c72 <__aeabi_dadd+0xa2>
 8001174:	4642      	mov	r2, r8
 8001176:	1a5c      	subs	r4, r3, r1
 8001178:	1a87      	subs	r7, r0, r2
 800117a:	42a3      	cmp	r3, r4
 800117c:	4192      	sbcs	r2, r2
 800117e:	4252      	negs	r2, r2
 8001180:	1abf      	subs	r7, r7, r2
 8001182:	023a      	lsls	r2, r7, #8
 8001184:	d53d      	bpl.n	8001202 <__aeabi_dadd+0x632>
 8001186:	1acc      	subs	r4, r1, r3
 8001188:	42a1      	cmp	r1, r4
 800118a:	4189      	sbcs	r1, r1
 800118c:	4643      	mov	r3, r8
 800118e:	4249      	negs	r1, r1
 8001190:	1a1f      	subs	r7, r3, r0
 8001192:	4655      	mov	r5, sl
 8001194:	1a7f      	subs	r7, r7, r1
 8001196:	e595      	b.n	8000cc4 <__aeabi_dadd+0xf4>
 8001198:	077b      	lsls	r3, r7, #29
 800119a:	08c9      	lsrs	r1, r1, #3
 800119c:	430b      	orrs	r3, r1
 800119e:	08f8      	lsrs	r0, r7, #3
 80011a0:	e643      	b.n	8000e2a <__aeabi_dadd+0x25a>
 80011a2:	4644      	mov	r4, r8
 80011a4:	08db      	lsrs	r3, r3, #3
 80011a6:	430c      	orrs	r4, r1
 80011a8:	d130      	bne.n	800120c <__aeabi_dadd+0x63c>
 80011aa:	0742      	lsls	r2, r0, #29
 80011ac:	4313      	orrs	r3, r2
 80011ae:	08c0      	lsrs	r0, r0, #3
 80011b0:	e65c      	b.n	8000e6c <__aeabi_dadd+0x29c>
 80011b2:	077b      	lsls	r3, r7, #29
 80011b4:	08c9      	lsrs	r1, r1, #3
 80011b6:	430b      	orrs	r3, r1
 80011b8:	08f8      	lsrs	r0, r7, #3
 80011ba:	e639      	b.n	8000e30 <__aeabi_dadd+0x260>
 80011bc:	185c      	adds	r4, r3, r1
 80011be:	429c      	cmp	r4, r3
 80011c0:	419b      	sbcs	r3, r3
 80011c2:	4440      	add	r0, r8
 80011c4:	425b      	negs	r3, r3
 80011c6:	18c7      	adds	r7, r0, r3
 80011c8:	023b      	lsls	r3, r7, #8
 80011ca:	d400      	bmi.n	80011ce <__aeabi_dadd+0x5fe>
 80011cc:	e625      	b.n	8000e1a <__aeabi_dadd+0x24a>
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <__aeabi_dadd+0x674>)
 80011d0:	2601      	movs	r6, #1
 80011d2:	401f      	ands	r7, r3
 80011d4:	e621      	b.n	8000e1a <__aeabi_dadd+0x24a>
 80011d6:	0004      	movs	r4, r0
 80011d8:	3a20      	subs	r2, #32
 80011da:	40d4      	lsrs	r4, r2
 80011dc:	4662      	mov	r2, ip
 80011de:	2a20      	cmp	r2, #32
 80011e0:	d004      	beq.n	80011ec <__aeabi_dadd+0x61c>
 80011e2:	2240      	movs	r2, #64	; 0x40
 80011e4:	4666      	mov	r6, ip
 80011e6:	1b92      	subs	r2, r2, r6
 80011e8:	4090      	lsls	r0, r2
 80011ea:	4303      	orrs	r3, r0
 80011ec:	1e5a      	subs	r2, r3, #1
 80011ee:	4193      	sbcs	r3, r2
 80011f0:	431c      	orrs	r4, r3
 80011f2:	e67e      	b.n	8000ef2 <__aeabi_dadd+0x322>
 80011f4:	185c      	adds	r4, r3, r1
 80011f6:	428c      	cmp	r4, r1
 80011f8:	4189      	sbcs	r1, r1
 80011fa:	4440      	add	r0, r8
 80011fc:	4249      	negs	r1, r1
 80011fe:	1847      	adds	r7, r0, r1
 8001200:	e6dd      	b.n	8000fbe <__aeabi_dadd+0x3ee>
 8001202:	0023      	movs	r3, r4
 8001204:	433b      	orrs	r3, r7
 8001206:	d100      	bne.n	800120a <__aeabi_dadd+0x63a>
 8001208:	e6ad      	b.n	8000f66 <__aeabi_dadd+0x396>
 800120a:	e606      	b.n	8000e1a <__aeabi_dadd+0x24a>
 800120c:	0744      	lsls	r4, r0, #29
 800120e:	4323      	orrs	r3, r4
 8001210:	2480      	movs	r4, #128	; 0x80
 8001212:	08c0      	lsrs	r0, r0, #3
 8001214:	0324      	lsls	r4, r4, #12
 8001216:	4220      	tst	r0, r4
 8001218:	d008      	beq.n	800122c <__aeabi_dadd+0x65c>
 800121a:	4642      	mov	r2, r8
 800121c:	08d6      	lsrs	r6, r2, #3
 800121e:	4226      	tst	r6, r4
 8001220:	d104      	bne.n	800122c <__aeabi_dadd+0x65c>
 8001222:	4655      	mov	r5, sl
 8001224:	0030      	movs	r0, r6
 8001226:	08cb      	lsrs	r3, r1, #3
 8001228:	0751      	lsls	r1, r2, #29
 800122a:	430b      	orrs	r3, r1
 800122c:	0f5a      	lsrs	r2, r3, #29
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	08db      	lsrs	r3, r3, #3
 8001232:	0752      	lsls	r2, r2, #29
 8001234:	4313      	orrs	r3, r2
 8001236:	e619      	b.n	8000e6c <__aeabi_dadd+0x29c>
 8001238:	2300      	movs	r3, #0
 800123a:	4a01      	ldr	r2, [pc, #4]	; (8001240 <__aeabi_dadd+0x670>)
 800123c:	001f      	movs	r7, r3
 800123e:	e55e      	b.n	8000cfe <__aeabi_dadd+0x12e>
 8001240:	000007ff 	.word	0x000007ff
 8001244:	ff7fffff 	.word	0xff7fffff

08001248 <__aeabi_ddiv>:
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	4657      	mov	r7, sl
 800124c:	464e      	mov	r6, r9
 800124e:	4645      	mov	r5, r8
 8001250:	46de      	mov	lr, fp
 8001252:	b5e0      	push	{r5, r6, r7, lr}
 8001254:	4681      	mov	r9, r0
 8001256:	0005      	movs	r5, r0
 8001258:	030c      	lsls	r4, r1, #12
 800125a:	0048      	lsls	r0, r1, #1
 800125c:	4692      	mov	sl, r2
 800125e:	001f      	movs	r7, r3
 8001260:	b085      	sub	sp, #20
 8001262:	0b24      	lsrs	r4, r4, #12
 8001264:	0d40      	lsrs	r0, r0, #21
 8001266:	0fce      	lsrs	r6, r1, #31
 8001268:	2800      	cmp	r0, #0
 800126a:	d100      	bne.n	800126e <__aeabi_ddiv+0x26>
 800126c:	e156      	b.n	800151c <__aeabi_ddiv+0x2d4>
 800126e:	4bd4      	ldr	r3, [pc, #848]	; (80015c0 <__aeabi_ddiv+0x378>)
 8001270:	4298      	cmp	r0, r3
 8001272:	d100      	bne.n	8001276 <__aeabi_ddiv+0x2e>
 8001274:	e172      	b.n	800155c <__aeabi_ddiv+0x314>
 8001276:	0f6b      	lsrs	r3, r5, #29
 8001278:	00e4      	lsls	r4, r4, #3
 800127a:	431c      	orrs	r4, r3
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	041b      	lsls	r3, r3, #16
 8001280:	4323      	orrs	r3, r4
 8001282:	4698      	mov	r8, r3
 8001284:	4bcf      	ldr	r3, [pc, #828]	; (80015c4 <__aeabi_ddiv+0x37c>)
 8001286:	00ed      	lsls	r5, r5, #3
 8001288:	469b      	mov	fp, r3
 800128a:	2300      	movs	r3, #0
 800128c:	4699      	mov	r9, r3
 800128e:	4483      	add	fp, r0
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	033c      	lsls	r4, r7, #12
 8001294:	007b      	lsls	r3, r7, #1
 8001296:	4650      	mov	r0, sl
 8001298:	0b24      	lsrs	r4, r4, #12
 800129a:	0d5b      	lsrs	r3, r3, #21
 800129c:	0fff      	lsrs	r7, r7, #31
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d100      	bne.n	80012a4 <__aeabi_ddiv+0x5c>
 80012a2:	e11f      	b.n	80014e4 <__aeabi_ddiv+0x29c>
 80012a4:	4ac6      	ldr	r2, [pc, #792]	; (80015c0 <__aeabi_ddiv+0x378>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d100      	bne.n	80012ac <__aeabi_ddiv+0x64>
 80012aa:	e162      	b.n	8001572 <__aeabi_ddiv+0x32a>
 80012ac:	49c5      	ldr	r1, [pc, #788]	; (80015c4 <__aeabi_ddiv+0x37c>)
 80012ae:	0f42      	lsrs	r2, r0, #29
 80012b0:	468c      	mov	ip, r1
 80012b2:	00e4      	lsls	r4, r4, #3
 80012b4:	4659      	mov	r1, fp
 80012b6:	4314      	orrs	r4, r2
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	4463      	add	r3, ip
 80012bc:	0412      	lsls	r2, r2, #16
 80012be:	1acb      	subs	r3, r1, r3
 80012c0:	4314      	orrs	r4, r2
 80012c2:	469b      	mov	fp, r3
 80012c4:	00c2      	lsls	r2, r0, #3
 80012c6:	2000      	movs	r0, #0
 80012c8:	0033      	movs	r3, r6
 80012ca:	407b      	eors	r3, r7
 80012cc:	469a      	mov	sl, r3
 80012ce:	464b      	mov	r3, r9
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	d827      	bhi.n	8001324 <__aeabi_ddiv+0xdc>
 80012d4:	49bc      	ldr	r1, [pc, #752]	; (80015c8 <__aeabi_ddiv+0x380>)
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	58cb      	ldr	r3, [r1, r3]
 80012da:	469f      	mov	pc, r3
 80012dc:	46b2      	mov	sl, r6
 80012de:	9b00      	ldr	r3, [sp, #0]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d016      	beq.n	8001312 <__aeabi_ddiv+0xca>
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d100      	bne.n	80012ea <__aeabi_ddiv+0xa2>
 80012e8:	e28e      	b.n	8001808 <__aeabi_ddiv+0x5c0>
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d000      	beq.n	80012f0 <__aeabi_ddiv+0xa8>
 80012ee:	e0d9      	b.n	80014a4 <__aeabi_ddiv+0x25c>
 80012f0:	2300      	movs	r3, #0
 80012f2:	2400      	movs	r4, #0
 80012f4:	2500      	movs	r5, #0
 80012f6:	4652      	mov	r2, sl
 80012f8:	051b      	lsls	r3, r3, #20
 80012fa:	4323      	orrs	r3, r4
 80012fc:	07d2      	lsls	r2, r2, #31
 80012fe:	4313      	orrs	r3, r2
 8001300:	0028      	movs	r0, r5
 8001302:	0019      	movs	r1, r3
 8001304:	b005      	add	sp, #20
 8001306:	bcf0      	pop	{r4, r5, r6, r7}
 8001308:	46bb      	mov	fp, r7
 800130a:	46b2      	mov	sl, r6
 800130c:	46a9      	mov	r9, r5
 800130e:	46a0      	mov	r8, r4
 8001310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001312:	2400      	movs	r4, #0
 8001314:	2500      	movs	r5, #0
 8001316:	4baa      	ldr	r3, [pc, #680]	; (80015c0 <__aeabi_ddiv+0x378>)
 8001318:	e7ed      	b.n	80012f6 <__aeabi_ddiv+0xae>
 800131a:	46ba      	mov	sl, r7
 800131c:	46a0      	mov	r8, r4
 800131e:	0015      	movs	r5, r2
 8001320:	9000      	str	r0, [sp, #0]
 8001322:	e7dc      	b.n	80012de <__aeabi_ddiv+0x96>
 8001324:	4544      	cmp	r4, r8
 8001326:	d200      	bcs.n	800132a <__aeabi_ddiv+0xe2>
 8001328:	e1c7      	b.n	80016ba <__aeabi_ddiv+0x472>
 800132a:	d100      	bne.n	800132e <__aeabi_ddiv+0xe6>
 800132c:	e1c2      	b.n	80016b4 <__aeabi_ddiv+0x46c>
 800132e:	2301      	movs	r3, #1
 8001330:	425b      	negs	r3, r3
 8001332:	469c      	mov	ip, r3
 8001334:	002e      	movs	r6, r5
 8001336:	4640      	mov	r0, r8
 8001338:	2500      	movs	r5, #0
 800133a:	44e3      	add	fp, ip
 800133c:	0223      	lsls	r3, r4, #8
 800133e:	0e14      	lsrs	r4, r2, #24
 8001340:	431c      	orrs	r4, r3
 8001342:	0c1b      	lsrs	r3, r3, #16
 8001344:	4699      	mov	r9, r3
 8001346:	0423      	lsls	r3, r4, #16
 8001348:	0c1f      	lsrs	r7, r3, #16
 800134a:	0212      	lsls	r2, r2, #8
 800134c:	4649      	mov	r1, r9
 800134e:	9200      	str	r2, [sp, #0]
 8001350:	9701      	str	r7, [sp, #4]
 8001352:	f7fe ff7b 	bl	800024c <__aeabi_uidivmod>
 8001356:	0002      	movs	r2, r0
 8001358:	437a      	muls	r2, r7
 800135a:	040b      	lsls	r3, r1, #16
 800135c:	0c31      	lsrs	r1, r6, #16
 800135e:	4680      	mov	r8, r0
 8001360:	4319      	orrs	r1, r3
 8001362:	428a      	cmp	r2, r1
 8001364:	d907      	bls.n	8001376 <__aeabi_ddiv+0x12e>
 8001366:	2301      	movs	r3, #1
 8001368:	425b      	negs	r3, r3
 800136a:	469c      	mov	ip, r3
 800136c:	1909      	adds	r1, r1, r4
 800136e:	44e0      	add	r8, ip
 8001370:	428c      	cmp	r4, r1
 8001372:	d800      	bhi.n	8001376 <__aeabi_ddiv+0x12e>
 8001374:	e207      	b.n	8001786 <__aeabi_ddiv+0x53e>
 8001376:	1a88      	subs	r0, r1, r2
 8001378:	4649      	mov	r1, r9
 800137a:	f7fe ff67 	bl	800024c <__aeabi_uidivmod>
 800137e:	0409      	lsls	r1, r1, #16
 8001380:	468c      	mov	ip, r1
 8001382:	0431      	lsls	r1, r6, #16
 8001384:	4666      	mov	r6, ip
 8001386:	9a01      	ldr	r2, [sp, #4]
 8001388:	0c09      	lsrs	r1, r1, #16
 800138a:	4342      	muls	r2, r0
 800138c:	0003      	movs	r3, r0
 800138e:	4331      	orrs	r1, r6
 8001390:	428a      	cmp	r2, r1
 8001392:	d904      	bls.n	800139e <__aeabi_ddiv+0x156>
 8001394:	1909      	adds	r1, r1, r4
 8001396:	3b01      	subs	r3, #1
 8001398:	428c      	cmp	r4, r1
 800139a:	d800      	bhi.n	800139e <__aeabi_ddiv+0x156>
 800139c:	e1ed      	b.n	800177a <__aeabi_ddiv+0x532>
 800139e:	1a88      	subs	r0, r1, r2
 80013a0:	4642      	mov	r2, r8
 80013a2:	0412      	lsls	r2, r2, #16
 80013a4:	431a      	orrs	r2, r3
 80013a6:	4690      	mov	r8, r2
 80013a8:	4641      	mov	r1, r8
 80013aa:	9b00      	ldr	r3, [sp, #0]
 80013ac:	040e      	lsls	r6, r1, #16
 80013ae:	0c1b      	lsrs	r3, r3, #16
 80013b0:	001f      	movs	r7, r3
 80013b2:	9302      	str	r3, [sp, #8]
 80013b4:	9b00      	ldr	r3, [sp, #0]
 80013b6:	0c36      	lsrs	r6, r6, #16
 80013b8:	041b      	lsls	r3, r3, #16
 80013ba:	0c19      	lsrs	r1, r3, #16
 80013bc:	000b      	movs	r3, r1
 80013be:	4373      	muls	r3, r6
 80013c0:	0c12      	lsrs	r2, r2, #16
 80013c2:	437e      	muls	r6, r7
 80013c4:	9103      	str	r1, [sp, #12]
 80013c6:	4351      	muls	r1, r2
 80013c8:	437a      	muls	r2, r7
 80013ca:	0c1f      	lsrs	r7, r3, #16
 80013cc:	46bc      	mov	ip, r7
 80013ce:	1876      	adds	r6, r6, r1
 80013d0:	4466      	add	r6, ip
 80013d2:	42b1      	cmp	r1, r6
 80013d4:	d903      	bls.n	80013de <__aeabi_ddiv+0x196>
 80013d6:	2180      	movs	r1, #128	; 0x80
 80013d8:	0249      	lsls	r1, r1, #9
 80013da:	468c      	mov	ip, r1
 80013dc:	4462      	add	r2, ip
 80013de:	0c31      	lsrs	r1, r6, #16
 80013e0:	188a      	adds	r2, r1, r2
 80013e2:	0431      	lsls	r1, r6, #16
 80013e4:	041e      	lsls	r6, r3, #16
 80013e6:	0c36      	lsrs	r6, r6, #16
 80013e8:	198e      	adds	r6, r1, r6
 80013ea:	4290      	cmp	r0, r2
 80013ec:	d302      	bcc.n	80013f4 <__aeabi_ddiv+0x1ac>
 80013ee:	d112      	bne.n	8001416 <__aeabi_ddiv+0x1ce>
 80013f0:	42b5      	cmp	r5, r6
 80013f2:	d210      	bcs.n	8001416 <__aeabi_ddiv+0x1ce>
 80013f4:	4643      	mov	r3, r8
 80013f6:	1e59      	subs	r1, r3, #1
 80013f8:	9b00      	ldr	r3, [sp, #0]
 80013fa:	469c      	mov	ip, r3
 80013fc:	4465      	add	r5, ip
 80013fe:	001f      	movs	r7, r3
 8001400:	429d      	cmp	r5, r3
 8001402:	419b      	sbcs	r3, r3
 8001404:	425b      	negs	r3, r3
 8001406:	191b      	adds	r3, r3, r4
 8001408:	18c0      	adds	r0, r0, r3
 800140a:	4284      	cmp	r4, r0
 800140c:	d200      	bcs.n	8001410 <__aeabi_ddiv+0x1c8>
 800140e:	e1a0      	b.n	8001752 <__aeabi_ddiv+0x50a>
 8001410:	d100      	bne.n	8001414 <__aeabi_ddiv+0x1cc>
 8001412:	e19b      	b.n	800174c <__aeabi_ddiv+0x504>
 8001414:	4688      	mov	r8, r1
 8001416:	1bae      	subs	r6, r5, r6
 8001418:	42b5      	cmp	r5, r6
 800141a:	41ad      	sbcs	r5, r5
 800141c:	1a80      	subs	r0, r0, r2
 800141e:	426d      	negs	r5, r5
 8001420:	1b40      	subs	r0, r0, r5
 8001422:	4284      	cmp	r4, r0
 8001424:	d100      	bne.n	8001428 <__aeabi_ddiv+0x1e0>
 8001426:	e1d5      	b.n	80017d4 <__aeabi_ddiv+0x58c>
 8001428:	4649      	mov	r1, r9
 800142a:	f7fe ff0f 	bl	800024c <__aeabi_uidivmod>
 800142e:	9a01      	ldr	r2, [sp, #4]
 8001430:	040b      	lsls	r3, r1, #16
 8001432:	4342      	muls	r2, r0
 8001434:	0c31      	lsrs	r1, r6, #16
 8001436:	0005      	movs	r5, r0
 8001438:	4319      	orrs	r1, r3
 800143a:	428a      	cmp	r2, r1
 800143c:	d900      	bls.n	8001440 <__aeabi_ddiv+0x1f8>
 800143e:	e16c      	b.n	800171a <__aeabi_ddiv+0x4d2>
 8001440:	1a88      	subs	r0, r1, r2
 8001442:	4649      	mov	r1, r9
 8001444:	f7fe ff02 	bl	800024c <__aeabi_uidivmod>
 8001448:	9a01      	ldr	r2, [sp, #4]
 800144a:	0436      	lsls	r6, r6, #16
 800144c:	4342      	muls	r2, r0
 800144e:	0409      	lsls	r1, r1, #16
 8001450:	0c36      	lsrs	r6, r6, #16
 8001452:	0003      	movs	r3, r0
 8001454:	430e      	orrs	r6, r1
 8001456:	42b2      	cmp	r2, r6
 8001458:	d900      	bls.n	800145c <__aeabi_ddiv+0x214>
 800145a:	e153      	b.n	8001704 <__aeabi_ddiv+0x4bc>
 800145c:	9803      	ldr	r0, [sp, #12]
 800145e:	1ab6      	subs	r6, r6, r2
 8001460:	0002      	movs	r2, r0
 8001462:	042d      	lsls	r5, r5, #16
 8001464:	431d      	orrs	r5, r3
 8001466:	9f02      	ldr	r7, [sp, #8]
 8001468:	042b      	lsls	r3, r5, #16
 800146a:	0c1b      	lsrs	r3, r3, #16
 800146c:	435a      	muls	r2, r3
 800146e:	437b      	muls	r3, r7
 8001470:	469c      	mov	ip, r3
 8001472:	0c29      	lsrs	r1, r5, #16
 8001474:	4348      	muls	r0, r1
 8001476:	0c13      	lsrs	r3, r2, #16
 8001478:	4484      	add	ip, r0
 800147a:	4463      	add	r3, ip
 800147c:	4379      	muls	r1, r7
 800147e:	4298      	cmp	r0, r3
 8001480:	d903      	bls.n	800148a <__aeabi_ddiv+0x242>
 8001482:	2080      	movs	r0, #128	; 0x80
 8001484:	0240      	lsls	r0, r0, #9
 8001486:	4684      	mov	ip, r0
 8001488:	4461      	add	r1, ip
 800148a:	0c18      	lsrs	r0, r3, #16
 800148c:	0412      	lsls	r2, r2, #16
 800148e:	041b      	lsls	r3, r3, #16
 8001490:	0c12      	lsrs	r2, r2, #16
 8001492:	1841      	adds	r1, r0, r1
 8001494:	189b      	adds	r3, r3, r2
 8001496:	428e      	cmp	r6, r1
 8001498:	d200      	bcs.n	800149c <__aeabi_ddiv+0x254>
 800149a:	e0ff      	b.n	800169c <__aeabi_ddiv+0x454>
 800149c:	d100      	bne.n	80014a0 <__aeabi_ddiv+0x258>
 800149e:	e0fa      	b.n	8001696 <__aeabi_ddiv+0x44e>
 80014a0:	2301      	movs	r3, #1
 80014a2:	431d      	orrs	r5, r3
 80014a4:	4a49      	ldr	r2, [pc, #292]	; (80015cc <__aeabi_ddiv+0x384>)
 80014a6:	445a      	add	r2, fp
 80014a8:	2a00      	cmp	r2, #0
 80014aa:	dc00      	bgt.n	80014ae <__aeabi_ddiv+0x266>
 80014ac:	e0aa      	b.n	8001604 <__aeabi_ddiv+0x3bc>
 80014ae:	076b      	lsls	r3, r5, #29
 80014b0:	d000      	beq.n	80014b4 <__aeabi_ddiv+0x26c>
 80014b2:	e13d      	b.n	8001730 <__aeabi_ddiv+0x4e8>
 80014b4:	08ed      	lsrs	r5, r5, #3
 80014b6:	4643      	mov	r3, r8
 80014b8:	01db      	lsls	r3, r3, #7
 80014ba:	d506      	bpl.n	80014ca <__aeabi_ddiv+0x282>
 80014bc:	4642      	mov	r2, r8
 80014be:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <__aeabi_ddiv+0x388>)
 80014c0:	401a      	ands	r2, r3
 80014c2:	4690      	mov	r8, r2
 80014c4:	2280      	movs	r2, #128	; 0x80
 80014c6:	00d2      	lsls	r2, r2, #3
 80014c8:	445a      	add	r2, fp
 80014ca:	4b42      	ldr	r3, [pc, #264]	; (80015d4 <__aeabi_ddiv+0x38c>)
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dd00      	ble.n	80014d2 <__aeabi_ddiv+0x28a>
 80014d0:	e71f      	b.n	8001312 <__aeabi_ddiv+0xca>
 80014d2:	4643      	mov	r3, r8
 80014d4:	075b      	lsls	r3, r3, #29
 80014d6:	431d      	orrs	r5, r3
 80014d8:	4643      	mov	r3, r8
 80014da:	0552      	lsls	r2, r2, #21
 80014dc:	025c      	lsls	r4, r3, #9
 80014de:	0b24      	lsrs	r4, r4, #12
 80014e0:	0d53      	lsrs	r3, r2, #21
 80014e2:	e708      	b.n	80012f6 <__aeabi_ddiv+0xae>
 80014e4:	4652      	mov	r2, sl
 80014e6:	4322      	orrs	r2, r4
 80014e8:	d100      	bne.n	80014ec <__aeabi_ddiv+0x2a4>
 80014ea:	e07b      	b.n	80015e4 <__aeabi_ddiv+0x39c>
 80014ec:	2c00      	cmp	r4, #0
 80014ee:	d100      	bne.n	80014f2 <__aeabi_ddiv+0x2aa>
 80014f0:	e0fa      	b.n	80016e8 <__aeabi_ddiv+0x4a0>
 80014f2:	0020      	movs	r0, r4
 80014f4:	f001 fa22 	bl	800293c <__clzsi2>
 80014f8:	0002      	movs	r2, r0
 80014fa:	3a0b      	subs	r2, #11
 80014fc:	231d      	movs	r3, #29
 80014fe:	0001      	movs	r1, r0
 8001500:	1a9b      	subs	r3, r3, r2
 8001502:	4652      	mov	r2, sl
 8001504:	3908      	subs	r1, #8
 8001506:	40da      	lsrs	r2, r3
 8001508:	408c      	lsls	r4, r1
 800150a:	4314      	orrs	r4, r2
 800150c:	4652      	mov	r2, sl
 800150e:	408a      	lsls	r2, r1
 8001510:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <__aeabi_ddiv+0x390>)
 8001512:	4458      	add	r0, fp
 8001514:	469b      	mov	fp, r3
 8001516:	4483      	add	fp, r0
 8001518:	2000      	movs	r0, #0
 800151a:	e6d5      	b.n	80012c8 <__aeabi_ddiv+0x80>
 800151c:	464b      	mov	r3, r9
 800151e:	4323      	orrs	r3, r4
 8001520:	4698      	mov	r8, r3
 8001522:	d044      	beq.n	80015ae <__aeabi_ddiv+0x366>
 8001524:	2c00      	cmp	r4, #0
 8001526:	d100      	bne.n	800152a <__aeabi_ddiv+0x2e2>
 8001528:	e0ce      	b.n	80016c8 <__aeabi_ddiv+0x480>
 800152a:	0020      	movs	r0, r4
 800152c:	f001 fa06 	bl	800293c <__clzsi2>
 8001530:	0001      	movs	r1, r0
 8001532:	0002      	movs	r2, r0
 8001534:	390b      	subs	r1, #11
 8001536:	231d      	movs	r3, #29
 8001538:	1a5b      	subs	r3, r3, r1
 800153a:	4649      	mov	r1, r9
 800153c:	0010      	movs	r0, r2
 800153e:	40d9      	lsrs	r1, r3
 8001540:	3808      	subs	r0, #8
 8001542:	4084      	lsls	r4, r0
 8001544:	000b      	movs	r3, r1
 8001546:	464d      	mov	r5, r9
 8001548:	4323      	orrs	r3, r4
 800154a:	4698      	mov	r8, r3
 800154c:	4085      	lsls	r5, r0
 800154e:	4823      	ldr	r0, [pc, #140]	; (80015dc <__aeabi_ddiv+0x394>)
 8001550:	1a83      	subs	r3, r0, r2
 8001552:	469b      	mov	fp, r3
 8001554:	2300      	movs	r3, #0
 8001556:	4699      	mov	r9, r3
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	e69a      	b.n	8001292 <__aeabi_ddiv+0x4a>
 800155c:	464b      	mov	r3, r9
 800155e:	4323      	orrs	r3, r4
 8001560:	4698      	mov	r8, r3
 8001562:	d11d      	bne.n	80015a0 <__aeabi_ddiv+0x358>
 8001564:	2308      	movs	r3, #8
 8001566:	4699      	mov	r9, r3
 8001568:	3b06      	subs	r3, #6
 800156a:	2500      	movs	r5, #0
 800156c:	4683      	mov	fp, r0
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	e68f      	b.n	8001292 <__aeabi_ddiv+0x4a>
 8001572:	4652      	mov	r2, sl
 8001574:	4322      	orrs	r2, r4
 8001576:	d109      	bne.n	800158c <__aeabi_ddiv+0x344>
 8001578:	2302      	movs	r3, #2
 800157a:	4649      	mov	r1, r9
 800157c:	4319      	orrs	r1, r3
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <__aeabi_ddiv+0x398>)
 8001580:	4689      	mov	r9, r1
 8001582:	469c      	mov	ip, r3
 8001584:	2400      	movs	r4, #0
 8001586:	2002      	movs	r0, #2
 8001588:	44e3      	add	fp, ip
 800158a:	e69d      	b.n	80012c8 <__aeabi_ddiv+0x80>
 800158c:	2303      	movs	r3, #3
 800158e:	464a      	mov	r2, r9
 8001590:	431a      	orrs	r2, r3
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <__aeabi_ddiv+0x398>)
 8001594:	4691      	mov	r9, r2
 8001596:	469c      	mov	ip, r3
 8001598:	4652      	mov	r2, sl
 800159a:	2003      	movs	r0, #3
 800159c:	44e3      	add	fp, ip
 800159e:	e693      	b.n	80012c8 <__aeabi_ddiv+0x80>
 80015a0:	230c      	movs	r3, #12
 80015a2:	4699      	mov	r9, r3
 80015a4:	3b09      	subs	r3, #9
 80015a6:	46a0      	mov	r8, r4
 80015a8:	4683      	mov	fp, r0
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	e671      	b.n	8001292 <__aeabi_ddiv+0x4a>
 80015ae:	2304      	movs	r3, #4
 80015b0:	4699      	mov	r9, r3
 80015b2:	2300      	movs	r3, #0
 80015b4:	469b      	mov	fp, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	2500      	movs	r5, #0
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	e669      	b.n	8001292 <__aeabi_ddiv+0x4a>
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	000007ff 	.word	0x000007ff
 80015c4:	fffffc01 	.word	0xfffffc01
 80015c8:	0800b0d0 	.word	0x0800b0d0
 80015cc:	000003ff 	.word	0x000003ff
 80015d0:	feffffff 	.word	0xfeffffff
 80015d4:	000007fe 	.word	0x000007fe
 80015d8:	000003f3 	.word	0x000003f3
 80015dc:	fffffc0d 	.word	0xfffffc0d
 80015e0:	fffff801 	.word	0xfffff801
 80015e4:	4649      	mov	r1, r9
 80015e6:	2301      	movs	r3, #1
 80015e8:	4319      	orrs	r1, r3
 80015ea:	4689      	mov	r9, r1
 80015ec:	2400      	movs	r4, #0
 80015ee:	2001      	movs	r0, #1
 80015f0:	e66a      	b.n	80012c8 <__aeabi_ddiv+0x80>
 80015f2:	2300      	movs	r3, #0
 80015f4:	2480      	movs	r4, #128	; 0x80
 80015f6:	469a      	mov	sl, r3
 80015f8:	2500      	movs	r5, #0
 80015fa:	4b8a      	ldr	r3, [pc, #552]	; (8001824 <__aeabi_ddiv+0x5dc>)
 80015fc:	0324      	lsls	r4, r4, #12
 80015fe:	e67a      	b.n	80012f6 <__aeabi_ddiv+0xae>
 8001600:	2501      	movs	r5, #1
 8001602:	426d      	negs	r5, r5
 8001604:	2301      	movs	r3, #1
 8001606:	1a9b      	subs	r3, r3, r2
 8001608:	2b38      	cmp	r3, #56	; 0x38
 800160a:	dd00      	ble.n	800160e <__aeabi_ddiv+0x3c6>
 800160c:	e670      	b.n	80012f0 <__aeabi_ddiv+0xa8>
 800160e:	2b1f      	cmp	r3, #31
 8001610:	dc00      	bgt.n	8001614 <__aeabi_ddiv+0x3cc>
 8001612:	e0bf      	b.n	8001794 <__aeabi_ddiv+0x54c>
 8001614:	211f      	movs	r1, #31
 8001616:	4249      	negs	r1, r1
 8001618:	1a8a      	subs	r2, r1, r2
 800161a:	4641      	mov	r1, r8
 800161c:	40d1      	lsrs	r1, r2
 800161e:	000a      	movs	r2, r1
 8001620:	2b20      	cmp	r3, #32
 8001622:	d004      	beq.n	800162e <__aeabi_ddiv+0x3e6>
 8001624:	4641      	mov	r1, r8
 8001626:	4b80      	ldr	r3, [pc, #512]	; (8001828 <__aeabi_ddiv+0x5e0>)
 8001628:	445b      	add	r3, fp
 800162a:	4099      	lsls	r1, r3
 800162c:	430d      	orrs	r5, r1
 800162e:	1e6b      	subs	r3, r5, #1
 8001630:	419d      	sbcs	r5, r3
 8001632:	2307      	movs	r3, #7
 8001634:	432a      	orrs	r2, r5
 8001636:	001d      	movs	r5, r3
 8001638:	2400      	movs	r4, #0
 800163a:	4015      	ands	r5, r2
 800163c:	4213      	tst	r3, r2
 800163e:	d100      	bne.n	8001642 <__aeabi_ddiv+0x3fa>
 8001640:	e0d4      	b.n	80017ec <__aeabi_ddiv+0x5a4>
 8001642:	210f      	movs	r1, #15
 8001644:	2300      	movs	r3, #0
 8001646:	4011      	ands	r1, r2
 8001648:	2904      	cmp	r1, #4
 800164a:	d100      	bne.n	800164e <__aeabi_ddiv+0x406>
 800164c:	e0cb      	b.n	80017e6 <__aeabi_ddiv+0x59e>
 800164e:	1d11      	adds	r1, r2, #4
 8001650:	4291      	cmp	r1, r2
 8001652:	4192      	sbcs	r2, r2
 8001654:	4252      	negs	r2, r2
 8001656:	189b      	adds	r3, r3, r2
 8001658:	000a      	movs	r2, r1
 800165a:	0219      	lsls	r1, r3, #8
 800165c:	d400      	bmi.n	8001660 <__aeabi_ddiv+0x418>
 800165e:	e0c2      	b.n	80017e6 <__aeabi_ddiv+0x59e>
 8001660:	2301      	movs	r3, #1
 8001662:	2400      	movs	r4, #0
 8001664:	2500      	movs	r5, #0
 8001666:	e646      	b.n	80012f6 <__aeabi_ddiv+0xae>
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	4641      	mov	r1, r8
 800166c:	031b      	lsls	r3, r3, #12
 800166e:	4219      	tst	r1, r3
 8001670:	d008      	beq.n	8001684 <__aeabi_ddiv+0x43c>
 8001672:	421c      	tst	r4, r3
 8001674:	d106      	bne.n	8001684 <__aeabi_ddiv+0x43c>
 8001676:	431c      	orrs	r4, r3
 8001678:	0324      	lsls	r4, r4, #12
 800167a:	46ba      	mov	sl, r7
 800167c:	0015      	movs	r5, r2
 800167e:	4b69      	ldr	r3, [pc, #420]	; (8001824 <__aeabi_ddiv+0x5dc>)
 8001680:	0b24      	lsrs	r4, r4, #12
 8001682:	e638      	b.n	80012f6 <__aeabi_ddiv+0xae>
 8001684:	2480      	movs	r4, #128	; 0x80
 8001686:	4643      	mov	r3, r8
 8001688:	0324      	lsls	r4, r4, #12
 800168a:	431c      	orrs	r4, r3
 800168c:	0324      	lsls	r4, r4, #12
 800168e:	46b2      	mov	sl, r6
 8001690:	4b64      	ldr	r3, [pc, #400]	; (8001824 <__aeabi_ddiv+0x5dc>)
 8001692:	0b24      	lsrs	r4, r4, #12
 8001694:	e62f      	b.n	80012f6 <__aeabi_ddiv+0xae>
 8001696:	2b00      	cmp	r3, #0
 8001698:	d100      	bne.n	800169c <__aeabi_ddiv+0x454>
 800169a:	e703      	b.n	80014a4 <__aeabi_ddiv+0x25c>
 800169c:	19a6      	adds	r6, r4, r6
 800169e:	1e68      	subs	r0, r5, #1
 80016a0:	42a6      	cmp	r6, r4
 80016a2:	d200      	bcs.n	80016a6 <__aeabi_ddiv+0x45e>
 80016a4:	e08d      	b.n	80017c2 <__aeabi_ddiv+0x57a>
 80016a6:	428e      	cmp	r6, r1
 80016a8:	d200      	bcs.n	80016ac <__aeabi_ddiv+0x464>
 80016aa:	e0a3      	b.n	80017f4 <__aeabi_ddiv+0x5ac>
 80016ac:	d100      	bne.n	80016b0 <__aeabi_ddiv+0x468>
 80016ae:	e0b3      	b.n	8001818 <__aeabi_ddiv+0x5d0>
 80016b0:	0005      	movs	r5, r0
 80016b2:	e6f5      	b.n	80014a0 <__aeabi_ddiv+0x258>
 80016b4:	42aa      	cmp	r2, r5
 80016b6:	d900      	bls.n	80016ba <__aeabi_ddiv+0x472>
 80016b8:	e639      	b.n	800132e <__aeabi_ddiv+0xe6>
 80016ba:	4643      	mov	r3, r8
 80016bc:	07de      	lsls	r6, r3, #31
 80016be:	0858      	lsrs	r0, r3, #1
 80016c0:	086b      	lsrs	r3, r5, #1
 80016c2:	431e      	orrs	r6, r3
 80016c4:	07ed      	lsls	r5, r5, #31
 80016c6:	e639      	b.n	800133c <__aeabi_ddiv+0xf4>
 80016c8:	4648      	mov	r0, r9
 80016ca:	f001 f937 	bl	800293c <__clzsi2>
 80016ce:	0001      	movs	r1, r0
 80016d0:	0002      	movs	r2, r0
 80016d2:	3115      	adds	r1, #21
 80016d4:	3220      	adds	r2, #32
 80016d6:	291c      	cmp	r1, #28
 80016d8:	dc00      	bgt.n	80016dc <__aeabi_ddiv+0x494>
 80016da:	e72c      	b.n	8001536 <__aeabi_ddiv+0x2ee>
 80016dc:	464b      	mov	r3, r9
 80016de:	3808      	subs	r0, #8
 80016e0:	4083      	lsls	r3, r0
 80016e2:	2500      	movs	r5, #0
 80016e4:	4698      	mov	r8, r3
 80016e6:	e732      	b.n	800154e <__aeabi_ddiv+0x306>
 80016e8:	f001 f928 	bl	800293c <__clzsi2>
 80016ec:	0003      	movs	r3, r0
 80016ee:	001a      	movs	r2, r3
 80016f0:	3215      	adds	r2, #21
 80016f2:	3020      	adds	r0, #32
 80016f4:	2a1c      	cmp	r2, #28
 80016f6:	dc00      	bgt.n	80016fa <__aeabi_ddiv+0x4b2>
 80016f8:	e700      	b.n	80014fc <__aeabi_ddiv+0x2b4>
 80016fa:	4654      	mov	r4, sl
 80016fc:	3b08      	subs	r3, #8
 80016fe:	2200      	movs	r2, #0
 8001700:	409c      	lsls	r4, r3
 8001702:	e705      	b.n	8001510 <__aeabi_ddiv+0x2c8>
 8001704:	1936      	adds	r6, r6, r4
 8001706:	3b01      	subs	r3, #1
 8001708:	42b4      	cmp	r4, r6
 800170a:	d900      	bls.n	800170e <__aeabi_ddiv+0x4c6>
 800170c:	e6a6      	b.n	800145c <__aeabi_ddiv+0x214>
 800170e:	42b2      	cmp	r2, r6
 8001710:	d800      	bhi.n	8001714 <__aeabi_ddiv+0x4cc>
 8001712:	e6a3      	b.n	800145c <__aeabi_ddiv+0x214>
 8001714:	1e83      	subs	r3, r0, #2
 8001716:	1936      	adds	r6, r6, r4
 8001718:	e6a0      	b.n	800145c <__aeabi_ddiv+0x214>
 800171a:	1909      	adds	r1, r1, r4
 800171c:	3d01      	subs	r5, #1
 800171e:	428c      	cmp	r4, r1
 8001720:	d900      	bls.n	8001724 <__aeabi_ddiv+0x4dc>
 8001722:	e68d      	b.n	8001440 <__aeabi_ddiv+0x1f8>
 8001724:	428a      	cmp	r2, r1
 8001726:	d800      	bhi.n	800172a <__aeabi_ddiv+0x4e2>
 8001728:	e68a      	b.n	8001440 <__aeabi_ddiv+0x1f8>
 800172a:	1e85      	subs	r5, r0, #2
 800172c:	1909      	adds	r1, r1, r4
 800172e:	e687      	b.n	8001440 <__aeabi_ddiv+0x1f8>
 8001730:	230f      	movs	r3, #15
 8001732:	402b      	ands	r3, r5
 8001734:	2b04      	cmp	r3, #4
 8001736:	d100      	bne.n	800173a <__aeabi_ddiv+0x4f2>
 8001738:	e6bc      	b.n	80014b4 <__aeabi_ddiv+0x26c>
 800173a:	2305      	movs	r3, #5
 800173c:	425b      	negs	r3, r3
 800173e:	42ab      	cmp	r3, r5
 8001740:	419b      	sbcs	r3, r3
 8001742:	3504      	adds	r5, #4
 8001744:	425b      	negs	r3, r3
 8001746:	08ed      	lsrs	r5, r5, #3
 8001748:	4498      	add	r8, r3
 800174a:	e6b4      	b.n	80014b6 <__aeabi_ddiv+0x26e>
 800174c:	42af      	cmp	r7, r5
 800174e:	d900      	bls.n	8001752 <__aeabi_ddiv+0x50a>
 8001750:	e660      	b.n	8001414 <__aeabi_ddiv+0x1cc>
 8001752:	4282      	cmp	r2, r0
 8001754:	d804      	bhi.n	8001760 <__aeabi_ddiv+0x518>
 8001756:	d000      	beq.n	800175a <__aeabi_ddiv+0x512>
 8001758:	e65c      	b.n	8001414 <__aeabi_ddiv+0x1cc>
 800175a:	42ae      	cmp	r6, r5
 800175c:	d800      	bhi.n	8001760 <__aeabi_ddiv+0x518>
 800175e:	e659      	b.n	8001414 <__aeabi_ddiv+0x1cc>
 8001760:	2302      	movs	r3, #2
 8001762:	425b      	negs	r3, r3
 8001764:	469c      	mov	ip, r3
 8001766:	9b00      	ldr	r3, [sp, #0]
 8001768:	44e0      	add	r8, ip
 800176a:	469c      	mov	ip, r3
 800176c:	4465      	add	r5, ip
 800176e:	429d      	cmp	r5, r3
 8001770:	419b      	sbcs	r3, r3
 8001772:	425b      	negs	r3, r3
 8001774:	191b      	adds	r3, r3, r4
 8001776:	18c0      	adds	r0, r0, r3
 8001778:	e64d      	b.n	8001416 <__aeabi_ddiv+0x1ce>
 800177a:	428a      	cmp	r2, r1
 800177c:	d800      	bhi.n	8001780 <__aeabi_ddiv+0x538>
 800177e:	e60e      	b.n	800139e <__aeabi_ddiv+0x156>
 8001780:	1e83      	subs	r3, r0, #2
 8001782:	1909      	adds	r1, r1, r4
 8001784:	e60b      	b.n	800139e <__aeabi_ddiv+0x156>
 8001786:	428a      	cmp	r2, r1
 8001788:	d800      	bhi.n	800178c <__aeabi_ddiv+0x544>
 800178a:	e5f4      	b.n	8001376 <__aeabi_ddiv+0x12e>
 800178c:	1e83      	subs	r3, r0, #2
 800178e:	4698      	mov	r8, r3
 8001790:	1909      	adds	r1, r1, r4
 8001792:	e5f0      	b.n	8001376 <__aeabi_ddiv+0x12e>
 8001794:	4925      	ldr	r1, [pc, #148]	; (800182c <__aeabi_ddiv+0x5e4>)
 8001796:	0028      	movs	r0, r5
 8001798:	4459      	add	r1, fp
 800179a:	408d      	lsls	r5, r1
 800179c:	4642      	mov	r2, r8
 800179e:	408a      	lsls	r2, r1
 80017a0:	1e69      	subs	r1, r5, #1
 80017a2:	418d      	sbcs	r5, r1
 80017a4:	4641      	mov	r1, r8
 80017a6:	40d8      	lsrs	r0, r3
 80017a8:	40d9      	lsrs	r1, r3
 80017aa:	4302      	orrs	r2, r0
 80017ac:	432a      	orrs	r2, r5
 80017ae:	000b      	movs	r3, r1
 80017b0:	0751      	lsls	r1, r2, #29
 80017b2:	d100      	bne.n	80017b6 <__aeabi_ddiv+0x56e>
 80017b4:	e751      	b.n	800165a <__aeabi_ddiv+0x412>
 80017b6:	210f      	movs	r1, #15
 80017b8:	4011      	ands	r1, r2
 80017ba:	2904      	cmp	r1, #4
 80017bc:	d000      	beq.n	80017c0 <__aeabi_ddiv+0x578>
 80017be:	e746      	b.n	800164e <__aeabi_ddiv+0x406>
 80017c0:	e74b      	b.n	800165a <__aeabi_ddiv+0x412>
 80017c2:	0005      	movs	r5, r0
 80017c4:	428e      	cmp	r6, r1
 80017c6:	d000      	beq.n	80017ca <__aeabi_ddiv+0x582>
 80017c8:	e66a      	b.n	80014a0 <__aeabi_ddiv+0x258>
 80017ca:	9a00      	ldr	r2, [sp, #0]
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d000      	beq.n	80017d2 <__aeabi_ddiv+0x58a>
 80017d0:	e666      	b.n	80014a0 <__aeabi_ddiv+0x258>
 80017d2:	e667      	b.n	80014a4 <__aeabi_ddiv+0x25c>
 80017d4:	4a16      	ldr	r2, [pc, #88]	; (8001830 <__aeabi_ddiv+0x5e8>)
 80017d6:	445a      	add	r2, fp
 80017d8:	2a00      	cmp	r2, #0
 80017da:	dc00      	bgt.n	80017de <__aeabi_ddiv+0x596>
 80017dc:	e710      	b.n	8001600 <__aeabi_ddiv+0x3b8>
 80017de:	2301      	movs	r3, #1
 80017e0:	2500      	movs	r5, #0
 80017e2:	4498      	add	r8, r3
 80017e4:	e667      	b.n	80014b6 <__aeabi_ddiv+0x26e>
 80017e6:	075d      	lsls	r5, r3, #29
 80017e8:	025b      	lsls	r3, r3, #9
 80017ea:	0b1c      	lsrs	r4, r3, #12
 80017ec:	08d2      	lsrs	r2, r2, #3
 80017ee:	2300      	movs	r3, #0
 80017f0:	4315      	orrs	r5, r2
 80017f2:	e580      	b.n	80012f6 <__aeabi_ddiv+0xae>
 80017f4:	9800      	ldr	r0, [sp, #0]
 80017f6:	3d02      	subs	r5, #2
 80017f8:	0042      	lsls	r2, r0, #1
 80017fa:	4282      	cmp	r2, r0
 80017fc:	41bf      	sbcs	r7, r7
 80017fe:	427f      	negs	r7, r7
 8001800:	193c      	adds	r4, r7, r4
 8001802:	1936      	adds	r6, r6, r4
 8001804:	9200      	str	r2, [sp, #0]
 8001806:	e7dd      	b.n	80017c4 <__aeabi_ddiv+0x57c>
 8001808:	2480      	movs	r4, #128	; 0x80
 800180a:	4643      	mov	r3, r8
 800180c:	0324      	lsls	r4, r4, #12
 800180e:	431c      	orrs	r4, r3
 8001810:	0324      	lsls	r4, r4, #12
 8001812:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__aeabi_ddiv+0x5dc>)
 8001814:	0b24      	lsrs	r4, r4, #12
 8001816:	e56e      	b.n	80012f6 <__aeabi_ddiv+0xae>
 8001818:	9a00      	ldr	r2, [sp, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d3ea      	bcc.n	80017f4 <__aeabi_ddiv+0x5ac>
 800181e:	0005      	movs	r5, r0
 8001820:	e7d3      	b.n	80017ca <__aeabi_ddiv+0x582>
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	000007ff 	.word	0x000007ff
 8001828:	0000043e 	.word	0x0000043e
 800182c:	0000041e 	.word	0x0000041e
 8001830:	000003ff 	.word	0x000003ff

08001834 <__eqdf2>:
 8001834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001836:	464e      	mov	r6, r9
 8001838:	4645      	mov	r5, r8
 800183a:	46de      	mov	lr, fp
 800183c:	4657      	mov	r7, sl
 800183e:	4690      	mov	r8, r2
 8001840:	b5e0      	push	{r5, r6, r7, lr}
 8001842:	0017      	movs	r7, r2
 8001844:	031a      	lsls	r2, r3, #12
 8001846:	0b12      	lsrs	r2, r2, #12
 8001848:	0005      	movs	r5, r0
 800184a:	4684      	mov	ip, r0
 800184c:	4819      	ldr	r0, [pc, #100]	; (80018b4 <__eqdf2+0x80>)
 800184e:	030e      	lsls	r6, r1, #12
 8001850:	004c      	lsls	r4, r1, #1
 8001852:	4691      	mov	r9, r2
 8001854:	005a      	lsls	r2, r3, #1
 8001856:	0fdb      	lsrs	r3, r3, #31
 8001858:	469b      	mov	fp, r3
 800185a:	0b36      	lsrs	r6, r6, #12
 800185c:	0d64      	lsrs	r4, r4, #21
 800185e:	0fc9      	lsrs	r1, r1, #31
 8001860:	0d52      	lsrs	r2, r2, #21
 8001862:	4284      	cmp	r4, r0
 8001864:	d019      	beq.n	800189a <__eqdf2+0x66>
 8001866:	4282      	cmp	r2, r0
 8001868:	d010      	beq.n	800188c <__eqdf2+0x58>
 800186a:	2001      	movs	r0, #1
 800186c:	4294      	cmp	r4, r2
 800186e:	d10e      	bne.n	800188e <__eqdf2+0x5a>
 8001870:	454e      	cmp	r6, r9
 8001872:	d10c      	bne.n	800188e <__eqdf2+0x5a>
 8001874:	2001      	movs	r0, #1
 8001876:	45c4      	cmp	ip, r8
 8001878:	d109      	bne.n	800188e <__eqdf2+0x5a>
 800187a:	4559      	cmp	r1, fp
 800187c:	d017      	beq.n	80018ae <__eqdf2+0x7a>
 800187e:	2c00      	cmp	r4, #0
 8001880:	d105      	bne.n	800188e <__eqdf2+0x5a>
 8001882:	0030      	movs	r0, r6
 8001884:	4328      	orrs	r0, r5
 8001886:	1e43      	subs	r3, r0, #1
 8001888:	4198      	sbcs	r0, r3
 800188a:	e000      	b.n	800188e <__eqdf2+0x5a>
 800188c:	2001      	movs	r0, #1
 800188e:	bcf0      	pop	{r4, r5, r6, r7}
 8001890:	46bb      	mov	fp, r7
 8001892:	46b2      	mov	sl, r6
 8001894:	46a9      	mov	r9, r5
 8001896:	46a0      	mov	r8, r4
 8001898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800189a:	0033      	movs	r3, r6
 800189c:	2001      	movs	r0, #1
 800189e:	432b      	orrs	r3, r5
 80018a0:	d1f5      	bne.n	800188e <__eqdf2+0x5a>
 80018a2:	42a2      	cmp	r2, r4
 80018a4:	d1f3      	bne.n	800188e <__eqdf2+0x5a>
 80018a6:	464b      	mov	r3, r9
 80018a8:	433b      	orrs	r3, r7
 80018aa:	d1f0      	bne.n	800188e <__eqdf2+0x5a>
 80018ac:	e7e2      	b.n	8001874 <__eqdf2+0x40>
 80018ae:	2000      	movs	r0, #0
 80018b0:	e7ed      	b.n	800188e <__eqdf2+0x5a>
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	000007ff 	.word	0x000007ff

080018b8 <__gedf2>:
 80018b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ba:	4647      	mov	r7, r8
 80018bc:	46ce      	mov	lr, r9
 80018be:	0004      	movs	r4, r0
 80018c0:	0018      	movs	r0, r3
 80018c2:	0016      	movs	r6, r2
 80018c4:	031b      	lsls	r3, r3, #12
 80018c6:	0b1b      	lsrs	r3, r3, #12
 80018c8:	4d2d      	ldr	r5, [pc, #180]	; (8001980 <__gedf2+0xc8>)
 80018ca:	004a      	lsls	r2, r1, #1
 80018cc:	4699      	mov	r9, r3
 80018ce:	b580      	push	{r7, lr}
 80018d0:	0043      	lsls	r3, r0, #1
 80018d2:	030f      	lsls	r7, r1, #12
 80018d4:	46a4      	mov	ip, r4
 80018d6:	46b0      	mov	r8, r6
 80018d8:	0b3f      	lsrs	r7, r7, #12
 80018da:	0d52      	lsrs	r2, r2, #21
 80018dc:	0fc9      	lsrs	r1, r1, #31
 80018de:	0d5b      	lsrs	r3, r3, #21
 80018e0:	0fc0      	lsrs	r0, r0, #31
 80018e2:	42aa      	cmp	r2, r5
 80018e4:	d021      	beq.n	800192a <__gedf2+0x72>
 80018e6:	42ab      	cmp	r3, r5
 80018e8:	d013      	beq.n	8001912 <__gedf2+0x5a>
 80018ea:	2a00      	cmp	r2, #0
 80018ec:	d122      	bne.n	8001934 <__gedf2+0x7c>
 80018ee:	433c      	orrs	r4, r7
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <__gedf2+0x42>
 80018f4:	464d      	mov	r5, r9
 80018f6:	432e      	orrs	r6, r5
 80018f8:	d022      	beq.n	8001940 <__gedf2+0x88>
 80018fa:	2c00      	cmp	r4, #0
 80018fc:	d010      	beq.n	8001920 <__gedf2+0x68>
 80018fe:	4281      	cmp	r1, r0
 8001900:	d022      	beq.n	8001948 <__gedf2+0x90>
 8001902:	2002      	movs	r0, #2
 8001904:	3901      	subs	r1, #1
 8001906:	4008      	ands	r0, r1
 8001908:	3801      	subs	r0, #1
 800190a:	bcc0      	pop	{r6, r7}
 800190c:	46b9      	mov	r9, r7
 800190e:	46b0      	mov	r8, r6
 8001910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001912:	464d      	mov	r5, r9
 8001914:	432e      	orrs	r6, r5
 8001916:	d129      	bne.n	800196c <__gedf2+0xb4>
 8001918:	2a00      	cmp	r2, #0
 800191a:	d1f0      	bne.n	80018fe <__gedf2+0x46>
 800191c:	433c      	orrs	r4, r7
 800191e:	d1ee      	bne.n	80018fe <__gedf2+0x46>
 8001920:	2800      	cmp	r0, #0
 8001922:	d1f2      	bne.n	800190a <__gedf2+0x52>
 8001924:	2001      	movs	r0, #1
 8001926:	4240      	negs	r0, r0
 8001928:	e7ef      	b.n	800190a <__gedf2+0x52>
 800192a:	003d      	movs	r5, r7
 800192c:	4325      	orrs	r5, r4
 800192e:	d11d      	bne.n	800196c <__gedf2+0xb4>
 8001930:	4293      	cmp	r3, r2
 8001932:	d0ee      	beq.n	8001912 <__gedf2+0x5a>
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1e2      	bne.n	80018fe <__gedf2+0x46>
 8001938:	464c      	mov	r4, r9
 800193a:	4326      	orrs	r6, r4
 800193c:	d1df      	bne.n	80018fe <__gedf2+0x46>
 800193e:	e7e0      	b.n	8001902 <__gedf2+0x4a>
 8001940:	2000      	movs	r0, #0
 8001942:	2c00      	cmp	r4, #0
 8001944:	d0e1      	beq.n	800190a <__gedf2+0x52>
 8001946:	e7dc      	b.n	8001902 <__gedf2+0x4a>
 8001948:	429a      	cmp	r2, r3
 800194a:	dc0a      	bgt.n	8001962 <__gedf2+0xaa>
 800194c:	dbe8      	blt.n	8001920 <__gedf2+0x68>
 800194e:	454f      	cmp	r7, r9
 8001950:	d8d7      	bhi.n	8001902 <__gedf2+0x4a>
 8001952:	d00e      	beq.n	8001972 <__gedf2+0xba>
 8001954:	2000      	movs	r0, #0
 8001956:	454f      	cmp	r7, r9
 8001958:	d2d7      	bcs.n	800190a <__gedf2+0x52>
 800195a:	2900      	cmp	r1, #0
 800195c:	d0e2      	beq.n	8001924 <__gedf2+0x6c>
 800195e:	0008      	movs	r0, r1
 8001960:	e7d3      	b.n	800190a <__gedf2+0x52>
 8001962:	4243      	negs	r3, r0
 8001964:	4158      	adcs	r0, r3
 8001966:	0040      	lsls	r0, r0, #1
 8001968:	3801      	subs	r0, #1
 800196a:	e7ce      	b.n	800190a <__gedf2+0x52>
 800196c:	2002      	movs	r0, #2
 800196e:	4240      	negs	r0, r0
 8001970:	e7cb      	b.n	800190a <__gedf2+0x52>
 8001972:	45c4      	cmp	ip, r8
 8001974:	d8c5      	bhi.n	8001902 <__gedf2+0x4a>
 8001976:	2000      	movs	r0, #0
 8001978:	45c4      	cmp	ip, r8
 800197a:	d2c6      	bcs.n	800190a <__gedf2+0x52>
 800197c:	e7ed      	b.n	800195a <__gedf2+0xa2>
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	000007ff 	.word	0x000007ff

08001984 <__ledf2>:
 8001984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001986:	4647      	mov	r7, r8
 8001988:	46ce      	mov	lr, r9
 800198a:	0004      	movs	r4, r0
 800198c:	0018      	movs	r0, r3
 800198e:	0016      	movs	r6, r2
 8001990:	031b      	lsls	r3, r3, #12
 8001992:	0b1b      	lsrs	r3, r3, #12
 8001994:	4d2c      	ldr	r5, [pc, #176]	; (8001a48 <__ledf2+0xc4>)
 8001996:	004a      	lsls	r2, r1, #1
 8001998:	4699      	mov	r9, r3
 800199a:	b580      	push	{r7, lr}
 800199c:	0043      	lsls	r3, r0, #1
 800199e:	030f      	lsls	r7, r1, #12
 80019a0:	46a4      	mov	ip, r4
 80019a2:	46b0      	mov	r8, r6
 80019a4:	0b3f      	lsrs	r7, r7, #12
 80019a6:	0d52      	lsrs	r2, r2, #21
 80019a8:	0fc9      	lsrs	r1, r1, #31
 80019aa:	0d5b      	lsrs	r3, r3, #21
 80019ac:	0fc0      	lsrs	r0, r0, #31
 80019ae:	42aa      	cmp	r2, r5
 80019b0:	d00d      	beq.n	80019ce <__ledf2+0x4a>
 80019b2:	42ab      	cmp	r3, r5
 80019b4:	d010      	beq.n	80019d8 <__ledf2+0x54>
 80019b6:	2a00      	cmp	r2, #0
 80019b8:	d127      	bne.n	8001a0a <__ledf2+0x86>
 80019ba:	433c      	orrs	r4, r7
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d111      	bne.n	80019e4 <__ledf2+0x60>
 80019c0:	464d      	mov	r5, r9
 80019c2:	432e      	orrs	r6, r5
 80019c4:	d10e      	bne.n	80019e4 <__ledf2+0x60>
 80019c6:	2000      	movs	r0, #0
 80019c8:	2c00      	cmp	r4, #0
 80019ca:	d015      	beq.n	80019f8 <__ledf2+0x74>
 80019cc:	e00e      	b.n	80019ec <__ledf2+0x68>
 80019ce:	003d      	movs	r5, r7
 80019d0:	4325      	orrs	r5, r4
 80019d2:	d110      	bne.n	80019f6 <__ledf2+0x72>
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d118      	bne.n	8001a0a <__ledf2+0x86>
 80019d8:	464d      	mov	r5, r9
 80019da:	432e      	orrs	r6, r5
 80019dc:	d10b      	bne.n	80019f6 <__ledf2+0x72>
 80019de:	2a00      	cmp	r2, #0
 80019e0:	d102      	bne.n	80019e8 <__ledf2+0x64>
 80019e2:	433c      	orrs	r4, r7
 80019e4:	2c00      	cmp	r4, #0
 80019e6:	d00b      	beq.n	8001a00 <__ledf2+0x7c>
 80019e8:	4281      	cmp	r1, r0
 80019ea:	d014      	beq.n	8001a16 <__ledf2+0x92>
 80019ec:	2002      	movs	r0, #2
 80019ee:	3901      	subs	r1, #1
 80019f0:	4008      	ands	r0, r1
 80019f2:	3801      	subs	r0, #1
 80019f4:	e000      	b.n	80019f8 <__ledf2+0x74>
 80019f6:	2002      	movs	r0, #2
 80019f8:	bcc0      	pop	{r6, r7}
 80019fa:	46b9      	mov	r9, r7
 80019fc:	46b0      	mov	r8, r6
 80019fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a00:	2800      	cmp	r0, #0
 8001a02:	d1f9      	bne.n	80019f8 <__ledf2+0x74>
 8001a04:	2001      	movs	r0, #1
 8001a06:	4240      	negs	r0, r0
 8001a08:	e7f6      	b.n	80019f8 <__ledf2+0x74>
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1ec      	bne.n	80019e8 <__ledf2+0x64>
 8001a0e:	464c      	mov	r4, r9
 8001a10:	4326      	orrs	r6, r4
 8001a12:	d1e9      	bne.n	80019e8 <__ledf2+0x64>
 8001a14:	e7ea      	b.n	80019ec <__ledf2+0x68>
 8001a16:	429a      	cmp	r2, r3
 8001a18:	dd04      	ble.n	8001a24 <__ledf2+0xa0>
 8001a1a:	4243      	negs	r3, r0
 8001a1c:	4158      	adcs	r0, r3
 8001a1e:	0040      	lsls	r0, r0, #1
 8001a20:	3801      	subs	r0, #1
 8001a22:	e7e9      	b.n	80019f8 <__ledf2+0x74>
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dbeb      	blt.n	8001a00 <__ledf2+0x7c>
 8001a28:	454f      	cmp	r7, r9
 8001a2a:	d8df      	bhi.n	80019ec <__ledf2+0x68>
 8001a2c:	d006      	beq.n	8001a3c <__ledf2+0xb8>
 8001a2e:	2000      	movs	r0, #0
 8001a30:	454f      	cmp	r7, r9
 8001a32:	d2e1      	bcs.n	80019f8 <__ledf2+0x74>
 8001a34:	2900      	cmp	r1, #0
 8001a36:	d0e5      	beq.n	8001a04 <__ledf2+0x80>
 8001a38:	0008      	movs	r0, r1
 8001a3a:	e7dd      	b.n	80019f8 <__ledf2+0x74>
 8001a3c:	45c4      	cmp	ip, r8
 8001a3e:	d8d5      	bhi.n	80019ec <__ledf2+0x68>
 8001a40:	2000      	movs	r0, #0
 8001a42:	45c4      	cmp	ip, r8
 8001a44:	d2d8      	bcs.n	80019f8 <__ledf2+0x74>
 8001a46:	e7f5      	b.n	8001a34 <__ledf2+0xb0>
 8001a48:	000007ff 	.word	0x000007ff

08001a4c <__aeabi_dmul>:
 8001a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4e:	4657      	mov	r7, sl
 8001a50:	464e      	mov	r6, r9
 8001a52:	4645      	mov	r5, r8
 8001a54:	46de      	mov	lr, fp
 8001a56:	b5e0      	push	{r5, r6, r7, lr}
 8001a58:	4698      	mov	r8, r3
 8001a5a:	030c      	lsls	r4, r1, #12
 8001a5c:	004b      	lsls	r3, r1, #1
 8001a5e:	0006      	movs	r6, r0
 8001a60:	4692      	mov	sl, r2
 8001a62:	b087      	sub	sp, #28
 8001a64:	0b24      	lsrs	r4, r4, #12
 8001a66:	0d5b      	lsrs	r3, r3, #21
 8001a68:	0fcf      	lsrs	r7, r1, #31
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dmul+0x24>
 8001a6e:	e15c      	b.n	8001d2a <__aeabi_dmul+0x2de>
 8001a70:	4ad9      	ldr	r2, [pc, #868]	; (8001dd8 <__aeabi_dmul+0x38c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dmul+0x2c>
 8001a76:	e175      	b.n	8001d64 <__aeabi_dmul+0x318>
 8001a78:	0f42      	lsrs	r2, r0, #29
 8001a7a:	00e4      	lsls	r4, r4, #3
 8001a7c:	4314      	orrs	r4, r2
 8001a7e:	2280      	movs	r2, #128	; 0x80
 8001a80:	0412      	lsls	r2, r2, #16
 8001a82:	4314      	orrs	r4, r2
 8001a84:	4ad5      	ldr	r2, [pc, #852]	; (8001ddc <__aeabi_dmul+0x390>)
 8001a86:	00c5      	lsls	r5, r0, #3
 8001a88:	4694      	mov	ip, r2
 8001a8a:	4463      	add	r3, ip
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	4699      	mov	r9, r3
 8001a92:	469b      	mov	fp, r3
 8001a94:	4643      	mov	r3, r8
 8001a96:	4642      	mov	r2, r8
 8001a98:	031e      	lsls	r6, r3, #12
 8001a9a:	0fd2      	lsrs	r2, r2, #31
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4650      	mov	r0, sl
 8001aa0:	4690      	mov	r8, r2
 8001aa2:	0b36      	lsrs	r6, r6, #12
 8001aa4:	0d5b      	lsrs	r3, r3, #21
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dmul+0x5e>
 8001aa8:	e120      	b.n	8001cec <__aeabi_dmul+0x2a0>
 8001aaa:	4acb      	ldr	r2, [pc, #812]	; (8001dd8 <__aeabi_dmul+0x38c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_dmul+0x66>
 8001ab0:	e162      	b.n	8001d78 <__aeabi_dmul+0x32c>
 8001ab2:	49ca      	ldr	r1, [pc, #808]	; (8001ddc <__aeabi_dmul+0x390>)
 8001ab4:	0f42      	lsrs	r2, r0, #29
 8001ab6:	468c      	mov	ip, r1
 8001ab8:	9900      	ldr	r1, [sp, #0]
 8001aba:	4463      	add	r3, ip
 8001abc:	00f6      	lsls	r6, r6, #3
 8001abe:	468c      	mov	ip, r1
 8001ac0:	4316      	orrs	r6, r2
 8001ac2:	2280      	movs	r2, #128	; 0x80
 8001ac4:	449c      	add	ip, r3
 8001ac6:	0412      	lsls	r2, r2, #16
 8001ac8:	4663      	mov	r3, ip
 8001aca:	4316      	orrs	r6, r2
 8001acc:	00c2      	lsls	r2, r0, #3
 8001ace:	2000      	movs	r0, #0
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	9900      	ldr	r1, [sp, #0]
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	3101      	adds	r1, #1
 8001ad8:	468c      	mov	ip, r1
 8001ada:	4649      	mov	r1, r9
 8001adc:	407b      	eors	r3, r7
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	290f      	cmp	r1, #15
 8001ae2:	d826      	bhi.n	8001b32 <__aeabi_dmul+0xe6>
 8001ae4:	4bbe      	ldr	r3, [pc, #760]	; (8001de0 <__aeabi_dmul+0x394>)
 8001ae6:	0089      	lsls	r1, r1, #2
 8001ae8:	5859      	ldr	r1, [r3, r1]
 8001aea:	468f      	mov	pc, r1
 8001aec:	4643      	mov	r3, r8
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	0034      	movs	r4, r6
 8001af2:	0015      	movs	r5, r2
 8001af4:	4683      	mov	fp, r0
 8001af6:	465b      	mov	r3, fp
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d016      	beq.n	8001b2a <__aeabi_dmul+0xde>
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dmul+0xb6>
 8001b00:	e203      	b.n	8001f0a <__aeabi_dmul+0x4be>
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d000      	beq.n	8001b08 <__aeabi_dmul+0xbc>
 8001b06:	e0cd      	b.n	8001ca4 <__aeabi_dmul+0x258>
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2400      	movs	r4, #0
 8001b0c:	2500      	movs	r5, #0
 8001b0e:	9b01      	ldr	r3, [sp, #4]
 8001b10:	0512      	lsls	r2, r2, #20
 8001b12:	4322      	orrs	r2, r4
 8001b14:	07db      	lsls	r3, r3, #31
 8001b16:	431a      	orrs	r2, r3
 8001b18:	0028      	movs	r0, r5
 8001b1a:	0011      	movs	r1, r2
 8001b1c:	b007      	add	sp, #28
 8001b1e:	bcf0      	pop	{r4, r5, r6, r7}
 8001b20:	46bb      	mov	fp, r7
 8001b22:	46b2      	mov	sl, r6
 8001b24:	46a9      	mov	r9, r5
 8001b26:	46a0      	mov	r8, r4
 8001b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2a:	2400      	movs	r4, #0
 8001b2c:	2500      	movs	r5, #0
 8001b2e:	4aaa      	ldr	r2, [pc, #680]	; (8001dd8 <__aeabi_dmul+0x38c>)
 8001b30:	e7ed      	b.n	8001b0e <__aeabi_dmul+0xc2>
 8001b32:	0c28      	lsrs	r0, r5, #16
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	0c2d      	lsrs	r5, r5, #16
 8001b38:	002b      	movs	r3, r5
 8001b3a:	0c11      	lsrs	r1, r2, #16
 8001b3c:	0412      	lsls	r2, r2, #16
 8001b3e:	0c12      	lsrs	r2, r2, #16
 8001b40:	4353      	muls	r3, r2
 8001b42:	4698      	mov	r8, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	002f      	movs	r7, r5
 8001b48:	4343      	muls	r3, r0
 8001b4a:	4699      	mov	r9, r3
 8001b4c:	434f      	muls	r7, r1
 8001b4e:	444f      	add	r7, r9
 8001b50:	46bb      	mov	fp, r7
 8001b52:	4647      	mov	r7, r8
 8001b54:	000b      	movs	r3, r1
 8001b56:	0c3f      	lsrs	r7, r7, #16
 8001b58:	46ba      	mov	sl, r7
 8001b5a:	4343      	muls	r3, r0
 8001b5c:	44da      	add	sl, fp
 8001b5e:	9302      	str	r3, [sp, #8]
 8001b60:	45d1      	cmp	r9, sl
 8001b62:	d904      	bls.n	8001b6e <__aeabi_dmul+0x122>
 8001b64:	2780      	movs	r7, #128	; 0x80
 8001b66:	027f      	lsls	r7, r7, #9
 8001b68:	46b9      	mov	r9, r7
 8001b6a:	444b      	add	r3, r9
 8001b6c:	9302      	str	r3, [sp, #8]
 8001b6e:	4653      	mov	r3, sl
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	469b      	mov	fp, r3
 8001b74:	4653      	mov	r3, sl
 8001b76:	041f      	lsls	r7, r3, #16
 8001b78:	4643      	mov	r3, r8
 8001b7a:	041b      	lsls	r3, r3, #16
 8001b7c:	0c1b      	lsrs	r3, r3, #16
 8001b7e:	4698      	mov	r8, r3
 8001b80:	003b      	movs	r3, r7
 8001b82:	4443      	add	r3, r8
 8001b84:	9304      	str	r3, [sp, #16]
 8001b86:	0c33      	lsrs	r3, r6, #16
 8001b88:	0436      	lsls	r6, r6, #16
 8001b8a:	0c36      	lsrs	r6, r6, #16
 8001b8c:	4698      	mov	r8, r3
 8001b8e:	0033      	movs	r3, r6
 8001b90:	4343      	muls	r3, r0
 8001b92:	4699      	mov	r9, r3
 8001b94:	4643      	mov	r3, r8
 8001b96:	4343      	muls	r3, r0
 8001b98:	002f      	movs	r7, r5
 8001b9a:	469a      	mov	sl, r3
 8001b9c:	4643      	mov	r3, r8
 8001b9e:	4377      	muls	r7, r6
 8001ba0:	435d      	muls	r5, r3
 8001ba2:	0c38      	lsrs	r0, r7, #16
 8001ba4:	444d      	add	r5, r9
 8001ba6:	1945      	adds	r5, r0, r5
 8001ba8:	45a9      	cmp	r9, r5
 8001baa:	d903      	bls.n	8001bb4 <__aeabi_dmul+0x168>
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	025b      	lsls	r3, r3, #9
 8001bb0:	4699      	mov	r9, r3
 8001bb2:	44ca      	add	sl, r9
 8001bb4:	043f      	lsls	r7, r7, #16
 8001bb6:	0c28      	lsrs	r0, r5, #16
 8001bb8:	0c3f      	lsrs	r7, r7, #16
 8001bba:	042d      	lsls	r5, r5, #16
 8001bbc:	19ed      	adds	r5, r5, r7
 8001bbe:	0c27      	lsrs	r7, r4, #16
 8001bc0:	0424      	lsls	r4, r4, #16
 8001bc2:	0c24      	lsrs	r4, r4, #16
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	0020      	movs	r0, r4
 8001bc8:	4350      	muls	r0, r2
 8001bca:	437a      	muls	r2, r7
 8001bcc:	4691      	mov	r9, r2
 8001bce:	003a      	movs	r2, r7
 8001bd0:	4453      	add	r3, sl
 8001bd2:	9305      	str	r3, [sp, #20]
 8001bd4:	0c03      	lsrs	r3, r0, #16
 8001bd6:	469a      	mov	sl, r3
 8001bd8:	434a      	muls	r2, r1
 8001bda:	4361      	muls	r1, r4
 8001bdc:	4449      	add	r1, r9
 8001bde:	4451      	add	r1, sl
 8001be0:	44ab      	add	fp, r5
 8001be2:	4589      	cmp	r9, r1
 8001be4:	d903      	bls.n	8001bee <__aeabi_dmul+0x1a2>
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	025b      	lsls	r3, r3, #9
 8001bea:	4699      	mov	r9, r3
 8001bec:	444a      	add	r2, r9
 8001bee:	0400      	lsls	r0, r0, #16
 8001bf0:	0c0b      	lsrs	r3, r1, #16
 8001bf2:	0c00      	lsrs	r0, r0, #16
 8001bf4:	0409      	lsls	r1, r1, #16
 8001bf6:	1809      	adds	r1, r1, r0
 8001bf8:	0020      	movs	r0, r4
 8001bfa:	4699      	mov	r9, r3
 8001bfc:	4643      	mov	r3, r8
 8001bfe:	4370      	muls	r0, r6
 8001c00:	435c      	muls	r4, r3
 8001c02:	437e      	muls	r6, r7
 8001c04:	435f      	muls	r7, r3
 8001c06:	0c03      	lsrs	r3, r0, #16
 8001c08:	4698      	mov	r8, r3
 8001c0a:	19a4      	adds	r4, r4, r6
 8001c0c:	4444      	add	r4, r8
 8001c0e:	444a      	add	r2, r9
 8001c10:	9703      	str	r7, [sp, #12]
 8001c12:	42a6      	cmp	r6, r4
 8001c14:	d904      	bls.n	8001c20 <__aeabi_dmul+0x1d4>
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	025b      	lsls	r3, r3, #9
 8001c1a:	4698      	mov	r8, r3
 8001c1c:	4447      	add	r7, r8
 8001c1e:	9703      	str	r7, [sp, #12]
 8001c20:	0423      	lsls	r3, r4, #16
 8001c22:	9e02      	ldr	r6, [sp, #8]
 8001c24:	469a      	mov	sl, r3
 8001c26:	9b05      	ldr	r3, [sp, #20]
 8001c28:	445e      	add	r6, fp
 8001c2a:	4698      	mov	r8, r3
 8001c2c:	42ae      	cmp	r6, r5
 8001c2e:	41ad      	sbcs	r5, r5
 8001c30:	1876      	adds	r6, r6, r1
 8001c32:	428e      	cmp	r6, r1
 8001c34:	4189      	sbcs	r1, r1
 8001c36:	0400      	lsls	r0, r0, #16
 8001c38:	0c00      	lsrs	r0, r0, #16
 8001c3a:	4450      	add	r0, sl
 8001c3c:	4440      	add	r0, r8
 8001c3e:	426d      	negs	r5, r5
 8001c40:	1947      	adds	r7, r0, r5
 8001c42:	46b8      	mov	r8, r7
 8001c44:	4693      	mov	fp, r2
 8001c46:	4249      	negs	r1, r1
 8001c48:	4689      	mov	r9, r1
 8001c4a:	44c3      	add	fp, r8
 8001c4c:	44d9      	add	r9, fp
 8001c4e:	4298      	cmp	r0, r3
 8001c50:	4180      	sbcs	r0, r0
 8001c52:	45a8      	cmp	r8, r5
 8001c54:	41ad      	sbcs	r5, r5
 8001c56:	4593      	cmp	fp, r2
 8001c58:	4192      	sbcs	r2, r2
 8001c5a:	4589      	cmp	r9, r1
 8001c5c:	4189      	sbcs	r1, r1
 8001c5e:	426d      	negs	r5, r5
 8001c60:	4240      	negs	r0, r0
 8001c62:	4328      	orrs	r0, r5
 8001c64:	0c24      	lsrs	r4, r4, #16
 8001c66:	4252      	negs	r2, r2
 8001c68:	4249      	negs	r1, r1
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	9b03      	ldr	r3, [sp, #12]
 8001c6e:	1900      	adds	r0, r0, r4
 8001c70:	1880      	adds	r0, r0, r2
 8001c72:	18c7      	adds	r7, r0, r3
 8001c74:	464b      	mov	r3, r9
 8001c76:	0ddc      	lsrs	r4, r3, #23
 8001c78:	9b04      	ldr	r3, [sp, #16]
 8001c7a:	0275      	lsls	r5, r6, #9
 8001c7c:	431d      	orrs	r5, r3
 8001c7e:	1e6a      	subs	r2, r5, #1
 8001c80:	4195      	sbcs	r5, r2
 8001c82:	464b      	mov	r3, r9
 8001c84:	0df6      	lsrs	r6, r6, #23
 8001c86:	027f      	lsls	r7, r7, #9
 8001c88:	4335      	orrs	r5, r6
 8001c8a:	025a      	lsls	r2, r3, #9
 8001c8c:	433c      	orrs	r4, r7
 8001c8e:	4315      	orrs	r5, r2
 8001c90:	01fb      	lsls	r3, r7, #7
 8001c92:	d400      	bmi.n	8001c96 <__aeabi_dmul+0x24a>
 8001c94:	e11c      	b.n	8001ed0 <__aeabi_dmul+0x484>
 8001c96:	2101      	movs	r1, #1
 8001c98:	086a      	lsrs	r2, r5, #1
 8001c9a:	400d      	ands	r5, r1
 8001c9c:	4315      	orrs	r5, r2
 8001c9e:	07e2      	lsls	r2, r4, #31
 8001ca0:	4315      	orrs	r5, r2
 8001ca2:	0864      	lsrs	r4, r4, #1
 8001ca4:	494f      	ldr	r1, [pc, #316]	; (8001de4 <__aeabi_dmul+0x398>)
 8001ca6:	4461      	add	r1, ip
 8001ca8:	2900      	cmp	r1, #0
 8001caa:	dc00      	bgt.n	8001cae <__aeabi_dmul+0x262>
 8001cac:	e0b0      	b.n	8001e10 <__aeabi_dmul+0x3c4>
 8001cae:	076b      	lsls	r3, r5, #29
 8001cb0:	d009      	beq.n	8001cc6 <__aeabi_dmul+0x27a>
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	402a      	ands	r2, r5
 8001cb6:	2a04      	cmp	r2, #4
 8001cb8:	d005      	beq.n	8001cc6 <__aeabi_dmul+0x27a>
 8001cba:	1d2a      	adds	r2, r5, #4
 8001cbc:	42aa      	cmp	r2, r5
 8001cbe:	41ad      	sbcs	r5, r5
 8001cc0:	426d      	negs	r5, r5
 8001cc2:	1964      	adds	r4, r4, r5
 8001cc4:	0015      	movs	r5, r2
 8001cc6:	01e3      	lsls	r3, r4, #7
 8001cc8:	d504      	bpl.n	8001cd4 <__aeabi_dmul+0x288>
 8001cca:	2180      	movs	r1, #128	; 0x80
 8001ccc:	4a46      	ldr	r2, [pc, #280]	; (8001de8 <__aeabi_dmul+0x39c>)
 8001cce:	00c9      	lsls	r1, r1, #3
 8001cd0:	4014      	ands	r4, r2
 8001cd2:	4461      	add	r1, ip
 8001cd4:	4a45      	ldr	r2, [pc, #276]	; (8001dec <__aeabi_dmul+0x3a0>)
 8001cd6:	4291      	cmp	r1, r2
 8001cd8:	dd00      	ble.n	8001cdc <__aeabi_dmul+0x290>
 8001cda:	e726      	b.n	8001b2a <__aeabi_dmul+0xde>
 8001cdc:	0762      	lsls	r2, r4, #29
 8001cde:	08ed      	lsrs	r5, r5, #3
 8001ce0:	0264      	lsls	r4, r4, #9
 8001ce2:	0549      	lsls	r1, r1, #21
 8001ce4:	4315      	orrs	r5, r2
 8001ce6:	0b24      	lsrs	r4, r4, #12
 8001ce8:	0d4a      	lsrs	r2, r1, #21
 8001cea:	e710      	b.n	8001b0e <__aeabi_dmul+0xc2>
 8001cec:	4652      	mov	r2, sl
 8001cee:	4332      	orrs	r2, r6
 8001cf0:	d100      	bne.n	8001cf4 <__aeabi_dmul+0x2a8>
 8001cf2:	e07f      	b.n	8001df4 <__aeabi_dmul+0x3a8>
 8001cf4:	2e00      	cmp	r6, #0
 8001cf6:	d100      	bne.n	8001cfa <__aeabi_dmul+0x2ae>
 8001cf8:	e0dc      	b.n	8001eb4 <__aeabi_dmul+0x468>
 8001cfa:	0030      	movs	r0, r6
 8001cfc:	f000 fe1e 	bl	800293c <__clzsi2>
 8001d00:	0002      	movs	r2, r0
 8001d02:	3a0b      	subs	r2, #11
 8001d04:	231d      	movs	r3, #29
 8001d06:	0001      	movs	r1, r0
 8001d08:	1a9b      	subs	r3, r3, r2
 8001d0a:	4652      	mov	r2, sl
 8001d0c:	3908      	subs	r1, #8
 8001d0e:	40da      	lsrs	r2, r3
 8001d10:	408e      	lsls	r6, r1
 8001d12:	4316      	orrs	r6, r2
 8001d14:	4652      	mov	r2, sl
 8001d16:	408a      	lsls	r2, r1
 8001d18:	9b00      	ldr	r3, [sp, #0]
 8001d1a:	4935      	ldr	r1, [pc, #212]	; (8001df0 <__aeabi_dmul+0x3a4>)
 8001d1c:	1a18      	subs	r0, r3, r0
 8001d1e:	0003      	movs	r3, r0
 8001d20:	468c      	mov	ip, r1
 8001d22:	4463      	add	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	e6d3      	b.n	8001ad2 <__aeabi_dmul+0x86>
 8001d2a:	0025      	movs	r5, r4
 8001d2c:	4305      	orrs	r5, r0
 8001d2e:	d04a      	beq.n	8001dc6 <__aeabi_dmul+0x37a>
 8001d30:	2c00      	cmp	r4, #0
 8001d32:	d100      	bne.n	8001d36 <__aeabi_dmul+0x2ea>
 8001d34:	e0b0      	b.n	8001e98 <__aeabi_dmul+0x44c>
 8001d36:	0020      	movs	r0, r4
 8001d38:	f000 fe00 	bl	800293c <__clzsi2>
 8001d3c:	0001      	movs	r1, r0
 8001d3e:	0002      	movs	r2, r0
 8001d40:	390b      	subs	r1, #11
 8001d42:	231d      	movs	r3, #29
 8001d44:	0010      	movs	r0, r2
 8001d46:	1a5b      	subs	r3, r3, r1
 8001d48:	0031      	movs	r1, r6
 8001d4a:	0035      	movs	r5, r6
 8001d4c:	3808      	subs	r0, #8
 8001d4e:	4084      	lsls	r4, r0
 8001d50:	40d9      	lsrs	r1, r3
 8001d52:	4085      	lsls	r5, r0
 8001d54:	430c      	orrs	r4, r1
 8001d56:	4826      	ldr	r0, [pc, #152]	; (8001df0 <__aeabi_dmul+0x3a4>)
 8001d58:	1a83      	subs	r3, r0, r2
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	4699      	mov	r9, r3
 8001d60:	469b      	mov	fp, r3
 8001d62:	e697      	b.n	8001a94 <__aeabi_dmul+0x48>
 8001d64:	0005      	movs	r5, r0
 8001d66:	4325      	orrs	r5, r4
 8001d68:	d126      	bne.n	8001db8 <__aeabi_dmul+0x36c>
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2302      	movs	r3, #2
 8001d70:	2400      	movs	r4, #0
 8001d72:	4691      	mov	r9, r2
 8001d74:	469b      	mov	fp, r3
 8001d76:	e68d      	b.n	8001a94 <__aeabi_dmul+0x48>
 8001d78:	4652      	mov	r2, sl
 8001d7a:	9b00      	ldr	r3, [sp, #0]
 8001d7c:	4332      	orrs	r2, r6
 8001d7e:	d110      	bne.n	8001da2 <__aeabi_dmul+0x356>
 8001d80:	4915      	ldr	r1, [pc, #84]	; (8001dd8 <__aeabi_dmul+0x38c>)
 8001d82:	2600      	movs	r6, #0
 8001d84:	468c      	mov	ip, r1
 8001d86:	4463      	add	r3, ip
 8001d88:	4649      	mov	r1, r9
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	4319      	orrs	r1, r3
 8001d90:	4689      	mov	r9, r1
 8001d92:	2002      	movs	r0, #2
 8001d94:	e69d      	b.n	8001ad2 <__aeabi_dmul+0x86>
 8001d96:	465b      	mov	r3, fp
 8001d98:	9701      	str	r7, [sp, #4]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d000      	beq.n	8001da0 <__aeabi_dmul+0x354>
 8001d9e:	e6ad      	b.n	8001afc <__aeabi_dmul+0xb0>
 8001da0:	e6c3      	b.n	8001b2a <__aeabi_dmul+0xde>
 8001da2:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <__aeabi_dmul+0x38c>)
 8001da4:	2003      	movs	r0, #3
 8001da6:	4694      	mov	ip, r2
 8001da8:	4463      	add	r3, ip
 8001daa:	464a      	mov	r2, r9
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2303      	movs	r3, #3
 8001db0:	431a      	orrs	r2, r3
 8001db2:	4691      	mov	r9, r2
 8001db4:	4652      	mov	r2, sl
 8001db6:	e68c      	b.n	8001ad2 <__aeabi_dmul+0x86>
 8001db8:	220c      	movs	r2, #12
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	0005      	movs	r5, r0
 8001dc0:	4691      	mov	r9, r2
 8001dc2:	469b      	mov	fp, r3
 8001dc4:	e666      	b.n	8001a94 <__aeabi_dmul+0x48>
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	4699      	mov	r9, r3
 8001dca:	2300      	movs	r3, #0
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	2400      	movs	r4, #0
 8001dd2:	469b      	mov	fp, r3
 8001dd4:	e65e      	b.n	8001a94 <__aeabi_dmul+0x48>
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	000007ff 	.word	0x000007ff
 8001ddc:	fffffc01 	.word	0xfffffc01
 8001de0:	0800b110 	.word	0x0800b110
 8001de4:	000003ff 	.word	0x000003ff
 8001de8:	feffffff 	.word	0xfeffffff
 8001dec:	000007fe 	.word	0x000007fe
 8001df0:	fffffc0d 	.word	0xfffffc0d
 8001df4:	4649      	mov	r1, r9
 8001df6:	2301      	movs	r3, #1
 8001df8:	4319      	orrs	r1, r3
 8001dfa:	4689      	mov	r9, r1
 8001dfc:	2600      	movs	r6, #0
 8001dfe:	2001      	movs	r0, #1
 8001e00:	e667      	b.n	8001ad2 <__aeabi_dmul+0x86>
 8001e02:	2300      	movs	r3, #0
 8001e04:	2480      	movs	r4, #128	; 0x80
 8001e06:	2500      	movs	r5, #0
 8001e08:	4a43      	ldr	r2, [pc, #268]	; (8001f18 <__aeabi_dmul+0x4cc>)
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	0324      	lsls	r4, r4, #12
 8001e0e:	e67e      	b.n	8001b0e <__aeabi_dmul+0xc2>
 8001e10:	2001      	movs	r0, #1
 8001e12:	1a40      	subs	r0, r0, r1
 8001e14:	2838      	cmp	r0, #56	; 0x38
 8001e16:	dd00      	ble.n	8001e1a <__aeabi_dmul+0x3ce>
 8001e18:	e676      	b.n	8001b08 <__aeabi_dmul+0xbc>
 8001e1a:	281f      	cmp	r0, #31
 8001e1c:	dd5b      	ble.n	8001ed6 <__aeabi_dmul+0x48a>
 8001e1e:	221f      	movs	r2, #31
 8001e20:	0023      	movs	r3, r4
 8001e22:	4252      	negs	r2, r2
 8001e24:	1a51      	subs	r1, r2, r1
 8001e26:	40cb      	lsrs	r3, r1
 8001e28:	0019      	movs	r1, r3
 8001e2a:	2820      	cmp	r0, #32
 8001e2c:	d003      	beq.n	8001e36 <__aeabi_dmul+0x3ea>
 8001e2e:	4a3b      	ldr	r2, [pc, #236]	; (8001f1c <__aeabi_dmul+0x4d0>)
 8001e30:	4462      	add	r2, ip
 8001e32:	4094      	lsls	r4, r2
 8001e34:	4325      	orrs	r5, r4
 8001e36:	1e6a      	subs	r2, r5, #1
 8001e38:	4195      	sbcs	r5, r2
 8001e3a:	002a      	movs	r2, r5
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	2107      	movs	r1, #7
 8001e40:	000d      	movs	r5, r1
 8001e42:	2400      	movs	r4, #0
 8001e44:	4015      	ands	r5, r2
 8001e46:	4211      	tst	r1, r2
 8001e48:	d05b      	beq.n	8001f02 <__aeabi_dmul+0x4b6>
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	2400      	movs	r4, #0
 8001e4e:	4011      	ands	r1, r2
 8001e50:	2904      	cmp	r1, #4
 8001e52:	d053      	beq.n	8001efc <__aeabi_dmul+0x4b0>
 8001e54:	1d11      	adds	r1, r2, #4
 8001e56:	4291      	cmp	r1, r2
 8001e58:	4192      	sbcs	r2, r2
 8001e5a:	4252      	negs	r2, r2
 8001e5c:	18a4      	adds	r4, r4, r2
 8001e5e:	000a      	movs	r2, r1
 8001e60:	0223      	lsls	r3, r4, #8
 8001e62:	d54b      	bpl.n	8001efc <__aeabi_dmul+0x4b0>
 8001e64:	2201      	movs	r2, #1
 8001e66:	2400      	movs	r4, #0
 8001e68:	2500      	movs	r5, #0
 8001e6a:	e650      	b.n	8001b0e <__aeabi_dmul+0xc2>
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	031b      	lsls	r3, r3, #12
 8001e70:	421c      	tst	r4, r3
 8001e72:	d009      	beq.n	8001e88 <__aeabi_dmul+0x43c>
 8001e74:	421e      	tst	r6, r3
 8001e76:	d107      	bne.n	8001e88 <__aeabi_dmul+0x43c>
 8001e78:	4333      	orrs	r3, r6
 8001e7a:	031c      	lsls	r4, r3, #12
 8001e7c:	4643      	mov	r3, r8
 8001e7e:	0015      	movs	r5, r2
 8001e80:	0b24      	lsrs	r4, r4, #12
 8001e82:	4a25      	ldr	r2, [pc, #148]	; (8001f18 <__aeabi_dmul+0x4cc>)
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	e642      	b.n	8001b0e <__aeabi_dmul+0xc2>
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	0312      	lsls	r2, r2, #12
 8001e8c:	4314      	orrs	r4, r2
 8001e8e:	0324      	lsls	r4, r4, #12
 8001e90:	4a21      	ldr	r2, [pc, #132]	; (8001f18 <__aeabi_dmul+0x4cc>)
 8001e92:	0b24      	lsrs	r4, r4, #12
 8001e94:	9701      	str	r7, [sp, #4]
 8001e96:	e63a      	b.n	8001b0e <__aeabi_dmul+0xc2>
 8001e98:	f000 fd50 	bl	800293c <__clzsi2>
 8001e9c:	0001      	movs	r1, r0
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	3115      	adds	r1, #21
 8001ea2:	3220      	adds	r2, #32
 8001ea4:	291c      	cmp	r1, #28
 8001ea6:	dc00      	bgt.n	8001eaa <__aeabi_dmul+0x45e>
 8001ea8:	e74b      	b.n	8001d42 <__aeabi_dmul+0x2f6>
 8001eaa:	0034      	movs	r4, r6
 8001eac:	3808      	subs	r0, #8
 8001eae:	2500      	movs	r5, #0
 8001eb0:	4084      	lsls	r4, r0
 8001eb2:	e750      	b.n	8001d56 <__aeabi_dmul+0x30a>
 8001eb4:	f000 fd42 	bl	800293c <__clzsi2>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	001a      	movs	r2, r3
 8001ebc:	3215      	adds	r2, #21
 8001ebe:	3020      	adds	r0, #32
 8001ec0:	2a1c      	cmp	r2, #28
 8001ec2:	dc00      	bgt.n	8001ec6 <__aeabi_dmul+0x47a>
 8001ec4:	e71e      	b.n	8001d04 <__aeabi_dmul+0x2b8>
 8001ec6:	4656      	mov	r6, sl
 8001ec8:	3b08      	subs	r3, #8
 8001eca:	2200      	movs	r2, #0
 8001ecc:	409e      	lsls	r6, r3
 8001ece:	e723      	b.n	8001d18 <__aeabi_dmul+0x2cc>
 8001ed0:	9b00      	ldr	r3, [sp, #0]
 8001ed2:	469c      	mov	ip, r3
 8001ed4:	e6e6      	b.n	8001ca4 <__aeabi_dmul+0x258>
 8001ed6:	4912      	ldr	r1, [pc, #72]	; (8001f20 <__aeabi_dmul+0x4d4>)
 8001ed8:	0022      	movs	r2, r4
 8001eda:	4461      	add	r1, ip
 8001edc:	002e      	movs	r6, r5
 8001ede:	408d      	lsls	r5, r1
 8001ee0:	408a      	lsls	r2, r1
 8001ee2:	40c6      	lsrs	r6, r0
 8001ee4:	1e69      	subs	r1, r5, #1
 8001ee6:	418d      	sbcs	r5, r1
 8001ee8:	4332      	orrs	r2, r6
 8001eea:	432a      	orrs	r2, r5
 8001eec:	40c4      	lsrs	r4, r0
 8001eee:	0753      	lsls	r3, r2, #29
 8001ef0:	d0b6      	beq.n	8001e60 <__aeabi_dmul+0x414>
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	4011      	ands	r1, r2
 8001ef6:	2904      	cmp	r1, #4
 8001ef8:	d1ac      	bne.n	8001e54 <__aeabi_dmul+0x408>
 8001efa:	e7b1      	b.n	8001e60 <__aeabi_dmul+0x414>
 8001efc:	0765      	lsls	r5, r4, #29
 8001efe:	0264      	lsls	r4, r4, #9
 8001f00:	0b24      	lsrs	r4, r4, #12
 8001f02:	08d2      	lsrs	r2, r2, #3
 8001f04:	4315      	orrs	r5, r2
 8001f06:	2200      	movs	r2, #0
 8001f08:	e601      	b.n	8001b0e <__aeabi_dmul+0xc2>
 8001f0a:	2280      	movs	r2, #128	; 0x80
 8001f0c:	0312      	lsls	r2, r2, #12
 8001f0e:	4314      	orrs	r4, r2
 8001f10:	0324      	lsls	r4, r4, #12
 8001f12:	4a01      	ldr	r2, [pc, #4]	; (8001f18 <__aeabi_dmul+0x4cc>)
 8001f14:	0b24      	lsrs	r4, r4, #12
 8001f16:	e5fa      	b.n	8001b0e <__aeabi_dmul+0xc2>
 8001f18:	000007ff 	.word	0x000007ff
 8001f1c:	0000043e 	.word	0x0000043e
 8001f20:	0000041e 	.word	0x0000041e

08001f24 <__aeabi_dsub>:
 8001f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f26:	4657      	mov	r7, sl
 8001f28:	464e      	mov	r6, r9
 8001f2a:	4645      	mov	r5, r8
 8001f2c:	46de      	mov	lr, fp
 8001f2e:	b5e0      	push	{r5, r6, r7, lr}
 8001f30:	001e      	movs	r6, r3
 8001f32:	0017      	movs	r7, r2
 8001f34:	004a      	lsls	r2, r1, #1
 8001f36:	030b      	lsls	r3, r1, #12
 8001f38:	0d52      	lsrs	r2, r2, #21
 8001f3a:	0a5b      	lsrs	r3, r3, #9
 8001f3c:	4690      	mov	r8, r2
 8001f3e:	0f42      	lsrs	r2, r0, #29
 8001f40:	431a      	orrs	r2, r3
 8001f42:	0fcd      	lsrs	r5, r1, #31
 8001f44:	4ccd      	ldr	r4, [pc, #820]	; (800227c <__aeabi_dsub+0x358>)
 8001f46:	0331      	lsls	r1, r6, #12
 8001f48:	00c3      	lsls	r3, r0, #3
 8001f4a:	4694      	mov	ip, r2
 8001f4c:	0070      	lsls	r0, r6, #1
 8001f4e:	0f7a      	lsrs	r2, r7, #29
 8001f50:	0a49      	lsrs	r1, r1, #9
 8001f52:	00ff      	lsls	r7, r7, #3
 8001f54:	469a      	mov	sl, r3
 8001f56:	46b9      	mov	r9, r7
 8001f58:	0d40      	lsrs	r0, r0, #21
 8001f5a:	0ff6      	lsrs	r6, r6, #31
 8001f5c:	4311      	orrs	r1, r2
 8001f5e:	42a0      	cmp	r0, r4
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x40>
 8001f62:	e0b1      	b.n	80020c8 <__aeabi_dsub+0x1a4>
 8001f64:	2201      	movs	r2, #1
 8001f66:	4056      	eors	r6, r2
 8001f68:	46b3      	mov	fp, r6
 8001f6a:	42b5      	cmp	r5, r6
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dsub+0x4c>
 8001f6e:	e088      	b.n	8002082 <__aeabi_dsub+0x15e>
 8001f70:	4642      	mov	r2, r8
 8001f72:	1a12      	subs	r2, r2, r0
 8001f74:	2a00      	cmp	r2, #0
 8001f76:	dc00      	bgt.n	8001f7a <__aeabi_dsub+0x56>
 8001f78:	e0ae      	b.n	80020d8 <__aeabi_dsub+0x1b4>
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x5c>
 8001f7e:	e0c1      	b.n	8002104 <__aeabi_dsub+0x1e0>
 8001f80:	48be      	ldr	r0, [pc, #760]	; (800227c <__aeabi_dsub+0x358>)
 8001f82:	4580      	cmp	r8, r0
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x64>
 8001f86:	e151      	b.n	800222c <__aeabi_dsub+0x308>
 8001f88:	2080      	movs	r0, #128	; 0x80
 8001f8a:	0400      	lsls	r0, r0, #16
 8001f8c:	4301      	orrs	r1, r0
 8001f8e:	2a38      	cmp	r2, #56	; 0x38
 8001f90:	dd00      	ble.n	8001f94 <__aeabi_dsub+0x70>
 8001f92:	e17b      	b.n	800228c <__aeabi_dsub+0x368>
 8001f94:	2a1f      	cmp	r2, #31
 8001f96:	dd00      	ble.n	8001f9a <__aeabi_dsub+0x76>
 8001f98:	e1ee      	b.n	8002378 <__aeabi_dsub+0x454>
 8001f9a:	2020      	movs	r0, #32
 8001f9c:	003e      	movs	r6, r7
 8001f9e:	1a80      	subs	r0, r0, r2
 8001fa0:	000c      	movs	r4, r1
 8001fa2:	40d6      	lsrs	r6, r2
 8001fa4:	40d1      	lsrs	r1, r2
 8001fa6:	4087      	lsls	r7, r0
 8001fa8:	4662      	mov	r2, ip
 8001faa:	4084      	lsls	r4, r0
 8001fac:	1a52      	subs	r2, r2, r1
 8001fae:	1e78      	subs	r0, r7, #1
 8001fb0:	4187      	sbcs	r7, r0
 8001fb2:	4694      	mov	ip, r2
 8001fb4:	4334      	orrs	r4, r6
 8001fb6:	4327      	orrs	r7, r4
 8001fb8:	1bdc      	subs	r4, r3, r7
 8001fba:	42a3      	cmp	r3, r4
 8001fbc:	419b      	sbcs	r3, r3
 8001fbe:	4662      	mov	r2, ip
 8001fc0:	425b      	negs	r3, r3
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	4699      	mov	r9, r3
 8001fc6:	464b      	mov	r3, r9
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	d400      	bmi.n	8001fce <__aeabi_dsub+0xaa>
 8001fcc:	e118      	b.n	8002200 <__aeabi_dsub+0x2dc>
 8001fce:	464b      	mov	r3, r9
 8001fd0:	0258      	lsls	r0, r3, #9
 8001fd2:	0a43      	lsrs	r3, r0, #9
 8001fd4:	4699      	mov	r9, r3
 8001fd6:	464b      	mov	r3, r9
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d100      	bne.n	8001fde <__aeabi_dsub+0xba>
 8001fdc:	e137      	b.n	800224e <__aeabi_dsub+0x32a>
 8001fde:	4648      	mov	r0, r9
 8001fe0:	f000 fcac 	bl	800293c <__clzsi2>
 8001fe4:	0001      	movs	r1, r0
 8001fe6:	3908      	subs	r1, #8
 8001fe8:	2320      	movs	r3, #32
 8001fea:	0022      	movs	r2, r4
 8001fec:	4648      	mov	r0, r9
 8001fee:	1a5b      	subs	r3, r3, r1
 8001ff0:	40da      	lsrs	r2, r3
 8001ff2:	4088      	lsls	r0, r1
 8001ff4:	408c      	lsls	r4, r1
 8001ff6:	4643      	mov	r3, r8
 8001ff8:	4310      	orrs	r0, r2
 8001ffa:	4588      	cmp	r8, r1
 8001ffc:	dd00      	ble.n	8002000 <__aeabi_dsub+0xdc>
 8001ffe:	e136      	b.n	800226e <__aeabi_dsub+0x34a>
 8002000:	1ac9      	subs	r1, r1, r3
 8002002:	1c4b      	adds	r3, r1, #1
 8002004:	2b1f      	cmp	r3, #31
 8002006:	dd00      	ble.n	800200a <__aeabi_dsub+0xe6>
 8002008:	e0ea      	b.n	80021e0 <__aeabi_dsub+0x2bc>
 800200a:	2220      	movs	r2, #32
 800200c:	0026      	movs	r6, r4
 800200e:	1ad2      	subs	r2, r2, r3
 8002010:	0001      	movs	r1, r0
 8002012:	4094      	lsls	r4, r2
 8002014:	40de      	lsrs	r6, r3
 8002016:	40d8      	lsrs	r0, r3
 8002018:	2300      	movs	r3, #0
 800201a:	4091      	lsls	r1, r2
 800201c:	1e62      	subs	r2, r4, #1
 800201e:	4194      	sbcs	r4, r2
 8002020:	4681      	mov	r9, r0
 8002022:	4698      	mov	r8, r3
 8002024:	4331      	orrs	r1, r6
 8002026:	430c      	orrs	r4, r1
 8002028:	0763      	lsls	r3, r4, #29
 800202a:	d009      	beq.n	8002040 <__aeabi_dsub+0x11c>
 800202c:	230f      	movs	r3, #15
 800202e:	4023      	ands	r3, r4
 8002030:	2b04      	cmp	r3, #4
 8002032:	d005      	beq.n	8002040 <__aeabi_dsub+0x11c>
 8002034:	1d23      	adds	r3, r4, #4
 8002036:	42a3      	cmp	r3, r4
 8002038:	41a4      	sbcs	r4, r4
 800203a:	4264      	negs	r4, r4
 800203c:	44a1      	add	r9, r4
 800203e:	001c      	movs	r4, r3
 8002040:	464b      	mov	r3, r9
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	d400      	bmi.n	8002048 <__aeabi_dsub+0x124>
 8002046:	e0de      	b.n	8002206 <__aeabi_dsub+0x2e2>
 8002048:	4641      	mov	r1, r8
 800204a:	4b8c      	ldr	r3, [pc, #560]	; (800227c <__aeabi_dsub+0x358>)
 800204c:	3101      	adds	r1, #1
 800204e:	4299      	cmp	r1, r3
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x130>
 8002052:	e0e7      	b.n	8002224 <__aeabi_dsub+0x300>
 8002054:	464b      	mov	r3, r9
 8002056:	488a      	ldr	r0, [pc, #552]	; (8002280 <__aeabi_dsub+0x35c>)
 8002058:	08e4      	lsrs	r4, r4, #3
 800205a:	4003      	ands	r3, r0
 800205c:	0018      	movs	r0, r3
 800205e:	0549      	lsls	r1, r1, #21
 8002060:	075b      	lsls	r3, r3, #29
 8002062:	0240      	lsls	r0, r0, #9
 8002064:	4323      	orrs	r3, r4
 8002066:	0d4a      	lsrs	r2, r1, #21
 8002068:	0b04      	lsrs	r4, r0, #12
 800206a:	0512      	lsls	r2, r2, #20
 800206c:	07ed      	lsls	r5, r5, #31
 800206e:	4322      	orrs	r2, r4
 8002070:	432a      	orrs	r2, r5
 8002072:	0018      	movs	r0, r3
 8002074:	0011      	movs	r1, r2
 8002076:	bcf0      	pop	{r4, r5, r6, r7}
 8002078:	46bb      	mov	fp, r7
 800207a:	46b2      	mov	sl, r6
 800207c:	46a9      	mov	r9, r5
 800207e:	46a0      	mov	r8, r4
 8002080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002082:	4642      	mov	r2, r8
 8002084:	1a12      	subs	r2, r2, r0
 8002086:	2a00      	cmp	r2, #0
 8002088:	dd52      	ble.n	8002130 <__aeabi_dsub+0x20c>
 800208a:	2800      	cmp	r0, #0
 800208c:	d100      	bne.n	8002090 <__aeabi_dsub+0x16c>
 800208e:	e09c      	b.n	80021ca <__aeabi_dsub+0x2a6>
 8002090:	45a0      	cmp	r8, r4
 8002092:	d100      	bne.n	8002096 <__aeabi_dsub+0x172>
 8002094:	e0ca      	b.n	800222c <__aeabi_dsub+0x308>
 8002096:	2080      	movs	r0, #128	; 0x80
 8002098:	0400      	lsls	r0, r0, #16
 800209a:	4301      	orrs	r1, r0
 800209c:	2a38      	cmp	r2, #56	; 0x38
 800209e:	dd00      	ble.n	80020a2 <__aeabi_dsub+0x17e>
 80020a0:	e149      	b.n	8002336 <__aeabi_dsub+0x412>
 80020a2:	2a1f      	cmp	r2, #31
 80020a4:	dc00      	bgt.n	80020a8 <__aeabi_dsub+0x184>
 80020a6:	e197      	b.n	80023d8 <__aeabi_dsub+0x4b4>
 80020a8:	0010      	movs	r0, r2
 80020aa:	000e      	movs	r6, r1
 80020ac:	3820      	subs	r0, #32
 80020ae:	40c6      	lsrs	r6, r0
 80020b0:	2a20      	cmp	r2, #32
 80020b2:	d004      	beq.n	80020be <__aeabi_dsub+0x19a>
 80020b4:	2040      	movs	r0, #64	; 0x40
 80020b6:	1a82      	subs	r2, r0, r2
 80020b8:	4091      	lsls	r1, r2
 80020ba:	430f      	orrs	r7, r1
 80020bc:	46b9      	mov	r9, r7
 80020be:	464c      	mov	r4, r9
 80020c0:	1e62      	subs	r2, r4, #1
 80020c2:	4194      	sbcs	r4, r2
 80020c4:	4334      	orrs	r4, r6
 80020c6:	e13a      	b.n	800233e <__aeabi_dsub+0x41a>
 80020c8:	000a      	movs	r2, r1
 80020ca:	433a      	orrs	r2, r7
 80020cc:	d028      	beq.n	8002120 <__aeabi_dsub+0x1fc>
 80020ce:	46b3      	mov	fp, r6
 80020d0:	42b5      	cmp	r5, r6
 80020d2:	d02b      	beq.n	800212c <__aeabi_dsub+0x208>
 80020d4:	4a6b      	ldr	r2, [pc, #428]	; (8002284 <__aeabi_dsub+0x360>)
 80020d6:	4442      	add	r2, r8
 80020d8:	2a00      	cmp	r2, #0
 80020da:	d05d      	beq.n	8002198 <__aeabi_dsub+0x274>
 80020dc:	4642      	mov	r2, r8
 80020de:	4644      	mov	r4, r8
 80020e0:	1a82      	subs	r2, r0, r2
 80020e2:	2c00      	cmp	r4, #0
 80020e4:	d000      	beq.n	80020e8 <__aeabi_dsub+0x1c4>
 80020e6:	e0f5      	b.n	80022d4 <__aeabi_dsub+0x3b0>
 80020e8:	4665      	mov	r5, ip
 80020ea:	431d      	orrs	r5, r3
 80020ec:	d100      	bne.n	80020f0 <__aeabi_dsub+0x1cc>
 80020ee:	e19c      	b.n	800242a <__aeabi_dsub+0x506>
 80020f0:	1e55      	subs	r5, r2, #1
 80020f2:	2a01      	cmp	r2, #1
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dsub+0x1d4>
 80020f6:	e1fb      	b.n	80024f0 <__aeabi_dsub+0x5cc>
 80020f8:	4c60      	ldr	r4, [pc, #384]	; (800227c <__aeabi_dsub+0x358>)
 80020fa:	42a2      	cmp	r2, r4
 80020fc:	d100      	bne.n	8002100 <__aeabi_dsub+0x1dc>
 80020fe:	e1bd      	b.n	800247c <__aeabi_dsub+0x558>
 8002100:	002a      	movs	r2, r5
 8002102:	e0f0      	b.n	80022e6 <__aeabi_dsub+0x3c2>
 8002104:	0008      	movs	r0, r1
 8002106:	4338      	orrs	r0, r7
 8002108:	d100      	bne.n	800210c <__aeabi_dsub+0x1e8>
 800210a:	e0c3      	b.n	8002294 <__aeabi_dsub+0x370>
 800210c:	1e50      	subs	r0, r2, #1
 800210e:	2a01      	cmp	r2, #1
 8002110:	d100      	bne.n	8002114 <__aeabi_dsub+0x1f0>
 8002112:	e1a8      	b.n	8002466 <__aeabi_dsub+0x542>
 8002114:	4c59      	ldr	r4, [pc, #356]	; (800227c <__aeabi_dsub+0x358>)
 8002116:	42a2      	cmp	r2, r4
 8002118:	d100      	bne.n	800211c <__aeabi_dsub+0x1f8>
 800211a:	e087      	b.n	800222c <__aeabi_dsub+0x308>
 800211c:	0002      	movs	r2, r0
 800211e:	e736      	b.n	8001f8e <__aeabi_dsub+0x6a>
 8002120:	2201      	movs	r2, #1
 8002122:	4056      	eors	r6, r2
 8002124:	46b3      	mov	fp, r6
 8002126:	42b5      	cmp	r5, r6
 8002128:	d000      	beq.n	800212c <__aeabi_dsub+0x208>
 800212a:	e721      	b.n	8001f70 <__aeabi_dsub+0x4c>
 800212c:	4a55      	ldr	r2, [pc, #340]	; (8002284 <__aeabi_dsub+0x360>)
 800212e:	4442      	add	r2, r8
 8002130:	2a00      	cmp	r2, #0
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x212>
 8002134:	e0b5      	b.n	80022a2 <__aeabi_dsub+0x37e>
 8002136:	4642      	mov	r2, r8
 8002138:	4644      	mov	r4, r8
 800213a:	1a82      	subs	r2, r0, r2
 800213c:	2c00      	cmp	r4, #0
 800213e:	d100      	bne.n	8002142 <__aeabi_dsub+0x21e>
 8002140:	e138      	b.n	80023b4 <__aeabi_dsub+0x490>
 8002142:	4e4e      	ldr	r6, [pc, #312]	; (800227c <__aeabi_dsub+0x358>)
 8002144:	42b0      	cmp	r0, r6
 8002146:	d100      	bne.n	800214a <__aeabi_dsub+0x226>
 8002148:	e1de      	b.n	8002508 <__aeabi_dsub+0x5e4>
 800214a:	2680      	movs	r6, #128	; 0x80
 800214c:	4664      	mov	r4, ip
 800214e:	0436      	lsls	r6, r6, #16
 8002150:	4334      	orrs	r4, r6
 8002152:	46a4      	mov	ip, r4
 8002154:	2a38      	cmp	r2, #56	; 0x38
 8002156:	dd00      	ble.n	800215a <__aeabi_dsub+0x236>
 8002158:	e196      	b.n	8002488 <__aeabi_dsub+0x564>
 800215a:	2a1f      	cmp	r2, #31
 800215c:	dd00      	ble.n	8002160 <__aeabi_dsub+0x23c>
 800215e:	e224      	b.n	80025aa <__aeabi_dsub+0x686>
 8002160:	2620      	movs	r6, #32
 8002162:	1ab4      	subs	r4, r6, r2
 8002164:	46a2      	mov	sl, r4
 8002166:	4664      	mov	r4, ip
 8002168:	4656      	mov	r6, sl
 800216a:	40b4      	lsls	r4, r6
 800216c:	46a1      	mov	r9, r4
 800216e:	001c      	movs	r4, r3
 8002170:	464e      	mov	r6, r9
 8002172:	40d4      	lsrs	r4, r2
 8002174:	4326      	orrs	r6, r4
 8002176:	0034      	movs	r4, r6
 8002178:	4656      	mov	r6, sl
 800217a:	40b3      	lsls	r3, r6
 800217c:	1e5e      	subs	r6, r3, #1
 800217e:	41b3      	sbcs	r3, r6
 8002180:	431c      	orrs	r4, r3
 8002182:	4663      	mov	r3, ip
 8002184:	40d3      	lsrs	r3, r2
 8002186:	18c9      	adds	r1, r1, r3
 8002188:	19e4      	adds	r4, r4, r7
 800218a:	42bc      	cmp	r4, r7
 800218c:	41bf      	sbcs	r7, r7
 800218e:	427f      	negs	r7, r7
 8002190:	46b9      	mov	r9, r7
 8002192:	4680      	mov	r8, r0
 8002194:	4489      	add	r9, r1
 8002196:	e0d8      	b.n	800234a <__aeabi_dsub+0x426>
 8002198:	4640      	mov	r0, r8
 800219a:	4c3b      	ldr	r4, [pc, #236]	; (8002288 <__aeabi_dsub+0x364>)
 800219c:	3001      	adds	r0, #1
 800219e:	4220      	tst	r0, r4
 80021a0:	d000      	beq.n	80021a4 <__aeabi_dsub+0x280>
 80021a2:	e0b4      	b.n	800230e <__aeabi_dsub+0x3ea>
 80021a4:	4640      	mov	r0, r8
 80021a6:	2800      	cmp	r0, #0
 80021a8:	d000      	beq.n	80021ac <__aeabi_dsub+0x288>
 80021aa:	e144      	b.n	8002436 <__aeabi_dsub+0x512>
 80021ac:	4660      	mov	r0, ip
 80021ae:	4318      	orrs	r0, r3
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x290>
 80021b2:	e190      	b.n	80024d6 <__aeabi_dsub+0x5b2>
 80021b4:	0008      	movs	r0, r1
 80021b6:	4338      	orrs	r0, r7
 80021b8:	d000      	beq.n	80021bc <__aeabi_dsub+0x298>
 80021ba:	e1aa      	b.n	8002512 <__aeabi_dsub+0x5ee>
 80021bc:	4661      	mov	r1, ip
 80021be:	08db      	lsrs	r3, r3, #3
 80021c0:	0749      	lsls	r1, r1, #29
 80021c2:	430b      	orrs	r3, r1
 80021c4:	4661      	mov	r1, ip
 80021c6:	08cc      	lsrs	r4, r1, #3
 80021c8:	e027      	b.n	800221a <__aeabi_dsub+0x2f6>
 80021ca:	0008      	movs	r0, r1
 80021cc:	4338      	orrs	r0, r7
 80021ce:	d061      	beq.n	8002294 <__aeabi_dsub+0x370>
 80021d0:	1e50      	subs	r0, r2, #1
 80021d2:	2a01      	cmp	r2, #1
 80021d4:	d100      	bne.n	80021d8 <__aeabi_dsub+0x2b4>
 80021d6:	e139      	b.n	800244c <__aeabi_dsub+0x528>
 80021d8:	42a2      	cmp	r2, r4
 80021da:	d027      	beq.n	800222c <__aeabi_dsub+0x308>
 80021dc:	0002      	movs	r2, r0
 80021de:	e75d      	b.n	800209c <__aeabi_dsub+0x178>
 80021e0:	0002      	movs	r2, r0
 80021e2:	391f      	subs	r1, #31
 80021e4:	40ca      	lsrs	r2, r1
 80021e6:	0011      	movs	r1, r2
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d003      	beq.n	80021f4 <__aeabi_dsub+0x2d0>
 80021ec:	2240      	movs	r2, #64	; 0x40
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	4098      	lsls	r0, r3
 80021f2:	4304      	orrs	r4, r0
 80021f4:	1e63      	subs	r3, r4, #1
 80021f6:	419c      	sbcs	r4, r3
 80021f8:	2300      	movs	r3, #0
 80021fa:	4699      	mov	r9, r3
 80021fc:	4698      	mov	r8, r3
 80021fe:	430c      	orrs	r4, r1
 8002200:	0763      	lsls	r3, r4, #29
 8002202:	d000      	beq.n	8002206 <__aeabi_dsub+0x2e2>
 8002204:	e712      	b.n	800202c <__aeabi_dsub+0x108>
 8002206:	464b      	mov	r3, r9
 8002208:	464a      	mov	r2, r9
 800220a:	08e4      	lsrs	r4, r4, #3
 800220c:	075b      	lsls	r3, r3, #29
 800220e:	4323      	orrs	r3, r4
 8002210:	08d4      	lsrs	r4, r2, #3
 8002212:	4642      	mov	r2, r8
 8002214:	4919      	ldr	r1, [pc, #100]	; (800227c <__aeabi_dsub+0x358>)
 8002216:	428a      	cmp	r2, r1
 8002218:	d00e      	beq.n	8002238 <__aeabi_dsub+0x314>
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	0552      	lsls	r2, r2, #21
 800221e:	0b24      	lsrs	r4, r4, #12
 8002220:	0d52      	lsrs	r2, r2, #21
 8002222:	e722      	b.n	800206a <__aeabi_dsub+0x146>
 8002224:	000a      	movs	r2, r1
 8002226:	2400      	movs	r4, #0
 8002228:	2300      	movs	r3, #0
 800222a:	e71e      	b.n	800206a <__aeabi_dsub+0x146>
 800222c:	08db      	lsrs	r3, r3, #3
 800222e:	4662      	mov	r2, ip
 8002230:	0752      	lsls	r2, r2, #29
 8002232:	4313      	orrs	r3, r2
 8002234:	4662      	mov	r2, ip
 8002236:	08d4      	lsrs	r4, r2, #3
 8002238:	001a      	movs	r2, r3
 800223a:	4322      	orrs	r2, r4
 800223c:	d100      	bne.n	8002240 <__aeabi_dsub+0x31c>
 800223e:	e1fc      	b.n	800263a <__aeabi_dsub+0x716>
 8002240:	2280      	movs	r2, #128	; 0x80
 8002242:	0312      	lsls	r2, r2, #12
 8002244:	4314      	orrs	r4, r2
 8002246:	0324      	lsls	r4, r4, #12
 8002248:	4a0c      	ldr	r2, [pc, #48]	; (800227c <__aeabi_dsub+0x358>)
 800224a:	0b24      	lsrs	r4, r4, #12
 800224c:	e70d      	b.n	800206a <__aeabi_dsub+0x146>
 800224e:	0020      	movs	r0, r4
 8002250:	f000 fb74 	bl	800293c <__clzsi2>
 8002254:	0001      	movs	r1, r0
 8002256:	3118      	adds	r1, #24
 8002258:	291f      	cmp	r1, #31
 800225a:	dc00      	bgt.n	800225e <__aeabi_dsub+0x33a>
 800225c:	e6c4      	b.n	8001fe8 <__aeabi_dsub+0xc4>
 800225e:	3808      	subs	r0, #8
 8002260:	4084      	lsls	r4, r0
 8002262:	4643      	mov	r3, r8
 8002264:	0020      	movs	r0, r4
 8002266:	2400      	movs	r4, #0
 8002268:	4588      	cmp	r8, r1
 800226a:	dc00      	bgt.n	800226e <__aeabi_dsub+0x34a>
 800226c:	e6c8      	b.n	8002000 <__aeabi_dsub+0xdc>
 800226e:	4a04      	ldr	r2, [pc, #16]	; (8002280 <__aeabi_dsub+0x35c>)
 8002270:	1a5b      	subs	r3, r3, r1
 8002272:	4010      	ands	r0, r2
 8002274:	4698      	mov	r8, r3
 8002276:	4681      	mov	r9, r0
 8002278:	e6d6      	b.n	8002028 <__aeabi_dsub+0x104>
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	000007ff 	.word	0x000007ff
 8002280:	ff7fffff 	.word	0xff7fffff
 8002284:	fffff801 	.word	0xfffff801
 8002288:	000007fe 	.word	0x000007fe
 800228c:	430f      	orrs	r7, r1
 800228e:	1e7a      	subs	r2, r7, #1
 8002290:	4197      	sbcs	r7, r2
 8002292:	e691      	b.n	8001fb8 <__aeabi_dsub+0x94>
 8002294:	4661      	mov	r1, ip
 8002296:	08db      	lsrs	r3, r3, #3
 8002298:	0749      	lsls	r1, r1, #29
 800229a:	430b      	orrs	r3, r1
 800229c:	4661      	mov	r1, ip
 800229e:	08cc      	lsrs	r4, r1, #3
 80022a0:	e7b8      	b.n	8002214 <__aeabi_dsub+0x2f0>
 80022a2:	4640      	mov	r0, r8
 80022a4:	4cd3      	ldr	r4, [pc, #844]	; (80025f4 <__aeabi_dsub+0x6d0>)
 80022a6:	3001      	adds	r0, #1
 80022a8:	4220      	tst	r0, r4
 80022aa:	d000      	beq.n	80022ae <__aeabi_dsub+0x38a>
 80022ac:	e0a2      	b.n	80023f4 <__aeabi_dsub+0x4d0>
 80022ae:	4640      	mov	r0, r8
 80022b0:	2800      	cmp	r0, #0
 80022b2:	d000      	beq.n	80022b6 <__aeabi_dsub+0x392>
 80022b4:	e101      	b.n	80024ba <__aeabi_dsub+0x596>
 80022b6:	4660      	mov	r0, ip
 80022b8:	4318      	orrs	r0, r3
 80022ba:	d100      	bne.n	80022be <__aeabi_dsub+0x39a>
 80022bc:	e15e      	b.n	800257c <__aeabi_dsub+0x658>
 80022be:	0008      	movs	r0, r1
 80022c0:	4338      	orrs	r0, r7
 80022c2:	d000      	beq.n	80022c6 <__aeabi_dsub+0x3a2>
 80022c4:	e15f      	b.n	8002586 <__aeabi_dsub+0x662>
 80022c6:	4661      	mov	r1, ip
 80022c8:	08db      	lsrs	r3, r3, #3
 80022ca:	0749      	lsls	r1, r1, #29
 80022cc:	430b      	orrs	r3, r1
 80022ce:	4661      	mov	r1, ip
 80022d0:	08cc      	lsrs	r4, r1, #3
 80022d2:	e7a2      	b.n	800221a <__aeabi_dsub+0x2f6>
 80022d4:	4dc8      	ldr	r5, [pc, #800]	; (80025f8 <__aeabi_dsub+0x6d4>)
 80022d6:	42a8      	cmp	r0, r5
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x3b8>
 80022da:	e0cf      	b.n	800247c <__aeabi_dsub+0x558>
 80022dc:	2580      	movs	r5, #128	; 0x80
 80022de:	4664      	mov	r4, ip
 80022e0:	042d      	lsls	r5, r5, #16
 80022e2:	432c      	orrs	r4, r5
 80022e4:	46a4      	mov	ip, r4
 80022e6:	2a38      	cmp	r2, #56	; 0x38
 80022e8:	dc56      	bgt.n	8002398 <__aeabi_dsub+0x474>
 80022ea:	2a1f      	cmp	r2, #31
 80022ec:	dd00      	ble.n	80022f0 <__aeabi_dsub+0x3cc>
 80022ee:	e0d1      	b.n	8002494 <__aeabi_dsub+0x570>
 80022f0:	2520      	movs	r5, #32
 80022f2:	001e      	movs	r6, r3
 80022f4:	1aad      	subs	r5, r5, r2
 80022f6:	4664      	mov	r4, ip
 80022f8:	40ab      	lsls	r3, r5
 80022fa:	40ac      	lsls	r4, r5
 80022fc:	40d6      	lsrs	r6, r2
 80022fe:	1e5d      	subs	r5, r3, #1
 8002300:	41ab      	sbcs	r3, r5
 8002302:	4334      	orrs	r4, r6
 8002304:	4323      	orrs	r3, r4
 8002306:	4664      	mov	r4, ip
 8002308:	40d4      	lsrs	r4, r2
 800230a:	1b09      	subs	r1, r1, r4
 800230c:	e049      	b.n	80023a2 <__aeabi_dsub+0x47e>
 800230e:	4660      	mov	r0, ip
 8002310:	1bdc      	subs	r4, r3, r7
 8002312:	1a46      	subs	r6, r0, r1
 8002314:	42a3      	cmp	r3, r4
 8002316:	4180      	sbcs	r0, r0
 8002318:	4240      	negs	r0, r0
 800231a:	4681      	mov	r9, r0
 800231c:	0030      	movs	r0, r6
 800231e:	464e      	mov	r6, r9
 8002320:	1b80      	subs	r0, r0, r6
 8002322:	4681      	mov	r9, r0
 8002324:	0200      	lsls	r0, r0, #8
 8002326:	d476      	bmi.n	8002416 <__aeabi_dsub+0x4f2>
 8002328:	464b      	mov	r3, r9
 800232a:	4323      	orrs	r3, r4
 800232c:	d000      	beq.n	8002330 <__aeabi_dsub+0x40c>
 800232e:	e652      	b.n	8001fd6 <__aeabi_dsub+0xb2>
 8002330:	2400      	movs	r4, #0
 8002332:	2500      	movs	r5, #0
 8002334:	e771      	b.n	800221a <__aeabi_dsub+0x2f6>
 8002336:	4339      	orrs	r1, r7
 8002338:	000c      	movs	r4, r1
 800233a:	1e62      	subs	r2, r4, #1
 800233c:	4194      	sbcs	r4, r2
 800233e:	18e4      	adds	r4, r4, r3
 8002340:	429c      	cmp	r4, r3
 8002342:	419b      	sbcs	r3, r3
 8002344:	425b      	negs	r3, r3
 8002346:	4463      	add	r3, ip
 8002348:	4699      	mov	r9, r3
 800234a:	464b      	mov	r3, r9
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	d400      	bmi.n	8002352 <__aeabi_dsub+0x42e>
 8002350:	e756      	b.n	8002200 <__aeabi_dsub+0x2dc>
 8002352:	2301      	movs	r3, #1
 8002354:	469c      	mov	ip, r3
 8002356:	4ba8      	ldr	r3, [pc, #672]	; (80025f8 <__aeabi_dsub+0x6d4>)
 8002358:	44e0      	add	r8, ip
 800235a:	4598      	cmp	r8, r3
 800235c:	d038      	beq.n	80023d0 <__aeabi_dsub+0x4ac>
 800235e:	464b      	mov	r3, r9
 8002360:	48a6      	ldr	r0, [pc, #664]	; (80025fc <__aeabi_dsub+0x6d8>)
 8002362:	2201      	movs	r2, #1
 8002364:	4003      	ands	r3, r0
 8002366:	0018      	movs	r0, r3
 8002368:	0863      	lsrs	r3, r4, #1
 800236a:	4014      	ands	r4, r2
 800236c:	431c      	orrs	r4, r3
 800236e:	07c3      	lsls	r3, r0, #31
 8002370:	431c      	orrs	r4, r3
 8002372:	0843      	lsrs	r3, r0, #1
 8002374:	4699      	mov	r9, r3
 8002376:	e657      	b.n	8002028 <__aeabi_dsub+0x104>
 8002378:	0010      	movs	r0, r2
 800237a:	000e      	movs	r6, r1
 800237c:	3820      	subs	r0, #32
 800237e:	40c6      	lsrs	r6, r0
 8002380:	2a20      	cmp	r2, #32
 8002382:	d004      	beq.n	800238e <__aeabi_dsub+0x46a>
 8002384:	2040      	movs	r0, #64	; 0x40
 8002386:	1a82      	subs	r2, r0, r2
 8002388:	4091      	lsls	r1, r2
 800238a:	430f      	orrs	r7, r1
 800238c:	46b9      	mov	r9, r7
 800238e:	464f      	mov	r7, r9
 8002390:	1e7a      	subs	r2, r7, #1
 8002392:	4197      	sbcs	r7, r2
 8002394:	4337      	orrs	r7, r6
 8002396:	e60f      	b.n	8001fb8 <__aeabi_dsub+0x94>
 8002398:	4662      	mov	r2, ip
 800239a:	431a      	orrs	r2, r3
 800239c:	0013      	movs	r3, r2
 800239e:	1e5a      	subs	r2, r3, #1
 80023a0:	4193      	sbcs	r3, r2
 80023a2:	1afc      	subs	r4, r7, r3
 80023a4:	42a7      	cmp	r7, r4
 80023a6:	41bf      	sbcs	r7, r7
 80023a8:	427f      	negs	r7, r7
 80023aa:	1bcb      	subs	r3, r1, r7
 80023ac:	4699      	mov	r9, r3
 80023ae:	465d      	mov	r5, fp
 80023b0:	4680      	mov	r8, r0
 80023b2:	e608      	b.n	8001fc6 <__aeabi_dsub+0xa2>
 80023b4:	4666      	mov	r6, ip
 80023b6:	431e      	orrs	r6, r3
 80023b8:	d100      	bne.n	80023bc <__aeabi_dsub+0x498>
 80023ba:	e0be      	b.n	800253a <__aeabi_dsub+0x616>
 80023bc:	1e56      	subs	r6, r2, #1
 80023be:	2a01      	cmp	r2, #1
 80023c0:	d100      	bne.n	80023c4 <__aeabi_dsub+0x4a0>
 80023c2:	e109      	b.n	80025d8 <__aeabi_dsub+0x6b4>
 80023c4:	4c8c      	ldr	r4, [pc, #560]	; (80025f8 <__aeabi_dsub+0x6d4>)
 80023c6:	42a2      	cmp	r2, r4
 80023c8:	d100      	bne.n	80023cc <__aeabi_dsub+0x4a8>
 80023ca:	e119      	b.n	8002600 <__aeabi_dsub+0x6dc>
 80023cc:	0032      	movs	r2, r6
 80023ce:	e6c1      	b.n	8002154 <__aeabi_dsub+0x230>
 80023d0:	4642      	mov	r2, r8
 80023d2:	2400      	movs	r4, #0
 80023d4:	2300      	movs	r3, #0
 80023d6:	e648      	b.n	800206a <__aeabi_dsub+0x146>
 80023d8:	2020      	movs	r0, #32
 80023da:	000c      	movs	r4, r1
 80023dc:	1a80      	subs	r0, r0, r2
 80023de:	003e      	movs	r6, r7
 80023e0:	4087      	lsls	r7, r0
 80023e2:	4084      	lsls	r4, r0
 80023e4:	40d6      	lsrs	r6, r2
 80023e6:	1e78      	subs	r0, r7, #1
 80023e8:	4187      	sbcs	r7, r0
 80023ea:	40d1      	lsrs	r1, r2
 80023ec:	4334      	orrs	r4, r6
 80023ee:	433c      	orrs	r4, r7
 80023f0:	448c      	add	ip, r1
 80023f2:	e7a4      	b.n	800233e <__aeabi_dsub+0x41a>
 80023f4:	4a80      	ldr	r2, [pc, #512]	; (80025f8 <__aeabi_dsub+0x6d4>)
 80023f6:	4290      	cmp	r0, r2
 80023f8:	d100      	bne.n	80023fc <__aeabi_dsub+0x4d8>
 80023fa:	e0e9      	b.n	80025d0 <__aeabi_dsub+0x6ac>
 80023fc:	19df      	adds	r7, r3, r7
 80023fe:	429f      	cmp	r7, r3
 8002400:	419b      	sbcs	r3, r3
 8002402:	4461      	add	r1, ip
 8002404:	425b      	negs	r3, r3
 8002406:	18c9      	adds	r1, r1, r3
 8002408:	07cc      	lsls	r4, r1, #31
 800240a:	087f      	lsrs	r7, r7, #1
 800240c:	084b      	lsrs	r3, r1, #1
 800240e:	4699      	mov	r9, r3
 8002410:	4680      	mov	r8, r0
 8002412:	433c      	orrs	r4, r7
 8002414:	e6f4      	b.n	8002200 <__aeabi_dsub+0x2dc>
 8002416:	1afc      	subs	r4, r7, r3
 8002418:	42a7      	cmp	r7, r4
 800241a:	41bf      	sbcs	r7, r7
 800241c:	4663      	mov	r3, ip
 800241e:	427f      	negs	r7, r7
 8002420:	1ac9      	subs	r1, r1, r3
 8002422:	1bcb      	subs	r3, r1, r7
 8002424:	4699      	mov	r9, r3
 8002426:	465d      	mov	r5, fp
 8002428:	e5d5      	b.n	8001fd6 <__aeabi_dsub+0xb2>
 800242a:	08ff      	lsrs	r7, r7, #3
 800242c:	074b      	lsls	r3, r1, #29
 800242e:	465d      	mov	r5, fp
 8002430:	433b      	orrs	r3, r7
 8002432:	08cc      	lsrs	r4, r1, #3
 8002434:	e6ee      	b.n	8002214 <__aeabi_dsub+0x2f0>
 8002436:	4662      	mov	r2, ip
 8002438:	431a      	orrs	r2, r3
 800243a:	d000      	beq.n	800243e <__aeabi_dsub+0x51a>
 800243c:	e082      	b.n	8002544 <__aeabi_dsub+0x620>
 800243e:	000b      	movs	r3, r1
 8002440:	433b      	orrs	r3, r7
 8002442:	d11b      	bne.n	800247c <__aeabi_dsub+0x558>
 8002444:	2480      	movs	r4, #128	; 0x80
 8002446:	2500      	movs	r5, #0
 8002448:	0324      	lsls	r4, r4, #12
 800244a:	e6f9      	b.n	8002240 <__aeabi_dsub+0x31c>
 800244c:	19dc      	adds	r4, r3, r7
 800244e:	429c      	cmp	r4, r3
 8002450:	419b      	sbcs	r3, r3
 8002452:	4461      	add	r1, ip
 8002454:	4689      	mov	r9, r1
 8002456:	425b      	negs	r3, r3
 8002458:	4499      	add	r9, r3
 800245a:	464b      	mov	r3, r9
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	d444      	bmi.n	80024ea <__aeabi_dsub+0x5c6>
 8002460:	2301      	movs	r3, #1
 8002462:	4698      	mov	r8, r3
 8002464:	e6cc      	b.n	8002200 <__aeabi_dsub+0x2dc>
 8002466:	1bdc      	subs	r4, r3, r7
 8002468:	4662      	mov	r2, ip
 800246a:	42a3      	cmp	r3, r4
 800246c:	419b      	sbcs	r3, r3
 800246e:	1a51      	subs	r1, r2, r1
 8002470:	425b      	negs	r3, r3
 8002472:	1acb      	subs	r3, r1, r3
 8002474:	4699      	mov	r9, r3
 8002476:	2301      	movs	r3, #1
 8002478:	4698      	mov	r8, r3
 800247a:	e5a4      	b.n	8001fc6 <__aeabi_dsub+0xa2>
 800247c:	08ff      	lsrs	r7, r7, #3
 800247e:	074b      	lsls	r3, r1, #29
 8002480:	465d      	mov	r5, fp
 8002482:	433b      	orrs	r3, r7
 8002484:	08cc      	lsrs	r4, r1, #3
 8002486:	e6d7      	b.n	8002238 <__aeabi_dsub+0x314>
 8002488:	4662      	mov	r2, ip
 800248a:	431a      	orrs	r2, r3
 800248c:	0014      	movs	r4, r2
 800248e:	1e63      	subs	r3, r4, #1
 8002490:	419c      	sbcs	r4, r3
 8002492:	e679      	b.n	8002188 <__aeabi_dsub+0x264>
 8002494:	0015      	movs	r5, r2
 8002496:	4664      	mov	r4, ip
 8002498:	3d20      	subs	r5, #32
 800249a:	40ec      	lsrs	r4, r5
 800249c:	46a0      	mov	r8, r4
 800249e:	2a20      	cmp	r2, #32
 80024a0:	d005      	beq.n	80024ae <__aeabi_dsub+0x58a>
 80024a2:	2540      	movs	r5, #64	; 0x40
 80024a4:	4664      	mov	r4, ip
 80024a6:	1aaa      	subs	r2, r5, r2
 80024a8:	4094      	lsls	r4, r2
 80024aa:	4323      	orrs	r3, r4
 80024ac:	469a      	mov	sl, r3
 80024ae:	4654      	mov	r4, sl
 80024b0:	1e63      	subs	r3, r4, #1
 80024b2:	419c      	sbcs	r4, r3
 80024b4:	4643      	mov	r3, r8
 80024b6:	4323      	orrs	r3, r4
 80024b8:	e773      	b.n	80023a2 <__aeabi_dsub+0x47e>
 80024ba:	4662      	mov	r2, ip
 80024bc:	431a      	orrs	r2, r3
 80024be:	d023      	beq.n	8002508 <__aeabi_dsub+0x5e4>
 80024c0:	000a      	movs	r2, r1
 80024c2:	433a      	orrs	r2, r7
 80024c4:	d000      	beq.n	80024c8 <__aeabi_dsub+0x5a4>
 80024c6:	e0a0      	b.n	800260a <__aeabi_dsub+0x6e6>
 80024c8:	4662      	mov	r2, ip
 80024ca:	08db      	lsrs	r3, r3, #3
 80024cc:	0752      	lsls	r2, r2, #29
 80024ce:	4313      	orrs	r3, r2
 80024d0:	4662      	mov	r2, ip
 80024d2:	08d4      	lsrs	r4, r2, #3
 80024d4:	e6b0      	b.n	8002238 <__aeabi_dsub+0x314>
 80024d6:	000b      	movs	r3, r1
 80024d8:	433b      	orrs	r3, r7
 80024da:	d100      	bne.n	80024de <__aeabi_dsub+0x5ba>
 80024dc:	e728      	b.n	8002330 <__aeabi_dsub+0x40c>
 80024de:	08ff      	lsrs	r7, r7, #3
 80024e0:	074b      	lsls	r3, r1, #29
 80024e2:	465d      	mov	r5, fp
 80024e4:	433b      	orrs	r3, r7
 80024e6:	08cc      	lsrs	r4, r1, #3
 80024e8:	e697      	b.n	800221a <__aeabi_dsub+0x2f6>
 80024ea:	2302      	movs	r3, #2
 80024ec:	4698      	mov	r8, r3
 80024ee:	e736      	b.n	800235e <__aeabi_dsub+0x43a>
 80024f0:	1afc      	subs	r4, r7, r3
 80024f2:	42a7      	cmp	r7, r4
 80024f4:	41bf      	sbcs	r7, r7
 80024f6:	4663      	mov	r3, ip
 80024f8:	427f      	negs	r7, r7
 80024fa:	1ac9      	subs	r1, r1, r3
 80024fc:	1bcb      	subs	r3, r1, r7
 80024fe:	4699      	mov	r9, r3
 8002500:	2301      	movs	r3, #1
 8002502:	465d      	mov	r5, fp
 8002504:	4698      	mov	r8, r3
 8002506:	e55e      	b.n	8001fc6 <__aeabi_dsub+0xa2>
 8002508:	074b      	lsls	r3, r1, #29
 800250a:	08ff      	lsrs	r7, r7, #3
 800250c:	433b      	orrs	r3, r7
 800250e:	08cc      	lsrs	r4, r1, #3
 8002510:	e692      	b.n	8002238 <__aeabi_dsub+0x314>
 8002512:	1bdc      	subs	r4, r3, r7
 8002514:	4660      	mov	r0, ip
 8002516:	42a3      	cmp	r3, r4
 8002518:	41b6      	sbcs	r6, r6
 800251a:	1a40      	subs	r0, r0, r1
 800251c:	4276      	negs	r6, r6
 800251e:	1b80      	subs	r0, r0, r6
 8002520:	4681      	mov	r9, r0
 8002522:	0200      	lsls	r0, r0, #8
 8002524:	d560      	bpl.n	80025e8 <__aeabi_dsub+0x6c4>
 8002526:	1afc      	subs	r4, r7, r3
 8002528:	42a7      	cmp	r7, r4
 800252a:	41bf      	sbcs	r7, r7
 800252c:	4663      	mov	r3, ip
 800252e:	427f      	negs	r7, r7
 8002530:	1ac9      	subs	r1, r1, r3
 8002532:	1bcb      	subs	r3, r1, r7
 8002534:	4699      	mov	r9, r3
 8002536:	465d      	mov	r5, fp
 8002538:	e576      	b.n	8002028 <__aeabi_dsub+0x104>
 800253a:	08ff      	lsrs	r7, r7, #3
 800253c:	074b      	lsls	r3, r1, #29
 800253e:	433b      	orrs	r3, r7
 8002540:	08cc      	lsrs	r4, r1, #3
 8002542:	e667      	b.n	8002214 <__aeabi_dsub+0x2f0>
 8002544:	000a      	movs	r2, r1
 8002546:	08db      	lsrs	r3, r3, #3
 8002548:	433a      	orrs	r2, r7
 800254a:	d100      	bne.n	800254e <__aeabi_dsub+0x62a>
 800254c:	e66f      	b.n	800222e <__aeabi_dsub+0x30a>
 800254e:	4662      	mov	r2, ip
 8002550:	0752      	lsls	r2, r2, #29
 8002552:	4313      	orrs	r3, r2
 8002554:	4662      	mov	r2, ip
 8002556:	08d4      	lsrs	r4, r2, #3
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	0312      	lsls	r2, r2, #12
 800255c:	4214      	tst	r4, r2
 800255e:	d007      	beq.n	8002570 <__aeabi_dsub+0x64c>
 8002560:	08c8      	lsrs	r0, r1, #3
 8002562:	4210      	tst	r0, r2
 8002564:	d104      	bne.n	8002570 <__aeabi_dsub+0x64c>
 8002566:	465d      	mov	r5, fp
 8002568:	0004      	movs	r4, r0
 800256a:	08fb      	lsrs	r3, r7, #3
 800256c:	0749      	lsls	r1, r1, #29
 800256e:	430b      	orrs	r3, r1
 8002570:	0f5a      	lsrs	r2, r3, #29
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	08db      	lsrs	r3, r3, #3
 8002576:	0752      	lsls	r2, r2, #29
 8002578:	4313      	orrs	r3, r2
 800257a:	e65d      	b.n	8002238 <__aeabi_dsub+0x314>
 800257c:	074b      	lsls	r3, r1, #29
 800257e:	08ff      	lsrs	r7, r7, #3
 8002580:	433b      	orrs	r3, r7
 8002582:	08cc      	lsrs	r4, r1, #3
 8002584:	e649      	b.n	800221a <__aeabi_dsub+0x2f6>
 8002586:	19dc      	adds	r4, r3, r7
 8002588:	429c      	cmp	r4, r3
 800258a:	419b      	sbcs	r3, r3
 800258c:	4461      	add	r1, ip
 800258e:	4689      	mov	r9, r1
 8002590:	425b      	negs	r3, r3
 8002592:	4499      	add	r9, r3
 8002594:	464b      	mov	r3, r9
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	d400      	bmi.n	800259c <__aeabi_dsub+0x678>
 800259a:	e631      	b.n	8002200 <__aeabi_dsub+0x2dc>
 800259c:	464a      	mov	r2, r9
 800259e:	4b17      	ldr	r3, [pc, #92]	; (80025fc <__aeabi_dsub+0x6d8>)
 80025a0:	401a      	ands	r2, r3
 80025a2:	2301      	movs	r3, #1
 80025a4:	4691      	mov	r9, r2
 80025a6:	4698      	mov	r8, r3
 80025a8:	e62a      	b.n	8002200 <__aeabi_dsub+0x2dc>
 80025aa:	0016      	movs	r6, r2
 80025ac:	4664      	mov	r4, ip
 80025ae:	3e20      	subs	r6, #32
 80025b0:	40f4      	lsrs	r4, r6
 80025b2:	46a0      	mov	r8, r4
 80025b4:	2a20      	cmp	r2, #32
 80025b6:	d005      	beq.n	80025c4 <__aeabi_dsub+0x6a0>
 80025b8:	2640      	movs	r6, #64	; 0x40
 80025ba:	4664      	mov	r4, ip
 80025bc:	1ab2      	subs	r2, r6, r2
 80025be:	4094      	lsls	r4, r2
 80025c0:	4323      	orrs	r3, r4
 80025c2:	469a      	mov	sl, r3
 80025c4:	4654      	mov	r4, sl
 80025c6:	1e63      	subs	r3, r4, #1
 80025c8:	419c      	sbcs	r4, r3
 80025ca:	4643      	mov	r3, r8
 80025cc:	431c      	orrs	r4, r3
 80025ce:	e5db      	b.n	8002188 <__aeabi_dsub+0x264>
 80025d0:	0002      	movs	r2, r0
 80025d2:	2400      	movs	r4, #0
 80025d4:	2300      	movs	r3, #0
 80025d6:	e548      	b.n	800206a <__aeabi_dsub+0x146>
 80025d8:	19dc      	adds	r4, r3, r7
 80025da:	42bc      	cmp	r4, r7
 80025dc:	41bf      	sbcs	r7, r7
 80025de:	4461      	add	r1, ip
 80025e0:	4689      	mov	r9, r1
 80025e2:	427f      	negs	r7, r7
 80025e4:	44b9      	add	r9, r7
 80025e6:	e738      	b.n	800245a <__aeabi_dsub+0x536>
 80025e8:	464b      	mov	r3, r9
 80025ea:	4323      	orrs	r3, r4
 80025ec:	d100      	bne.n	80025f0 <__aeabi_dsub+0x6cc>
 80025ee:	e69f      	b.n	8002330 <__aeabi_dsub+0x40c>
 80025f0:	e606      	b.n	8002200 <__aeabi_dsub+0x2dc>
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	000007fe 	.word	0x000007fe
 80025f8:	000007ff 	.word	0x000007ff
 80025fc:	ff7fffff 	.word	0xff7fffff
 8002600:	08ff      	lsrs	r7, r7, #3
 8002602:	074b      	lsls	r3, r1, #29
 8002604:	433b      	orrs	r3, r7
 8002606:	08cc      	lsrs	r4, r1, #3
 8002608:	e616      	b.n	8002238 <__aeabi_dsub+0x314>
 800260a:	4662      	mov	r2, ip
 800260c:	08db      	lsrs	r3, r3, #3
 800260e:	0752      	lsls	r2, r2, #29
 8002610:	4313      	orrs	r3, r2
 8002612:	4662      	mov	r2, ip
 8002614:	08d4      	lsrs	r4, r2, #3
 8002616:	2280      	movs	r2, #128	; 0x80
 8002618:	0312      	lsls	r2, r2, #12
 800261a:	4214      	tst	r4, r2
 800261c:	d007      	beq.n	800262e <__aeabi_dsub+0x70a>
 800261e:	08c8      	lsrs	r0, r1, #3
 8002620:	4210      	tst	r0, r2
 8002622:	d104      	bne.n	800262e <__aeabi_dsub+0x70a>
 8002624:	465d      	mov	r5, fp
 8002626:	0004      	movs	r4, r0
 8002628:	08fb      	lsrs	r3, r7, #3
 800262a:	0749      	lsls	r1, r1, #29
 800262c:	430b      	orrs	r3, r1
 800262e:	0f5a      	lsrs	r2, r3, #29
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	0752      	lsls	r2, r2, #29
 8002634:	08db      	lsrs	r3, r3, #3
 8002636:	4313      	orrs	r3, r2
 8002638:	e5fe      	b.n	8002238 <__aeabi_dsub+0x314>
 800263a:	2300      	movs	r3, #0
 800263c:	4a01      	ldr	r2, [pc, #4]	; (8002644 <__aeabi_dsub+0x720>)
 800263e:	001c      	movs	r4, r3
 8002640:	e513      	b.n	800206a <__aeabi_dsub+0x146>
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	000007ff 	.word	0x000007ff

08002648 <__aeabi_dcmpun>:
 8002648:	b570      	push	{r4, r5, r6, lr}
 800264a:	0005      	movs	r5, r0
 800264c:	480c      	ldr	r0, [pc, #48]	; (8002680 <__aeabi_dcmpun+0x38>)
 800264e:	031c      	lsls	r4, r3, #12
 8002650:	0016      	movs	r6, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	030a      	lsls	r2, r1, #12
 8002656:	0049      	lsls	r1, r1, #1
 8002658:	0b12      	lsrs	r2, r2, #12
 800265a:	0d49      	lsrs	r1, r1, #21
 800265c:	0b24      	lsrs	r4, r4, #12
 800265e:	0d5b      	lsrs	r3, r3, #21
 8002660:	4281      	cmp	r1, r0
 8002662:	d008      	beq.n	8002676 <__aeabi_dcmpun+0x2e>
 8002664:	4a06      	ldr	r2, [pc, #24]	; (8002680 <__aeabi_dcmpun+0x38>)
 8002666:	2000      	movs	r0, #0
 8002668:	4293      	cmp	r3, r2
 800266a:	d103      	bne.n	8002674 <__aeabi_dcmpun+0x2c>
 800266c:	0020      	movs	r0, r4
 800266e:	4330      	orrs	r0, r6
 8002670:	1e43      	subs	r3, r0, #1
 8002672:	4198      	sbcs	r0, r3
 8002674:	bd70      	pop	{r4, r5, r6, pc}
 8002676:	2001      	movs	r0, #1
 8002678:	432a      	orrs	r2, r5
 800267a:	d1fb      	bne.n	8002674 <__aeabi_dcmpun+0x2c>
 800267c:	e7f2      	b.n	8002664 <__aeabi_dcmpun+0x1c>
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	000007ff 	.word	0x000007ff

08002684 <__aeabi_d2iz>:
 8002684:	000a      	movs	r2, r1
 8002686:	b530      	push	{r4, r5, lr}
 8002688:	4c13      	ldr	r4, [pc, #76]	; (80026d8 <__aeabi_d2iz+0x54>)
 800268a:	0053      	lsls	r3, r2, #1
 800268c:	0309      	lsls	r1, r1, #12
 800268e:	0005      	movs	r5, r0
 8002690:	0b09      	lsrs	r1, r1, #12
 8002692:	2000      	movs	r0, #0
 8002694:	0d5b      	lsrs	r3, r3, #21
 8002696:	0fd2      	lsrs	r2, r2, #31
 8002698:	42a3      	cmp	r3, r4
 800269a:	dd04      	ble.n	80026a6 <__aeabi_d2iz+0x22>
 800269c:	480f      	ldr	r0, [pc, #60]	; (80026dc <__aeabi_d2iz+0x58>)
 800269e:	4283      	cmp	r3, r0
 80026a0:	dd02      	ble.n	80026a8 <__aeabi_d2iz+0x24>
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <__aeabi_d2iz+0x5c>)
 80026a4:	18d0      	adds	r0, r2, r3
 80026a6:	bd30      	pop	{r4, r5, pc}
 80026a8:	2080      	movs	r0, #128	; 0x80
 80026aa:	0340      	lsls	r0, r0, #13
 80026ac:	4301      	orrs	r1, r0
 80026ae:	480d      	ldr	r0, [pc, #52]	; (80026e4 <__aeabi_d2iz+0x60>)
 80026b0:	1ac0      	subs	r0, r0, r3
 80026b2:	281f      	cmp	r0, #31
 80026b4:	dd08      	ble.n	80026c8 <__aeabi_d2iz+0x44>
 80026b6:	480c      	ldr	r0, [pc, #48]	; (80026e8 <__aeabi_d2iz+0x64>)
 80026b8:	1ac3      	subs	r3, r0, r3
 80026ba:	40d9      	lsrs	r1, r3
 80026bc:	000b      	movs	r3, r1
 80026be:	4258      	negs	r0, r3
 80026c0:	2a00      	cmp	r2, #0
 80026c2:	d1f0      	bne.n	80026a6 <__aeabi_d2iz+0x22>
 80026c4:	0018      	movs	r0, r3
 80026c6:	e7ee      	b.n	80026a6 <__aeabi_d2iz+0x22>
 80026c8:	4c08      	ldr	r4, [pc, #32]	; (80026ec <__aeabi_d2iz+0x68>)
 80026ca:	40c5      	lsrs	r5, r0
 80026cc:	46a4      	mov	ip, r4
 80026ce:	4463      	add	r3, ip
 80026d0:	4099      	lsls	r1, r3
 80026d2:	000b      	movs	r3, r1
 80026d4:	432b      	orrs	r3, r5
 80026d6:	e7f2      	b.n	80026be <__aeabi_d2iz+0x3a>
 80026d8:	000003fe 	.word	0x000003fe
 80026dc:	0000041d 	.word	0x0000041d
 80026e0:	7fffffff 	.word	0x7fffffff
 80026e4:	00000433 	.word	0x00000433
 80026e8:	00000413 	.word	0x00000413
 80026ec:	fffffbed 	.word	0xfffffbed

080026f0 <__aeabi_i2d>:
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	2800      	cmp	r0, #0
 80026f4:	d016      	beq.n	8002724 <__aeabi_i2d+0x34>
 80026f6:	17c3      	asrs	r3, r0, #31
 80026f8:	18c5      	adds	r5, r0, r3
 80026fa:	405d      	eors	r5, r3
 80026fc:	0fc4      	lsrs	r4, r0, #31
 80026fe:	0028      	movs	r0, r5
 8002700:	f000 f91c 	bl	800293c <__clzsi2>
 8002704:	4a11      	ldr	r2, [pc, #68]	; (800274c <__aeabi_i2d+0x5c>)
 8002706:	1a12      	subs	r2, r2, r0
 8002708:	280a      	cmp	r0, #10
 800270a:	dc16      	bgt.n	800273a <__aeabi_i2d+0x4a>
 800270c:	0003      	movs	r3, r0
 800270e:	002e      	movs	r6, r5
 8002710:	3315      	adds	r3, #21
 8002712:	409e      	lsls	r6, r3
 8002714:	230b      	movs	r3, #11
 8002716:	1a18      	subs	r0, r3, r0
 8002718:	40c5      	lsrs	r5, r0
 800271a:	0552      	lsls	r2, r2, #21
 800271c:	032d      	lsls	r5, r5, #12
 800271e:	0b2d      	lsrs	r5, r5, #12
 8002720:	0d53      	lsrs	r3, r2, #21
 8002722:	e003      	b.n	800272c <__aeabi_i2d+0x3c>
 8002724:	2400      	movs	r4, #0
 8002726:	2300      	movs	r3, #0
 8002728:	2500      	movs	r5, #0
 800272a:	2600      	movs	r6, #0
 800272c:	051b      	lsls	r3, r3, #20
 800272e:	432b      	orrs	r3, r5
 8002730:	07e4      	lsls	r4, r4, #31
 8002732:	4323      	orrs	r3, r4
 8002734:	0030      	movs	r0, r6
 8002736:	0019      	movs	r1, r3
 8002738:	bd70      	pop	{r4, r5, r6, pc}
 800273a:	380b      	subs	r0, #11
 800273c:	4085      	lsls	r5, r0
 800273e:	0552      	lsls	r2, r2, #21
 8002740:	032d      	lsls	r5, r5, #12
 8002742:	2600      	movs	r6, #0
 8002744:	0b2d      	lsrs	r5, r5, #12
 8002746:	0d53      	lsrs	r3, r2, #21
 8002748:	e7f0      	b.n	800272c <__aeabi_i2d+0x3c>
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	0000041e 	.word	0x0000041e

08002750 <__aeabi_ui2d>:
 8002750:	b510      	push	{r4, lr}
 8002752:	1e04      	subs	r4, r0, #0
 8002754:	d010      	beq.n	8002778 <__aeabi_ui2d+0x28>
 8002756:	f000 f8f1 	bl	800293c <__clzsi2>
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <__aeabi_ui2d+0x48>)
 800275c:	1a1b      	subs	r3, r3, r0
 800275e:	280a      	cmp	r0, #10
 8002760:	dc11      	bgt.n	8002786 <__aeabi_ui2d+0x36>
 8002762:	220b      	movs	r2, #11
 8002764:	0021      	movs	r1, r4
 8002766:	1a12      	subs	r2, r2, r0
 8002768:	40d1      	lsrs	r1, r2
 800276a:	3015      	adds	r0, #21
 800276c:	030a      	lsls	r2, r1, #12
 800276e:	055b      	lsls	r3, r3, #21
 8002770:	4084      	lsls	r4, r0
 8002772:	0b12      	lsrs	r2, r2, #12
 8002774:	0d5b      	lsrs	r3, r3, #21
 8002776:	e001      	b.n	800277c <__aeabi_ui2d+0x2c>
 8002778:	2300      	movs	r3, #0
 800277a:	2200      	movs	r2, #0
 800277c:	051b      	lsls	r3, r3, #20
 800277e:	4313      	orrs	r3, r2
 8002780:	0020      	movs	r0, r4
 8002782:	0019      	movs	r1, r3
 8002784:	bd10      	pop	{r4, pc}
 8002786:	0022      	movs	r2, r4
 8002788:	380b      	subs	r0, #11
 800278a:	4082      	lsls	r2, r0
 800278c:	055b      	lsls	r3, r3, #21
 800278e:	0312      	lsls	r2, r2, #12
 8002790:	2400      	movs	r4, #0
 8002792:	0b12      	lsrs	r2, r2, #12
 8002794:	0d5b      	lsrs	r3, r3, #21
 8002796:	e7f1      	b.n	800277c <__aeabi_ui2d+0x2c>
 8002798:	0000041e 	.word	0x0000041e

0800279c <__aeabi_f2d>:
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	0043      	lsls	r3, r0, #1
 80027a0:	0246      	lsls	r6, r0, #9
 80027a2:	0fc4      	lsrs	r4, r0, #31
 80027a4:	20fe      	movs	r0, #254	; 0xfe
 80027a6:	0e1b      	lsrs	r3, r3, #24
 80027a8:	1c59      	adds	r1, r3, #1
 80027aa:	0a75      	lsrs	r5, r6, #9
 80027ac:	4208      	tst	r0, r1
 80027ae:	d00c      	beq.n	80027ca <__aeabi_f2d+0x2e>
 80027b0:	22e0      	movs	r2, #224	; 0xe0
 80027b2:	0092      	lsls	r2, r2, #2
 80027b4:	4694      	mov	ip, r2
 80027b6:	076d      	lsls	r5, r5, #29
 80027b8:	0b36      	lsrs	r6, r6, #12
 80027ba:	4463      	add	r3, ip
 80027bc:	051b      	lsls	r3, r3, #20
 80027be:	4333      	orrs	r3, r6
 80027c0:	07e4      	lsls	r4, r4, #31
 80027c2:	4323      	orrs	r3, r4
 80027c4:	0028      	movs	r0, r5
 80027c6:	0019      	movs	r1, r3
 80027c8:	bd70      	pop	{r4, r5, r6, pc}
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d114      	bne.n	80027f8 <__aeabi_f2d+0x5c>
 80027ce:	2d00      	cmp	r5, #0
 80027d0:	d01b      	beq.n	800280a <__aeabi_f2d+0x6e>
 80027d2:	0028      	movs	r0, r5
 80027d4:	f000 f8b2 	bl	800293c <__clzsi2>
 80027d8:	280a      	cmp	r0, #10
 80027da:	dc1c      	bgt.n	8002816 <__aeabi_f2d+0x7a>
 80027dc:	230b      	movs	r3, #11
 80027de:	002e      	movs	r6, r5
 80027e0:	1a1b      	subs	r3, r3, r0
 80027e2:	40de      	lsrs	r6, r3
 80027e4:	0003      	movs	r3, r0
 80027e6:	3315      	adds	r3, #21
 80027e8:	409d      	lsls	r5, r3
 80027ea:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <__aeabi_f2d+0x88>)
 80027ec:	0336      	lsls	r6, r6, #12
 80027ee:	1a12      	subs	r2, r2, r0
 80027f0:	0552      	lsls	r2, r2, #21
 80027f2:	0b36      	lsrs	r6, r6, #12
 80027f4:	0d53      	lsrs	r3, r2, #21
 80027f6:	e7e1      	b.n	80027bc <__aeabi_f2d+0x20>
 80027f8:	2d00      	cmp	r5, #0
 80027fa:	d009      	beq.n	8002810 <__aeabi_f2d+0x74>
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	0b36      	lsrs	r6, r6, #12
 8002800:	0312      	lsls	r2, r2, #12
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <__aeabi_f2d+0x8c>)
 8002804:	076d      	lsls	r5, r5, #29
 8002806:	4316      	orrs	r6, r2
 8002808:	e7d8      	b.n	80027bc <__aeabi_f2d+0x20>
 800280a:	2300      	movs	r3, #0
 800280c:	2600      	movs	r6, #0
 800280e:	e7d5      	b.n	80027bc <__aeabi_f2d+0x20>
 8002810:	2600      	movs	r6, #0
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <__aeabi_f2d+0x8c>)
 8002814:	e7d2      	b.n	80027bc <__aeabi_f2d+0x20>
 8002816:	0003      	movs	r3, r0
 8002818:	3b0b      	subs	r3, #11
 800281a:	409d      	lsls	r5, r3
 800281c:	002e      	movs	r6, r5
 800281e:	2500      	movs	r5, #0
 8002820:	e7e3      	b.n	80027ea <__aeabi_f2d+0x4e>
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	00000389 	.word	0x00000389
 8002828:	000007ff 	.word	0x000007ff

0800282c <__aeabi_d2f>:
 800282c:	0002      	movs	r2, r0
 800282e:	004b      	lsls	r3, r1, #1
 8002830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002832:	0d5b      	lsrs	r3, r3, #21
 8002834:	030c      	lsls	r4, r1, #12
 8002836:	4e3d      	ldr	r6, [pc, #244]	; (800292c <__aeabi_d2f+0x100>)
 8002838:	0a64      	lsrs	r4, r4, #9
 800283a:	0f40      	lsrs	r0, r0, #29
 800283c:	1c5f      	adds	r7, r3, #1
 800283e:	0fc9      	lsrs	r1, r1, #31
 8002840:	4304      	orrs	r4, r0
 8002842:	00d5      	lsls	r5, r2, #3
 8002844:	4237      	tst	r7, r6
 8002846:	d00a      	beq.n	800285e <__aeabi_d2f+0x32>
 8002848:	4839      	ldr	r0, [pc, #228]	; (8002930 <__aeabi_d2f+0x104>)
 800284a:	181e      	adds	r6, r3, r0
 800284c:	2efe      	cmp	r6, #254	; 0xfe
 800284e:	dd16      	ble.n	800287e <__aeabi_d2f+0x52>
 8002850:	20ff      	movs	r0, #255	; 0xff
 8002852:	2400      	movs	r4, #0
 8002854:	05c0      	lsls	r0, r0, #23
 8002856:	4320      	orrs	r0, r4
 8002858:	07c9      	lsls	r1, r1, #31
 800285a:	4308      	orrs	r0, r1
 800285c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <__aeabi_d2f+0x44>
 8002862:	432c      	orrs	r4, r5
 8002864:	d026      	beq.n	80028b4 <__aeabi_d2f+0x88>
 8002866:	2205      	movs	r2, #5
 8002868:	0192      	lsls	r2, r2, #6
 800286a:	0a54      	lsrs	r4, r2, #9
 800286c:	b2d8      	uxtb	r0, r3
 800286e:	e7f1      	b.n	8002854 <__aeabi_d2f+0x28>
 8002870:	4325      	orrs	r5, r4
 8002872:	d0ed      	beq.n	8002850 <__aeabi_d2f+0x24>
 8002874:	2080      	movs	r0, #128	; 0x80
 8002876:	03c0      	lsls	r0, r0, #15
 8002878:	4304      	orrs	r4, r0
 800287a:	20ff      	movs	r0, #255	; 0xff
 800287c:	e7ea      	b.n	8002854 <__aeabi_d2f+0x28>
 800287e:	2e00      	cmp	r6, #0
 8002880:	dd1b      	ble.n	80028ba <__aeabi_d2f+0x8e>
 8002882:	0192      	lsls	r2, r2, #6
 8002884:	1e53      	subs	r3, r2, #1
 8002886:	419a      	sbcs	r2, r3
 8002888:	00e4      	lsls	r4, r4, #3
 800288a:	0f6d      	lsrs	r5, r5, #29
 800288c:	4322      	orrs	r2, r4
 800288e:	432a      	orrs	r2, r5
 8002890:	0753      	lsls	r3, r2, #29
 8002892:	d048      	beq.n	8002926 <__aeabi_d2f+0xfa>
 8002894:	230f      	movs	r3, #15
 8002896:	4013      	ands	r3, r2
 8002898:	2b04      	cmp	r3, #4
 800289a:	d000      	beq.n	800289e <__aeabi_d2f+0x72>
 800289c:	3204      	adds	r2, #4
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	04db      	lsls	r3, r3, #19
 80028a2:	4013      	ands	r3, r2
 80028a4:	d03f      	beq.n	8002926 <__aeabi_d2f+0xfa>
 80028a6:	1c70      	adds	r0, r6, #1
 80028a8:	2efe      	cmp	r6, #254	; 0xfe
 80028aa:	d0d1      	beq.n	8002850 <__aeabi_d2f+0x24>
 80028ac:	0192      	lsls	r2, r2, #6
 80028ae:	0a54      	lsrs	r4, r2, #9
 80028b0:	b2c0      	uxtb	r0, r0
 80028b2:	e7cf      	b.n	8002854 <__aeabi_d2f+0x28>
 80028b4:	2000      	movs	r0, #0
 80028b6:	2400      	movs	r4, #0
 80028b8:	e7cc      	b.n	8002854 <__aeabi_d2f+0x28>
 80028ba:	0032      	movs	r2, r6
 80028bc:	3217      	adds	r2, #23
 80028be:	db22      	blt.n	8002906 <__aeabi_d2f+0xda>
 80028c0:	2080      	movs	r0, #128	; 0x80
 80028c2:	0400      	lsls	r0, r0, #16
 80028c4:	4320      	orrs	r0, r4
 80028c6:	241e      	movs	r4, #30
 80028c8:	1ba4      	subs	r4, r4, r6
 80028ca:	2c1f      	cmp	r4, #31
 80028cc:	dd1d      	ble.n	800290a <__aeabi_d2f+0xde>
 80028ce:	2202      	movs	r2, #2
 80028d0:	4252      	negs	r2, r2
 80028d2:	1b96      	subs	r6, r2, r6
 80028d4:	0002      	movs	r2, r0
 80028d6:	40f2      	lsrs	r2, r6
 80028d8:	0016      	movs	r6, r2
 80028da:	2c20      	cmp	r4, #32
 80028dc:	d004      	beq.n	80028e8 <__aeabi_d2f+0xbc>
 80028de:	4a15      	ldr	r2, [pc, #84]	; (8002934 <__aeabi_d2f+0x108>)
 80028e0:	4694      	mov	ip, r2
 80028e2:	4463      	add	r3, ip
 80028e4:	4098      	lsls	r0, r3
 80028e6:	4305      	orrs	r5, r0
 80028e8:	002a      	movs	r2, r5
 80028ea:	1e53      	subs	r3, r2, #1
 80028ec:	419a      	sbcs	r2, r3
 80028ee:	4332      	orrs	r2, r6
 80028f0:	2600      	movs	r6, #0
 80028f2:	0753      	lsls	r3, r2, #29
 80028f4:	d1ce      	bne.n	8002894 <__aeabi_d2f+0x68>
 80028f6:	2480      	movs	r4, #128	; 0x80
 80028f8:	0013      	movs	r3, r2
 80028fa:	04e4      	lsls	r4, r4, #19
 80028fc:	2001      	movs	r0, #1
 80028fe:	4023      	ands	r3, r4
 8002900:	4222      	tst	r2, r4
 8002902:	d1d3      	bne.n	80028ac <__aeabi_d2f+0x80>
 8002904:	e7b0      	b.n	8002868 <__aeabi_d2f+0x3c>
 8002906:	2300      	movs	r3, #0
 8002908:	e7ad      	b.n	8002866 <__aeabi_d2f+0x3a>
 800290a:	4a0b      	ldr	r2, [pc, #44]	; (8002938 <__aeabi_d2f+0x10c>)
 800290c:	4694      	mov	ip, r2
 800290e:	002a      	movs	r2, r5
 8002910:	40e2      	lsrs	r2, r4
 8002912:	0014      	movs	r4, r2
 8002914:	002a      	movs	r2, r5
 8002916:	4463      	add	r3, ip
 8002918:	409a      	lsls	r2, r3
 800291a:	4098      	lsls	r0, r3
 800291c:	1e55      	subs	r5, r2, #1
 800291e:	41aa      	sbcs	r2, r5
 8002920:	4302      	orrs	r2, r0
 8002922:	4322      	orrs	r2, r4
 8002924:	e7e4      	b.n	80028f0 <__aeabi_d2f+0xc4>
 8002926:	0033      	movs	r3, r6
 8002928:	e79e      	b.n	8002868 <__aeabi_d2f+0x3c>
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	000007fe 	.word	0x000007fe
 8002930:	fffffc80 	.word	0xfffffc80
 8002934:	fffffca2 	.word	0xfffffca2
 8002938:	fffffc82 	.word	0xfffffc82

0800293c <__clzsi2>:
 800293c:	211c      	movs	r1, #28
 800293e:	2301      	movs	r3, #1
 8002940:	041b      	lsls	r3, r3, #16
 8002942:	4298      	cmp	r0, r3
 8002944:	d301      	bcc.n	800294a <__clzsi2+0xe>
 8002946:	0c00      	lsrs	r0, r0, #16
 8002948:	3910      	subs	r1, #16
 800294a:	0a1b      	lsrs	r3, r3, #8
 800294c:	4298      	cmp	r0, r3
 800294e:	d301      	bcc.n	8002954 <__clzsi2+0x18>
 8002950:	0a00      	lsrs	r0, r0, #8
 8002952:	3908      	subs	r1, #8
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	4298      	cmp	r0, r3
 8002958:	d301      	bcc.n	800295e <__clzsi2+0x22>
 800295a:	0900      	lsrs	r0, r0, #4
 800295c:	3904      	subs	r1, #4
 800295e:	a202      	add	r2, pc, #8	; (adr r2, 8002968 <__clzsi2+0x2c>)
 8002960:	5c10      	ldrb	r0, [r2, r0]
 8002962:	1840      	adds	r0, r0, r1
 8002964:	4770      	bx	lr
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	02020304 	.word	0x02020304
 800296c:	01010101 	.word	0x01010101
	...

08002978 <debugPrintln>:
	over the UART and to automatically send a new line
	character after it.
*/
void debugPrintln(UART_HandleTypeDef *uart_handle,
				  char _out[])
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(uart_handle, (uint8_t *)_out,
					  strlen(_out), 60);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	0018      	movs	r0, r3
 8002986:	f7fd fbbf 	bl	8000108 <strlen>
 800298a:	0003      	movs	r3, r0
	HAL_UART_Transmit(uart_handle, (uint8_t *)_out,
 800298c:	b29a      	uxth	r2, r3
 800298e:	6839      	ldr	r1, [r7, #0]
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	233c      	movs	r3, #60	; 0x3c
 8002994:	f003 f9b4 	bl	8005d00 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8002998:	210c      	movs	r1, #12
 800299a:	187b      	adds	r3, r7, r1
 800299c:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <debugPrintln+0x3c>)
 800299e:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(uart_handle, (uint8_t *)newline, 2, 10);
 80029a0:	1879      	adds	r1, r7, r1
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	230a      	movs	r3, #10
 80029a6:	2202      	movs	r2, #2
 80029a8:	f003 f9aa 	bl	8005d00 <HAL_UART_Transmit>
}
 80029ac:	46c0      	nop			; (mov r8, r8)
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b004      	add	sp, #16
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	00000a0d 	.word	0x00000a0d

080029b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ba:	4c3c      	ldr	r4, [pc, #240]	; (8002aac <main+0xf4>)
 80029bc:	44a5      	add	sp, r4
 80029be:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029c0:	f001 fa34 	bl	8003e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029c4:	f000 f884 	bl	8002ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029c8:	f000 f948 	bl	8002c5c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80029cc:	f000 f916 	bl	8002bfc <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80029d0:	f000 f8d6 	bl	8002b80 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */


	icm20948_init();
 80029d4:	f000 f9b6 	bl	8002d44 <icm20948_init>

	 ak09916_init();
 80029d8:	f000 f9e4 	bl	8002da4 <ak09916_init>
	{
		char buf[1000];
		char buf101[256];
		char buf102[256];
		char buff2[1000];
		debugPrintln(&huart1,"==================================IMU Data========================================");
 80029dc:	4a34      	ldr	r2, [pc, #208]	; (8002ab0 <main+0xf8>)
 80029de:	4b35      	ldr	r3, [pc, #212]	; (8002ab4 <main+0xfc>)
 80029e0:	0011      	movs	r1, r2
 80029e2:	0018      	movs	r0, r3
 80029e4:	f7ff ffc8 	bl	8002978 <debugPrintln>

		icm20948_gyro_read_dps(&my_gyro);
 80029e8:	4b33      	ldr	r3, [pc, #204]	; (8002ab8 <main+0x100>)
 80029ea:	0018      	movs	r0, r3
 80029ec:	f000 fa78 	bl	8002ee0 <icm20948_gyro_read_dps>
		icm20948_accel_read_g(&my_accel);
 80029f0:	4b32      	ldr	r3, [pc, #200]	; (8002abc <main+0x104>)
 80029f2:	0018      	movs	r0, r3
 80029f4:	f000 faa6 	bl	8002f44 <icm20948_accel_read_g>
	    sprintf(buff2,"\r\nAccelerometer Data : X:%f Y:%f Z:%f\n",my_accel.x,my_accel.y,my_accel.z);
 80029f8:	4b30      	ldr	r3, [pc, #192]	; (8002abc <main+0x104>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	1c18      	adds	r0, r3, #0
 80029fe:	f7ff fecd 	bl	800279c <__aeabi_f2d>
 8002a02:	6038      	str	r0, [r7, #0]
 8002a04:	6079      	str	r1, [r7, #4]
 8002a06:	4b2d      	ldr	r3, [pc, #180]	; (8002abc <main+0x104>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	1c18      	adds	r0, r3, #0
 8002a0c:	f7ff fec6 	bl	800279c <__aeabi_f2d>
 8002a10:	0004      	movs	r4, r0
 8002a12:	000d      	movs	r5, r1
 8002a14:	4b29      	ldr	r3, [pc, #164]	; (8002abc <main+0x104>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	1c18      	adds	r0, r3, #0
 8002a1a:	f7ff febf 	bl	800279c <__aeabi_f2d>
 8002a1e:	0002      	movs	r2, r0
 8002a20:	000b      	movs	r3, r1
 8002a22:	4927      	ldr	r1, [pc, #156]	; (8002ac0 <main+0x108>)
 8002a24:	2684      	movs	r6, #132	; 0x84
 8002a26:	0076      	lsls	r6, r6, #1
 8002a28:	19b8      	adds	r0, r7, r6
 8002a2a:	9202      	str	r2, [sp, #8]
 8002a2c:	9303      	str	r3, [sp, #12]
 8002a2e:	9400      	str	r4, [sp, #0]
 8002a30:	9501      	str	r5, [sp, #4]
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f004 fbb9 	bl	80071ac <siprintf>
	    sprintf(buf101,"\r\nGyroscope Data: X:%f Y:%f Z:%f",my_gyro.x,my_gyro.y,my_gyro.z);
 8002a3a:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <main+0x100>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	1c18      	adds	r0, r3, #0
 8002a40:	f7ff feac 	bl	800279c <__aeabi_f2d>
 8002a44:	6038      	str	r0, [r7, #0]
 8002a46:	6079      	str	r1, [r7, #4]
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <main+0x100>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	1c18      	adds	r0, r3, #0
 8002a4e:	f7ff fea5 	bl	800279c <__aeabi_f2d>
 8002a52:	0004      	movs	r4, r0
 8002a54:	000d      	movs	r5, r1
 8002a56:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <main+0x100>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	1c18      	adds	r0, r3, #0
 8002a5c:	f7ff fe9e 	bl	800279c <__aeabi_f2d>
 8002a60:	0002      	movs	r2, r0
 8002a62:	000b      	movs	r3, r1
 8002a64:	4917      	ldr	r1, [pc, #92]	; (8002ac4 <main+0x10c>)
 8002a66:	2008      	movs	r0, #8
 8002a68:	1838      	adds	r0, r7, r0
 8002a6a:	9202      	str	r2, [sp, #8]
 8002a6c:	9303      	str	r3, [sp, #12]
 8002a6e:	9400      	str	r4, [sp, #0]
 8002a70:	9501      	str	r5, [sp, #4]
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f004 fb99 	bl	80071ac <siprintf>
	    strcat(buff2,buf101);
 8002a7a:	2308      	movs	r3, #8
 8002a7c:	18fa      	adds	r2, r7, r3
 8002a7e:	19bb      	adds	r3, r7, r6
 8002a80:	0011      	movs	r1, r2
 8002a82:	0018      	movs	r0, r3
 8002a84:	f004 fbb2 	bl	80071ec <strcat>
	    debugPrintln(&huart1,buff2);
 8002a88:	19ba      	adds	r2, r7, r6
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <main+0xfc>)
 8002a8c:	0011      	movs	r1, r2
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f7ff ff72 	bl	8002978 <debugPrintln>
	    debugPrintln(&huart1,"==================================================================================\n");
 8002a94:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <main+0x110>)
 8002a96:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <main+0xfc>)
 8002a98:	0011      	movs	r1, r2
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f7ff ff6c 	bl	8002978 <debugPrintln>
	    HAL_Delay(5000);
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <main+0x114>)
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f001 fa26 	bl	8003ef4 <HAL_Delay>
	{
 8002aa8:	e798      	b.n	80029dc <main+0x24>
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	fffffafc 	.word	0xfffffafc
 8002ab0:	0800af38 	.word	0x0800af38
 8002ab4:	20000278 	.word	0x20000278
 8002ab8:	200001fc 	.word	0x200001fc
 8002abc:	20000208 	.word	0x20000208
 8002ac0:	0800af8c 	.word	0x0800af8c
 8002ac4:	0800afb4 	.word	0x0800afb4
 8002ac8:	0800afd8 	.word	0x0800afd8
 8002acc:	00001388 	.word	0x00001388

08002ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ad0:	b590      	push	{r4, r7, lr}
 8002ad2:	b097      	sub	sp, #92	; 0x5c
 8002ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ad6:	2428      	movs	r4, #40	; 0x28
 8002ad8:	193b      	adds	r3, r7, r4
 8002ada:	0018      	movs	r0, r3
 8002adc:	2330      	movs	r3, #48	; 0x30
 8002ade:	001a      	movs	r2, r3
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	f003 fce1 	bl	80064a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ae6:	2318      	movs	r3, #24
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	0018      	movs	r0, r3
 8002aec:	2310      	movs	r3, #16
 8002aee:	001a      	movs	r2, r3
 8002af0:	2100      	movs	r1, #0
 8002af2:	f003 fcd9 	bl	80064a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	0018      	movs	r0, r3
 8002afa:	2314      	movs	r3, #20
 8002afc:	001a      	movs	r2, r3
 8002afe:	2100      	movs	r1, #0
 8002b00:	f003 fcd2 	bl	80064a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b04:	0021      	movs	r1, r4
 8002b06:	187b      	adds	r3, r7, r1
 8002b08:	2202      	movs	r2, #2
 8002b0a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b0c:	187b      	adds	r3, r7, r1
 8002b0e:	2201      	movs	r2, #1
 8002b10:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b12:	187b      	adds	r3, r7, r1
 8002b14:	2210      	movs	r2, #16
 8002b16:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b18:	187b      	adds	r3, r7, r1
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b1e:	187b      	adds	r3, r7, r1
 8002b20:	0018      	movs	r0, r3
 8002b22:	f001 fc4d 	bl	80043c0 <HAL_RCC_OscConfig>
 8002b26:	1e03      	subs	r3, r0, #0
 8002b28:	d001      	beq.n	8002b2e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002b2a:	f000 ffb6 	bl	8003a9a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b2e:	2118      	movs	r1, #24
 8002b30:	187b      	adds	r3, r7, r1
 8002b32:	2207      	movs	r2, #7
 8002b34:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b36:	187b      	adds	r3, r7, r1
 8002b38:	2200      	movs	r2, #0
 8002b3a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b3c:	187b      	adds	r3, r7, r1
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b42:	187b      	adds	r3, r7, r1
 8002b44:	2200      	movs	r2, #0
 8002b46:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b48:	187b      	adds	r3, r7, r1
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f001 ff51 	bl	80049f4 <HAL_RCC_ClockConfig>
 8002b52:	1e03      	subs	r3, r0, #0
 8002b54:	d001      	beq.n	8002b5a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002b56:	f000 ffa0 	bl	8003a9a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b5a:	1d3b      	adds	r3, r7, #4
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f002 f895 	bl	8004c98 <HAL_RCCEx_PeriphCLKConfig>
 8002b6e:	1e03      	subs	r3, r0, #0
 8002b70:	d001      	beq.n	8002b76 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002b72:	f000 ff92 	bl	8003a9a <Error_Handler>
  }
}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b017      	add	sp, #92	; 0x5c
 8002b7c:	bd90      	pop	{r4, r7, pc}
	...

08002b80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002b84:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <MX_SPI2_Init+0x74>)
 8002b86:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <MX_SPI2_Init+0x78>)
 8002b88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <MX_SPI2_Init+0x74>)
 8002b8c:	2282      	movs	r2, #130	; 0x82
 8002b8e:	0052      	lsls	r2, r2, #1
 8002b90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b92:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <MX_SPI2_Init+0x74>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b98:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <MX_SPI2_Init+0x74>)
 8002b9a:	22e0      	movs	r2, #224	; 0xe0
 8002b9c:	00d2      	lsls	r2, r2, #3
 8002b9e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ba0:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <MX_SPI2_Init+0x74>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <MX_SPI2_Init+0x74>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <MX_SPI2_Init+0x74>)
 8002bae:	2280      	movs	r2, #128	; 0x80
 8002bb0:	0092      	lsls	r2, r2, #2
 8002bb2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bb4:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <MX_SPI2_Init+0x74>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bba:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <MX_SPI2_Init+0x74>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <MX_SPI2_Init+0x74>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <MX_SPI2_Init+0x74>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002bcc:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <MX_SPI2_Init+0x74>)
 8002bce:	2207      	movs	r2, #7
 8002bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <MX_SPI2_Init+0x74>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <MX_SPI2_Init+0x74>)
 8002bda:	2208      	movs	r2, #8
 8002bdc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002bde:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <MX_SPI2_Init+0x74>)
 8002be0:	0018      	movs	r0, r3
 8002be2:	f002 f937 	bl	8004e54 <HAL_SPI_Init>
 8002be6:	1e03      	subs	r3, r0, #0
 8002be8:	d001      	beq.n	8002bee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002bea:	f000 ff56 	bl	8003a9a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000214 	.word	0x20000214
 8002bf8:	40003800 	.word	0x40003800

08002bfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c00:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c02:	4a15      	ldr	r2, [pc, #84]	; (8002c58 <MX_USART1_UART_Init+0x5c>)
 8002c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002c06:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c08:	2296      	movs	r2, #150	; 0x96
 8002c0a:	0212      	lsls	r2, r2, #8
 8002c0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c0e:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c22:	220c      	movs	r2, #12
 8002c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c40:	0018      	movs	r0, r3
 8002c42:	f003 f809 	bl	8005c58 <HAL_UART_Init>
 8002c46:	1e03      	subs	r3, r0, #0
 8002c48:	d001      	beq.n	8002c4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c4a:	f000 ff26 	bl	8003a9a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000278 	.word	0x20000278
 8002c58:	40013800 	.word	0x40013800

08002c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b089      	sub	sp, #36	; 0x24
 8002c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c62:	240c      	movs	r4, #12
 8002c64:	193b      	adds	r3, r7, r4
 8002c66:	0018      	movs	r0, r3
 8002c68:	2314      	movs	r3, #20
 8002c6a:	001a      	movs	r2, r3
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	f003 fc1b 	bl	80064a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c72:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <MX_GPIO_Init+0xdc>)
 8002c74:	695a      	ldr	r2, [r3, #20]
 8002c76:	4b30      	ldr	r3, [pc, #192]	; (8002d38 <MX_GPIO_Init+0xdc>)
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	02c9      	lsls	r1, r1, #11
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	615a      	str	r2, [r3, #20]
 8002c80:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <MX_GPIO_Init+0xdc>)
 8002c82:	695a      	ldr	r2, [r3, #20]
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	02db      	lsls	r3, r3, #11
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c8e:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <MX_GPIO_Init+0xdc>)
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <MX_GPIO_Init+0xdc>)
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	0309      	lsls	r1, r1, #12
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	615a      	str	r2, [r3, #20]
 8002c9c:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <MX_GPIO_Init+0xdc>)
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	031b      	lsls	r3, r3, #12
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	607b      	str	r3, [r7, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002caa:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <MX_GPIO_Init+0xdc>)
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <MX_GPIO_Init+0xdc>)
 8002cb0:	2180      	movs	r1, #128	; 0x80
 8002cb2:	0289      	lsls	r1, r1, #10
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	615a      	str	r2, [r3, #20]
 8002cb8:	4b1f      	ldr	r3, [pc, #124]	; (8002d38 <MX_GPIO_Init+0xdc>)
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	029b      	lsls	r3, r3, #10
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	015b      	lsls	r3, r3, #5
 8002cca:	481c      	ldr	r0, [pc, #112]	; (8002d3c <MX_GPIO_Init+0xe0>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	0019      	movs	r1, r3
 8002cd0:	f001 fb58 	bl	8004384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002cd4:	23c0      	movs	r3, #192	; 0xc0
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4819      	ldr	r0, [pc, #100]	; (8002d40 <MX_GPIO_Init+0xe4>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	0019      	movs	r1, r3
 8002cde:	f001 fb51 	bl	8004384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ce2:	193b      	adds	r3, r7, r4
 8002ce4:	2280      	movs	r2, #128	; 0x80
 8002ce6:	0152      	lsls	r2, r2, #5
 8002ce8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	2201      	movs	r2, #1
 8002cee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	193b      	adds	r3, r7, r4
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf6:	193b      	adds	r3, r7, r4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfc:	193b      	adds	r3, r7, r4
 8002cfe:	4a0f      	ldr	r2, [pc, #60]	; (8002d3c <MX_GPIO_Init+0xe0>)
 8002d00:	0019      	movs	r1, r3
 8002d02:	0010      	movs	r0, r2
 8002d04:	f001 f9ce 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d08:	0021      	movs	r1, r4
 8002d0a:	187b      	adds	r3, r7, r1
 8002d0c:	22c0      	movs	r2, #192	; 0xc0
 8002d0e:	0092      	lsls	r2, r2, #2
 8002d10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d12:	187b      	adds	r3, r7, r1
 8002d14:	2201      	movs	r2, #1
 8002d16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	2200      	movs	r2, #0
 8002d22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	4a06      	ldr	r2, [pc, #24]	; (8002d40 <MX_GPIO_Init+0xe4>)
 8002d28:	0019      	movs	r1, r3
 8002d2a:	0010      	movs	r0, r2
 8002d2c:	f001 f9ba 	bl	80040a4 <HAL_GPIO_Init>

}
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b009      	add	sp, #36	; 0x24
 8002d36:	bd90      	pop	{r4, r7, pc}
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	48000400 	.word	0x48000400
 8002d40:	48000800 	.word	0x48000800

08002d44 <icm20948_init>:

/* Static Functions */

/* Main Functions */
void icm20948_init()
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
	while (!icm20948_who_am_i());
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	f000 f92d 	bl	8002fa8 <icm20948_who_am_i>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	001a      	movs	r2, r3
 8002d52:	2301      	movs	r3, #1
 8002d54:	4053      	eors	r3, r2
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f6      	bne.n	8002d4a <icm20948_init+0x6>

	icm20948_device_reset();
 8002d5c:	f000 f939 	bl	8002fd2 <icm20948_device_reset>
	icm20948_wakeup();
 8002d60:	f000 f950 	bl	8003004 <icm20948_wakeup>

	icm20948_clock_source(1);
 8002d64:	2001      	movs	r0, #1
 8002d66:	f000 f9e0 	bl	800312a <icm20948_clock_source>
	icm20948_odr_align_enable();
 8002d6a:	f000 f9ff 	bl	800316c <icm20948_odr_align_enable>

	icm20948_spi_slave_enable();
 8002d6e:	f000 f967 	bl	8003040 <icm20948_spi_slave_enable>

	icm20948_gyro_low_pass_filter(0);
 8002d72:	2000      	movs	r0, #0
 8002d74:	f000 fa04 	bl	8003180 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f000 fa25 	bl	80031c8 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f000 fa46 	bl	8003210 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8002d84:	2000      	movs	r0, #0
 8002d86:	f000 fa54 	bl	8003232 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8002d8a:	f000 fa8c 	bl	80032a6 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8002d8e:	f000 fb4f 	bl	8003430 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8002d92:	2003      	movs	r0, #3
 8002d94:	f000 fca0 	bl	80036d8 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8002d98:	2003      	movs	r0, #3
 8002d9a:	f000 fcf9 	bl	8003790 <icm20948_accel_full_scale_select>
}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <ak09916_init>:

void ak09916_init()
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8002da8:	f000 f965 	bl	8003076 <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8002dac:	f000 f97e 	bl	80030ac <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8002db0:	2007      	movs	r0, #7
 8002db2:	f000 f999 	bl	80030e8 <icm20948_i2c_master_clk_frq>

//	while (!ak09916_who_am_i())
//		;

	ak09916_soft_reset();
 8002db6:	f000 f919 	bl	8002fec <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8002dba:	2008      	movs	r0, #8
 8002dbc:	f000 fa60 	bl	8003280 <ak09916_operation_mode_setting>
}
 8002dc0:	46c0      	nop			; (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <icm20948_gyro_read>:

void icm20948_gyro_read(axises *data)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
	uint8_t *temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8002dce:	2206      	movs	r2, #6
 8002dd0:	2133      	movs	r1, #51	; 0x33
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f000 fdce 	bl	8003974 <read_multiple_icm20948_reg>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	b21a      	sxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	3301      	adds	r3, #1
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b21b      	sxth	r3, r3
 8002dec:	4313      	orrs	r3, r2
 8002dee:	b21b      	sxth	r3, r3
 8002df0:	0018      	movs	r0, r3
 8002df2:	f7fd fe9f 	bl	8000b34 <__aeabi_i2f>
 8002df6:	1c02      	adds	r2, r0, #0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3302      	adds	r3, #2
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	b21a      	sxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	3303      	adds	r3, #3
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	b21b      	sxth	r3, r3
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	b21b      	sxth	r3, r3
 8002e12:	0018      	movs	r0, r3
 8002e14:	f7fd fe8e 	bl	8000b34 <__aeabi_i2f>
 8002e18:	1c02      	adds	r2, r0, #0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3304      	adds	r3, #4
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	b21a      	sxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3305      	adds	r3, #5
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b21b      	sxth	r3, r3
 8002e30:	4313      	orrs	r3, r2
 8002e32:	b21b      	sxth	r3, r3
 8002e34:	0018      	movs	r0, r3
 8002e36:	f7fd fe7d 	bl	8000b34 <__aeabi_i2f>
 8002e3a:	1c02      	adds	r2, r0, #0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b004      	add	sp, #16
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <icm20948_accel_read>:

void icm20948_accel_read(axises *data)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
	uint8_t *temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8002e50:	2206      	movs	r2, #6
 8002e52:	212d      	movs	r1, #45	; 0x2d
 8002e54:	2000      	movs	r0, #0
 8002e56:	f000 fd8d 	bl	8003974 <read_multiple_icm20948_reg>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	b21a      	sxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	b21b      	sxth	r3, r3
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	b21b      	sxth	r3, r3
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7fd fe5e 	bl	8000b34 <__aeabi_i2f>
 8002e78:	1c02      	adds	r2, r0, #0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	3302      	adds	r3, #2
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	b21a      	sxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3303      	adds	r3, #3
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	b21b      	sxth	r3, r3
 8002e90:	4313      	orrs	r3, r2
 8002e92:	b21b      	sxth	r3, r3
 8002e94:	0018      	movs	r0, r3
 8002e96:	f7fd fe4d 	bl	8000b34 <__aeabi_i2f>
 8002e9a:	1c02      	adds	r2, r0, #0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	b21a      	sxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	3305      	adds	r3, #5
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	b21b      	sxth	r3, r3
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	b21b      	sxth	r3, r3
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f7fd fe3c 	bl	8000b34 <__aeabi_i2f>
 8002ebc:	1c02      	adds	r2, r0, #0
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <icm20948_accel_read+0x94>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	1c19      	adds	r1, r3, #0
 8002ec4:	1c10      	adds	r0, r2, #0
 8002ec6:	f7fd fb5f 	bl	8000588 <__aeabi_fadd>
 8002eca:	1c03      	adds	r3, r0, #0
 8002ecc:	1c1a      	adds	r2, r3, #0
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	609a      	str	r2, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b004      	add	sp, #16
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	20000300 	.word	0x20000300

08002ee0 <icm20948_gyro_read_dps>:

	return true;
}

void icm20948_gyro_read_dps(axises *data)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	icm20948_gyro_read(data);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	0018      	movs	r0, r3
 8002eec:	f7ff ff6b 	bl	8002dc6 <icm20948_gyro_read>

	data->x /= gyro_scale_factor;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <icm20948_gyro_read_dps+0x60>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	1c19      	adds	r1, r3, #0
 8002efa:	1c10      	adds	r0, r2, #0
 8002efc:	f7fd fce2 	bl	80008c4 <__aeabi_fdiv>
 8002f00:	1c03      	adds	r3, r0, #0
 8002f02:	1c1a      	adds	r2, r3, #0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	601a      	str	r2, [r3, #0]
	data->y /= gyro_scale_factor;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <icm20948_gyro_read_dps+0x60>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	1c19      	adds	r1, r3, #0
 8002f12:	1c10      	adds	r0, r2, #0
 8002f14:	f7fd fcd6 	bl	80008c4 <__aeabi_fdiv>
 8002f18:	1c03      	adds	r3, r0, #0
 8002f1a:	1c1a      	adds	r2, r3, #0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	605a      	str	r2, [r3, #4]
	data->z /= gyro_scale_factor;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <icm20948_gyro_read_dps+0x60>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	1c19      	adds	r1, r3, #0
 8002f2a:	1c10      	adds	r0, r2, #0
 8002f2c:	f7fd fcca 	bl	80008c4 <__aeabi_fdiv>
 8002f30:	1c03      	adds	r3, r0, #0
 8002f32:	1c1a      	adds	r2, r3, #0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	609a      	str	r2, [r3, #8]
}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b002      	add	sp, #8
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	200002fc 	.word	0x200002fc

08002f44 <icm20948_accel_read_g>:

void icm20948_accel_read_g(axises *data)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	icm20948_accel_read(data);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7ff ff7a 	bl	8002e48 <icm20948_accel_read>

	data->x /= accel_scale_factor;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <icm20948_accel_read_g+0x60>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	1c19      	adds	r1, r3, #0
 8002f5e:	1c10      	adds	r0, r2, #0
 8002f60:	f7fd fcb0 	bl	80008c4 <__aeabi_fdiv>
 8002f64:	1c03      	adds	r3, r0, #0
 8002f66:	1c1a      	adds	r2, r3, #0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	601a      	str	r2, [r3, #0]
	data->y /= accel_scale_factor;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <icm20948_accel_read_g+0x60>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	1c19      	adds	r1, r3, #0
 8002f76:	1c10      	adds	r0, r2, #0
 8002f78:	f7fd fca4 	bl	80008c4 <__aeabi_fdiv>
 8002f7c:	1c03      	adds	r3, r0, #0
 8002f7e:	1c1a      	adds	r2, r3, #0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	605a      	str	r2, [r3, #4]
	data->z /= accel_scale_factor;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <icm20948_accel_read_g+0x60>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	1c19      	adds	r1, r3, #0
 8002f8e:	1c10      	adds	r0, r2, #0
 8002f90:	f7fd fc98 	bl	80008c4 <__aeabi_fdiv>
 8002f94:	1c03      	adds	r3, r0, #0
 8002f96:	1c1a      	adds	r2, r3, #0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000300 	.word	0x20000300

08002fa8 <icm20948_who_am_i>:
	return true;
}

/* Sub Functions */
bool icm20948_who_am_i()
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8002fae:	1dfc      	adds	r4, r7, #7
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f000 fc7e 	bl	80038b4 <read_single_icm20948_reg>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	7023      	strb	r3, [r4, #0]

	if (icm20948_id == ICM20948_ID)
 8002fbc:	1dfb      	adds	r3, r7, #7
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2bea      	cmp	r3, #234	; 0xea
 8002fc2:	d101      	bne.n	8002fc8 <icm20948_who_am_i+0x20>
		return true;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <icm20948_who_am_i+0x22>
	else
		return false;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	0018      	movs	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b003      	add	sp, #12
 8002fd0:	bd90      	pop	{r4, r7, pc}

08002fd2 <icm20948_device_reset>:
	else
		return false;
}

void icm20948_device_reset()
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8002fd6:	22c1      	movs	r2, #193	; 0xc1
 8002fd8:	2106      	movs	r1, #6
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f000 fc9c 	bl	8003918 <write_single_icm20948_reg>
	HAL_Delay(100);
 8002fe0:	2064      	movs	r0, #100	; 0x64
 8002fe2:	f000 ff87 	bl	8003ef4 <HAL_Delay>
}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	2032      	movs	r0, #50	; 0x32
 8002ff4:	f000 fd2c 	bl	8003a50 <write_single_ak09916_reg>
	HAL_Delay(100);
 8002ff8:	2064      	movs	r0, #100	; 0x64
 8002ffa:	f000 ff7b 	bl	8003ef4 <HAL_Delay>
}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 800300a:	1dfc      	adds	r4, r7, #7
 800300c:	2106      	movs	r1, #6
 800300e:	2000      	movs	r0, #0
 8003010:	f000 fc50 	bl	80038b4 <read_single_icm20948_reg>
 8003014:	0003      	movs	r3, r0
 8003016:	7023      	strb	r3, [r4, #0]
	new_val &= 0xBF;
 8003018:	1dfb      	adds	r3, r7, #7
 800301a:	1dfa      	adds	r2, r7, #7
 800301c:	7812      	ldrb	r2, [r2, #0]
 800301e:	2140      	movs	r1, #64	; 0x40
 8003020:	438a      	bics	r2, r1
 8003022:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8003024:	1dfb      	adds	r3, r7, #7
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	001a      	movs	r2, r3
 800302a:	2106      	movs	r1, #6
 800302c:	2000      	movs	r0, #0
 800302e:	f000 fc73 	bl	8003918 <write_single_icm20948_reg>
	HAL_Delay(100);
 8003032:	2064      	movs	r0, #100	; 0x64
 8003034:	f000 ff5e 	bl	8003ef4 <HAL_Delay>
}
 8003038:	46c0      	nop			; (mov r8, r8)
 800303a:	46bd      	mov	sp, r7
 800303c:	b003      	add	sp, #12
 800303e:	bd90      	pop	{r4, r7, pc}

08003040 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8003046:	1dfc      	adds	r4, r7, #7
 8003048:	2103      	movs	r1, #3
 800304a:	2000      	movs	r0, #0
 800304c:	f000 fc32 	bl	80038b4 <read_single_icm20948_reg>
 8003050:	0003      	movs	r3, r0
 8003052:	7023      	strb	r3, [r4, #0]
	new_val |= 0x10;
 8003054:	1dfb      	adds	r3, r7, #7
 8003056:	1dfa      	adds	r2, r7, #7
 8003058:	7812      	ldrb	r2, [r2, #0]
 800305a:	2110      	movs	r1, #16
 800305c:	430a      	orrs	r2, r1
 800305e:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8003060:	1dfb      	adds	r3, r7, #7
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	001a      	movs	r2, r3
 8003066:	2103      	movs	r1, #3
 8003068:	2000      	movs	r0, #0
 800306a:	f000 fc55 	bl	8003918 <write_single_icm20948_reg>
}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	46bd      	mov	sp, r7
 8003072:	b003      	add	sp, #12
 8003074:	bd90      	pop	{r4, r7, pc}

08003076 <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8003076:	b590      	push	{r4, r7, lr}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 800307c:	1dfc      	adds	r4, r7, #7
 800307e:	2103      	movs	r1, #3
 8003080:	2000      	movs	r0, #0
 8003082:	f000 fc17 	bl	80038b4 <read_single_icm20948_reg>
 8003086:	0003      	movs	r3, r0
 8003088:	7023      	strb	r3, [r4, #0]
	new_val |= 0x02;
 800308a:	1dfb      	adds	r3, r7, #7
 800308c:	1dfa      	adds	r2, r7, #7
 800308e:	7812      	ldrb	r2, [r2, #0]
 8003090:	2102      	movs	r1, #2
 8003092:	430a      	orrs	r2, r1
 8003094:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8003096:	1dfb      	adds	r3, r7, #7
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	001a      	movs	r2, r3
 800309c:	2103      	movs	r1, #3
 800309e:	2000      	movs	r0, #0
 80030a0:	f000 fc3a 	bl	8003918 <write_single_icm20948_reg>
}
 80030a4:	46c0      	nop			; (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b003      	add	sp, #12
 80030aa:	bd90      	pop	{r4, r7, pc}

080030ac <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 80030ac:	b590      	push	{r4, r7, lr}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 80030b2:	1dfc      	adds	r4, r7, #7
 80030b4:	2103      	movs	r1, #3
 80030b6:	2000      	movs	r0, #0
 80030b8:	f000 fbfc 	bl	80038b4 <read_single_icm20948_reg>
 80030bc:	0003      	movs	r3, r0
 80030be:	7023      	strb	r3, [r4, #0]
	new_val |= 0x20;
 80030c0:	1dfb      	adds	r3, r7, #7
 80030c2:	1dfa      	adds	r2, r7, #7
 80030c4:	7812      	ldrb	r2, [r2, #0]
 80030c6:	2120      	movs	r1, #32
 80030c8:	430a      	orrs	r2, r1
 80030ca:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 80030cc:	1dfb      	adds	r3, r7, #7
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	001a      	movs	r2, r3
 80030d2:	2103      	movs	r1, #3
 80030d4:	2000      	movs	r0, #0
 80030d6:	f000 fc1f 	bl	8003918 <write_single_icm20948_reg>
	HAL_Delay(100);
 80030da:	2064      	movs	r0, #100	; 0x64
 80030dc:	f000 ff0a 	bl	8003ef4 <HAL_Delay>
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b003      	add	sp, #12
 80030e6:	bd90      	pop	{r4, r7, pc}

080030e8 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 80030e8:	b5b0      	push	{r4, r5, r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	0002      	movs	r2, r0
 80030f0:	1dfb      	adds	r3, r7, #7
 80030f2:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 80030f4:	250f      	movs	r5, #15
 80030f6:	197c      	adds	r4, r7, r5
 80030f8:	2101      	movs	r1, #1
 80030fa:	2030      	movs	r0, #48	; 0x30
 80030fc:	f000 fbda 	bl	80038b4 <read_single_icm20948_reg>
 8003100:	0003      	movs	r3, r0
 8003102:	7023      	strb	r3, [r4, #0]
	new_val |= config;
 8003104:	0028      	movs	r0, r5
 8003106:	183b      	adds	r3, r7, r0
 8003108:	1839      	adds	r1, r7, r0
 800310a:	1dfa      	adds	r2, r7, #7
 800310c:	7809      	ldrb	r1, [r1, #0]
 800310e:	7812      	ldrb	r2, [r2, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);
 8003114:	183b      	adds	r3, r7, r0
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	001a      	movs	r2, r3
 800311a:	2101      	movs	r1, #1
 800311c:	2030      	movs	r0, #48	; 0x30
 800311e:	f000 fbfb 	bl	8003918 <write_single_icm20948_reg>
}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	46bd      	mov	sp, r7
 8003126:	b004      	add	sp, #16
 8003128:	bdb0      	pop	{r4, r5, r7, pc}

0800312a <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 800312a:	b5b0      	push	{r4, r5, r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	0002      	movs	r2, r0
 8003132:	1dfb      	adds	r3, r7, #7
 8003134:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8003136:	250f      	movs	r5, #15
 8003138:	197c      	adds	r4, r7, r5
 800313a:	2106      	movs	r1, #6
 800313c:	2000      	movs	r0, #0
 800313e:	f000 fbb9 	bl	80038b4 <read_single_icm20948_reg>
 8003142:	0003      	movs	r3, r0
 8003144:	7023      	strb	r3, [r4, #0]
	new_val |= source;
 8003146:	0028      	movs	r0, r5
 8003148:	183b      	adds	r3, r7, r0
 800314a:	1839      	adds	r1, r7, r0
 800314c:	1dfa      	adds	r2, r7, #7
 800314e:	7809      	ldrb	r1, [r1, #0]
 8003150:	7812      	ldrb	r2, [r2, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8003156:	183b      	adds	r3, r7, r0
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	001a      	movs	r2, r3
 800315c:	2106      	movs	r1, #6
 800315e:	2000      	movs	r0, #0
 8003160:	f000 fbda 	bl	8003918 <write_single_icm20948_reg>
}
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	b004      	add	sp, #16
 800316a:	bdb0      	pop	{r4, r5, r7, pc}

0800316c <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8003170:	2201      	movs	r2, #1
 8003172:	2109      	movs	r1, #9
 8003174:	2020      	movs	r0, #32
 8003176:	f000 fbcf 	bl	8003918 <write_single_icm20948_reg>
}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8003180:	b5b0      	push	{r4, r5, r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	0002      	movs	r2, r0
 8003188:	1dfb      	adds	r3, r7, #7
 800318a:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800318c:	250f      	movs	r5, #15
 800318e:	197c      	adds	r4, r7, r5
 8003190:	2101      	movs	r1, #1
 8003192:	2020      	movs	r0, #32
 8003194:	f000 fb8e 	bl	80038b4 <read_single_icm20948_reg>
 8003198:	0003      	movs	r3, r0
 800319a:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 800319c:	1dfb      	adds	r3, r7, #7
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	b25a      	sxtb	r2, r3
 80031a4:	197b      	adds	r3, r7, r5
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	b25b      	sxtb	r3, r3
 80031aa:	4313      	orrs	r3, r2
 80031ac:	b25a      	sxtb	r2, r3
 80031ae:	197b      	adds	r3, r7, r5
 80031b0:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80031b2:	197b      	adds	r3, r7, r5
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	001a      	movs	r2, r3
 80031b8:	2101      	movs	r1, #1
 80031ba:	2020      	movs	r0, #32
 80031bc:	f000 fbac 	bl	8003918 <write_single_icm20948_reg>
}
 80031c0:	46c0      	nop			; (mov r8, r8)
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b004      	add	sp, #16
 80031c6:	bdb0      	pop	{r4, r5, r7, pc}

080031c8 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 80031c8:	b5b0      	push	{r4, r5, r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	0002      	movs	r2, r0
 80031d0:	1dfb      	adds	r3, r7, #7
 80031d2:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80031d4:	250f      	movs	r5, #15
 80031d6:	197c      	adds	r4, r7, r5
 80031d8:	2114      	movs	r1, #20
 80031da:	2020      	movs	r0, #32
 80031dc:	f000 fb6a 	bl	80038b4 <read_single_icm20948_reg>
 80031e0:	0003      	movs	r3, r0
 80031e2:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 80031e4:	1dfb      	adds	r3, r7, #7
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	b25a      	sxtb	r2, r3
 80031ec:	197b      	adds	r3, r7, r5
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	b25b      	sxtb	r3, r3
 80031f2:	4313      	orrs	r3, r2
 80031f4:	b25a      	sxtb	r2, r3
 80031f6:	197b      	adds	r3, r7, r5
 80031f8:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80031fa:	197b      	adds	r3, r7, r5
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	001a      	movs	r2, r3
 8003200:	2101      	movs	r1, #1
 8003202:	2020      	movs	r0, #32
 8003204:	f000 fb88 	bl	8003918 <write_single_icm20948_reg>
}
 8003208:	46c0      	nop			; (mov r8, r8)
 800320a:	46bd      	mov	sp, r7
 800320c:	b004      	add	sp, #16
 800320e:	bdb0      	pop	{r4, r5, r7, pc}

08003210 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	0002      	movs	r2, r0
 8003218:	1dfb      	adds	r3, r7, #7
 800321a:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 800321c:	1dfb      	adds	r3, r7, #7
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	001a      	movs	r2, r3
 8003222:	2100      	movs	r1, #0
 8003224:	2020      	movs	r0, #32
 8003226:	f000 fb77 	bl	8003918 <write_single_icm20948_reg>
}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	46bd      	mov	sp, r7
 800322e:	b002      	add	sp, #8
 8003230:	bd80      	pop	{r7, pc}

08003232 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8003232:	b590      	push	{r4, r7, lr}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	0002      	movs	r2, r0
 800323a:	1dbb      	adds	r3, r7, #6
 800323c:	801a      	strh	r2, [r3, #0]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 800323e:	1dbb      	adds	r3, r7, #6
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	0a1b      	lsrs	r3, r3, #8
 8003244:	b29a      	uxth	r2, r3
 8003246:	200f      	movs	r0, #15
 8003248:	183b      	adds	r3, r7, r0
 800324a:	701a      	strb	r2, [r3, #0]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 800324c:	1dbb      	adds	r3, r7, #6
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	240e      	movs	r4, #14
 8003254:	193b      	adds	r3, r7, r4
 8003256:	210f      	movs	r1, #15
 8003258:	400a      	ands	r2, r1
 800325a:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 800325c:	183b      	adds	r3, r7, r0
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	001a      	movs	r2, r3
 8003262:	2110      	movs	r1, #16
 8003264:	2020      	movs	r0, #32
 8003266:	f000 fb57 	bl	8003918 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 800326a:	193b      	adds	r3, r7, r4
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	001a      	movs	r2, r3
 8003270:	2111      	movs	r1, #17
 8003272:	2020      	movs	r0, #32
 8003274:	f000 fb50 	bl	8003918 <write_single_icm20948_reg>
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	b005      	add	sp, #20
 800327e:	bd90      	pop	{r4, r7, pc}

08003280 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	0002      	movs	r2, r0
 8003288:	1dfb      	adds	r3, r7, #7
 800328a:	701a      	strb	r2, [r3, #0]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 800328c:	1dfb      	adds	r3, r7, #7
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	0019      	movs	r1, r3
 8003292:	2031      	movs	r0, #49	; 0x31
 8003294:	f000 fbdc 	bl	8003a50 <write_single_ak09916_reg>
	HAL_Delay(100);
 8003298:	2064      	movs	r0, #100	; 0x64
 800329a:	f000 fe2b 	bl	8003ef4 <HAL_Delay>
}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b002      	add	sp, #8
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 80032a6:	b5b0      	push	{r4, r5, r7, lr}
 80032a8:	b08a      	sub	sp, #40	; 0x28
 80032aa:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 80032ac:	230c      	movs	r3, #12
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	0018      	movs	r0, r3
 80032b2:	230c      	movs	r3, #12
 80032b4:	001a      	movs	r2, r3
 80032b6:	2100      	movs	r1, #0
 80032b8:	f003 f8f6 	bl	80064a8 <memset>
	uint8_t gyro_offset[6] = {0};
 80032bc:	1d3b      	adds	r3, r7, #4
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	809a      	strh	r2, [r3, #4]

	for (int i = 0; i < 100; i++)
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ca:	e041      	b.n	8003350 <icm20948_gyro_calibration+0xaa>
	{
		icm20948_gyro_read(&temp);
 80032cc:	2518      	movs	r5, #24
 80032ce:	197b      	adds	r3, r7, r5
 80032d0:	0018      	movs	r0, r3
 80032d2:	f7ff fd78 	bl	8002dc6 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 80032d6:	240c      	movs	r4, #12
 80032d8:	193b      	adds	r3, r7, r4
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	0018      	movs	r0, r3
 80032de:	f7fd fc29 	bl	8000b34 <__aeabi_i2f>
 80032e2:	1c02      	adds	r2, r0, #0
 80032e4:	197b      	adds	r3, r7, r5
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	1c19      	adds	r1, r3, #0
 80032ea:	1c10      	adds	r0, r2, #0
 80032ec:	f7fd f94c 	bl	8000588 <__aeabi_fadd>
 80032f0:	1c03      	adds	r3, r0, #0
 80032f2:	1c18      	adds	r0, r3, #0
 80032f4:	f7fd fbfe 	bl	8000af4 <__aeabi_f2iz>
 80032f8:	0002      	movs	r2, r0
 80032fa:	193b      	adds	r3, r7, r4
 80032fc:	601a      	str	r2, [r3, #0]
		gyro_bias[1] += temp.y;
 80032fe:	193b      	adds	r3, r7, r4
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	0018      	movs	r0, r3
 8003304:	f7fd fc16 	bl	8000b34 <__aeabi_i2f>
 8003308:	1c02      	adds	r2, r0, #0
 800330a:	197b      	adds	r3, r7, r5
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	1c19      	adds	r1, r3, #0
 8003310:	1c10      	adds	r0, r2, #0
 8003312:	f7fd f939 	bl	8000588 <__aeabi_fadd>
 8003316:	1c03      	adds	r3, r0, #0
 8003318:	1c18      	adds	r0, r3, #0
 800331a:	f7fd fbeb 	bl	8000af4 <__aeabi_f2iz>
 800331e:	0002      	movs	r2, r0
 8003320:	193b      	adds	r3, r7, r4
 8003322:	605a      	str	r2, [r3, #4]
		gyro_bias[2] += temp.z;
 8003324:	193b      	adds	r3, r7, r4
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	0018      	movs	r0, r3
 800332a:	f7fd fc03 	bl	8000b34 <__aeabi_i2f>
 800332e:	1c02      	adds	r2, r0, #0
 8003330:	197b      	adds	r3, r7, r5
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	1c19      	adds	r1, r3, #0
 8003336:	1c10      	adds	r0, r2, #0
 8003338:	f7fd f926 	bl	8000588 <__aeabi_fadd>
 800333c:	1c03      	adds	r3, r0, #0
 800333e:	1c18      	adds	r0, r3, #0
 8003340:	f7fd fbd8 	bl	8000af4 <__aeabi_f2iz>
 8003344:	0002      	movs	r2, r0
 8003346:	193b      	adds	r3, r7, r4
 8003348:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < 100; i++)
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	3301      	adds	r3, #1
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	2b63      	cmp	r3, #99	; 0x63
 8003354:	ddba      	ble.n	80032cc <icm20948_gyro_calibration+0x26>
	}

	gyro_bias[0] /= 100;
 8003356:	240c      	movs	r4, #12
 8003358:	193b      	adds	r3, r7, r4
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2164      	movs	r1, #100	; 0x64
 800335e:	0018      	movs	r0, r3
 8003360:	f7fc ff78 	bl	8000254 <__divsi3>
 8003364:	0003      	movs	r3, r0
 8003366:	001a      	movs	r2, r3
 8003368:	193b      	adds	r3, r7, r4
 800336a:	601a      	str	r2, [r3, #0]
	gyro_bias[1] /= 100;
 800336c:	193b      	adds	r3, r7, r4
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2164      	movs	r1, #100	; 0x64
 8003372:	0018      	movs	r0, r3
 8003374:	f7fc ff6e 	bl	8000254 <__divsi3>
 8003378:	0003      	movs	r3, r0
 800337a:	001a      	movs	r2, r3
 800337c:	193b      	adds	r3, r7, r4
 800337e:	605a      	str	r2, [r3, #4]
	gyro_bias[2] /= 100;
 8003380:	193b      	adds	r3, r7, r4
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2164      	movs	r1, #100	; 0x64
 8003386:	0018      	movs	r0, r3
 8003388:	f7fc ff64 	bl	8000254 <__divsi3>
 800338c:	0003      	movs	r3, r0
 800338e:	001a      	movs	r2, r3
 8003390:	193b      	adds	r3, r7, r4
 8003392:	609a      	str	r2, [r3, #8]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF;
 8003394:	193b      	adds	r3, r7, r4
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	425b      	negs	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	da00      	bge.n	80033a0 <icm20948_gyro_calibration+0xfa>
 800339e:	3303      	adds	r3, #3
 80033a0:	109b      	asrs	r3, r3, #2
 80033a2:	121b      	asrs	r3, r3, #8
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	1d3b      	adds	r3, r7, #4
 80033a8:	701a      	strb	r2, [r3, #0]
	gyro_offset[1] = (-gyro_bias[0] / 4) & 0xFF;
 80033aa:	230c      	movs	r3, #12
 80033ac:	18fb      	adds	r3, r7, r3
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	425b      	negs	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	da00      	bge.n	80033b8 <icm20948_gyro_calibration+0x112>
 80033b6:	3303      	adds	r3, #3
 80033b8:	109b      	asrs	r3, r3, #2
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	1d3b      	adds	r3, r7, #4
 80033be:	705a      	strb	r2, [r3, #1]
	gyro_offset[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 80033c0:	230c      	movs	r3, #12
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	425b      	negs	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	da00      	bge.n	80033ce <icm20948_gyro_calibration+0x128>
 80033cc:	3303      	adds	r3, #3
 80033ce:	109b      	asrs	r3, r3, #2
 80033d0:	121b      	asrs	r3, r3, #8
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	1d3b      	adds	r3, r7, #4
 80033d6:	709a      	strb	r2, [r3, #2]
	gyro_offset[3] = (-gyro_bias[1] / 4) & 0xFF;
 80033d8:	230c      	movs	r3, #12
 80033da:	18fb      	adds	r3, r7, r3
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	425b      	negs	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	da00      	bge.n	80033e6 <icm20948_gyro_calibration+0x140>
 80033e4:	3303      	adds	r3, #3
 80033e6:	109b      	asrs	r3, r3, #2
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	1d3b      	adds	r3, r7, #4
 80033ec:	70da      	strb	r2, [r3, #3]
	gyro_offset[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 80033ee:	230c      	movs	r3, #12
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	425b      	negs	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	da00      	bge.n	80033fc <icm20948_gyro_calibration+0x156>
 80033fa:	3303      	adds	r3, #3
 80033fc:	109b      	asrs	r3, r3, #2
 80033fe:	121b      	asrs	r3, r3, #8
 8003400:	b2da      	uxtb	r2, r3
 8003402:	1d3b      	adds	r3, r7, #4
 8003404:	711a      	strb	r2, [r3, #4]
	gyro_offset[5] = (-gyro_bias[2] / 4) & 0xFF;
 8003406:	230c      	movs	r3, #12
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	425b      	negs	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	da00      	bge.n	8003414 <icm20948_gyro_calibration+0x16e>
 8003412:	3303      	adds	r3, #3
 8003414:	109b      	asrs	r3, r3, #2
 8003416:	b2da      	uxtb	r2, r3
 8003418:	1d3b      	adds	r3, r7, #4
 800341a:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 800341c:	1d3a      	adds	r2, r7, #4
 800341e:	2306      	movs	r3, #6
 8003420:	2103      	movs	r1, #3
 8003422:	2020      	movs	r0, #32
 8003424:	f000 fae0 	bl	80039e8 <write_multiple_icm20948_reg>
}
 8003428:	46c0      	nop			; (mov r8, r8)
 800342a:	46bd      	mov	sp, r7
 800342c:	b00a      	add	sp, #40	; 0x28
 800342e:	bdb0      	pop	{r4, r5, r7, pc}

08003430 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8003430:	b5b0      	push	{r4, r5, r7, lr}
 8003432:	b090      	sub	sp, #64	; 0x40
 8003434:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t *temp2;
	uint8_t *temp3;
	uint8_t *temp4;

	int32_t accel_bias[3] = {0};
 8003436:	2318      	movs	r3, #24
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	0018      	movs	r0, r3
 800343c:	230c      	movs	r3, #12
 800343e:	001a      	movs	r2, r3
 8003440:	2100      	movs	r1, #0
 8003442:	f003 f831 	bl	80064a8 <memset>
	int32_t accel_bias_reg[3] = {0};
 8003446:	230c      	movs	r3, #12
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	0018      	movs	r0, r3
 800344c:	230c      	movs	r3, #12
 800344e:	001a      	movs	r2, r3
 8003450:	2100      	movs	r1, #0
 8003452:	f003 f829 	bl	80064a8 <memset>
	uint8_t accel_offset[6] = {0};
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	2200      	movs	r2, #0
 800345e:	809a      	strh	r2, [r3, #4]

	for (int i = 0; i < 100; i++)
 8003460:	2300      	movs	r3, #0
 8003462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003464:	e041      	b.n	80034ea <icm20948_accel_calibration+0xba>
	{
		icm20948_accel_read(&temp);
 8003466:	2524      	movs	r5, #36	; 0x24
 8003468:	197b      	adds	r3, r7, r5
 800346a:	0018      	movs	r0, r3
 800346c:	f7ff fcec 	bl	8002e48 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8003470:	2418      	movs	r4, #24
 8003472:	193b      	adds	r3, r7, r4
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	0018      	movs	r0, r3
 8003478:	f7fd fb5c 	bl	8000b34 <__aeabi_i2f>
 800347c:	1c02      	adds	r2, r0, #0
 800347e:	197b      	adds	r3, r7, r5
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	1c19      	adds	r1, r3, #0
 8003484:	1c10      	adds	r0, r2, #0
 8003486:	f7fd f87f 	bl	8000588 <__aeabi_fadd>
 800348a:	1c03      	adds	r3, r0, #0
 800348c:	1c18      	adds	r0, r3, #0
 800348e:	f7fd fb31 	bl	8000af4 <__aeabi_f2iz>
 8003492:	0002      	movs	r2, r0
 8003494:	193b      	adds	r3, r7, r4
 8003496:	601a      	str	r2, [r3, #0]
		accel_bias[1] += temp.y;
 8003498:	193b      	adds	r3, r7, r4
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	0018      	movs	r0, r3
 800349e:	f7fd fb49 	bl	8000b34 <__aeabi_i2f>
 80034a2:	1c02      	adds	r2, r0, #0
 80034a4:	197b      	adds	r3, r7, r5
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	1c19      	adds	r1, r3, #0
 80034aa:	1c10      	adds	r0, r2, #0
 80034ac:	f7fd f86c 	bl	8000588 <__aeabi_fadd>
 80034b0:	1c03      	adds	r3, r0, #0
 80034b2:	1c18      	adds	r0, r3, #0
 80034b4:	f7fd fb1e 	bl	8000af4 <__aeabi_f2iz>
 80034b8:	0002      	movs	r2, r0
 80034ba:	193b      	adds	r3, r7, r4
 80034bc:	605a      	str	r2, [r3, #4]
		accel_bias[2] += temp.z;
 80034be:	193b      	adds	r3, r7, r4
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7fd fb36 	bl	8000b34 <__aeabi_i2f>
 80034c8:	1c02      	adds	r2, r0, #0
 80034ca:	197b      	adds	r3, r7, r5
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	1c19      	adds	r1, r3, #0
 80034d0:	1c10      	adds	r0, r2, #0
 80034d2:	f7fd f859 	bl	8000588 <__aeabi_fadd>
 80034d6:	1c03      	adds	r3, r0, #0
 80034d8:	1c18      	adds	r0, r3, #0
 80034da:	f7fd fb0b 	bl	8000af4 <__aeabi_f2iz>
 80034de:	0002      	movs	r2, r0
 80034e0:	193b      	adds	r3, r7, r4
 80034e2:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < 100; i++)
 80034e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e6:	3301      	adds	r3, #1
 80034e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ec:	2b63      	cmp	r3, #99	; 0x63
 80034ee:	ddba      	ble.n	8003466 <icm20948_accel_calibration+0x36>
	}

	accel_bias[0] /= 100;
 80034f0:	2418      	movs	r4, #24
 80034f2:	193b      	adds	r3, r7, r4
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2164      	movs	r1, #100	; 0x64
 80034f8:	0018      	movs	r0, r3
 80034fa:	f7fc feab 	bl	8000254 <__divsi3>
 80034fe:	0003      	movs	r3, r0
 8003500:	001a      	movs	r2, r3
 8003502:	193b      	adds	r3, r7, r4
 8003504:	601a      	str	r2, [r3, #0]
	accel_bias[1] /= 100;
 8003506:	193b      	adds	r3, r7, r4
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2164      	movs	r1, #100	; 0x64
 800350c:	0018      	movs	r0, r3
 800350e:	f7fc fea1 	bl	8000254 <__divsi3>
 8003512:	0003      	movs	r3, r0
 8003514:	001a      	movs	r2, r3
 8003516:	193b      	adds	r3, r7, r4
 8003518:	605a      	str	r2, [r3, #4]
	accel_bias[2] /= 100;
 800351a:	193b      	adds	r3, r7, r4
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2164      	movs	r1, #100	; 0x64
 8003520:	0018      	movs	r0, r3
 8003522:	f7fc fe97 	bl	8000254 <__divsi3>
 8003526:	0003      	movs	r3, r0
 8003528:	001a      	movs	r2, r3
 800352a:	193b      	adds	r3, r7, r4
 800352c:	609a      	str	r2, [r3, #8]

	uint8_t mask_bit[3] = {0, 0, 0};
 800352e:	003b      	movs	r3, r7
 8003530:	4a68      	ldr	r2, [pc, #416]	; (80036d4 <icm20948_accel_calibration+0x2a4>)
 8003532:	8811      	ldrh	r1, [r2, #0]
 8003534:	8019      	strh	r1, [r3, #0]
 8003536:	7892      	ldrb	r2, [r2, #2]
 8003538:	709a      	strb	r2, [r3, #2]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 800353a:	2202      	movs	r2, #2
 800353c:	2114      	movs	r1, #20
 800353e:	2010      	movs	r0, #16
 8003540:	f000 fa18 	bl	8003974 <read_multiple_icm20948_reg>
 8003544:	0003      	movs	r3, r0
 8003546:	63bb      	str	r3, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8003548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003550:	3201      	adds	r2, #1
 8003552:	7812      	ldrb	r2, [r2, #0]
 8003554:	431a      	orrs	r2, r3
 8003556:	250c      	movs	r5, #12
 8003558:	197b      	adds	r3, r7, r5
 800355a:	601a      	str	r2, [r3, #0]
	mask_bit[0] = temp2[1] & 0x01;
 800355c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355e:	3301      	adds	r3, #1
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2201      	movs	r2, #1
 8003564:	4013      	ands	r3, r2
 8003566:	b2da      	uxtb	r2, r3
 8003568:	003b      	movs	r3, r7
 800356a:	701a      	strb	r2, [r3, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 800356c:	2202      	movs	r2, #2
 800356e:	2117      	movs	r1, #23
 8003570:	2010      	movs	r0, #16
 8003572:	f000 f9ff 	bl	8003974 <read_multiple_icm20948_reg>
 8003576:	0003      	movs	r3, r0
 8003578:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 800357a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003582:	3201      	adds	r2, #1
 8003584:	7812      	ldrb	r2, [r2, #0]
 8003586:	431a      	orrs	r2, r3
 8003588:	197b      	adds	r3, r7, r5
 800358a:	605a      	str	r2, [r3, #4]
	mask_bit[1] = temp3[1] & 0x01;
 800358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358e:	3301      	adds	r3, #1
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2201      	movs	r2, #1
 8003594:	4013      	ands	r3, r2
 8003596:	b2da      	uxtb	r2, r3
 8003598:	003b      	movs	r3, r7
 800359a:	705a      	strb	r2, [r3, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 800359c:	2202      	movs	r2, #2
 800359e:	211a      	movs	r1, #26
 80035a0:	2010      	movs	r0, #16
 80035a2:	f000 f9e7 	bl	8003974 <read_multiple_icm20948_reg>
 80035a6:	0003      	movs	r3, r0
 80035a8:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035b2:	3201      	adds	r2, #1
 80035b4:	7812      	ldrb	r2, [r2, #0]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	197b      	adds	r3, r7, r5
 80035ba:	609a      	str	r2, [r3, #8]
	mask_bit[2] = temp4[1] & 0x01;
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	3301      	adds	r3, #1
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2201      	movs	r2, #1
 80035c4:	4013      	ands	r3, r2
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	003b      	movs	r3, r7
 80035ca:	709a      	strb	r2, [r3, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 80035cc:	197b      	adds	r3, r7, r5
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	193b      	adds	r3, r7, r4
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	da00      	bge.n	80035da <icm20948_accel_calibration+0x1aa>
 80035d8:	3307      	adds	r3, #7
 80035da:	10db      	asrs	r3, r3, #3
 80035dc:	425b      	negs	r3, r3
 80035de:	18d2      	adds	r2, r2, r3
 80035e0:	210c      	movs	r1, #12
 80035e2:	187b      	adds	r3, r7, r1
 80035e4:	601a      	str	r2, [r3, #0]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 80035e6:	187b      	adds	r3, r7, r1
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	2318      	movs	r3, #24
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	da00      	bge.n	80035f6 <icm20948_accel_calibration+0x1c6>
 80035f4:	3307      	adds	r3, #7
 80035f6:	10db      	asrs	r3, r3, #3
 80035f8:	425b      	negs	r3, r3
 80035fa:	18d2      	adds	r2, r2, r3
 80035fc:	210c      	movs	r1, #12
 80035fe:	187b      	adds	r3, r7, r1
 8003600:	605a      	str	r2, [r3, #4]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8003602:	187b      	adds	r3, r7, r1
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	2318      	movs	r3, #24
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	da00      	bge.n	8003612 <icm20948_accel_calibration+0x1e2>
 8003610:	3307      	adds	r3, #7
 8003612:	10db      	asrs	r3, r3, #3
 8003614:	425b      	negs	r3, r3
 8003616:	18d2      	adds	r2, r2, r3
 8003618:	210c      	movs	r1, #12
 800361a:	187b      	adds	r3, r7, r1
 800361c:	609a      	str	r2, [r3, #8]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800361e:	187b      	adds	r3, r7, r1
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	121b      	asrs	r3, r3, #8
 8003624:	b2da      	uxtb	r2, r3
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	701a      	strb	r2, [r3, #0]
	accel_offset[1] = (accel_bias_reg[0]) & 0xFE;
 800362a:	187b      	adds	r3, r7, r1
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2201      	movs	r2, #1
 8003632:	4393      	bics	r3, r2
 8003634:	b2da      	uxtb	r2, r3
 8003636:	1d3b      	adds	r3, r7, #4
 8003638:	705a      	strb	r2, [r3, #1]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 800363a:	1d3b      	adds	r3, r7, #4
 800363c:	785a      	ldrb	r2, [r3, #1]
 800363e:	003b      	movs	r3, r7
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	4313      	orrs	r3, r2
 8003644:	b2da      	uxtb	r2, r3
 8003646:	1d3b      	adds	r3, r7, #4
 8003648:	705a      	strb	r2, [r3, #1]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 800364a:	187b      	adds	r3, r7, r1
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	121b      	asrs	r3, r3, #8
 8003650:	b2da      	uxtb	r2, r3
 8003652:	1d3b      	adds	r3, r7, #4
 8003654:	709a      	strb	r2, [r3, #2]
	accel_offset[3] = (accel_bias_reg[1]) & 0xFE;
 8003656:	187b      	adds	r3, r7, r1
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2201      	movs	r2, #1
 800365e:	4393      	bics	r3, r2
 8003660:	b2da      	uxtb	r2, r3
 8003662:	1d3b      	adds	r3, r7, #4
 8003664:	70da      	strb	r2, [r3, #3]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8003666:	1d3b      	adds	r3, r7, #4
 8003668:	78da      	ldrb	r2, [r3, #3]
 800366a:	003b      	movs	r3, r7
 800366c:	785b      	ldrb	r3, [r3, #1]
 800366e:	4313      	orrs	r3, r2
 8003670:	b2da      	uxtb	r2, r3
 8003672:	1d3b      	adds	r3, r7, #4
 8003674:	70da      	strb	r2, [r3, #3]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8003676:	187b      	adds	r3, r7, r1
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	121b      	asrs	r3, r3, #8
 800367c:	b2da      	uxtb	r2, r3
 800367e:	1d3b      	adds	r3, r7, #4
 8003680:	711a      	strb	r2, [r3, #4]
	accel_offset[5] = (accel_bias_reg[2]) & 0xFE;
 8003682:	187b      	adds	r3, r7, r1
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2201      	movs	r2, #1
 800368a:	4393      	bics	r3, r2
 800368c:	b2da      	uxtb	r2, r3
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	715a      	strb	r2, [r3, #5]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 8003692:	1d3b      	adds	r3, r7, #4
 8003694:	795a      	ldrb	r2, [r3, #5]
 8003696:	003b      	movs	r3, r7
 8003698:	789b      	ldrb	r3, [r3, #2]
 800369a:	4313      	orrs	r3, r2
 800369c:	b2da      	uxtb	r2, r3
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 80036a2:	1d3a      	adds	r2, r7, #4
 80036a4:	2302      	movs	r3, #2
 80036a6:	2114      	movs	r1, #20
 80036a8:	2010      	movs	r0, #16
 80036aa:	f000 f99d 	bl	80039e8 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	1c9a      	adds	r2, r3, #2
 80036b2:	2302      	movs	r3, #2
 80036b4:	2117      	movs	r1, #23
 80036b6:	2010      	movs	r0, #16
 80036b8:	f000 f996 	bl	80039e8 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 80036bc:	1d3b      	adds	r3, r7, #4
 80036be:	1d1a      	adds	r2, r3, #4
 80036c0:	2302      	movs	r3, #2
 80036c2:	211a      	movs	r1, #26
 80036c4:	2010      	movs	r0, #16
 80036c6:	f000 f98f 	bl	80039e8 <write_multiple_icm20948_reg>
}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b010      	add	sp, #64	; 0x40
 80036d0:	bdb0      	pop	{r4, r5, r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	0800b02c 	.word	0x0800b02c

080036d8 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	0002      	movs	r2, r0
 80036e0:	1dfb      	adds	r3, r7, #7
 80036e2:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 80036e4:	230f      	movs	r3, #15
 80036e6:	18fc      	adds	r4, r7, r3
 80036e8:	2101      	movs	r1, #1
 80036ea:	2020      	movs	r0, #32
 80036ec:	f000 f8e2 	bl	80038b4 <read_single_icm20948_reg>
 80036f0:	0003      	movs	r3, r0
 80036f2:	7023      	strb	r3, [r4, #0]

	switch (full_scale)
 80036f4:	1dfb      	adds	r3, r7, #7
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d027      	beq.n	800374c <icm20948_gyro_full_scale_select+0x74>
 80036fc:	dc31      	bgt.n	8003762 <icm20948_gyro_full_scale_select+0x8a>
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d019      	beq.n	8003736 <icm20948_gyro_full_scale_select+0x5e>
 8003702:	dc2e      	bgt.n	8003762 <icm20948_gyro_full_scale_select+0x8a>
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <icm20948_gyro_full_scale_select+0x36>
 8003708:	2b01      	cmp	r3, #1
 800370a:	d009      	beq.n	8003720 <icm20948_gyro_full_scale_select+0x48>
 800370c:	e029      	b.n	8003762 <icm20948_gyro_full_scale_select+0x8a>
	{
	case _250dps:
		new_val |= 0x00;
 800370e:	220f      	movs	r2, #15
 8003710:	18bb      	adds	r3, r7, r2
 8003712:	18ba      	adds	r2, r7, r2
 8003714:	7812      	ldrb	r2, [r2, #0]
 8003716:	701a      	strb	r2, [r3, #0]
		gyro_scale_factor = 131.0;
 8003718:	4b18      	ldr	r3, [pc, #96]	; (800377c <icm20948_gyro_full_scale_select+0xa4>)
 800371a:	4a19      	ldr	r2, [pc, #100]	; (8003780 <icm20948_gyro_full_scale_select+0xa8>)
 800371c:	601a      	str	r2, [r3, #0]
		break;
 800371e:	e020      	b.n	8003762 <icm20948_gyro_full_scale_select+0x8a>
	case _500dps:
		new_val |= 0x02;
 8003720:	220f      	movs	r2, #15
 8003722:	18bb      	adds	r3, r7, r2
 8003724:	18ba      	adds	r2, r7, r2
 8003726:	7812      	ldrb	r2, [r2, #0]
 8003728:	2102      	movs	r1, #2
 800372a:	430a      	orrs	r2, r1
 800372c:	701a      	strb	r2, [r3, #0]
		gyro_scale_factor = 65.5;
 800372e:	4b13      	ldr	r3, [pc, #76]	; (800377c <icm20948_gyro_full_scale_select+0xa4>)
 8003730:	4a14      	ldr	r2, [pc, #80]	; (8003784 <icm20948_gyro_full_scale_select+0xac>)
 8003732:	601a      	str	r2, [r3, #0]
		break;
 8003734:	e015      	b.n	8003762 <icm20948_gyro_full_scale_select+0x8a>
	case _1000dps:
		new_val |= 0x04;
 8003736:	220f      	movs	r2, #15
 8003738:	18bb      	adds	r3, r7, r2
 800373a:	18ba      	adds	r2, r7, r2
 800373c:	7812      	ldrb	r2, [r2, #0]
 800373e:	2104      	movs	r1, #4
 8003740:	430a      	orrs	r2, r1
 8003742:	701a      	strb	r2, [r3, #0]
		gyro_scale_factor = 32.8;
 8003744:	4b0d      	ldr	r3, [pc, #52]	; (800377c <icm20948_gyro_full_scale_select+0xa4>)
 8003746:	4a10      	ldr	r2, [pc, #64]	; (8003788 <icm20948_gyro_full_scale_select+0xb0>)
 8003748:	601a      	str	r2, [r3, #0]
		break;
 800374a:	e00a      	b.n	8003762 <icm20948_gyro_full_scale_select+0x8a>
	case _2000dps:
		new_val |= 0x06;
 800374c:	220f      	movs	r2, #15
 800374e:	18bb      	adds	r3, r7, r2
 8003750:	18ba      	adds	r2, r7, r2
 8003752:	7812      	ldrb	r2, [r2, #0]
 8003754:	2106      	movs	r1, #6
 8003756:	430a      	orrs	r2, r1
 8003758:	701a      	strb	r2, [r3, #0]
		gyro_scale_factor = 16.4;
 800375a:	4b08      	ldr	r3, [pc, #32]	; (800377c <icm20948_gyro_full_scale_select+0xa4>)
 800375c:	4a0b      	ldr	r2, [pc, #44]	; (800378c <icm20948_gyro_full_scale_select+0xb4>)
 800375e:	601a      	str	r2, [r3, #0]
		break;
 8003760:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8003762:	230f      	movs	r3, #15
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	001a      	movs	r2, r3
 800376a:	2101      	movs	r1, #1
 800376c:	2020      	movs	r0, #32
 800376e:	f000 f8d3 	bl	8003918 <write_single_icm20948_reg>
}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	46bd      	mov	sp, r7
 8003776:	b005      	add	sp, #20
 8003778:	bd90      	pop	{r4, r7, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	200002fc 	.word	0x200002fc
 8003780:	43030000 	.word	0x43030000
 8003784:	42830000 	.word	0x42830000
 8003788:	42033333 	.word	0x42033333
 800378c:	41833333 	.word	0x41833333

08003790 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8003790:	b590      	push	{r4, r7, lr}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	0002      	movs	r2, r0
 8003798:	1dfb      	adds	r3, r7, #7
 800379a:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 800379c:	230f      	movs	r3, #15
 800379e:	18fc      	adds	r4, r7, r3
 80037a0:	2114      	movs	r1, #20
 80037a2:	2020      	movs	r0, #32
 80037a4:	f000 f886 	bl	80038b4 <read_single_icm20948_reg>
 80037a8:	0003      	movs	r3, r0
 80037aa:	7023      	strb	r3, [r4, #0]

	switch (full_scale)
 80037ac:	1dfb      	adds	r3, r7, #7
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d02a      	beq.n	800380a <icm20948_accel_full_scale_select+0x7a>
 80037b4:	dc35      	bgt.n	8003822 <icm20948_accel_full_scale_select+0x92>
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d01b      	beq.n	80037f2 <icm20948_accel_full_scale_select+0x62>
 80037ba:	dc32      	bgt.n	8003822 <icm20948_accel_full_scale_select+0x92>
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <icm20948_accel_full_scale_select+0x36>
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d00a      	beq.n	80037da <icm20948_accel_full_scale_select+0x4a>
 80037c4:	e02d      	b.n	8003822 <icm20948_accel_full_scale_select+0x92>
	{
	case _2g:
		new_val |= 0x00;
 80037c6:	220f      	movs	r2, #15
 80037c8:	18bb      	adds	r3, r7, r2
 80037ca:	18ba      	adds	r2, r7, r2
 80037cc:	7812      	ldrb	r2, [r2, #0]
 80037ce:	701a      	strb	r2, [r3, #0]
		accel_scale_factor = 16384;
 80037d0:	4b1a      	ldr	r3, [pc, #104]	; (800383c <icm20948_accel_full_scale_select+0xac>)
 80037d2:	228d      	movs	r2, #141	; 0x8d
 80037d4:	05d2      	lsls	r2, r2, #23
 80037d6:	601a      	str	r2, [r3, #0]
		break;
 80037d8:	e023      	b.n	8003822 <icm20948_accel_full_scale_select+0x92>
	case _4g:
		new_val |= 0x02;
 80037da:	220f      	movs	r2, #15
 80037dc:	18bb      	adds	r3, r7, r2
 80037de:	18ba      	adds	r2, r7, r2
 80037e0:	7812      	ldrb	r2, [r2, #0]
 80037e2:	2102      	movs	r1, #2
 80037e4:	430a      	orrs	r2, r1
 80037e6:	701a      	strb	r2, [r3, #0]
		accel_scale_factor = 8192;
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <icm20948_accel_full_scale_select+0xac>)
 80037ea:	228c      	movs	r2, #140	; 0x8c
 80037ec:	05d2      	lsls	r2, r2, #23
 80037ee:	601a      	str	r2, [r3, #0]
		break;
 80037f0:	e017      	b.n	8003822 <icm20948_accel_full_scale_select+0x92>
	case _8g:
		new_val |= 0x04;
 80037f2:	220f      	movs	r2, #15
 80037f4:	18bb      	adds	r3, r7, r2
 80037f6:	18ba      	adds	r2, r7, r2
 80037f8:	7812      	ldrb	r2, [r2, #0]
 80037fa:	2104      	movs	r1, #4
 80037fc:	430a      	orrs	r2, r1
 80037fe:	701a      	strb	r2, [r3, #0]
		accel_scale_factor = 4096;
 8003800:	4b0e      	ldr	r3, [pc, #56]	; (800383c <icm20948_accel_full_scale_select+0xac>)
 8003802:	228b      	movs	r2, #139	; 0x8b
 8003804:	05d2      	lsls	r2, r2, #23
 8003806:	601a      	str	r2, [r3, #0]
		break;
 8003808:	e00b      	b.n	8003822 <icm20948_accel_full_scale_select+0x92>
	case _16g:
		new_val |= 0x06;
 800380a:	220f      	movs	r2, #15
 800380c:	18bb      	adds	r3, r7, r2
 800380e:	18ba      	adds	r2, r7, r2
 8003810:	7812      	ldrb	r2, [r2, #0]
 8003812:	2106      	movs	r1, #6
 8003814:	430a      	orrs	r2, r1
 8003816:	701a      	strb	r2, [r3, #0]
		accel_scale_factor = 2048;
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <icm20948_accel_full_scale_select+0xac>)
 800381a:	228a      	movs	r2, #138	; 0x8a
 800381c:	05d2      	lsls	r2, r2, #23
 800381e:	601a      	str	r2, [r3, #0]
		break;
 8003820:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8003822:	230f      	movs	r3, #15
 8003824:	18fb      	adds	r3, r7, r3
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	001a      	movs	r2, r3
 800382a:	2114      	movs	r1, #20
 800382c:	2020      	movs	r0, #32
 800382e:	f000 f873 	bl	8003918 <write_single_icm20948_reg>
}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	46bd      	mov	sp, r7
 8003836:	b005      	add	sp, #20
 8003838:	bd90      	pop	{r4, r7, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	20000300 	.word	0x20000300

08003840 <cs_high>:

/* Static Functions */
static void cs_high()
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	015b      	lsls	r3, r3, #5
 8003848:	4803      	ldr	r0, [pc, #12]	; (8003858 <cs_high+0x18>)
 800384a:	2201      	movs	r2, #1
 800384c:	0019      	movs	r1, r3
 800384e:	f000 fd99 	bl	8004384 <HAL_GPIO_WritePin>
}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	48000400 	.word	0x48000400

0800385c <cs_low>:

static void cs_low()
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003860:	2380      	movs	r3, #128	; 0x80
 8003862:	015b      	lsls	r3, r3, #5
 8003864:	4803      	ldr	r0, [pc, #12]	; (8003874 <cs_low+0x18>)
 8003866:	2200      	movs	r2, #0
 8003868:	0019      	movs	r1, r3
 800386a:	f000 fd8b 	bl	8004384 <HAL_GPIO_WritePin>
}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	48000400 	.word	0x48000400

08003878 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8003878:	b590      	push	{r4, r7, lr}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	0002      	movs	r2, r0
 8003880:	1dfb      	adds	r3, r7, #7
 8003882:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8003884:	240c      	movs	r4, #12
 8003886:	193b      	adds	r3, r7, r4
 8003888:	227f      	movs	r2, #127	; 0x7f
 800388a:	701a      	strb	r2, [r3, #0]
	write_reg[1] = ub;
 800388c:	193b      	adds	r3, r7, r4
 800388e:	1dfa      	adds	r2, r7, #7
 8003890:	7812      	ldrb	r2, [r2, #0]
 8003892:	705a      	strb	r2, [r3, #1]

	cs_low();
 8003894:	f7ff ffe2 	bl	800385c <cs_low>
	HAL_SPI_Transmit(&hspi2, write_reg, 2, 10);
 8003898:	1939      	adds	r1, r7, r4
 800389a:	4805      	ldr	r0, [pc, #20]	; (80038b0 <select_user_bank+0x38>)
 800389c:	230a      	movs	r3, #10
 800389e:	2202      	movs	r2, #2
 80038a0:	f001 fb90 	bl	8004fc4 <HAL_SPI_Transmit>
	cs_high();
 80038a4:	f7ff ffcc 	bl	8003840 <cs_high>
}
 80038a8:	46c0      	nop			; (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b005      	add	sp, #20
 80038ae:	bd90      	pop	{r4, r7, pc}
 80038b0:	20000214 	.word	0x20000214

080038b4 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 80038b4:	b590      	push	{r4, r7, lr}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	0002      	movs	r2, r0
 80038bc:	1dfb      	adds	r3, r7, #7
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	1dbb      	adds	r3, r7, #6
 80038c2:	1c0a      	adds	r2, r1, #0
 80038c4:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 80038c6:	1dbb      	adds	r3, r7, #6
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2280      	movs	r2, #128	; 0x80
 80038cc:	4252      	negs	r2, r2
 80038ce:	4313      	orrs	r3, r2
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	240f      	movs	r4, #15
 80038d4:	193b      	adds	r3, r7, r4
 80038d6:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val;
	select_user_bank(ub);
 80038d8:	1dfb      	adds	r3, r7, #7
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	0018      	movs	r0, r3
 80038de:	f7ff ffcb 	bl	8003878 <select_user_bank>

	cs_low();
 80038e2:	f7ff ffbb 	bl	800385c <cs_low>
	HAL_SPI_Transmit(&hspi2, &read_reg, 1, 1000);
 80038e6:	23fa      	movs	r3, #250	; 0xfa
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	1939      	adds	r1, r7, r4
 80038ec:	4809      	ldr	r0, [pc, #36]	; (8003914 <read_single_icm20948_reg+0x60>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	f001 fb68 	bl	8004fc4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_val, 1, 1000);
 80038f4:	23fa      	movs	r3, #250	; 0xfa
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	240e      	movs	r4, #14
 80038fa:	1939      	adds	r1, r7, r4
 80038fc:	4805      	ldr	r0, [pc, #20]	; (8003914 <read_single_icm20948_reg+0x60>)
 80038fe:	2201      	movs	r2, #1
 8003900:	f001 fcb8 	bl	8005274 <HAL_SPI_Receive>
	cs_high();
 8003904:	f7ff ff9c 	bl	8003840 <cs_high>

	return reg_val;
 8003908:	193b      	adds	r3, r7, r4
 800390a:	781b      	ldrb	r3, [r3, #0]
}
 800390c:	0018      	movs	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	b005      	add	sp, #20
 8003912:	bd90      	pop	{r4, r7, pc}
 8003914:	20000214 	.word	0x20000214

08003918 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8003918:	b590      	push	{r4, r7, lr}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	0004      	movs	r4, r0
 8003920:	0008      	movs	r0, r1
 8003922:	0011      	movs	r1, r2
 8003924:	1dfb      	adds	r3, r7, #7
 8003926:	1c22      	adds	r2, r4, #0
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	1dbb      	adds	r3, r7, #6
 800392c:	1c02      	adds	r2, r0, #0
 800392e:	701a      	strb	r2, [r3, #0]
 8003930:	1d7b      	adds	r3, r7, #5
 8003932:	1c0a      	adds	r2, r1, #0
 8003934:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8003936:	240c      	movs	r4, #12
 8003938:	193b      	adds	r3, r7, r4
 800393a:	1dba      	adds	r2, r7, #6
 800393c:	7812      	ldrb	r2, [r2, #0]
 800393e:	701a      	strb	r2, [r3, #0]
	write_reg[1] = val;
 8003940:	193b      	adds	r3, r7, r4
 8003942:	1d7a      	adds	r2, r7, #5
 8003944:	7812      	ldrb	r2, [r2, #0]
 8003946:	705a      	strb	r2, [r3, #1]

	select_user_bank(ub);
 8003948:	1dfb      	adds	r3, r7, #7
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	0018      	movs	r0, r3
 800394e:	f7ff ff93 	bl	8003878 <select_user_bank>

	cs_low();
 8003952:	f7ff ff83 	bl	800385c <cs_low>
	HAL_SPI_Transmit(&hspi2, write_reg, 2, 1000);
 8003956:	23fa      	movs	r3, #250	; 0xfa
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	1939      	adds	r1, r7, r4
 800395c:	4804      	ldr	r0, [pc, #16]	; (8003970 <write_single_icm20948_reg+0x58>)
 800395e:	2202      	movs	r2, #2
 8003960:	f001 fb30 	bl	8004fc4 <HAL_SPI_Transmit>
	cs_high();
 8003964:	f7ff ff6c 	bl	8003840 <cs_high>
}
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b005      	add	sp, #20
 800396e:	bd90      	pop	{r4, r7, pc}
 8003970:	20000214 	.word	0x20000214

08003974 <read_multiple_icm20948_reg>:

static uint8_t *read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8003974:	b590      	push	{r4, r7, lr}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	0004      	movs	r4, r0
 800397c:	0008      	movs	r0, r1
 800397e:	0011      	movs	r1, r2
 8003980:	1dfb      	adds	r3, r7, #7
 8003982:	1c22      	adds	r2, r4, #0
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	1dbb      	adds	r3, r7, #6
 8003988:	1c02      	adds	r2, r0, #0
 800398a:	701a      	strb	r2, [r3, #0]
 800398c:	1d7b      	adds	r3, r7, #5
 800398e:	1c0a      	adds	r2, r1, #0
 8003990:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 8003992:	1dbb      	adds	r3, r7, #6
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2280      	movs	r2, #128	; 0x80
 8003998:	4252      	negs	r2, r2
 800399a:	4313      	orrs	r3, r2
 800399c:	b2da      	uxtb	r2, r3
 800399e:	240f      	movs	r4, #15
 80039a0:	193b      	adds	r3, r7, r4
 80039a2:	701a      	strb	r2, [r3, #0]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 80039a4:	1dfb      	adds	r3, r7, #7
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	0018      	movs	r0, r3
 80039aa:	f7ff ff65 	bl	8003878 <select_user_bank>

	cs_low();
 80039ae:	f7ff ff55 	bl	800385c <cs_low>
	HAL_SPI_Transmit(&hspi2, &read_reg, 1, 1000);
 80039b2:	23fa      	movs	r3, #250	; 0xfa
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	1939      	adds	r1, r7, r4
 80039b8:	4809      	ldr	r0, [pc, #36]	; (80039e0 <read_multiple_icm20948_reg+0x6c>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	f001 fb02 	bl	8004fc4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, reg_val, len, 1000);
 80039c0:	1d7b      	adds	r3, r7, #5
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	23fa      	movs	r3, #250	; 0xfa
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4906      	ldr	r1, [pc, #24]	; (80039e4 <read_multiple_icm20948_reg+0x70>)
 80039cc:	4804      	ldr	r0, [pc, #16]	; (80039e0 <read_multiple_icm20948_reg+0x6c>)
 80039ce:	f001 fc51 	bl	8005274 <HAL_SPI_Receive>
	cs_high();
 80039d2:	f7ff ff35 	bl	8003840 <cs_high>

	return reg_val;
 80039d6:	4b03      	ldr	r3, [pc, #12]	; (80039e4 <read_multiple_icm20948_reg+0x70>)
}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	b005      	add	sp, #20
 80039de:	bd90      	pop	{r4, r7, pc}
 80039e0:	20000214 	.word	0x20000214
 80039e4:	20000304 	.word	0x20000304

080039e8 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t *val, uint8_t len)
{
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	0004      	movs	r4, r0
 80039f0:	0008      	movs	r0, r1
 80039f2:	603a      	str	r2, [r7, #0]
 80039f4:	0019      	movs	r1, r3
 80039f6:	1dfb      	adds	r3, r7, #7
 80039f8:	1c22      	adds	r2, r4, #0
 80039fa:	701a      	strb	r2, [r3, #0]
 80039fc:	1dbb      	adds	r3, r7, #6
 80039fe:	1c02      	adds	r2, r0, #0
 8003a00:	701a      	strb	r2, [r3, #0]
 8003a02:	1d7b      	adds	r3, r7, #5
 8003a04:	1c0a      	adds	r2, r1, #0
 8003a06:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg = WRITE | reg;
 8003a08:	240f      	movs	r4, #15
 8003a0a:	193b      	adds	r3, r7, r4
 8003a0c:	1dba      	adds	r2, r7, #6
 8003a0e:	7812      	ldrb	r2, [r2, #0]
 8003a10:	701a      	strb	r2, [r3, #0]
	select_user_bank(ub);
 8003a12:	1dfb      	adds	r3, r7, #7
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	0018      	movs	r0, r3
 8003a18:	f7ff ff2e 	bl	8003878 <select_user_bank>

	cs_low();
 8003a1c:	f7ff ff1e 	bl	800385c <cs_low>
	HAL_SPI_Transmit(&hspi2, &write_reg, 1, 1000);
 8003a20:	23fa      	movs	r3, #250	; 0xfa
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	1939      	adds	r1, r7, r4
 8003a26:	4809      	ldr	r0, [pc, #36]	; (8003a4c <write_multiple_icm20948_reg+0x64>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f001 facb 	bl	8004fc4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, val, len, 1000);
 8003a2e:	1d7b      	adds	r3, r7, #5
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	23fa      	movs	r3, #250	; 0xfa
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	6839      	ldr	r1, [r7, #0]
 8003a3a:	4804      	ldr	r0, [pc, #16]	; (8003a4c <write_multiple_icm20948_reg+0x64>)
 8003a3c:	f001 fac2 	bl	8004fc4 <HAL_SPI_Transmit>
	cs_high();
 8003a40:	f7ff fefe 	bl	8003840 <cs_high>
}
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b005      	add	sp, #20
 8003a4a:	bd90      	pop	{r4, r7, pc}
 8003a4c:	20000214 	.word	0x20000214

08003a50 <write_single_ak09916_reg>:
	HAL_Delay(1);
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
}

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	0002      	movs	r2, r0
 8003a58:	1dfb      	adds	r3, r7, #7
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	1dbb      	adds	r3, r7, #6
 8003a5e:	1c0a      	adds	r2, r1, #0
 8003a60:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 8003a62:	220c      	movs	r2, #12
 8003a64:	2103      	movs	r1, #3
 8003a66:	2030      	movs	r0, #48	; 0x30
 8003a68:	f7ff ff56 	bl	8003918 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8003a6c:	1dfb      	adds	r3, r7, #7
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	001a      	movs	r2, r3
 8003a72:	2104      	movs	r1, #4
 8003a74:	2030      	movs	r0, #48	; 0x30
 8003a76:	f7ff ff4f 	bl	8003918 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8003a7a:	1dbb      	adds	r3, r7, #6
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	001a      	movs	r2, r3
 8003a80:	2106      	movs	r1, #6
 8003a82:	2030      	movs	r0, #48	; 0x30
 8003a84:	f7ff ff48 	bl	8003918 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8003a88:	2281      	movs	r2, #129	; 0x81
 8003a8a:	2105      	movs	r1, #5
 8003a8c:	2030      	movs	r0, #48	; 0x30
 8003a8e:	f7ff ff43 	bl	8003918 <write_single_icm20948_reg>
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b002      	add	sp, #8
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a9e:	b672      	cpsid	i
}
 8003aa0:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003aa2:	e7fe      	b.n	8003aa2 <Error_Handler+0x8>

08003aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aaa:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <HAL_MspInit+0x44>)
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <HAL_MspInit+0x44>)
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	619a      	str	r2, [r3, #24]
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <HAL_MspInit+0x44>)
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2201      	movs	r2, #1
 8003abc:	4013      	ands	r3, r2
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <HAL_MspInit+0x44>)
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <HAL_MspInit+0x44>)
 8003ac8:	2180      	movs	r1, #128	; 0x80
 8003aca:	0549      	lsls	r1, r1, #21
 8003acc:	430a      	orrs	r2, r1
 8003ace:	61da      	str	r2, [r3, #28]
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_MspInit+0x44>)
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	055b      	lsls	r3, r3, #21
 8003ad8:	4013      	ands	r3, r2
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	b002      	add	sp, #8
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	40021000 	.word	0x40021000

08003aec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003aec:	b590      	push	{r4, r7, lr}
 8003aee:	b08b      	sub	sp, #44	; 0x2c
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af4:	2414      	movs	r4, #20
 8003af6:	193b      	adds	r3, r7, r4
 8003af8:	0018      	movs	r0, r3
 8003afa:	2314      	movs	r3, #20
 8003afc:	001a      	movs	r2, r3
 8003afe:	2100      	movs	r1, #0
 8003b00:	f002 fcd2 	bl	80064a8 <memset>
  if(hspi->Instance==SPI2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1c      	ldr	r2, [pc, #112]	; (8003b7c <HAL_SPI_MspInit+0x90>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d132      	bne.n	8003b74 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003b0e:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <HAL_SPI_MspInit+0x94>)
 8003b10:	69da      	ldr	r2, [r3, #28]
 8003b12:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <HAL_SPI_MspInit+0x94>)
 8003b14:	2180      	movs	r1, #128	; 0x80
 8003b16:	01c9      	lsls	r1, r1, #7
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	61da      	str	r2, [r3, #28]
 8003b1c:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <HAL_SPI_MspInit+0x94>)
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	01db      	lsls	r3, r3, #7
 8003b24:	4013      	ands	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b2a:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <HAL_SPI_MspInit+0x94>)
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <HAL_SPI_MspInit+0x94>)
 8003b30:	2180      	movs	r1, #128	; 0x80
 8003b32:	02c9      	lsls	r1, r1, #11
 8003b34:	430a      	orrs	r2, r1
 8003b36:	615a      	str	r2, [r3, #20]
 8003b38:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <HAL_SPI_MspInit+0x94>)
 8003b3a:	695a      	ldr	r2, [r3, #20]
 8003b3c:	2380      	movs	r3, #128	; 0x80
 8003b3e:	02db      	lsls	r3, r3, #11
 8003b40:	4013      	ands	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003b46:	193b      	adds	r3, r7, r4
 8003b48:	22e0      	movs	r2, #224	; 0xe0
 8003b4a:	0212      	lsls	r2, r2, #8
 8003b4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4e:	0021      	movs	r1, r4
 8003b50:	187b      	adds	r3, r7, r1
 8003b52:	2202      	movs	r2, #2
 8003b54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b56:	187b      	adds	r3, r7, r1
 8003b58:	2200      	movs	r2, #0
 8003b5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b5c:	187b      	adds	r3, r7, r1
 8003b5e:	2203      	movs	r2, #3
 8003b60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003b62:	187b      	adds	r3, r7, r1
 8003b64:	2200      	movs	r2, #0
 8003b66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b68:	187b      	adds	r3, r7, r1
 8003b6a:	4a06      	ldr	r2, [pc, #24]	; (8003b84 <HAL_SPI_MspInit+0x98>)
 8003b6c:	0019      	movs	r1, r3
 8003b6e:	0010      	movs	r0, r2
 8003b70:	f000 fa98 	bl	80040a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003b74:	46c0      	nop			; (mov r8, r8)
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b00b      	add	sp, #44	; 0x2c
 8003b7a:	bd90      	pop	{r4, r7, pc}
 8003b7c:	40003800 	.word	0x40003800
 8003b80:	40021000 	.word	0x40021000
 8003b84:	48000400 	.word	0x48000400

08003b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b88:	b590      	push	{r4, r7, lr}
 8003b8a:	b08b      	sub	sp, #44	; 0x2c
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b90:	2414      	movs	r4, #20
 8003b92:	193b      	adds	r3, r7, r4
 8003b94:	0018      	movs	r0, r3
 8003b96:	2314      	movs	r3, #20
 8003b98:	001a      	movs	r2, r3
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	f002 fc84 	bl	80064a8 <memset>
  if(huart->Instance==USART1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <HAL_UART_MspInit+0x94>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d133      	bne.n	8003c12 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003baa:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <HAL_UART_MspInit+0x98>)
 8003bac:	699a      	ldr	r2, [r3, #24]
 8003bae:	4b1c      	ldr	r3, [pc, #112]	; (8003c20 <HAL_UART_MspInit+0x98>)
 8003bb0:	2180      	movs	r1, #128	; 0x80
 8003bb2:	01c9      	lsls	r1, r1, #7
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	619a      	str	r2, [r3, #24]
 8003bb8:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <HAL_UART_MspInit+0x98>)
 8003bba:	699a      	ldr	r2, [r3, #24]
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	01db      	lsls	r3, r3, #7
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc6:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <HAL_UART_MspInit+0x98>)
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <HAL_UART_MspInit+0x98>)
 8003bcc:	2180      	movs	r1, #128	; 0x80
 8003bce:	0289      	lsls	r1, r1, #10
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	615a      	str	r2, [r3, #20]
 8003bd4:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <HAL_UART_MspInit+0x98>)
 8003bd6:	695a      	ldr	r2, [r3, #20]
 8003bd8:	2380      	movs	r3, #128	; 0x80
 8003bda:	029b      	lsls	r3, r3, #10
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003be2:	193b      	adds	r3, r7, r4
 8003be4:	22c0      	movs	r2, #192	; 0xc0
 8003be6:	00d2      	lsls	r2, r2, #3
 8003be8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bea:	0021      	movs	r1, r4
 8003bec:	187b      	adds	r3, r7, r1
 8003bee:	2202      	movs	r2, #2
 8003bf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf2:	187b      	adds	r3, r7, r1
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bf8:	187b      	adds	r3, r7, r1
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	2201      	movs	r2, #1
 8003c02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c04:	187a      	adds	r2, r7, r1
 8003c06:	2390      	movs	r3, #144	; 0x90
 8003c08:	05db      	lsls	r3, r3, #23
 8003c0a:	0011      	movs	r1, r2
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f000 fa49 	bl	80040a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b00b      	add	sp, #44	; 0x2c
 8003c18:	bd90      	pop	{r4, r7, pc}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	40013800 	.word	0x40013800
 8003c20:	40021000 	.word	0x40021000

08003c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c28:	e7fe      	b.n	8003c28 <NMI_Handler+0x4>

08003c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c2e:	e7fe      	b.n	8003c2e <HardFault_Handler+0x4>

08003c30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003c34:	46c0      	nop			; (mov r8, r8)
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c48:	f000 f938 	bl	8003ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c4c:	46c0      	nop			; (mov r8, r8)
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	af00      	add	r7, sp, #0
	return 1;
 8003c56:	2301      	movs	r3, #1
}
 8003c58:	0018      	movs	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <_kill>:

int _kill(int pid, int sig)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c68:	f002 fbf4 	bl	8006454 <__errno>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	2216      	movs	r2, #22
 8003c70:	601a      	str	r2, [r3, #0]
	return -1;
 8003c72:	2301      	movs	r3, #1
 8003c74:	425b      	negs	r3, r3
}
 8003c76:	0018      	movs	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	b002      	add	sp, #8
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <_exit>:

void _exit (int status)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c86:	2301      	movs	r3, #1
 8003c88:	425a      	negs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	0011      	movs	r1, r2
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f7ff ffe5 	bl	8003c5e <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c94:	e7fe      	b.n	8003c94 <_exit+0x16>

08003c96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b086      	sub	sp, #24
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	e00a      	b.n	8003cbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ca8:	e000      	b.n	8003cac <_read+0x16>
 8003caa:	bf00      	nop
 8003cac:	0001      	movs	r1, r0
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	60ba      	str	r2, [r7, #8]
 8003cb4:	b2ca      	uxtb	r2, r1
 8003cb6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	dbf0      	blt.n	8003ca8 <_read+0x12>
	}

return len;
 8003cc6:	687b      	ldr	r3, [r7, #4]
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b006      	add	sp, #24
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	e009      	b.n	8003cf6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	60ba      	str	r2, [r7, #8]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	0018      	movs	r0, r3
 8003cec:	e000      	b.n	8003cf0 <_write+0x20>
 8003cee:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	dbf1      	blt.n	8003ce2 <_write+0x12>
	}
	return len;
 8003cfe:	687b      	ldr	r3, [r7, #4]
}
 8003d00:	0018      	movs	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b006      	add	sp, #24
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <_close>:

int _close(int file)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	return -1;
 8003d10:	2301      	movs	r3, #1
 8003d12:	425b      	negs	r3, r3
}
 8003d14:	0018      	movs	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b002      	add	sp, #8
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2280      	movs	r2, #128	; 0x80
 8003d2a:	0192      	lsls	r2, r2, #6
 8003d2c:	605a      	str	r2, [r3, #4]
	return 0;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	0018      	movs	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b002      	add	sp, #8
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <_isatty>:

int _isatty(int file)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	return 1;
 8003d40:	2301      	movs	r3, #1
}
 8003d42:	0018      	movs	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b002      	add	sp, #8
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	607a      	str	r2, [r7, #4]
	return 0;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b004      	add	sp, #16
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d68:	4a14      	ldr	r2, [pc, #80]	; (8003dbc <_sbrk+0x5c>)
 8003d6a:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <_sbrk+0x60>)
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d74:	4b13      	ldr	r3, [pc, #76]	; (8003dc4 <_sbrk+0x64>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <_sbrk+0x64>)
 8003d7e:	4a12      	ldr	r2, [pc, #72]	; (8003dc8 <_sbrk+0x68>)
 8003d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d82:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <_sbrk+0x64>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	18d3      	adds	r3, r2, r3
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d207      	bcs.n	8003da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d90:	f002 fb60 	bl	8006454 <__errno>
 8003d94:	0003      	movs	r3, r0
 8003d96:	220c      	movs	r2, #12
 8003d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	425b      	negs	r3, r3
 8003d9e:	e009      	b.n	8003db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003da0:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <_sbrk+0x64>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003da6:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <_sbrk+0x64>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	18d2      	adds	r2, r2, r3
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <_sbrk+0x64>)
 8003db0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003db2:	68fb      	ldr	r3, [r7, #12]
}
 8003db4:	0018      	movs	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b006      	add	sp, #24
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	20002000 	.word	0x20002000
 8003dc0:	00000400 	.word	0x00000400
 8003dc4:	2000030c 	.word	0x2000030c
 8003dc8:	20000328 	.word	0x20000328

08003dcc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003dd0:	46c0      	nop			; (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003dd8:	480d      	ldr	r0, [pc, #52]	; (8003e10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003dda:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ddc:	480d      	ldr	r0, [pc, #52]	; (8003e14 <LoopForever+0x6>)
  ldr r1, =_edata
 8003dde:	490e      	ldr	r1, [pc, #56]	; (8003e18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003de0:	4a0e      	ldr	r2, [pc, #56]	; (8003e1c <LoopForever+0xe>)
  movs r3, #0
 8003de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003de4:	e002      	b.n	8003dec <LoopCopyDataInit>

08003de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dea:	3304      	adds	r3, #4

08003dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003df0:	d3f9      	bcc.n	8003de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003df2:	4a0b      	ldr	r2, [pc, #44]	; (8003e20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003df4:	4c0b      	ldr	r4, [pc, #44]	; (8003e24 <LoopForever+0x16>)
  movs r3, #0
 8003df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003df8:	e001      	b.n	8003dfe <LoopFillZerobss>

08003dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dfc:	3204      	adds	r2, #4

08003dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e00:	d3fb      	bcc.n	8003dfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003e02:	f7ff ffe3 	bl	8003dcc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003e06:	f002 fb2b 	bl	8006460 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e0a:	f7fe fdd5 	bl	80029b8 <main>

08003e0e <LoopForever>:

LoopForever:
    b LoopForever
 8003e0e:	e7fe      	b.n	8003e0e <LoopForever>
  ldr   r0, =_estack
 8003e10:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e18:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003e1c:	0800b614 	.word	0x0800b614
  ldr r2, =_sbss
 8003e20:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003e24:	20000324 	.word	0x20000324

08003e28 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e28:	e7fe      	b.n	8003e28 <ADC1_COMP_IRQHandler>
	...

08003e2c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e30:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <HAL_Init+0x24>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <HAL_Init+0x24>)
 8003e36:	2110      	movs	r1, #16
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003e3c:	2003      	movs	r0, #3
 8003e3e:	f000 f809 	bl	8003e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e42:	f7ff fe2f 	bl	8003aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	0018      	movs	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	40022000 	.word	0x40022000

08003e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e54:	b590      	push	{r4, r7, lr}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e5c:	4b14      	ldr	r3, [pc, #80]	; (8003eb0 <HAL_InitTick+0x5c>)
 8003e5e:	681c      	ldr	r4, [r3, #0]
 8003e60:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <HAL_InitTick+0x60>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	0019      	movs	r1, r3
 8003e66:	23fa      	movs	r3, #250	; 0xfa
 8003e68:	0098      	lsls	r0, r3, #2
 8003e6a:	f7fc f969 	bl	8000140 <__udivsi3>
 8003e6e:	0003      	movs	r3, r0
 8003e70:	0019      	movs	r1, r3
 8003e72:	0020      	movs	r0, r4
 8003e74:	f7fc f964 	bl	8000140 <__udivsi3>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f000 f905 	bl	800408a <HAL_SYSTICK_Config>
 8003e80:	1e03      	subs	r3, r0, #0
 8003e82:	d001      	beq.n	8003e88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e00f      	b.n	8003ea8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d80b      	bhi.n	8003ea6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	2301      	movs	r3, #1
 8003e92:	425b      	negs	r3, r3
 8003e94:	2200      	movs	r2, #0
 8003e96:	0018      	movs	r0, r3
 8003e98:	f000 f8e2 	bl	8004060 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e9c:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <HAL_InitTick+0x64>)
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	e000      	b.n	8003ea8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
}
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b003      	add	sp, #12
 8003eae:	bd90      	pop	{r4, r7, pc}
 8003eb0:	20000000 	.word	0x20000000
 8003eb4:	20000008 	.word	0x20000008
 8003eb8:	20000004 	.word	0x20000004

08003ebc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <HAL_IncTick+0x1c>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	001a      	movs	r2, r3
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <HAL_IncTick+0x20>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	18d2      	adds	r2, r2, r3
 8003ecc:	4b03      	ldr	r3, [pc, #12]	; (8003edc <HAL_IncTick+0x20>)
 8003ece:	601a      	str	r2, [r3, #0]
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	20000008 	.word	0x20000008
 8003edc:	20000310 	.word	0x20000310

08003ee0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ee4:	4b02      	ldr	r3, [pc, #8]	; (8003ef0 <HAL_GetTick+0x10>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	20000310 	.word	0x20000310

08003ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003efc:	f7ff fff0 	bl	8003ee0 <HAL_GetTick>
 8003f00:	0003      	movs	r3, r0
 8003f02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	d005      	beq.n	8003f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f0e:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <HAL_Delay+0x44>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	001a      	movs	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	189b      	adds	r3, r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	f7ff ffe0 	bl	8003ee0 <HAL_GetTick>
 8003f20:	0002      	movs	r2, r0
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d8f7      	bhi.n	8003f1c <HAL_Delay+0x28>
  {
  }
}
 8003f2c:	46c0      	nop			; (mov r8, r8)
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b004      	add	sp, #16
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	20000008 	.word	0x20000008

08003f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f3c:	b590      	push	{r4, r7, lr}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	0002      	movs	r2, r0
 8003f44:	6039      	str	r1, [r7, #0]
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f4a:	1dfb      	adds	r3, r7, #7
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b7f      	cmp	r3, #127	; 0x7f
 8003f50:	d828      	bhi.n	8003fa4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f52:	4a2f      	ldr	r2, [pc, #188]	; (8004010 <__NVIC_SetPriority+0xd4>)
 8003f54:	1dfb      	adds	r3, r7, #7
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	b25b      	sxtb	r3, r3
 8003f5a:	089b      	lsrs	r3, r3, #2
 8003f5c:	33c0      	adds	r3, #192	; 0xc0
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	589b      	ldr	r3, [r3, r2]
 8003f62:	1dfa      	adds	r2, r7, #7
 8003f64:	7812      	ldrb	r2, [r2, #0]
 8003f66:	0011      	movs	r1, r2
 8003f68:	2203      	movs	r2, #3
 8003f6a:	400a      	ands	r2, r1
 8003f6c:	00d2      	lsls	r2, r2, #3
 8003f6e:	21ff      	movs	r1, #255	; 0xff
 8003f70:	4091      	lsls	r1, r2
 8003f72:	000a      	movs	r2, r1
 8003f74:	43d2      	mvns	r2, r2
 8003f76:	401a      	ands	r2, r3
 8003f78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	019b      	lsls	r3, r3, #6
 8003f7e:	22ff      	movs	r2, #255	; 0xff
 8003f80:	401a      	ands	r2, r3
 8003f82:	1dfb      	adds	r3, r7, #7
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	0018      	movs	r0, r3
 8003f88:	2303      	movs	r3, #3
 8003f8a:	4003      	ands	r3, r0
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f90:	481f      	ldr	r0, [pc, #124]	; (8004010 <__NVIC_SetPriority+0xd4>)
 8003f92:	1dfb      	adds	r3, r7, #7
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	b25b      	sxtb	r3, r3
 8003f98:	089b      	lsrs	r3, r3, #2
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	33c0      	adds	r3, #192	; 0xc0
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003fa2:	e031      	b.n	8004008 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fa4:	4a1b      	ldr	r2, [pc, #108]	; (8004014 <__NVIC_SetPriority+0xd8>)
 8003fa6:	1dfb      	adds	r3, r7, #7
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	0019      	movs	r1, r3
 8003fac:	230f      	movs	r3, #15
 8003fae:	400b      	ands	r3, r1
 8003fb0:	3b08      	subs	r3, #8
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	3306      	adds	r3, #6
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	18d3      	adds	r3, r2, r3
 8003fba:	3304      	adds	r3, #4
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	1dfa      	adds	r2, r7, #7
 8003fc0:	7812      	ldrb	r2, [r2, #0]
 8003fc2:	0011      	movs	r1, r2
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	400a      	ands	r2, r1
 8003fc8:	00d2      	lsls	r2, r2, #3
 8003fca:	21ff      	movs	r1, #255	; 0xff
 8003fcc:	4091      	lsls	r1, r2
 8003fce:	000a      	movs	r2, r1
 8003fd0:	43d2      	mvns	r2, r2
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	019b      	lsls	r3, r3, #6
 8003fda:	22ff      	movs	r2, #255	; 0xff
 8003fdc:	401a      	ands	r2, r3
 8003fde:	1dfb      	adds	r3, r7, #7
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	4003      	ands	r3, r0
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fec:	4809      	ldr	r0, [pc, #36]	; (8004014 <__NVIC_SetPriority+0xd8>)
 8003fee:	1dfb      	adds	r3, r7, #7
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	001c      	movs	r4, r3
 8003ff4:	230f      	movs	r3, #15
 8003ff6:	4023      	ands	r3, r4
 8003ff8:	3b08      	subs	r3, #8
 8003ffa:	089b      	lsrs	r3, r3, #2
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	3306      	adds	r3, #6
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	18c3      	adds	r3, r0, r3
 8004004:	3304      	adds	r3, #4
 8004006:	601a      	str	r2, [r3, #0]
}
 8004008:	46c0      	nop			; (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	b003      	add	sp, #12
 800400e:	bd90      	pop	{r4, r7, pc}
 8004010:	e000e100 	.word	0xe000e100
 8004014:	e000ed00 	.word	0xe000ed00

08004018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	1e5a      	subs	r2, r3, #1
 8004024:	2380      	movs	r3, #128	; 0x80
 8004026:	045b      	lsls	r3, r3, #17
 8004028:	429a      	cmp	r2, r3
 800402a:	d301      	bcc.n	8004030 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800402c:	2301      	movs	r3, #1
 800402e:	e010      	b.n	8004052 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <SysTick_Config+0x44>)
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	3a01      	subs	r2, #1
 8004036:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004038:	2301      	movs	r3, #1
 800403a:	425b      	negs	r3, r3
 800403c:	2103      	movs	r1, #3
 800403e:	0018      	movs	r0, r3
 8004040:	f7ff ff7c 	bl	8003f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <SysTick_Config+0x44>)
 8004046:	2200      	movs	r2, #0
 8004048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800404a:	4b04      	ldr	r3, [pc, #16]	; (800405c <SysTick_Config+0x44>)
 800404c:	2207      	movs	r2, #7
 800404e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004050:	2300      	movs	r3, #0
}
 8004052:	0018      	movs	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	b002      	add	sp, #8
 8004058:	bd80      	pop	{r7, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	e000e010 	.word	0xe000e010

08004060 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	210f      	movs	r1, #15
 800406c:	187b      	adds	r3, r7, r1
 800406e:	1c02      	adds	r2, r0, #0
 8004070:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	187b      	adds	r3, r7, r1
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	b25b      	sxtb	r3, r3
 800407a:	0011      	movs	r1, r2
 800407c:	0018      	movs	r0, r3
 800407e:	f7ff ff5d 	bl	8003f3c <__NVIC_SetPriority>
}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	46bd      	mov	sp, r7
 8004086:	b004      	add	sp, #16
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	0018      	movs	r0, r3
 8004096:	f7ff ffbf 	bl	8004018 <SysTick_Config>
 800409a:	0003      	movs	r3, r0
}
 800409c:	0018      	movs	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	b002      	add	sp, #8
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040b2:	e14f      	b.n	8004354 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2101      	movs	r1, #1
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4091      	lsls	r1, r2
 80040be:	000a      	movs	r2, r1
 80040c0:	4013      	ands	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d100      	bne.n	80040cc <HAL_GPIO_Init+0x28>
 80040ca:	e140      	b.n	800434e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2203      	movs	r2, #3
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d005      	beq.n	80040e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2203      	movs	r2, #3
 80040de:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d130      	bne.n	8004146 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	2203      	movs	r2, #3
 80040f0:	409a      	lsls	r2, r3
 80040f2:	0013      	movs	r3, r2
 80040f4:	43da      	mvns	r2, r3
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4013      	ands	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	409a      	lsls	r2, r3
 8004106:	0013      	movs	r3, r2
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800411a:	2201      	movs	r2, #1
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	409a      	lsls	r2, r3
 8004120:	0013      	movs	r3, r2
 8004122:	43da      	mvns	r2, r3
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4013      	ands	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	2201      	movs	r2, #1
 8004132:	401a      	ands	r2, r3
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	409a      	lsls	r2, r3
 8004138:	0013      	movs	r3, r2
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2203      	movs	r2, #3
 800414c:	4013      	ands	r3, r2
 800414e:	2b03      	cmp	r3, #3
 8004150:	d017      	beq.n	8004182 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	2203      	movs	r2, #3
 800415e:	409a      	lsls	r2, r3
 8004160:	0013      	movs	r3, r2
 8004162:	43da      	mvns	r2, r3
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4013      	ands	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	409a      	lsls	r2, r3
 8004174:	0013      	movs	r3, r2
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2203      	movs	r2, #3
 8004188:	4013      	ands	r3, r2
 800418a:	2b02      	cmp	r3, #2
 800418c:	d123      	bne.n	80041d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	08da      	lsrs	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3208      	adds	r2, #8
 8004196:	0092      	lsls	r2, r2, #2
 8004198:	58d3      	ldr	r3, [r2, r3]
 800419a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2207      	movs	r2, #7
 80041a0:	4013      	ands	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	220f      	movs	r2, #15
 80041a6:	409a      	lsls	r2, r3
 80041a8:	0013      	movs	r3, r2
 80041aa:	43da      	mvns	r2, r3
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4013      	ands	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2107      	movs	r1, #7
 80041ba:	400b      	ands	r3, r1
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	409a      	lsls	r2, r3
 80041c0:	0013      	movs	r3, r2
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	08da      	lsrs	r2, r3, #3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3208      	adds	r2, #8
 80041d0:	0092      	lsls	r2, r2, #2
 80041d2:	6939      	ldr	r1, [r7, #16]
 80041d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	2203      	movs	r2, #3
 80041e2:	409a      	lsls	r2, r3
 80041e4:	0013      	movs	r3, r2
 80041e6:	43da      	mvns	r2, r3
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4013      	ands	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2203      	movs	r2, #3
 80041f4:	401a      	ands	r2, r3
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	409a      	lsls	r2, r3
 80041fc:	0013      	movs	r3, r2
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	23c0      	movs	r3, #192	; 0xc0
 8004210:	029b      	lsls	r3, r3, #10
 8004212:	4013      	ands	r3, r2
 8004214:	d100      	bne.n	8004218 <HAL_GPIO_Init+0x174>
 8004216:	e09a      	b.n	800434e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004218:	4b54      	ldr	r3, [pc, #336]	; (800436c <HAL_GPIO_Init+0x2c8>)
 800421a:	699a      	ldr	r2, [r3, #24]
 800421c:	4b53      	ldr	r3, [pc, #332]	; (800436c <HAL_GPIO_Init+0x2c8>)
 800421e:	2101      	movs	r1, #1
 8004220:	430a      	orrs	r2, r1
 8004222:	619a      	str	r2, [r3, #24]
 8004224:	4b51      	ldr	r3, [pc, #324]	; (800436c <HAL_GPIO_Init+0x2c8>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2201      	movs	r2, #1
 800422a:	4013      	ands	r3, r2
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004230:	4a4f      	ldr	r2, [pc, #316]	; (8004370 <HAL_GPIO_Init+0x2cc>)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	089b      	lsrs	r3, r3, #2
 8004236:	3302      	adds	r3, #2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	589b      	ldr	r3, [r3, r2]
 800423c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2203      	movs	r2, #3
 8004242:	4013      	ands	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	220f      	movs	r2, #15
 8004248:	409a      	lsls	r2, r3
 800424a:	0013      	movs	r3, r2
 800424c:	43da      	mvns	r2, r3
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	4013      	ands	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	2390      	movs	r3, #144	; 0x90
 8004258:	05db      	lsls	r3, r3, #23
 800425a:	429a      	cmp	r2, r3
 800425c:	d013      	beq.n	8004286 <HAL_GPIO_Init+0x1e2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a44      	ldr	r2, [pc, #272]	; (8004374 <HAL_GPIO_Init+0x2d0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00d      	beq.n	8004282 <HAL_GPIO_Init+0x1de>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a43      	ldr	r2, [pc, #268]	; (8004378 <HAL_GPIO_Init+0x2d4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d007      	beq.n	800427e <HAL_GPIO_Init+0x1da>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a42      	ldr	r2, [pc, #264]	; (800437c <HAL_GPIO_Init+0x2d8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d101      	bne.n	800427a <HAL_GPIO_Init+0x1d6>
 8004276:	2303      	movs	r3, #3
 8004278:	e006      	b.n	8004288 <HAL_GPIO_Init+0x1e4>
 800427a:	2305      	movs	r3, #5
 800427c:	e004      	b.n	8004288 <HAL_GPIO_Init+0x1e4>
 800427e:	2302      	movs	r3, #2
 8004280:	e002      	b.n	8004288 <HAL_GPIO_Init+0x1e4>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <HAL_GPIO_Init+0x1e4>
 8004286:	2300      	movs	r3, #0
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	2103      	movs	r1, #3
 800428c:	400a      	ands	r2, r1
 800428e:	0092      	lsls	r2, r2, #2
 8004290:	4093      	lsls	r3, r2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004298:	4935      	ldr	r1, [pc, #212]	; (8004370 <HAL_GPIO_Init+0x2cc>)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	089b      	lsrs	r3, r3, #2
 800429e:	3302      	adds	r3, #2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042a6:	4b36      	ldr	r3, [pc, #216]	; (8004380 <HAL_GPIO_Init+0x2dc>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	43da      	mvns	r2, r3
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4013      	ands	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	2380      	movs	r3, #128	; 0x80
 80042bc:	025b      	lsls	r3, r3, #9
 80042be:	4013      	ands	r3, r2
 80042c0:	d003      	beq.n	80042ca <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80042ca:	4b2d      	ldr	r3, [pc, #180]	; (8004380 <HAL_GPIO_Init+0x2dc>)
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80042d0:	4b2b      	ldr	r3, [pc, #172]	; (8004380 <HAL_GPIO_Init+0x2dc>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	43da      	mvns	r2, r3
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4013      	ands	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	029b      	lsls	r3, r3, #10
 80042e8:	4013      	ands	r3, r2
 80042ea:	d003      	beq.n	80042f4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80042f4:	4b22      	ldr	r3, [pc, #136]	; (8004380 <HAL_GPIO_Init+0x2dc>)
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042fa:	4b21      	ldr	r3, [pc, #132]	; (8004380 <HAL_GPIO_Init+0x2dc>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	43da      	mvns	r2, r3
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	4013      	ands	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	2380      	movs	r3, #128	; 0x80
 8004310:	035b      	lsls	r3, r3, #13
 8004312:	4013      	ands	r3, r2
 8004314:	d003      	beq.n	800431e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800431e:	4b18      	ldr	r3, [pc, #96]	; (8004380 <HAL_GPIO_Init+0x2dc>)
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004324:	4b16      	ldr	r3, [pc, #88]	; (8004380 <HAL_GPIO_Init+0x2dc>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	43da      	mvns	r2, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	4013      	ands	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	039b      	lsls	r3, r3, #14
 800433c:	4013      	ands	r3, r2
 800433e:	d003      	beq.n	8004348 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004348:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <HAL_GPIO_Init+0x2dc>)
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	3301      	adds	r3, #1
 8004352:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	40da      	lsrs	r2, r3
 800435c:	1e13      	subs	r3, r2, #0
 800435e:	d000      	beq.n	8004362 <HAL_GPIO_Init+0x2be>
 8004360:	e6a8      	b.n	80040b4 <HAL_GPIO_Init+0x10>
  } 
}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	46c0      	nop			; (mov r8, r8)
 8004366:	46bd      	mov	sp, r7
 8004368:	b006      	add	sp, #24
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40021000 	.word	0x40021000
 8004370:	40010000 	.word	0x40010000
 8004374:	48000400 	.word	0x48000400
 8004378:	48000800 	.word	0x48000800
 800437c:	48000c00 	.word	0x48000c00
 8004380:	40010400 	.word	0x40010400

08004384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	0008      	movs	r0, r1
 800438e:	0011      	movs	r1, r2
 8004390:	1cbb      	adds	r3, r7, #2
 8004392:	1c02      	adds	r2, r0, #0
 8004394:	801a      	strh	r2, [r3, #0]
 8004396:	1c7b      	adds	r3, r7, #1
 8004398:	1c0a      	adds	r2, r1, #0
 800439a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800439c:	1c7b      	adds	r3, r7, #1
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d004      	beq.n	80043ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043a4:	1cbb      	adds	r3, r7, #2
 80043a6:	881a      	ldrh	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043ac:	e003      	b.n	80043b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043ae:	1cbb      	adds	r3, r7, #2
 80043b0:	881a      	ldrh	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	46bd      	mov	sp, r7
 80043ba:	b002      	add	sp, #8
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e301      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2201      	movs	r2, #1
 80043d8:	4013      	ands	r3, r2
 80043da:	d100      	bne.n	80043de <HAL_RCC_OscConfig+0x1e>
 80043dc:	e08d      	b.n	80044fa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80043de:	4bc3      	ldr	r3, [pc, #780]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	220c      	movs	r2, #12
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d00e      	beq.n	8004408 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043ea:	4bc0      	ldr	r3, [pc, #768]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	220c      	movs	r2, #12
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d116      	bne.n	8004424 <HAL_RCC_OscConfig+0x64>
 80043f6:	4bbd      	ldr	r3, [pc, #756]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	2380      	movs	r3, #128	; 0x80
 80043fc:	025b      	lsls	r3, r3, #9
 80043fe:	401a      	ands	r2, r3
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	025b      	lsls	r3, r3, #9
 8004404:	429a      	cmp	r2, r3
 8004406:	d10d      	bne.n	8004424 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004408:	4bb8      	ldr	r3, [pc, #736]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	029b      	lsls	r3, r3, #10
 8004410:	4013      	ands	r3, r2
 8004412:	d100      	bne.n	8004416 <HAL_RCC_OscConfig+0x56>
 8004414:	e070      	b.n	80044f8 <HAL_RCC_OscConfig+0x138>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d000      	beq.n	8004420 <HAL_RCC_OscConfig+0x60>
 800441e:	e06b      	b.n	80044f8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e2d8      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d107      	bne.n	800443c <HAL_RCC_OscConfig+0x7c>
 800442c:	4baf      	ldr	r3, [pc, #700]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	4bae      	ldr	r3, [pc, #696]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004432:	2180      	movs	r1, #128	; 0x80
 8004434:	0249      	lsls	r1, r1, #9
 8004436:	430a      	orrs	r2, r1
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	e02f      	b.n	800449c <HAL_RCC_OscConfig+0xdc>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10c      	bne.n	800445e <HAL_RCC_OscConfig+0x9e>
 8004444:	4ba9      	ldr	r3, [pc, #676]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4ba8      	ldr	r3, [pc, #672]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 800444a:	49a9      	ldr	r1, [pc, #676]	; (80046f0 <HAL_RCC_OscConfig+0x330>)
 800444c:	400a      	ands	r2, r1
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	4ba6      	ldr	r3, [pc, #664]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	4ba5      	ldr	r3, [pc, #660]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004456:	49a7      	ldr	r1, [pc, #668]	; (80046f4 <HAL_RCC_OscConfig+0x334>)
 8004458:	400a      	ands	r2, r1
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	e01e      	b.n	800449c <HAL_RCC_OscConfig+0xdc>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b05      	cmp	r3, #5
 8004464:	d10e      	bne.n	8004484 <HAL_RCC_OscConfig+0xc4>
 8004466:	4ba1      	ldr	r3, [pc, #644]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	4ba0      	ldr	r3, [pc, #640]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 800446c:	2180      	movs	r1, #128	; 0x80
 800446e:	02c9      	lsls	r1, r1, #11
 8004470:	430a      	orrs	r2, r1
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	4b9d      	ldr	r3, [pc, #628]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	4b9c      	ldr	r3, [pc, #624]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 800447a:	2180      	movs	r1, #128	; 0x80
 800447c:	0249      	lsls	r1, r1, #9
 800447e:	430a      	orrs	r2, r1
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	e00b      	b.n	800449c <HAL_RCC_OscConfig+0xdc>
 8004484:	4b99      	ldr	r3, [pc, #612]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4b98      	ldr	r3, [pc, #608]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 800448a:	4999      	ldr	r1, [pc, #612]	; (80046f0 <HAL_RCC_OscConfig+0x330>)
 800448c:	400a      	ands	r2, r1
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	4b96      	ldr	r3, [pc, #600]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	4b95      	ldr	r3, [pc, #596]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004496:	4997      	ldr	r1, [pc, #604]	; (80046f4 <HAL_RCC_OscConfig+0x334>)
 8004498:	400a      	ands	r2, r1
 800449a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d014      	beq.n	80044ce <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a4:	f7ff fd1c 	bl	8003ee0 <HAL_GetTick>
 80044a8:	0003      	movs	r3, r0
 80044aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ae:	f7ff fd17 	bl	8003ee0 <HAL_GetTick>
 80044b2:	0002      	movs	r2, r0
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b64      	cmp	r3, #100	; 0x64
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e28a      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c0:	4b8a      	ldr	r3, [pc, #552]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	2380      	movs	r3, #128	; 0x80
 80044c6:	029b      	lsls	r3, r3, #10
 80044c8:	4013      	ands	r3, r2
 80044ca:	d0f0      	beq.n	80044ae <HAL_RCC_OscConfig+0xee>
 80044cc:	e015      	b.n	80044fa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ce:	f7ff fd07 	bl	8003ee0 <HAL_GetTick>
 80044d2:	0003      	movs	r3, r0
 80044d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d8:	f7ff fd02 	bl	8003ee0 <HAL_GetTick>
 80044dc:	0002      	movs	r2, r0
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	; 0x64
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e275      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ea:	4b80      	ldr	r3, [pc, #512]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	029b      	lsls	r3, r3, #10
 80044f2:	4013      	ands	r3, r2
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x118>
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2202      	movs	r2, #2
 8004500:	4013      	ands	r3, r2
 8004502:	d100      	bne.n	8004506 <HAL_RCC_OscConfig+0x146>
 8004504:	e069      	b.n	80045da <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004506:	4b79      	ldr	r3, [pc, #484]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	220c      	movs	r2, #12
 800450c:	4013      	ands	r3, r2
 800450e:	d00b      	beq.n	8004528 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004510:	4b76      	ldr	r3, [pc, #472]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	220c      	movs	r2, #12
 8004516:	4013      	ands	r3, r2
 8004518:	2b08      	cmp	r3, #8
 800451a:	d11c      	bne.n	8004556 <HAL_RCC_OscConfig+0x196>
 800451c:	4b73      	ldr	r3, [pc, #460]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	025b      	lsls	r3, r3, #9
 8004524:	4013      	ands	r3, r2
 8004526:	d116      	bne.n	8004556 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004528:	4b70      	ldr	r3, [pc, #448]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2202      	movs	r2, #2
 800452e:	4013      	ands	r3, r2
 8004530:	d005      	beq.n	800453e <HAL_RCC_OscConfig+0x17e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d001      	beq.n	800453e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e24b      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453e:	4b6b      	ldr	r3, [pc, #428]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	22f8      	movs	r2, #248	; 0xf8
 8004544:	4393      	bics	r3, r2
 8004546:	0019      	movs	r1, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	00da      	lsls	r2, r3, #3
 800454e:	4b67      	ldr	r3, [pc, #412]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004550:	430a      	orrs	r2, r1
 8004552:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004554:	e041      	b.n	80045da <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d024      	beq.n	80045a8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800455e:	4b63      	ldr	r3, [pc, #396]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b62      	ldr	r3, [pc, #392]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004564:	2101      	movs	r1, #1
 8004566:	430a      	orrs	r2, r1
 8004568:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456a:	f7ff fcb9 	bl	8003ee0 <HAL_GetTick>
 800456e:	0003      	movs	r3, r0
 8004570:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004574:	f7ff fcb4 	bl	8003ee0 <HAL_GetTick>
 8004578:	0002      	movs	r2, r0
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e227      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004586:	4b59      	ldr	r3, [pc, #356]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2202      	movs	r2, #2
 800458c:	4013      	ands	r3, r2
 800458e:	d0f1      	beq.n	8004574 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004590:	4b56      	ldr	r3, [pc, #344]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	22f8      	movs	r2, #248	; 0xf8
 8004596:	4393      	bics	r3, r2
 8004598:	0019      	movs	r1, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	00da      	lsls	r2, r3, #3
 80045a0:	4b52      	ldr	r3, [pc, #328]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 80045a2:	430a      	orrs	r2, r1
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	e018      	b.n	80045da <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045a8:	4b50      	ldr	r3, [pc, #320]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	4b4f      	ldr	r3, [pc, #316]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 80045ae:	2101      	movs	r1, #1
 80045b0:	438a      	bics	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b4:	f7ff fc94 	bl	8003ee0 <HAL_GetTick>
 80045b8:	0003      	movs	r3, r0
 80045ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045be:	f7ff fc8f 	bl	8003ee0 <HAL_GetTick>
 80045c2:	0002      	movs	r2, r0
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e202      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045d0:	4b46      	ldr	r3, [pc, #280]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2202      	movs	r2, #2
 80045d6:	4013      	ands	r3, r2
 80045d8:	d1f1      	bne.n	80045be <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2208      	movs	r2, #8
 80045e0:	4013      	ands	r3, r2
 80045e2:	d036      	beq.n	8004652 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d019      	beq.n	8004620 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ec:	4b3f      	ldr	r3, [pc, #252]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 80045ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045f0:	4b3e      	ldr	r3, [pc, #248]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 80045f2:	2101      	movs	r1, #1
 80045f4:	430a      	orrs	r2, r1
 80045f6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f8:	f7ff fc72 	bl	8003ee0 <HAL_GetTick>
 80045fc:	0003      	movs	r3, r0
 80045fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004602:	f7ff fc6d 	bl	8003ee0 <HAL_GetTick>
 8004606:	0002      	movs	r2, r0
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e1e0      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004614:	4b35      	ldr	r3, [pc, #212]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	2202      	movs	r2, #2
 800461a:	4013      	ands	r3, r2
 800461c:	d0f1      	beq.n	8004602 <HAL_RCC_OscConfig+0x242>
 800461e:	e018      	b.n	8004652 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004620:	4b32      	ldr	r3, [pc, #200]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004624:	4b31      	ldr	r3, [pc, #196]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004626:	2101      	movs	r1, #1
 8004628:	438a      	bics	r2, r1
 800462a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462c:	f7ff fc58 	bl	8003ee0 <HAL_GetTick>
 8004630:	0003      	movs	r3, r0
 8004632:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004636:	f7ff fc53 	bl	8003ee0 <HAL_GetTick>
 800463a:	0002      	movs	r2, r0
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e1c6      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004648:	4b28      	ldr	r3, [pc, #160]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	2202      	movs	r2, #2
 800464e:	4013      	ands	r3, r2
 8004650:	d1f1      	bne.n	8004636 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2204      	movs	r2, #4
 8004658:	4013      	ands	r3, r2
 800465a:	d100      	bne.n	800465e <HAL_RCC_OscConfig+0x29e>
 800465c:	e0b4      	b.n	80047c8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465e:	201f      	movs	r0, #31
 8004660:	183b      	adds	r3, r7, r0
 8004662:	2200      	movs	r2, #0
 8004664:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004666:	4b21      	ldr	r3, [pc, #132]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004668:	69da      	ldr	r2, [r3, #28]
 800466a:	2380      	movs	r3, #128	; 0x80
 800466c:	055b      	lsls	r3, r3, #21
 800466e:	4013      	ands	r3, r2
 8004670:	d110      	bne.n	8004694 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004672:	4b1e      	ldr	r3, [pc, #120]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004674:	69da      	ldr	r2, [r3, #28]
 8004676:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004678:	2180      	movs	r1, #128	; 0x80
 800467a:	0549      	lsls	r1, r1, #21
 800467c:	430a      	orrs	r2, r1
 800467e:	61da      	str	r2, [r3, #28]
 8004680:	4b1a      	ldr	r3, [pc, #104]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 8004682:	69da      	ldr	r2, [r3, #28]
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	055b      	lsls	r3, r3, #21
 8004688:	4013      	ands	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800468e:	183b      	adds	r3, r7, r0
 8004690:	2201      	movs	r2, #1
 8004692:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004694:	4b18      	ldr	r3, [pc, #96]	; (80046f8 <HAL_RCC_OscConfig+0x338>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	2380      	movs	r3, #128	; 0x80
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	4013      	ands	r3, r2
 800469e:	d11a      	bne.n	80046d6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046a0:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <HAL_RCC_OscConfig+0x338>)
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b14      	ldr	r3, [pc, #80]	; (80046f8 <HAL_RCC_OscConfig+0x338>)
 80046a6:	2180      	movs	r1, #128	; 0x80
 80046a8:	0049      	lsls	r1, r1, #1
 80046aa:	430a      	orrs	r2, r1
 80046ac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ae:	f7ff fc17 	bl	8003ee0 <HAL_GetTick>
 80046b2:	0003      	movs	r3, r0
 80046b4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b8:	f7ff fc12 	bl	8003ee0 <HAL_GetTick>
 80046bc:	0002      	movs	r2, r0
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	; 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e185      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ca:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <HAL_RCC_OscConfig+0x338>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	2380      	movs	r3, #128	; 0x80
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	4013      	ands	r3, r2
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d10e      	bne.n	80046fc <HAL_RCC_OscConfig+0x33c>
 80046de:	4b03      	ldr	r3, [pc, #12]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 80046e0:	6a1a      	ldr	r2, [r3, #32]
 80046e2:	4b02      	ldr	r3, [pc, #8]	; (80046ec <HAL_RCC_OscConfig+0x32c>)
 80046e4:	2101      	movs	r1, #1
 80046e6:	430a      	orrs	r2, r1
 80046e8:	621a      	str	r2, [r3, #32]
 80046ea:	e035      	b.n	8004758 <HAL_RCC_OscConfig+0x398>
 80046ec:	40021000 	.word	0x40021000
 80046f0:	fffeffff 	.word	0xfffeffff
 80046f4:	fffbffff 	.word	0xfffbffff
 80046f8:	40007000 	.word	0x40007000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10c      	bne.n	800471e <HAL_RCC_OscConfig+0x35e>
 8004704:	4bb6      	ldr	r3, [pc, #728]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004706:	6a1a      	ldr	r2, [r3, #32]
 8004708:	4bb5      	ldr	r3, [pc, #724]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 800470a:	2101      	movs	r1, #1
 800470c:	438a      	bics	r2, r1
 800470e:	621a      	str	r2, [r3, #32]
 8004710:	4bb3      	ldr	r3, [pc, #716]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004712:	6a1a      	ldr	r2, [r3, #32]
 8004714:	4bb2      	ldr	r3, [pc, #712]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004716:	2104      	movs	r1, #4
 8004718:	438a      	bics	r2, r1
 800471a:	621a      	str	r2, [r3, #32]
 800471c:	e01c      	b.n	8004758 <HAL_RCC_OscConfig+0x398>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b05      	cmp	r3, #5
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0x380>
 8004726:	4bae      	ldr	r3, [pc, #696]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004728:	6a1a      	ldr	r2, [r3, #32]
 800472a:	4bad      	ldr	r3, [pc, #692]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 800472c:	2104      	movs	r1, #4
 800472e:	430a      	orrs	r2, r1
 8004730:	621a      	str	r2, [r3, #32]
 8004732:	4bab      	ldr	r3, [pc, #684]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004734:	6a1a      	ldr	r2, [r3, #32]
 8004736:	4baa      	ldr	r3, [pc, #680]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004738:	2101      	movs	r1, #1
 800473a:	430a      	orrs	r2, r1
 800473c:	621a      	str	r2, [r3, #32]
 800473e:	e00b      	b.n	8004758 <HAL_RCC_OscConfig+0x398>
 8004740:	4ba7      	ldr	r3, [pc, #668]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004742:	6a1a      	ldr	r2, [r3, #32]
 8004744:	4ba6      	ldr	r3, [pc, #664]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004746:	2101      	movs	r1, #1
 8004748:	438a      	bics	r2, r1
 800474a:	621a      	str	r2, [r3, #32]
 800474c:	4ba4      	ldr	r3, [pc, #656]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 800474e:	6a1a      	ldr	r2, [r3, #32]
 8004750:	4ba3      	ldr	r3, [pc, #652]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004752:	2104      	movs	r1, #4
 8004754:	438a      	bics	r2, r1
 8004756:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d014      	beq.n	800478a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004760:	f7ff fbbe 	bl	8003ee0 <HAL_GetTick>
 8004764:	0003      	movs	r3, r0
 8004766:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004768:	e009      	b.n	800477e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800476a:	f7ff fbb9 	bl	8003ee0 <HAL_GetTick>
 800476e:	0002      	movs	r2, r0
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	4a9b      	ldr	r2, [pc, #620]	; (80049e4 <HAL_RCC_OscConfig+0x624>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e12b      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800477e:	4b98      	ldr	r3, [pc, #608]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	2202      	movs	r2, #2
 8004784:	4013      	ands	r3, r2
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x3aa>
 8004788:	e013      	b.n	80047b2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478a:	f7ff fba9 	bl	8003ee0 <HAL_GetTick>
 800478e:	0003      	movs	r3, r0
 8004790:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004792:	e009      	b.n	80047a8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004794:	f7ff fba4 	bl	8003ee0 <HAL_GetTick>
 8004798:	0002      	movs	r2, r0
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	4a91      	ldr	r2, [pc, #580]	; (80049e4 <HAL_RCC_OscConfig+0x624>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e116      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a8:	4b8d      	ldr	r3, [pc, #564]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	2202      	movs	r2, #2
 80047ae:	4013      	ands	r3, r2
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047b2:	231f      	movs	r3, #31
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d105      	bne.n	80047c8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047bc:	4b88      	ldr	r3, [pc, #544]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	4b87      	ldr	r3, [pc, #540]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 80047c2:	4989      	ldr	r1, [pc, #548]	; (80049e8 <HAL_RCC_OscConfig+0x628>)
 80047c4:	400a      	ands	r2, r1
 80047c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2210      	movs	r2, #16
 80047ce:	4013      	ands	r3, r2
 80047d0:	d063      	beq.n	800489a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d12a      	bne.n	8004830 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80047da:	4b81      	ldr	r3, [pc, #516]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 80047dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047de:	4b80      	ldr	r3, [pc, #512]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 80047e0:	2104      	movs	r1, #4
 80047e2:	430a      	orrs	r2, r1
 80047e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80047e6:	4b7e      	ldr	r3, [pc, #504]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 80047e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ea:	4b7d      	ldr	r3, [pc, #500]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 80047ec:	2101      	movs	r1, #1
 80047ee:	430a      	orrs	r2, r1
 80047f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f2:	f7ff fb75 	bl	8003ee0 <HAL_GetTick>
 80047f6:	0003      	movs	r3, r0
 80047f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80047fc:	f7ff fb70 	bl	8003ee0 <HAL_GetTick>
 8004800:	0002      	movs	r2, r0
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e0e3      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800480e:	4b74      	ldr	r3, [pc, #464]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004812:	2202      	movs	r2, #2
 8004814:	4013      	ands	r3, r2
 8004816:	d0f1      	beq.n	80047fc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004818:	4b71      	ldr	r3, [pc, #452]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 800481a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481c:	22f8      	movs	r2, #248	; 0xf8
 800481e:	4393      	bics	r3, r2
 8004820:	0019      	movs	r1, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	00da      	lsls	r2, r3, #3
 8004828:	4b6d      	ldr	r3, [pc, #436]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 800482a:	430a      	orrs	r2, r1
 800482c:	635a      	str	r2, [r3, #52]	; 0x34
 800482e:	e034      	b.n	800489a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	3305      	adds	r3, #5
 8004836:	d111      	bne.n	800485c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004838:	4b69      	ldr	r3, [pc, #420]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 800483a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800483c:	4b68      	ldr	r3, [pc, #416]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 800483e:	2104      	movs	r1, #4
 8004840:	438a      	bics	r2, r1
 8004842:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004844:	4b66      	ldr	r3, [pc, #408]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004848:	22f8      	movs	r2, #248	; 0xf8
 800484a:	4393      	bics	r3, r2
 800484c:	0019      	movs	r1, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	00da      	lsls	r2, r3, #3
 8004854:	4b62      	ldr	r3, [pc, #392]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004856:	430a      	orrs	r2, r1
 8004858:	635a      	str	r2, [r3, #52]	; 0x34
 800485a:	e01e      	b.n	800489a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800485c:	4b60      	ldr	r3, [pc, #384]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 800485e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004860:	4b5f      	ldr	r3, [pc, #380]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004862:	2104      	movs	r1, #4
 8004864:	430a      	orrs	r2, r1
 8004866:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004868:	4b5d      	ldr	r3, [pc, #372]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 800486a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800486c:	4b5c      	ldr	r3, [pc, #368]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 800486e:	2101      	movs	r1, #1
 8004870:	438a      	bics	r2, r1
 8004872:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004874:	f7ff fb34 	bl	8003ee0 <HAL_GetTick>
 8004878:	0003      	movs	r3, r0
 800487a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800487e:	f7ff fb2f 	bl	8003ee0 <HAL_GetTick>
 8004882:	0002      	movs	r2, r0
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e0a2      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004890:	4b53      	ldr	r3, [pc, #332]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004894:	2202      	movs	r2, #2
 8004896:	4013      	ands	r3, r2
 8004898:	d1f1      	bne.n	800487e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d100      	bne.n	80048a4 <HAL_RCC_OscConfig+0x4e4>
 80048a2:	e097      	b.n	80049d4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048a4:	4b4e      	ldr	r3, [pc, #312]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	220c      	movs	r2, #12
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d100      	bne.n	80048b2 <HAL_RCC_OscConfig+0x4f2>
 80048b0:	e06b      	b.n	800498a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d14c      	bne.n	8004954 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ba:	4b49      	ldr	r3, [pc, #292]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	4b48      	ldr	r3, [pc, #288]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 80048c0:	494a      	ldr	r1, [pc, #296]	; (80049ec <HAL_RCC_OscConfig+0x62c>)
 80048c2:	400a      	ands	r2, r1
 80048c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c6:	f7ff fb0b 	bl	8003ee0 <HAL_GetTick>
 80048ca:	0003      	movs	r3, r0
 80048cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d0:	f7ff fb06 	bl	8003ee0 <HAL_GetTick>
 80048d4:	0002      	movs	r2, r0
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e079      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e2:	4b3f      	ldr	r3, [pc, #252]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	2380      	movs	r3, #128	; 0x80
 80048e8:	049b      	lsls	r3, r3, #18
 80048ea:	4013      	ands	r3, r2
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ee:	4b3c      	ldr	r3, [pc, #240]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	220f      	movs	r2, #15
 80048f4:	4393      	bics	r3, r2
 80048f6:	0019      	movs	r1, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fc:	4b38      	ldr	r3, [pc, #224]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 80048fe:	430a      	orrs	r2, r1
 8004900:	62da      	str	r2, [r3, #44]	; 0x2c
 8004902:	4b37      	ldr	r3, [pc, #220]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	4a3a      	ldr	r2, [pc, #232]	; (80049f0 <HAL_RCC_OscConfig+0x630>)
 8004908:	4013      	ands	r3, r2
 800490a:	0019      	movs	r1, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	431a      	orrs	r2, r3
 8004916:	4b32      	ldr	r3, [pc, #200]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004918:	430a      	orrs	r2, r1
 800491a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800491c:	4b30      	ldr	r3, [pc, #192]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	4b2f      	ldr	r3, [pc, #188]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004922:	2180      	movs	r1, #128	; 0x80
 8004924:	0449      	lsls	r1, r1, #17
 8004926:	430a      	orrs	r2, r1
 8004928:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492a:	f7ff fad9 	bl	8003ee0 <HAL_GetTick>
 800492e:	0003      	movs	r3, r0
 8004930:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004934:	f7ff fad4 	bl	8003ee0 <HAL_GetTick>
 8004938:	0002      	movs	r2, r0
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e047      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004946:	4b26      	ldr	r3, [pc, #152]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	049b      	lsls	r3, r3, #18
 800494e:	4013      	ands	r3, r2
 8004950:	d0f0      	beq.n	8004934 <HAL_RCC_OscConfig+0x574>
 8004952:	e03f      	b.n	80049d4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004954:	4b22      	ldr	r3, [pc, #136]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	4b21      	ldr	r3, [pc, #132]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 800495a:	4924      	ldr	r1, [pc, #144]	; (80049ec <HAL_RCC_OscConfig+0x62c>)
 800495c:	400a      	ands	r2, r1
 800495e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004960:	f7ff fabe 	bl	8003ee0 <HAL_GetTick>
 8004964:	0003      	movs	r3, r0
 8004966:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004968:	e008      	b.n	800497c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496a:	f7ff fab9 	bl	8003ee0 <HAL_GetTick>
 800496e:	0002      	movs	r2, r0
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e02c      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800497c:	4b18      	ldr	r3, [pc, #96]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	2380      	movs	r3, #128	; 0x80
 8004982:	049b      	lsls	r3, r3, #18
 8004984:	4013      	ands	r3, r2
 8004986:	d1f0      	bne.n	800496a <HAL_RCC_OscConfig+0x5aa>
 8004988:	e024      	b.n	80049d4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e01f      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004996:	4b12      	ldr	r3, [pc, #72]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800499c:	4b10      	ldr	r3, [pc, #64]	; (80049e0 <HAL_RCC_OscConfig+0x620>)
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	2380      	movs	r3, #128	; 0x80
 80049a6:	025b      	lsls	r3, r3, #9
 80049a8:	401a      	ands	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d10e      	bne.n	80049d0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	220f      	movs	r2, #15
 80049b6:	401a      	ands	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049bc:	429a      	cmp	r2, r3
 80049be:	d107      	bne.n	80049d0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	23f0      	movs	r3, #240	; 0xf0
 80049c4:	039b      	lsls	r3, r3, #14
 80049c6:	401a      	ands	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d001      	beq.n	80049d4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	0018      	movs	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	b008      	add	sp, #32
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	40021000 	.word	0x40021000
 80049e4:	00001388 	.word	0x00001388
 80049e8:	efffffff 	.word	0xefffffff
 80049ec:	feffffff 	.word	0xfeffffff
 80049f0:	ffc2ffff 	.word	0xffc2ffff

080049f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0b3      	b.n	8004b70 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a08:	4b5b      	ldr	r3, [pc, #364]	; (8004b78 <HAL_RCC_ClockConfig+0x184>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	4013      	ands	r3, r2
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d911      	bls.n	8004a3a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a16:	4b58      	ldr	r3, [pc, #352]	; (8004b78 <HAL_RCC_ClockConfig+0x184>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	4393      	bics	r3, r2
 8004a1e:	0019      	movs	r1, r3
 8004a20:	4b55      	ldr	r3, [pc, #340]	; (8004b78 <HAL_RCC_ClockConfig+0x184>)
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a28:	4b53      	ldr	r3, [pc, #332]	; (8004b78 <HAL_RCC_ClockConfig+0x184>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	4013      	ands	r3, r2
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d001      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e09a      	b.n	8004b70 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	4013      	ands	r3, r2
 8004a42:	d015      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2204      	movs	r2, #4
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d006      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004a4e:	4b4b      	ldr	r3, [pc, #300]	; (8004b7c <HAL_RCC_ClockConfig+0x188>)
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	4b4a      	ldr	r3, [pc, #296]	; (8004b7c <HAL_RCC_ClockConfig+0x188>)
 8004a54:	21e0      	movs	r1, #224	; 0xe0
 8004a56:	00c9      	lsls	r1, r1, #3
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a5c:	4b47      	ldr	r3, [pc, #284]	; (8004b7c <HAL_RCC_ClockConfig+0x188>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	22f0      	movs	r2, #240	; 0xf0
 8004a62:	4393      	bics	r3, r2
 8004a64:	0019      	movs	r1, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	4b44      	ldr	r3, [pc, #272]	; (8004b7c <HAL_RCC_ClockConfig+0x188>)
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2201      	movs	r2, #1
 8004a76:	4013      	ands	r3, r2
 8004a78:	d040      	beq.n	8004afc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d107      	bne.n	8004a92 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a82:	4b3e      	ldr	r3, [pc, #248]	; (8004b7c <HAL_RCC_ClockConfig+0x188>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	2380      	movs	r3, #128	; 0x80
 8004a88:	029b      	lsls	r3, r3, #10
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d114      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e06e      	b.n	8004b70 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d107      	bne.n	8004aaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a9a:	4b38      	ldr	r3, [pc, #224]	; (8004b7c <HAL_RCC_ClockConfig+0x188>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	2380      	movs	r3, #128	; 0x80
 8004aa0:	049b      	lsls	r3, r3, #18
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d108      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e062      	b.n	8004b70 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aaa:	4b34      	ldr	r3, [pc, #208]	; (8004b7c <HAL_RCC_ClockConfig+0x188>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	d101      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e05b      	b.n	8004b70 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ab8:	4b30      	ldr	r3, [pc, #192]	; (8004b7c <HAL_RCC_ClockConfig+0x188>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2203      	movs	r2, #3
 8004abe:	4393      	bics	r3, r2
 8004ac0:	0019      	movs	r1, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	4b2d      	ldr	r3, [pc, #180]	; (8004b7c <HAL_RCC_ClockConfig+0x188>)
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004acc:	f7ff fa08 	bl	8003ee0 <HAL_GetTick>
 8004ad0:	0003      	movs	r3, r0
 8004ad2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad4:	e009      	b.n	8004aea <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad6:	f7ff fa03 	bl	8003ee0 <HAL_GetTick>
 8004ada:	0002      	movs	r2, r0
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	4a27      	ldr	r2, [pc, #156]	; (8004b80 <HAL_RCC_ClockConfig+0x18c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e042      	b.n	8004b70 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aea:	4b24      	ldr	r3, [pc, #144]	; (8004b7c <HAL_RCC_ClockConfig+0x188>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	220c      	movs	r2, #12
 8004af0:	401a      	ands	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d1ec      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004afc:	4b1e      	ldr	r3, [pc, #120]	; (8004b78 <HAL_RCC_ClockConfig+0x184>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2201      	movs	r2, #1
 8004b02:	4013      	ands	r3, r2
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d211      	bcs.n	8004b2e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0a:	4b1b      	ldr	r3, [pc, #108]	; (8004b78 <HAL_RCC_ClockConfig+0x184>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	4393      	bics	r3, r2
 8004b12:	0019      	movs	r1, r3
 8004b14:	4b18      	ldr	r3, [pc, #96]	; (8004b78 <HAL_RCC_ClockConfig+0x184>)
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1c:	4b16      	ldr	r3, [pc, #88]	; (8004b78 <HAL_RCC_ClockConfig+0x184>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2201      	movs	r2, #1
 8004b22:	4013      	ands	r3, r2
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d001      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e020      	b.n	8004b70 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2204      	movs	r2, #4
 8004b34:	4013      	ands	r3, r2
 8004b36:	d009      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004b38:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <HAL_RCC_ClockConfig+0x188>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	4a11      	ldr	r2, [pc, #68]	; (8004b84 <HAL_RCC_ClockConfig+0x190>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	0019      	movs	r1, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <HAL_RCC_ClockConfig+0x188>)
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b4c:	f000 f820 	bl	8004b90 <HAL_RCC_GetSysClockFreq>
 8004b50:	0001      	movs	r1, r0
 8004b52:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <HAL_RCC_ClockConfig+0x188>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	091b      	lsrs	r3, r3, #4
 8004b58:	220f      	movs	r2, #15
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	4a0a      	ldr	r2, [pc, #40]	; (8004b88 <HAL_RCC_ClockConfig+0x194>)
 8004b5e:	5cd3      	ldrb	r3, [r2, r3]
 8004b60:	000a      	movs	r2, r1
 8004b62:	40da      	lsrs	r2, r3
 8004b64:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <HAL_RCC_ClockConfig+0x198>)
 8004b66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004b68:	2003      	movs	r0, #3
 8004b6a:	f7ff f973 	bl	8003e54 <HAL_InitTick>
  
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	0018      	movs	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b004      	add	sp, #16
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40022000 	.word	0x40022000
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	00001388 	.word	0x00001388
 8004b84:	fffff8ff 	.word	0xfffff8ff
 8004b88:	0800b150 	.word	0x0800b150
 8004b8c:	20000000 	.word	0x20000000

08004b90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b90:	b590      	push	{r4, r7, lr}
 8004b92:	b08f      	sub	sp, #60	; 0x3c
 8004b94:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004b96:	2314      	movs	r3, #20
 8004b98:	18fb      	adds	r3, r7, r3
 8004b9a:	4a2b      	ldr	r2, [pc, #172]	; (8004c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b9c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004b9e:	c313      	stmia	r3!, {r0, r1, r4}
 8004ba0:	6812      	ldr	r2, [r2, #0]
 8004ba2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004ba4:	1d3b      	adds	r3, r7, #4
 8004ba6:	4a29      	ldr	r2, [pc, #164]	; (8004c4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ba8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004baa:	c313      	stmia	r3!, {r0, r1, r4}
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bb8:	2300      	movs	r3, #0
 8004bba:	637b      	str	r3, [r7, #52]	; 0x34
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004bc4:	4b22      	ldr	r3, [pc, #136]	; (8004c50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	220c      	movs	r2, #12
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d002      	beq.n	8004bda <HAL_RCC_GetSysClockFreq+0x4a>
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d003      	beq.n	8004be0 <HAL_RCC_GetSysClockFreq+0x50>
 8004bd8:	e02d      	b.n	8004c36 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bda:	4b1e      	ldr	r3, [pc, #120]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004bdc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004bde:	e02d      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be2:	0c9b      	lsrs	r3, r3, #18
 8004be4:	220f      	movs	r2, #15
 8004be6:	4013      	ands	r3, r2
 8004be8:	2214      	movs	r2, #20
 8004bea:	18ba      	adds	r2, r7, r2
 8004bec:	5cd3      	ldrb	r3, [r2, r3]
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004bf0:	4b17      	ldr	r3, [pc, #92]	; (8004c50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	220f      	movs	r2, #15
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	1d3a      	adds	r2, r7, #4
 8004bfa:	5cd3      	ldrb	r3, [r2, r3]
 8004bfc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c00:	2380      	movs	r3, #128	; 0x80
 8004c02:	025b      	lsls	r3, r3, #9
 8004c04:	4013      	ands	r3, r2
 8004c06:	d009      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c0a:	4812      	ldr	r0, [pc, #72]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c0c:	f7fb fa98 	bl	8000140 <__udivsi3>
 8004c10:	0003      	movs	r3, r0
 8004c12:	001a      	movs	r2, r3
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	4353      	muls	r3, r2
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
 8004c1a:	e009      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c1e:	000a      	movs	r2, r1
 8004c20:	0152      	lsls	r2, r2, #5
 8004c22:	1a52      	subs	r2, r2, r1
 8004c24:	0193      	lsls	r3, r2, #6
 8004c26:	1a9b      	subs	r3, r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	185b      	adds	r3, r3, r1
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c34:	e002      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c36:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c3a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004c3e:	0018      	movs	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b00f      	add	sp, #60	; 0x3c
 8004c44:	bd90      	pop	{r4, r7, pc}
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	0800b030 	.word	0x0800b030
 8004c4c:	0800b040 	.word	0x0800b040
 8004c50:	40021000 	.word	0x40021000
 8004c54:	007a1200 	.word	0x007a1200

08004c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c5c:	4b02      	ldr	r3, [pc, #8]	; (8004c68 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
}
 8004c60:	0018      	movs	r0, r3
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	20000000 	.word	0x20000000

08004c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004c70:	f7ff fff2 	bl	8004c58 <HAL_RCC_GetHCLKFreq>
 8004c74:	0001      	movs	r1, r0
 8004c76:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	0a1b      	lsrs	r3, r3, #8
 8004c7c:	2207      	movs	r2, #7
 8004c7e:	4013      	ands	r3, r2
 8004c80:	4a04      	ldr	r2, [pc, #16]	; (8004c94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c82:	5cd3      	ldrb	r3, [r2, r3]
 8004c84:	40d9      	lsrs	r1, r3
 8004c86:	000b      	movs	r3, r1
}    
 8004c88:	0018      	movs	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	40021000 	.word	0x40021000
 8004c94:	0800b160 	.word	0x0800b160

08004c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	025b      	lsls	r3, r3, #9
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d100      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004cb4:	e08e      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004cb6:	2017      	movs	r0, #23
 8004cb8:	183b      	adds	r3, r7, r0
 8004cba:	2200      	movs	r2, #0
 8004cbc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cbe:	4b5f      	ldr	r3, [pc, #380]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004cc0:	69da      	ldr	r2, [r3, #28]
 8004cc2:	2380      	movs	r3, #128	; 0x80
 8004cc4:	055b      	lsls	r3, r3, #21
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d110      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cca:	4b5c      	ldr	r3, [pc, #368]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ccc:	69da      	ldr	r2, [r3, #28]
 8004cce:	4b5b      	ldr	r3, [pc, #364]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004cd0:	2180      	movs	r1, #128	; 0x80
 8004cd2:	0549      	lsls	r1, r1, #21
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	61da      	str	r2, [r3, #28]
 8004cd8:	4b58      	ldr	r3, [pc, #352]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004cda:	69da      	ldr	r2, [r3, #28]
 8004cdc:	2380      	movs	r3, #128	; 0x80
 8004cde:	055b      	lsls	r3, r3, #21
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	60bb      	str	r3, [r7, #8]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce6:	183b      	adds	r3, r7, r0
 8004ce8:	2201      	movs	r2, #1
 8004cea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cec:	4b54      	ldr	r3, [pc, #336]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	2380      	movs	r3, #128	; 0x80
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	d11a      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cf8:	4b51      	ldr	r3, [pc, #324]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	4b50      	ldr	r3, [pc, #320]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004cfe:	2180      	movs	r1, #128	; 0x80
 8004d00:	0049      	lsls	r1, r1, #1
 8004d02:	430a      	orrs	r2, r1
 8004d04:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d06:	f7ff f8eb 	bl	8003ee0 <HAL_GetTick>
 8004d0a:	0003      	movs	r3, r0
 8004d0c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0e:	e008      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d10:	f7ff f8e6 	bl	8003ee0 <HAL_GetTick>
 8004d14:	0002      	movs	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b64      	cmp	r3, #100	; 0x64
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e087      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d22:	4b47      	ldr	r3, [pc, #284]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	2380      	movs	r3, #128	; 0x80
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d2e:	4b43      	ldr	r3, [pc, #268]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004d30:	6a1a      	ldr	r2, [r3, #32]
 8004d32:	23c0      	movs	r3, #192	; 0xc0
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4013      	ands	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d034      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	23c0      	movs	r3, #192	; 0xc0
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4013      	ands	r3, r2
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d02c      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d50:	4b3a      	ldr	r3, [pc, #232]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	4a3b      	ldr	r2, [pc, #236]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d5a:	4b38      	ldr	r3, [pc, #224]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004d5c:	6a1a      	ldr	r2, [r3, #32]
 8004d5e:	4b37      	ldr	r3, [pc, #220]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004d60:	2180      	movs	r1, #128	; 0x80
 8004d62:	0249      	lsls	r1, r1, #9
 8004d64:	430a      	orrs	r2, r1
 8004d66:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d68:	4b34      	ldr	r3, [pc, #208]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004d6a:	6a1a      	ldr	r2, [r3, #32]
 8004d6c:	4b33      	ldr	r3, [pc, #204]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004d6e:	4936      	ldr	r1, [pc, #216]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d70:	400a      	ands	r2, r1
 8004d72:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d74:	4b31      	ldr	r3, [pc, #196]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d013      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d82:	f7ff f8ad 	bl	8003ee0 <HAL_GetTick>
 8004d86:	0003      	movs	r3, r0
 8004d88:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8a:	e009      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8c:	f7ff f8a8 	bl	8003ee0 <HAL_GetTick>
 8004d90:	0002      	movs	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	4a2d      	ldr	r2, [pc, #180]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e048      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da0:	4b26      	ldr	r3, [pc, #152]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	2202      	movs	r2, #2
 8004da6:	4013      	ands	r3, r2
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004daa:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	4a25      	ldr	r2, [pc, #148]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	0019      	movs	r1, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	4b20      	ldr	r3, [pc, #128]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dbe:	2317      	movs	r3, #23
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d105      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc8:	4b1c      	ldr	r3, [pc, #112]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004dce:	4920      	ldr	r1, [pc, #128]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd0:	400a      	ands	r2, r1
 8004dd2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d009      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dde:	4b17      	ldr	r3, [pc, #92]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	2203      	movs	r2, #3
 8004de4:	4393      	bics	r3, r2
 8004de6:	0019      	movs	r1, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	4b13      	ldr	r3, [pc, #76]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004dee:	430a      	orrs	r2, r1
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2220      	movs	r2, #32
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d009      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dfc:	4b0f      	ldr	r3, [pc, #60]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	2210      	movs	r2, #16
 8004e02:	4393      	bics	r3, r2
 8004e04:	0019      	movs	r1, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	2380      	movs	r3, #128	; 0x80
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	4013      	ands	r3, r2
 8004e1a:	d009      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e1c:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	2240      	movs	r2, #64	; 0x40
 8004e22:	4393      	bics	r3, r2
 8004e24:	0019      	movs	r1, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	4b04      	ldr	r3, [pc, #16]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	0018      	movs	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	b006      	add	sp, #24
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	46c0      	nop			; (mov r8, r8)
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	40007000 	.word	0x40007000
 8004e44:	fffffcff 	.word	0xfffffcff
 8004e48:	fffeffff 	.word	0xfffeffff
 8004e4c:	00001388 	.word	0x00001388
 8004e50:	efffffff 	.word	0xefffffff

08004e54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e0a8      	b.n	8004fb8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	2382      	movs	r3, #130	; 0x82
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d009      	beq.n	8004e8e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	61da      	str	r2, [r3, #28]
 8004e80:	e005      	b.n	8004e8e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	225d      	movs	r2, #93	; 0x5d
 8004e98:	5c9b      	ldrb	r3, [r3, r2]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d107      	bne.n	8004eb0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	225c      	movs	r2, #92	; 0x5c
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f7fe fe1e 	bl	8003aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	225d      	movs	r2, #93	; 0x5d
 8004eb4:	2102      	movs	r1, #2
 8004eb6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2140      	movs	r1, #64	; 0x40
 8004ec4:	438a      	bics	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	23e0      	movs	r3, #224	; 0xe0
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d902      	bls.n	8004eda <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	e002      	b.n	8004ee0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004eda:	2380      	movs	r3, #128	; 0x80
 8004edc:	015b      	lsls	r3, r3, #5
 8004ede:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	23f0      	movs	r3, #240	; 0xf0
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d008      	beq.n	8004efe <HAL_SPI_Init+0xaa>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	23e0      	movs	r3, #224	; 0xe0
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d002      	beq.n	8004efe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	2382      	movs	r3, #130	; 0x82
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	401a      	ands	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6899      	ldr	r1, [r3, #8]
 8004f0c:	2384      	movs	r3, #132	; 0x84
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	400b      	ands	r3, r1
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2102      	movs	r1, #2
 8004f1a:	400b      	ands	r3, r1
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	2101      	movs	r1, #1
 8004f24:	400b      	ands	r3, r1
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6999      	ldr	r1, [r3, #24]
 8004f2c:	2380      	movs	r3, #128	; 0x80
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	400b      	ands	r3, r1
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	2138      	movs	r1, #56	; 0x38
 8004f3a:	400b      	ands	r3, r1
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	2180      	movs	r1, #128	; 0x80
 8004f44:	400b      	ands	r3, r1
 8004f46:	431a      	orrs	r2, r3
 8004f48:	0011      	movs	r1, r2
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f4e:	2380      	movs	r3, #128	; 0x80
 8004f50:	019b      	lsls	r3, r3, #6
 8004f52:	401a      	ands	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	0c1b      	lsrs	r3, r3, #16
 8004f62:	2204      	movs	r2, #4
 8004f64:	401a      	ands	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	2110      	movs	r1, #16
 8004f6c:	400b      	ands	r3, r1
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f74:	2108      	movs	r1, #8
 8004f76:	400b      	ands	r3, r1
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68d9      	ldr	r1, [r3, #12]
 8004f7e:	23f0      	movs	r3, #240	; 0xf0
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	400b      	ands	r3, r1
 8004f84:	431a      	orrs	r2, r3
 8004f86:	0011      	movs	r1, r2
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	2380      	movs	r3, #128	; 0x80
 8004f8c:	015b      	lsls	r3, r3, #5
 8004f8e:	401a      	ands	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69da      	ldr	r2, [r3, #28]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4907      	ldr	r1, [pc, #28]	; (8004fc0 <HAL_SPI_Init+0x16c>)
 8004fa4:	400a      	ands	r2, r1
 8004fa6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	225d      	movs	r2, #93	; 0x5d
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	0018      	movs	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b004      	add	sp, #16
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	fffff7ff 	.word	0xfffff7ff

08004fc4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	1dbb      	adds	r3, r7, #6
 8004fd2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fd4:	231f      	movs	r3, #31
 8004fd6:	18fb      	adds	r3, r7, r3
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	225c      	movs	r2, #92	; 0x5c
 8004fe0:	5c9b      	ldrb	r3, [r3, r2]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_SPI_Transmit+0x26>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e140      	b.n	800526c <HAL_SPI_Transmit+0x2a8>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	225c      	movs	r2, #92	; 0x5c
 8004fee:	2101      	movs	r1, #1
 8004ff0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ff2:	f7fe ff75 	bl	8003ee0 <HAL_GetTick>
 8004ff6:	0003      	movs	r3, r0
 8004ff8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004ffa:	2316      	movs	r3, #22
 8004ffc:	18fb      	adds	r3, r7, r3
 8004ffe:	1dba      	adds	r2, r7, #6
 8005000:	8812      	ldrh	r2, [r2, #0]
 8005002:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	225d      	movs	r2, #93	; 0x5d
 8005008:	5c9b      	ldrb	r3, [r3, r2]
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b01      	cmp	r3, #1
 800500e:	d004      	beq.n	800501a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005010:	231f      	movs	r3, #31
 8005012:	18fb      	adds	r3, r7, r3
 8005014:	2202      	movs	r2, #2
 8005016:	701a      	strb	r2, [r3, #0]
    goto error;
 8005018:	e11d      	b.n	8005256 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_SPI_Transmit+0x64>
 8005020:	1dbb      	adds	r3, r7, #6
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d104      	bne.n	8005032 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005028:	231f      	movs	r3, #31
 800502a:	18fb      	adds	r3, r7, r3
 800502c:	2201      	movs	r2, #1
 800502e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005030:	e111      	b.n	8005256 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	225d      	movs	r2, #93	; 0x5d
 8005036:	2103      	movs	r1, #3
 8005038:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1dba      	adds	r2, r7, #6
 800504a:	8812      	ldrh	r2, [r2, #0]
 800504c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	1dba      	adds	r2, r7, #6
 8005052:	8812      	ldrh	r2, [r2, #0]
 8005054:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2244      	movs	r2, #68	; 0x44
 8005060:	2100      	movs	r1, #0
 8005062:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2246      	movs	r2, #70	; 0x46
 8005068:	2100      	movs	r1, #0
 800506a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	2380      	movs	r3, #128	; 0x80
 800507e:	021b      	lsls	r3, r3, #8
 8005080:	429a      	cmp	r2, r3
 8005082:	d110      	bne.n	80050a6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2140      	movs	r1, #64	; 0x40
 8005090:	438a      	bics	r2, r1
 8005092:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2180      	movs	r1, #128	; 0x80
 80050a0:	01c9      	lsls	r1, r1, #7
 80050a2:	430a      	orrs	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2240      	movs	r2, #64	; 0x40
 80050ae:	4013      	ands	r3, r2
 80050b0:	2b40      	cmp	r3, #64	; 0x40
 80050b2:	d007      	beq.n	80050c4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2140      	movs	r1, #64	; 0x40
 80050c0:	430a      	orrs	r2, r1
 80050c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	23e0      	movs	r3, #224	; 0xe0
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d94e      	bls.n	800516e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d004      	beq.n	80050e2 <HAL_SPI_Transmit+0x11e>
 80050d8:	2316      	movs	r3, #22
 80050da:	18fb      	adds	r3, r7, r3
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d13f      	bne.n	8005162 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e6:	881a      	ldrh	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	1c9a      	adds	r2, r3, #2
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005106:	e02c      	b.n	8005162 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	2202      	movs	r2, #2
 8005110:	4013      	ands	r3, r2
 8005112:	2b02      	cmp	r3, #2
 8005114:	d112      	bne.n	800513c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	881a      	ldrh	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	1c9a      	adds	r2, r3, #2
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	87da      	strh	r2, [r3, #62]	; 0x3e
 800513a:	e012      	b.n	8005162 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800513c:	f7fe fed0 	bl	8003ee0 <HAL_GetTick>
 8005140:	0002      	movs	r2, r0
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d802      	bhi.n	8005152 <HAL_SPI_Transmit+0x18e>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	3301      	adds	r3, #1
 8005150:	d102      	bne.n	8005158 <HAL_SPI_Transmit+0x194>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d104      	bne.n	8005162 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005158:	231f      	movs	r3, #31
 800515a:	18fb      	adds	r3, r7, r3
 800515c:	2203      	movs	r2, #3
 800515e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005160:	e079      	b.n	8005256 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005166:	b29b      	uxth	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1cd      	bne.n	8005108 <HAL_SPI_Transmit+0x144>
 800516c:	e04f      	b.n	800520e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d004      	beq.n	8005180 <HAL_SPI_Transmit+0x1bc>
 8005176:	2316      	movs	r3, #22
 8005178:	18fb      	adds	r3, r7, r3
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d141      	bne.n	8005204 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	330c      	adds	r3, #12
 800518a:	7812      	ldrb	r2, [r2, #0]
 800518c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80051a6:	e02d      	b.n	8005204 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	2202      	movs	r2, #2
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d113      	bne.n	80051de <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	330c      	adds	r3, #12
 80051c0:	7812      	ldrb	r2, [r2, #0]
 80051c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051dc:	e012      	b.n	8005204 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051de:	f7fe fe7f 	bl	8003ee0 <HAL_GetTick>
 80051e2:	0002      	movs	r2, r0
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d802      	bhi.n	80051f4 <HAL_SPI_Transmit+0x230>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	3301      	adds	r3, #1
 80051f2:	d102      	bne.n	80051fa <HAL_SPI_Transmit+0x236>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d104      	bne.n	8005204 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80051fa:	231f      	movs	r3, #31
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	2203      	movs	r2, #3
 8005200:	701a      	strb	r2, [r3, #0]
          goto error;
 8005202:	e028      	b.n	8005256 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1cc      	bne.n	80051a8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	6839      	ldr	r1, [r7, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	0018      	movs	r0, r3
 8005216:	f000 fcd9 	bl	8005bcc <SPI_EndRxTxTransaction>
 800521a:	1e03      	subs	r3, r0, #0
 800521c:	d002      	beq.n	8005224 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800522c:	2300      	movs	r3, #0
 800522e:	613b      	str	r3, [r7, #16]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	613b      	str	r3, [r7, #16]
 8005240:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005246:	2b00      	cmp	r3, #0
 8005248:	d004      	beq.n	8005254 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800524a:	231f      	movs	r3, #31
 800524c:	18fb      	adds	r3, r7, r3
 800524e:	2201      	movs	r2, #1
 8005250:	701a      	strb	r2, [r3, #0]
 8005252:	e000      	b.n	8005256 <HAL_SPI_Transmit+0x292>
  }

error:
 8005254:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	225d      	movs	r2, #93	; 0x5d
 800525a:	2101      	movs	r1, #1
 800525c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	225c      	movs	r2, #92	; 0x5c
 8005262:	2100      	movs	r1, #0
 8005264:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005266:	231f      	movs	r3, #31
 8005268:	18fb      	adds	r3, r7, r3
 800526a:	781b      	ldrb	r3, [r3, #0]
}
 800526c:	0018      	movs	r0, r3
 800526e:	46bd      	mov	sp, r7
 8005270:	b008      	add	sp, #32
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b089      	sub	sp, #36	; 0x24
 8005278:	af02      	add	r7, sp, #8
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	603b      	str	r3, [r7, #0]
 8005280:	1dbb      	adds	r3, r7, #6
 8005282:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005284:	2317      	movs	r3, #23
 8005286:	18fb      	adds	r3, r7, r3
 8005288:	2200      	movs	r2, #0
 800528a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	2382      	movs	r3, #130	; 0x82
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	429a      	cmp	r2, r3
 8005296:	d113      	bne.n	80052c0 <HAL_SPI_Receive+0x4c>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10f      	bne.n	80052c0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	225d      	movs	r2, #93	; 0x5d
 80052a4:	2104      	movs	r1, #4
 80052a6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052a8:	1dbb      	adds	r3, r7, #6
 80052aa:	881c      	ldrh	r4, [r3, #0]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	68b9      	ldr	r1, [r7, #8]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	0023      	movs	r3, r4
 80052b8:	f000 f928 	bl	800550c <HAL_SPI_TransmitReceive>
 80052bc:	0003      	movs	r3, r0
 80052be:	e11c      	b.n	80054fa <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	225c      	movs	r2, #92	; 0x5c
 80052c4:	5c9b      	ldrb	r3, [r3, r2]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_SPI_Receive+0x5a>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e115      	b.n	80054fa <HAL_SPI_Receive+0x286>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	225c      	movs	r2, #92	; 0x5c
 80052d2:	2101      	movs	r1, #1
 80052d4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052d6:	f7fe fe03 	bl	8003ee0 <HAL_GetTick>
 80052da:	0003      	movs	r3, r0
 80052dc:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	225d      	movs	r2, #93	; 0x5d
 80052e2:	5c9b      	ldrb	r3, [r3, r2]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d004      	beq.n	80052f4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80052ea:	2317      	movs	r3, #23
 80052ec:	18fb      	adds	r3, r7, r3
 80052ee:	2202      	movs	r2, #2
 80052f0:	701a      	strb	r2, [r3, #0]
    goto error;
 80052f2:	e0f7      	b.n	80054e4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_SPI_Receive+0x8e>
 80052fa:	1dbb      	adds	r3, r7, #6
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d104      	bne.n	800530c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005302:	2317      	movs	r3, #23
 8005304:	18fb      	adds	r3, r7, r3
 8005306:	2201      	movs	r2, #1
 8005308:	701a      	strb	r2, [r3, #0]
    goto error;
 800530a:	e0eb      	b.n	80054e4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	225d      	movs	r2, #93	; 0x5d
 8005310:	2104      	movs	r1, #4
 8005312:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	1dba      	adds	r2, r7, #6
 8005324:	2144      	movs	r1, #68	; 0x44
 8005326:	8812      	ldrh	r2, [r2, #0]
 8005328:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1dba      	adds	r2, r7, #6
 800532e:	2146      	movs	r1, #70	; 0x46
 8005330:	8812      	ldrh	r2, [r2, #0]
 8005332:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	23e0      	movs	r3, #224	; 0xe0
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	429a      	cmp	r2, r3
 800535c:	d908      	bls.n	8005370 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4966      	ldr	r1, [pc, #408]	; (8005504 <HAL_SPI_Receive+0x290>)
 800536a:	400a      	ands	r2, r1
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	e008      	b.n	8005382 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2180      	movs	r1, #128	; 0x80
 800537c:	0149      	lsls	r1, r1, #5
 800537e:	430a      	orrs	r2, r1
 8005380:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	2380      	movs	r3, #128	; 0x80
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	429a      	cmp	r2, r3
 800538c:	d10f      	bne.n	80053ae <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2140      	movs	r1, #64	; 0x40
 800539a:	438a      	bics	r2, r1
 800539c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4957      	ldr	r1, [pc, #348]	; (8005508 <HAL_SPI_Receive+0x294>)
 80053aa:	400a      	ands	r2, r1
 80053ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2240      	movs	r2, #64	; 0x40
 80053b6:	4013      	ands	r3, r2
 80053b8:	2b40      	cmp	r3, #64	; 0x40
 80053ba:	d007      	beq.n	80053cc <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2140      	movs	r1, #64	; 0x40
 80053c8:	430a      	orrs	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	23e0      	movs	r3, #224	; 0xe0
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d900      	bls.n	80053da <HAL_SPI_Receive+0x166>
 80053d8:	e069      	b.n	80054ae <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053da:	e031      	b.n	8005440 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2201      	movs	r2, #1
 80053e4:	4013      	ands	r3, r2
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d117      	bne.n	800541a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	330c      	adds	r3, #12
 80053f0:	001a      	movs	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	7812      	ldrb	r2, [r2, #0]
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2246      	movs	r2, #70	; 0x46
 800540a:	5a9b      	ldrh	r3, [r3, r2]
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b299      	uxth	r1, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2246      	movs	r2, #70	; 0x46
 8005416:	5299      	strh	r1, [r3, r2]
 8005418:	e012      	b.n	8005440 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800541a:	f7fe fd61 	bl	8003ee0 <HAL_GetTick>
 800541e:	0002      	movs	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d802      	bhi.n	8005430 <HAL_SPI_Receive+0x1bc>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	3301      	adds	r3, #1
 800542e:	d102      	bne.n	8005436 <HAL_SPI_Receive+0x1c2>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8005436:	2317      	movs	r3, #23
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	2203      	movs	r2, #3
 800543c:	701a      	strb	r2, [r3, #0]
          goto error;
 800543e:	e051      	b.n	80054e4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2246      	movs	r2, #70	; 0x46
 8005444:	5a9b      	ldrh	r3, [r3, r2]
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1c7      	bne.n	80053dc <HAL_SPI_Receive+0x168>
 800544c:	e035      	b.n	80054ba <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	2201      	movs	r2, #1
 8005456:	4013      	ands	r3, r2
 8005458:	2b01      	cmp	r3, #1
 800545a:	d115      	bne.n	8005488 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	b292      	uxth	r2, r2
 8005468:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	1c9a      	adds	r2, r3, #2
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2246      	movs	r2, #70	; 0x46
 8005478:	5a9b      	ldrh	r3, [r3, r2]
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b299      	uxth	r1, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2246      	movs	r2, #70	; 0x46
 8005484:	5299      	strh	r1, [r3, r2]
 8005486:	e012      	b.n	80054ae <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005488:	f7fe fd2a 	bl	8003ee0 <HAL_GetTick>
 800548c:	0002      	movs	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d802      	bhi.n	800549e <HAL_SPI_Receive+0x22a>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	3301      	adds	r3, #1
 800549c:	d102      	bne.n	80054a4 <HAL_SPI_Receive+0x230>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d104      	bne.n	80054ae <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80054a4:	2317      	movs	r3, #23
 80054a6:	18fb      	adds	r3, r7, r3
 80054a8:	2203      	movs	r2, #3
 80054aa:	701a      	strb	r2, [r3, #0]
          goto error;
 80054ac:	e01a      	b.n	80054e4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2246      	movs	r2, #70	; 0x46
 80054b2:	5a9b      	ldrh	r3, [r3, r2]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1c9      	bne.n	800544e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	6839      	ldr	r1, [r7, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	0018      	movs	r0, r3
 80054c2:	f000 fb25 	bl	8005b10 <SPI_EndRxTransaction>
 80054c6:	1e03      	subs	r3, r0, #0
 80054c8:	d002      	beq.n	80054d0 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2220      	movs	r2, #32
 80054ce:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d004      	beq.n	80054e2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80054d8:	2317      	movs	r3, #23
 80054da:	18fb      	adds	r3, r7, r3
 80054dc:	2201      	movs	r2, #1
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	e000      	b.n	80054e4 <HAL_SPI_Receive+0x270>
  }

error :
 80054e2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	225d      	movs	r2, #93	; 0x5d
 80054e8:	2101      	movs	r1, #1
 80054ea:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	225c      	movs	r2, #92	; 0x5c
 80054f0:	2100      	movs	r1, #0
 80054f2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80054f4:	2317      	movs	r3, #23
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	781b      	ldrb	r3, [r3, #0]
}
 80054fa:	0018      	movs	r0, r3
 80054fc:	46bd      	mov	sp, r7
 80054fe:	b007      	add	sp, #28
 8005500:	bd90      	pop	{r4, r7, pc}
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	ffffefff 	.word	0xffffefff
 8005508:	ffffbfff 	.word	0xffffbfff

0800550c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08a      	sub	sp, #40	; 0x28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	001a      	movs	r2, r3
 800551a:	1cbb      	adds	r3, r7, #2
 800551c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800551e:	2301      	movs	r3, #1
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005522:	2323      	movs	r3, #35	; 0x23
 8005524:	18fb      	adds	r3, r7, r3
 8005526:	2200      	movs	r2, #0
 8005528:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	225c      	movs	r2, #92	; 0x5c
 800552e:	5c9b      	ldrb	r3, [r3, r2]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_SPI_TransmitReceive+0x2c>
 8005534:	2302      	movs	r3, #2
 8005536:	e1b5      	b.n	80058a4 <HAL_SPI_TransmitReceive+0x398>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	225c      	movs	r2, #92	; 0x5c
 800553c:	2101      	movs	r1, #1
 800553e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005540:	f7fe fcce 	bl	8003ee0 <HAL_GetTick>
 8005544:	0003      	movs	r3, r0
 8005546:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005548:	201b      	movs	r0, #27
 800554a:	183b      	adds	r3, r7, r0
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	215d      	movs	r1, #93	; 0x5d
 8005550:	5c52      	ldrb	r2, [r2, r1]
 8005552:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800555a:	2312      	movs	r3, #18
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	1cba      	adds	r2, r7, #2
 8005560:	8812      	ldrh	r2, [r2, #0]
 8005562:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005564:	183b      	adds	r3, r7, r0
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d011      	beq.n	8005590 <HAL_SPI_TransmitReceive+0x84>
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	2382      	movs	r3, #130	; 0x82
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	429a      	cmp	r2, r3
 8005574:	d107      	bne.n	8005586 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d103      	bne.n	8005586 <HAL_SPI_TransmitReceive+0x7a>
 800557e:	183b      	adds	r3, r7, r0
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b04      	cmp	r3, #4
 8005584:	d004      	beq.n	8005590 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005586:	2323      	movs	r3, #35	; 0x23
 8005588:	18fb      	adds	r3, r7, r3
 800558a:	2202      	movs	r2, #2
 800558c:	701a      	strb	r2, [r3, #0]
    goto error;
 800558e:	e17e      	b.n	800588e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d006      	beq.n	80055a4 <HAL_SPI_TransmitReceive+0x98>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <HAL_SPI_TransmitReceive+0x98>
 800559c:	1cbb      	adds	r3, r7, #2
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d104      	bne.n	80055ae <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80055a4:	2323      	movs	r3, #35	; 0x23
 80055a6:	18fb      	adds	r3, r7, r3
 80055a8:	2201      	movs	r2, #1
 80055aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80055ac:	e16f      	b.n	800588e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	225d      	movs	r2, #93	; 0x5d
 80055b2:	5c9b      	ldrb	r3, [r3, r2]
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d003      	beq.n	80055c2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	225d      	movs	r2, #93	; 0x5d
 80055be:	2105      	movs	r1, #5
 80055c0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1cba      	adds	r2, r7, #2
 80055d2:	2146      	movs	r1, #70	; 0x46
 80055d4:	8812      	ldrh	r2, [r2, #0]
 80055d6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	1cba      	adds	r2, r7, #2
 80055dc:	2144      	movs	r1, #68	; 0x44
 80055de:	8812      	ldrh	r2, [r2, #0]
 80055e0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	1cba      	adds	r2, r7, #2
 80055ec:	8812      	ldrh	r2, [r2, #0]
 80055ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	1cba      	adds	r2, r7, #2
 80055f4:	8812      	ldrh	r2, [r2, #0]
 80055f6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	23e0      	movs	r3, #224	; 0xe0
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	429a      	cmp	r2, r3
 800560e:	d908      	bls.n	8005622 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	49a4      	ldr	r1, [pc, #656]	; (80058ac <HAL_SPI_TransmitReceive+0x3a0>)
 800561c:	400a      	ands	r2, r1
 800561e:	605a      	str	r2, [r3, #4]
 8005620:	e008      	b.n	8005634 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2180      	movs	r1, #128	; 0x80
 800562e:	0149      	lsls	r1, r1, #5
 8005630:	430a      	orrs	r2, r1
 8005632:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2240      	movs	r2, #64	; 0x40
 800563c:	4013      	ands	r3, r2
 800563e:	2b40      	cmp	r3, #64	; 0x40
 8005640:	d007      	beq.n	8005652 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2140      	movs	r1, #64	; 0x40
 800564e:	430a      	orrs	r2, r1
 8005650:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	23e0      	movs	r3, #224	; 0xe0
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	429a      	cmp	r2, r3
 800565c:	d800      	bhi.n	8005660 <HAL_SPI_TransmitReceive+0x154>
 800565e:	e07f      	b.n	8005760 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <HAL_SPI_TransmitReceive+0x168>
 8005668:	2312      	movs	r3, #18
 800566a:	18fb      	adds	r3, r7, r3
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d000      	beq.n	8005674 <HAL_SPI_TransmitReceive+0x168>
 8005672:	e069      	b.n	8005748 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	881a      	ldrh	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005684:	1c9a      	adds	r2, r3, #2
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005698:	e056      	b.n	8005748 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	2202      	movs	r2, #2
 80056a2:	4013      	ands	r3, r2
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d11b      	bne.n	80056e0 <HAL_SPI_TransmitReceive+0x1d4>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d016      	beq.n	80056e0 <HAL_SPI_TransmitReceive+0x1d4>
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d113      	bne.n	80056e0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	881a      	ldrh	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	1c9a      	adds	r2, r3, #2
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2201      	movs	r2, #1
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d11c      	bne.n	8005728 <HAL_SPI_TransmitReceive+0x21c>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2246      	movs	r2, #70	; 0x46
 80056f2:	5a9b      	ldrh	r3, [r3, r2]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d016      	beq.n	8005728 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	b292      	uxth	r2, r2
 8005706:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570c:	1c9a      	adds	r2, r3, #2
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2246      	movs	r2, #70	; 0x46
 8005716:	5a9b      	ldrh	r3, [r3, r2]
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b299      	uxth	r1, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2246      	movs	r2, #70	; 0x46
 8005722:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005724:	2301      	movs	r3, #1
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005728:	f7fe fbda 	bl	8003ee0 <HAL_GetTick>
 800572c:	0002      	movs	r2, r0
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005734:	429a      	cmp	r2, r3
 8005736:	d807      	bhi.n	8005748 <HAL_SPI_TransmitReceive+0x23c>
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	3301      	adds	r3, #1
 800573c:	d004      	beq.n	8005748 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800573e:	2323      	movs	r3, #35	; 0x23
 8005740:	18fb      	adds	r3, r7, r3
 8005742:	2203      	movs	r2, #3
 8005744:	701a      	strb	r2, [r3, #0]
        goto error;
 8005746:	e0a2      	b.n	800588e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800574c:	b29b      	uxth	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1a3      	bne.n	800569a <HAL_SPI_TransmitReceive+0x18e>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2246      	movs	r2, #70	; 0x46
 8005756:	5a9b      	ldrh	r3, [r3, r2]
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d19d      	bne.n	800569a <HAL_SPI_TransmitReceive+0x18e>
 800575e:	e085      	b.n	800586c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <HAL_SPI_TransmitReceive+0x268>
 8005768:	2312      	movs	r3, #18
 800576a:	18fb      	adds	r3, r7, r3
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d000      	beq.n	8005774 <HAL_SPI_TransmitReceive+0x268>
 8005772:	e070      	b.n	8005856 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	330c      	adds	r3, #12
 800577e:	7812      	ldrb	r2, [r2, #0]
 8005780:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800579a:	e05c      	b.n	8005856 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2202      	movs	r2, #2
 80057a4:	4013      	ands	r3, r2
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d11c      	bne.n	80057e4 <HAL_SPI_TransmitReceive+0x2d8>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d017      	beq.n	80057e4 <HAL_SPI_TransmitReceive+0x2d8>
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d114      	bne.n	80057e4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	330c      	adds	r3, #12
 80057c4:	7812      	ldrb	r2, [r2, #0]
 80057c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	2201      	movs	r2, #1
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d11e      	bne.n	8005830 <HAL_SPI_TransmitReceive+0x324>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2246      	movs	r2, #70	; 0x46
 80057f6:	5a9b      	ldrh	r3, [r3, r2]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d018      	beq.n	8005830 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	330c      	adds	r3, #12
 8005804:	001a      	movs	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	7812      	ldrb	r2, [r2, #0]
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2246      	movs	r2, #70	; 0x46
 800581e:	5a9b      	ldrh	r3, [r3, r2]
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b299      	uxth	r1, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2246      	movs	r2, #70	; 0x46
 800582a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800582c:	2301      	movs	r3, #1
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005830:	f7fe fb56 	bl	8003ee0 <HAL_GetTick>
 8005834:	0002      	movs	r2, r0
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800583c:	429a      	cmp	r2, r3
 800583e:	d802      	bhi.n	8005846 <HAL_SPI_TransmitReceive+0x33a>
 8005840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005842:	3301      	adds	r3, #1
 8005844:	d102      	bne.n	800584c <HAL_SPI_TransmitReceive+0x340>
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	2b00      	cmp	r3, #0
 800584a:	d104      	bne.n	8005856 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800584c:	2323      	movs	r3, #35	; 0x23
 800584e:	18fb      	adds	r3, r7, r3
 8005850:	2203      	movs	r2, #3
 8005852:	701a      	strb	r2, [r3, #0]
        goto error;
 8005854:	e01b      	b.n	800588e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800585a:	b29b      	uxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d19d      	bne.n	800579c <HAL_SPI_TransmitReceive+0x290>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2246      	movs	r2, #70	; 0x46
 8005864:	5a9b      	ldrh	r3, [r3, r2]
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d197      	bne.n	800579c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	0018      	movs	r0, r3
 8005874:	f000 f9aa 	bl	8005bcc <SPI_EndRxTxTransaction>
 8005878:	1e03      	subs	r3, r0, #0
 800587a:	d007      	beq.n	800588c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800587c:	2323      	movs	r3, #35	; 0x23
 800587e:	18fb      	adds	r3, r7, r3
 8005880:	2201      	movs	r2, #1
 8005882:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2220      	movs	r2, #32
 8005888:	661a      	str	r2, [r3, #96]	; 0x60
 800588a:	e000      	b.n	800588e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800588c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	225d      	movs	r2, #93	; 0x5d
 8005892:	2101      	movs	r1, #1
 8005894:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	225c      	movs	r2, #92	; 0x5c
 800589a:	2100      	movs	r1, #0
 800589c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800589e:	2323      	movs	r3, #35	; 0x23
 80058a0:	18fb      	adds	r3, r7, r3
 80058a2:	781b      	ldrb	r3, [r3, #0]
}
 80058a4:	0018      	movs	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b00a      	add	sp, #40	; 0x28
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	ffffefff 	.word	0xffffefff

080058b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	1dfb      	adds	r3, r7, #7
 80058be:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058c0:	f7fe fb0e 	bl	8003ee0 <HAL_GetTick>
 80058c4:	0002      	movs	r2, r0
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	1a9b      	subs	r3, r3, r2
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	18d3      	adds	r3, r2, r3
 80058ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058d0:	f7fe fb06 	bl	8003ee0 <HAL_GetTick>
 80058d4:	0003      	movs	r3, r0
 80058d6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058d8:	4b3a      	ldr	r3, [pc, #232]	; (80059c4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	015b      	lsls	r3, r3, #5
 80058de:	0d1b      	lsrs	r3, r3, #20
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	4353      	muls	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058e6:	e058      	b.n	800599a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	d055      	beq.n	800599a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058ee:	f7fe faf7 	bl	8003ee0 <HAL_GetTick>
 80058f2:	0002      	movs	r2, r0
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d902      	bls.n	8005904 <SPI_WaitFlagStateUntilTimeout+0x54>
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d142      	bne.n	800598a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	21e0      	movs	r1, #224	; 0xe0
 8005910:	438a      	bics	r2, r1
 8005912:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	2382      	movs	r3, #130	; 0x82
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	429a      	cmp	r2, r3
 800591e:	d113      	bne.n	8005948 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	2380      	movs	r3, #128	; 0x80
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	429a      	cmp	r2, r3
 800592a:	d005      	beq.n	8005938 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	429a      	cmp	r2, r3
 8005936:	d107      	bne.n	8005948 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2140      	movs	r1, #64	; 0x40
 8005944:	438a      	bics	r2, r1
 8005946:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800594c:	2380      	movs	r3, #128	; 0x80
 800594e:	019b      	lsls	r3, r3, #6
 8005950:	429a      	cmp	r2, r3
 8005952:	d110      	bne.n	8005976 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	491a      	ldr	r1, [pc, #104]	; (80059c8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005960:	400a      	ands	r2, r1
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2180      	movs	r1, #128	; 0x80
 8005970:	0189      	lsls	r1, r1, #6
 8005972:	430a      	orrs	r2, r1
 8005974:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	225d      	movs	r2, #93	; 0x5d
 800597a:	2101      	movs	r1, #1
 800597c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	225c      	movs	r2, #92	; 0x5c
 8005982:	2100      	movs	r1, #0
 8005984:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e017      	b.n	80059ba <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	3b01      	subs	r3, #1
 8005998:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	4013      	ands	r3, r2
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	425a      	negs	r2, r3
 80059aa:	4153      	adcs	r3, r2
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	001a      	movs	r2, r3
 80059b0:	1dfb      	adds	r3, r7, #7
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d197      	bne.n	80058e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	0018      	movs	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	b008      	add	sp, #32
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	20000000 	.word	0x20000000
 80059c8:	ffffdfff 	.word	0xffffdfff

080059cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	; 0x28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80059da:	2317      	movs	r3, #23
 80059dc:	18fb      	adds	r3, r7, r3
 80059de:	2200      	movs	r2, #0
 80059e0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80059e2:	f7fe fa7d 	bl	8003ee0 <HAL_GetTick>
 80059e6:	0002      	movs	r2, r0
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	1a9b      	subs	r3, r3, r2
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	18d3      	adds	r3, r2, r3
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80059f2:	f7fe fa75 	bl	8003ee0 <HAL_GetTick>
 80059f6:	0003      	movs	r3, r0
 80059f8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	330c      	adds	r3, #12
 8005a00:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a02:	4b41      	ldr	r3, [pc, #260]	; (8005b08 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	0013      	movs	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	189b      	adds	r3, r3, r2
 8005a0c:	00da      	lsls	r2, r3, #3
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	0d1b      	lsrs	r3, r3, #20
 8005a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a14:	4353      	muls	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a18:	e068      	b.n	8005aec <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	23c0      	movs	r3, #192	; 0xc0
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d10a      	bne.n	8005a3a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d107      	bne.n	8005a3a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	2117      	movs	r1, #23
 8005a32:	187b      	adds	r3, r7, r1
 8005a34:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a36:	187b      	adds	r3, r7, r1
 8005a38:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	d055      	beq.n	8005aec <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a40:	f7fe fa4e 	bl	8003ee0 <HAL_GetTick>
 8005a44:	0002      	movs	r2, r0
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d902      	bls.n	8005a56 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d142      	bne.n	8005adc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	21e0      	movs	r1, #224	; 0xe0
 8005a62:	438a      	bics	r2, r1
 8005a64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	2382      	movs	r3, #130	; 0x82
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d113      	bne.n	8005a9a <SPI_WaitFifoStateUntilTimeout+0xce>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	2380      	movs	r3, #128	; 0x80
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d005      	beq.n	8005a8a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	2380      	movs	r3, #128	; 0x80
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d107      	bne.n	8005a9a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2140      	movs	r1, #64	; 0x40
 8005a96:	438a      	bics	r2, r1
 8005a98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a9e:	2380      	movs	r3, #128	; 0x80
 8005aa0:	019b      	lsls	r3, r3, #6
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d110      	bne.n	8005ac8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4916      	ldr	r1, [pc, #88]	; (8005b0c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005ab2:	400a      	ands	r2, r1
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2180      	movs	r1, #128	; 0x80
 8005ac2:	0189      	lsls	r1, r1, #6
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	225d      	movs	r2, #93	; 0x5d
 8005acc:	2101      	movs	r1, #1
 8005ace:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	225c      	movs	r2, #92	; 0x5c
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e010      	b.n	8005afe <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	4013      	ands	r3, r2
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d18e      	bne.n	8005a1a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	0018      	movs	r0, r3
 8005b00:	46bd      	mov	sp, r7
 8005b02:	b00a      	add	sp, #40	; 0x28
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	20000000 	.word	0x20000000
 8005b0c:	ffffdfff 	.word	0xffffdfff

08005b10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	2382      	movs	r3, #130	; 0x82
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d113      	bne.n	8005b50 <SPI_EndRxTransaction+0x40>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	2380      	movs	r3, #128	; 0x80
 8005b2e:	021b      	lsls	r3, r3, #8
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d005      	beq.n	8005b40 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	2380      	movs	r3, #128	; 0x80
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d107      	bne.n	8005b50 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2140      	movs	r1, #64	; 0x40
 8005b4c:	438a      	bics	r2, r1
 8005b4e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	0013      	movs	r3, r2
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2180      	movs	r1, #128	; 0x80
 8005b5e:	f7ff fea7 	bl	80058b0 <SPI_WaitFlagStateUntilTimeout>
 8005b62:	1e03      	subs	r3, r0, #0
 8005b64:	d007      	beq.n	8005b76 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e026      	b.n	8005bc4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	2382      	movs	r3, #130	; 0x82
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d11f      	bne.n	8005bc2 <SPI_EndRxTransaction+0xb2>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	2380      	movs	r3, #128	; 0x80
 8005b88:	021b      	lsls	r3, r3, #8
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d005      	beq.n	8005b9a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	2380      	movs	r3, #128	; 0x80
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d113      	bne.n	8005bc2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	23c0      	movs	r3, #192	; 0xc0
 8005b9e:	00d9      	lsls	r1, r3, #3
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	0013      	movs	r3, r2
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f7ff ff0f 	bl	80059cc <SPI_WaitFifoStateUntilTimeout>
 8005bae:	1e03      	subs	r3, r0, #0
 8005bb0:	d007      	beq.n	8005bc2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e000      	b.n	8005bc4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b004      	add	sp, #16
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	23c0      	movs	r3, #192	; 0xc0
 8005bdc:	0159      	lsls	r1, r3, #5
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	0013      	movs	r3, r2
 8005be6:	2200      	movs	r2, #0
 8005be8:	f7ff fef0 	bl	80059cc <SPI_WaitFifoStateUntilTimeout>
 8005bec:	1e03      	subs	r3, r0, #0
 8005bee:	d007      	beq.n	8005c00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e027      	b.n	8005c50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	0013      	movs	r3, r2
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	2180      	movs	r1, #128	; 0x80
 8005c0e:	f7ff fe4f 	bl	80058b0 <SPI_WaitFlagStateUntilTimeout>
 8005c12:	1e03      	subs	r3, r0, #0
 8005c14:	d007      	beq.n	8005c26 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e014      	b.n	8005c50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	23c0      	movs	r3, #192	; 0xc0
 8005c2a:	00d9      	lsls	r1, r3, #3
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	0013      	movs	r3, r2
 8005c34:	2200      	movs	r2, #0
 8005c36:	f7ff fec9 	bl	80059cc <SPI_WaitFifoStateUntilTimeout>
 8005c3a:	1e03      	subs	r3, r0, #0
 8005c3c:	d007      	beq.n	8005c4e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c42:	2220      	movs	r2, #32
 8005c44:	431a      	orrs	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e000      	b.n	8005c50 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	0018      	movs	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b004      	add	sp, #16
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e044      	b.n	8005cf4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d107      	bne.n	8005c82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2274      	movs	r2, #116	; 0x74
 8005c76:	2100      	movs	r1, #0
 8005c78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f7fd ff83 	bl	8003b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2224      	movs	r2, #36	; 0x24
 8005c86:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2101      	movs	r1, #1
 8005c94:	438a      	bics	r2, r1
 8005c96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	f000 f8da 	bl	8005e54 <UART_SetConfig>
 8005ca0:	0003      	movs	r3, r0
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d101      	bne.n	8005caa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e024      	b.n	8005cf4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f000 fa0d 	bl	80060d4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	490d      	ldr	r1, [pc, #52]	; (8005cfc <HAL_UART_Init+0xa4>)
 8005cc6:	400a      	ands	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	212a      	movs	r1, #42	; 0x2a
 8005cd6:	438a      	bics	r2, r1
 8005cd8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	0018      	movs	r0, r3
 8005cee:	f000 faa5 	bl	800623c <UART_CheckIdleState>
 8005cf2:	0003      	movs	r3, r0
}
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b002      	add	sp, #8
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	ffffb7ff 	.word	0xffffb7ff

08005d00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08a      	sub	sp, #40	; 0x28
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	1dbb      	adds	r3, r7, #6
 8005d0e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	d000      	beq.n	8005d1a <HAL_UART_Transmit+0x1a>
 8005d18:	e096      	b.n	8005e48 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <HAL_UART_Transmit+0x28>
 8005d20:	1dbb      	adds	r3, r7, #6
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e08e      	b.n	8005e4a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	2380      	movs	r3, #128	; 0x80
 8005d32:	015b      	lsls	r3, r3, #5
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d109      	bne.n	8005d4c <HAL_UART_Transmit+0x4c>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d105      	bne.n	8005d4c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2201      	movs	r2, #1
 8005d44:	4013      	ands	r3, r2
 8005d46:	d001      	beq.n	8005d4c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e07e      	b.n	8005e4a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2274      	movs	r2, #116	; 0x74
 8005d50:	5c9b      	ldrb	r3, [r3, r2]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_UART_Transmit+0x5a>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e077      	b.n	8005e4a <HAL_UART_Transmit+0x14a>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2274      	movs	r2, #116	; 0x74
 8005d5e:	2101      	movs	r1, #1
 8005d60:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2280      	movs	r2, #128	; 0x80
 8005d66:	2100      	movs	r1, #0
 8005d68:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2221      	movs	r2, #33	; 0x21
 8005d6e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d70:	f7fe f8b6 	bl	8003ee0 <HAL_GetTick>
 8005d74:	0003      	movs	r3, r0
 8005d76:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	1dba      	adds	r2, r7, #6
 8005d7c:	2150      	movs	r1, #80	; 0x50
 8005d7e:	8812      	ldrh	r2, [r2, #0]
 8005d80:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	1dba      	adds	r2, r7, #6
 8005d86:	2152      	movs	r1, #82	; 0x52
 8005d88:	8812      	ldrh	r2, [r2, #0]
 8005d8a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	015b      	lsls	r3, r3, #5
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d108      	bne.n	8005daa <HAL_UART_Transmit+0xaa>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d104      	bne.n	8005daa <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005da0:	2300      	movs	r3, #0
 8005da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	61bb      	str	r3, [r7, #24]
 8005da8:	e003      	b.n	8005db2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2274      	movs	r2, #116	; 0x74
 8005db6:	2100      	movs	r1, #0
 8005db8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005dba:	e02d      	b.n	8005e18 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	0013      	movs	r3, r2
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	2180      	movs	r1, #128	; 0x80
 8005dca:	f000 fa7f 	bl	80062cc <UART_WaitOnFlagUntilTimeout>
 8005dce:	1e03      	subs	r3, r0, #0
 8005dd0:	d001      	beq.n	8005dd6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e039      	b.n	8005e4a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10b      	bne.n	8005df4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	881a      	ldrh	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	05d2      	lsls	r2, r2, #23
 8005de6:	0dd2      	lsrs	r2, r2, #23
 8005de8:	b292      	uxth	r2, r2
 8005dea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	3302      	adds	r3, #2
 8005df0:	61bb      	str	r3, [r7, #24]
 8005df2:	e008      	b.n	8005e06 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	781a      	ldrb	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	b292      	uxth	r2, r2
 8005dfe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	3301      	adds	r3, #1
 8005e04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2252      	movs	r2, #82	; 0x52
 8005e0a:	5a9b      	ldrh	r3, [r3, r2]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b299      	uxth	r1, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2252      	movs	r2, #82	; 0x52
 8005e16:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2252      	movs	r2, #82	; 0x52
 8005e1c:	5a9b      	ldrh	r3, [r3, r2]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1cb      	bne.n	8005dbc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	0013      	movs	r3, r2
 8005e2e:	2200      	movs	r2, #0
 8005e30:	2140      	movs	r1, #64	; 0x40
 8005e32:	f000 fa4b 	bl	80062cc <UART_WaitOnFlagUntilTimeout>
 8005e36:	1e03      	subs	r3, r0, #0
 8005e38:	d001      	beq.n	8005e3e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e005      	b.n	8005e4a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2220      	movs	r2, #32
 8005e42:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	e000      	b.n	8005e4a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005e48:	2302      	movs	r3, #2
  }
}
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	b008      	add	sp, #32
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e5c:	231e      	movs	r3, #30
 8005e5e:	18fb      	adds	r3, r7, r3
 8005e60:	2200      	movs	r2, #0
 8005e62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a8d      	ldr	r2, [pc, #564]	; (80060b8 <UART_SetConfig+0x264>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	0019      	movs	r1, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	4a88      	ldr	r2, [pc, #544]	; (80060bc <UART_SetConfig+0x268>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	0019      	movs	r1, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	4a7f      	ldr	r2, [pc, #508]	; (80060c0 <UART_SetConfig+0x26c>)
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	0019      	movs	r1, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a7b      	ldr	r2, [pc, #492]	; (80060c4 <UART_SetConfig+0x270>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d127      	bne.n	8005f2a <UART_SetConfig+0xd6>
 8005eda:	4b7b      	ldr	r3, [pc, #492]	; (80060c8 <UART_SetConfig+0x274>)
 8005edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ede:	2203      	movs	r2, #3
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d00d      	beq.n	8005f02 <UART_SetConfig+0xae>
 8005ee6:	d81b      	bhi.n	8005f20 <UART_SetConfig+0xcc>
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d014      	beq.n	8005f16 <UART_SetConfig+0xc2>
 8005eec:	d818      	bhi.n	8005f20 <UART_SetConfig+0xcc>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <UART_SetConfig+0xa4>
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d00a      	beq.n	8005f0c <UART_SetConfig+0xb8>
 8005ef6:	e013      	b.n	8005f20 <UART_SetConfig+0xcc>
 8005ef8:	231f      	movs	r3, #31
 8005efa:	18fb      	adds	r3, r7, r3
 8005efc:	2200      	movs	r2, #0
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	e021      	b.n	8005f46 <UART_SetConfig+0xf2>
 8005f02:	231f      	movs	r3, #31
 8005f04:	18fb      	adds	r3, r7, r3
 8005f06:	2202      	movs	r2, #2
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	e01c      	b.n	8005f46 <UART_SetConfig+0xf2>
 8005f0c:	231f      	movs	r3, #31
 8005f0e:	18fb      	adds	r3, r7, r3
 8005f10:	2204      	movs	r2, #4
 8005f12:	701a      	strb	r2, [r3, #0]
 8005f14:	e017      	b.n	8005f46 <UART_SetConfig+0xf2>
 8005f16:	231f      	movs	r3, #31
 8005f18:	18fb      	adds	r3, r7, r3
 8005f1a:	2208      	movs	r2, #8
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	e012      	b.n	8005f46 <UART_SetConfig+0xf2>
 8005f20:	231f      	movs	r3, #31
 8005f22:	18fb      	adds	r3, r7, r3
 8005f24:	2210      	movs	r2, #16
 8005f26:	701a      	strb	r2, [r3, #0]
 8005f28:	e00d      	b.n	8005f46 <UART_SetConfig+0xf2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a67      	ldr	r2, [pc, #412]	; (80060cc <UART_SetConfig+0x278>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d104      	bne.n	8005f3e <UART_SetConfig+0xea>
 8005f34:	231f      	movs	r3, #31
 8005f36:	18fb      	adds	r3, r7, r3
 8005f38:	2200      	movs	r2, #0
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	e003      	b.n	8005f46 <UART_SetConfig+0xf2>
 8005f3e:	231f      	movs	r3, #31
 8005f40:	18fb      	adds	r3, r7, r3
 8005f42:	2210      	movs	r2, #16
 8005f44:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69da      	ldr	r2, [r3, #28]
 8005f4a:	2380      	movs	r3, #128	; 0x80
 8005f4c:	021b      	lsls	r3, r3, #8
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d15d      	bne.n	800600e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005f52:	231f      	movs	r3, #31
 8005f54:	18fb      	adds	r3, r7, r3
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d015      	beq.n	8005f88 <UART_SetConfig+0x134>
 8005f5c:	dc18      	bgt.n	8005f90 <UART_SetConfig+0x13c>
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d00d      	beq.n	8005f7e <UART_SetConfig+0x12a>
 8005f62:	dc15      	bgt.n	8005f90 <UART_SetConfig+0x13c>
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <UART_SetConfig+0x11a>
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d005      	beq.n	8005f78 <UART_SetConfig+0x124>
 8005f6c:	e010      	b.n	8005f90 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f6e:	f7fe fe7d 	bl	8004c6c <HAL_RCC_GetPCLK1Freq>
 8005f72:	0003      	movs	r3, r0
 8005f74:	61bb      	str	r3, [r7, #24]
        break;
 8005f76:	e012      	b.n	8005f9e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f78:	4b55      	ldr	r3, [pc, #340]	; (80060d0 <UART_SetConfig+0x27c>)
 8005f7a:	61bb      	str	r3, [r7, #24]
        break;
 8005f7c:	e00f      	b.n	8005f9e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f7e:	f7fe fe07 	bl	8004b90 <HAL_RCC_GetSysClockFreq>
 8005f82:	0003      	movs	r3, r0
 8005f84:	61bb      	str	r3, [r7, #24]
        break;
 8005f86:	e00a      	b.n	8005f9e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f88:	2380      	movs	r3, #128	; 0x80
 8005f8a:	021b      	lsls	r3, r3, #8
 8005f8c:	61bb      	str	r3, [r7, #24]
        break;
 8005f8e:	e006      	b.n	8005f9e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f94:	231e      	movs	r3, #30
 8005f96:	18fb      	adds	r3, r7, r3
 8005f98:	2201      	movs	r2, #1
 8005f9a:	701a      	strb	r2, [r3, #0]
        break;
 8005f9c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d100      	bne.n	8005fa6 <UART_SetConfig+0x152>
 8005fa4:	e07b      	b.n	800609e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	005a      	lsls	r2, r3, #1
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	085b      	lsrs	r3, r3, #1
 8005fb0:	18d2      	adds	r2, r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	0019      	movs	r1, r3
 8005fb8:	0010      	movs	r0, r2
 8005fba:	f7fa f8c1 	bl	8000140 <__udivsi3>
 8005fbe:	0003      	movs	r3, r0
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	2b0f      	cmp	r3, #15
 8005fc8:	d91c      	bls.n	8006004 <UART_SetConfig+0x1b0>
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	2380      	movs	r3, #128	; 0x80
 8005fce:	025b      	lsls	r3, r3, #9
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d217      	bcs.n	8006004 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	200e      	movs	r0, #14
 8005fda:	183b      	adds	r3, r7, r0
 8005fdc:	210f      	movs	r1, #15
 8005fde:	438a      	bics	r2, r1
 8005fe0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	085b      	lsrs	r3, r3, #1
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	2207      	movs	r2, #7
 8005fea:	4013      	ands	r3, r2
 8005fec:	b299      	uxth	r1, r3
 8005fee:	183b      	adds	r3, r7, r0
 8005ff0:	183a      	adds	r2, r7, r0
 8005ff2:	8812      	ldrh	r2, [r2, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	183a      	adds	r2, r7, r0
 8005ffe:	8812      	ldrh	r2, [r2, #0]
 8006000:	60da      	str	r2, [r3, #12]
 8006002:	e04c      	b.n	800609e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006004:	231e      	movs	r3, #30
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	2201      	movs	r2, #1
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	e047      	b.n	800609e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800600e:	231f      	movs	r3, #31
 8006010:	18fb      	adds	r3, r7, r3
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b08      	cmp	r3, #8
 8006016:	d015      	beq.n	8006044 <UART_SetConfig+0x1f0>
 8006018:	dc18      	bgt.n	800604c <UART_SetConfig+0x1f8>
 800601a:	2b04      	cmp	r3, #4
 800601c:	d00d      	beq.n	800603a <UART_SetConfig+0x1e6>
 800601e:	dc15      	bgt.n	800604c <UART_SetConfig+0x1f8>
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <UART_SetConfig+0x1d6>
 8006024:	2b02      	cmp	r3, #2
 8006026:	d005      	beq.n	8006034 <UART_SetConfig+0x1e0>
 8006028:	e010      	b.n	800604c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800602a:	f7fe fe1f 	bl	8004c6c <HAL_RCC_GetPCLK1Freq>
 800602e:	0003      	movs	r3, r0
 8006030:	61bb      	str	r3, [r7, #24]
        break;
 8006032:	e012      	b.n	800605a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006034:	4b26      	ldr	r3, [pc, #152]	; (80060d0 <UART_SetConfig+0x27c>)
 8006036:	61bb      	str	r3, [r7, #24]
        break;
 8006038:	e00f      	b.n	800605a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800603a:	f7fe fda9 	bl	8004b90 <HAL_RCC_GetSysClockFreq>
 800603e:	0003      	movs	r3, r0
 8006040:	61bb      	str	r3, [r7, #24]
        break;
 8006042:	e00a      	b.n	800605a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006044:	2380      	movs	r3, #128	; 0x80
 8006046:	021b      	lsls	r3, r3, #8
 8006048:	61bb      	str	r3, [r7, #24]
        break;
 800604a:	e006      	b.n	800605a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006050:	231e      	movs	r3, #30
 8006052:	18fb      	adds	r3, r7, r3
 8006054:	2201      	movs	r2, #1
 8006056:	701a      	strb	r2, [r3, #0]
        break;
 8006058:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01e      	beq.n	800609e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	085a      	lsrs	r2, r3, #1
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	18d2      	adds	r2, r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	0019      	movs	r1, r3
 8006070:	0010      	movs	r0, r2
 8006072:	f7fa f865 	bl	8000140 <__udivsi3>
 8006076:	0003      	movs	r3, r0
 8006078:	b29b      	uxth	r3, r3
 800607a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2b0f      	cmp	r3, #15
 8006080:	d909      	bls.n	8006096 <UART_SetConfig+0x242>
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	2380      	movs	r3, #128	; 0x80
 8006086:	025b      	lsls	r3, r3, #9
 8006088:	429a      	cmp	r2, r3
 800608a:	d204      	bcs.n	8006096 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	60da      	str	r2, [r3, #12]
 8006094:	e003      	b.n	800609e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006096:	231e      	movs	r3, #30
 8006098:	18fb      	adds	r3, r7, r3
 800609a:	2201      	movs	r2, #1
 800609c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80060aa:	231e      	movs	r3, #30
 80060ac:	18fb      	adds	r3, r7, r3
 80060ae:	781b      	ldrb	r3, [r3, #0]
}
 80060b0:	0018      	movs	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b008      	add	sp, #32
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	ffff69f3 	.word	0xffff69f3
 80060bc:	ffffcfff 	.word	0xffffcfff
 80060c0:	fffff4ff 	.word	0xfffff4ff
 80060c4:	40013800 	.word	0x40013800
 80060c8:	40021000 	.word	0x40021000
 80060cc:	40004400 	.word	0x40004400
 80060d0:	007a1200 	.word	0x007a1200

080060d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	2201      	movs	r2, #1
 80060e2:	4013      	ands	r3, r2
 80060e4:	d00b      	beq.n	80060fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	4a4a      	ldr	r2, [pc, #296]	; (8006218 <UART_AdvFeatureConfig+0x144>)
 80060ee:	4013      	ands	r3, r2
 80060f0:	0019      	movs	r1, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	2202      	movs	r2, #2
 8006104:	4013      	ands	r3, r2
 8006106:	d00b      	beq.n	8006120 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	4a43      	ldr	r2, [pc, #268]	; (800621c <UART_AdvFeatureConfig+0x148>)
 8006110:	4013      	ands	r3, r2
 8006112:	0019      	movs	r1, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	430a      	orrs	r2, r1
 800611e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	2204      	movs	r2, #4
 8006126:	4013      	ands	r3, r2
 8006128:	d00b      	beq.n	8006142 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	4a3b      	ldr	r2, [pc, #236]	; (8006220 <UART_AdvFeatureConfig+0x14c>)
 8006132:	4013      	ands	r3, r2
 8006134:	0019      	movs	r1, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	2208      	movs	r2, #8
 8006148:	4013      	ands	r3, r2
 800614a:	d00b      	beq.n	8006164 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	4a34      	ldr	r2, [pc, #208]	; (8006224 <UART_AdvFeatureConfig+0x150>)
 8006154:	4013      	ands	r3, r2
 8006156:	0019      	movs	r1, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	2210      	movs	r2, #16
 800616a:	4013      	ands	r3, r2
 800616c:	d00b      	beq.n	8006186 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	4a2c      	ldr	r2, [pc, #176]	; (8006228 <UART_AdvFeatureConfig+0x154>)
 8006176:	4013      	ands	r3, r2
 8006178:	0019      	movs	r1, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	2220      	movs	r2, #32
 800618c:	4013      	ands	r3, r2
 800618e:	d00b      	beq.n	80061a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	4a25      	ldr	r2, [pc, #148]	; (800622c <UART_AdvFeatureConfig+0x158>)
 8006198:	4013      	ands	r3, r2
 800619a:	0019      	movs	r1, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	2240      	movs	r2, #64	; 0x40
 80061ae:	4013      	ands	r3, r2
 80061b0:	d01d      	beq.n	80061ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	4a1d      	ldr	r2, [pc, #116]	; (8006230 <UART_AdvFeatureConfig+0x15c>)
 80061ba:	4013      	ands	r3, r2
 80061bc:	0019      	movs	r1, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061ce:	2380      	movs	r3, #128	; 0x80
 80061d0:	035b      	lsls	r3, r3, #13
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d10b      	bne.n	80061ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	4a15      	ldr	r2, [pc, #84]	; (8006234 <UART_AdvFeatureConfig+0x160>)
 80061de:	4013      	ands	r3, r2
 80061e0:	0019      	movs	r1, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	2280      	movs	r2, #128	; 0x80
 80061f4:	4013      	ands	r3, r2
 80061f6:	d00b      	beq.n	8006210 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	4a0e      	ldr	r2, [pc, #56]	; (8006238 <UART_AdvFeatureConfig+0x164>)
 8006200:	4013      	ands	r3, r2
 8006202:	0019      	movs	r1, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	605a      	str	r2, [r3, #4]
  }
}
 8006210:	46c0      	nop			; (mov r8, r8)
 8006212:	46bd      	mov	sp, r7
 8006214:	b002      	add	sp, #8
 8006216:	bd80      	pop	{r7, pc}
 8006218:	fffdffff 	.word	0xfffdffff
 800621c:	fffeffff 	.word	0xfffeffff
 8006220:	fffbffff 	.word	0xfffbffff
 8006224:	ffff7fff 	.word	0xffff7fff
 8006228:	ffffefff 	.word	0xffffefff
 800622c:	ffffdfff 	.word	0xffffdfff
 8006230:	ffefffff 	.word	0xffefffff
 8006234:	ff9fffff 	.word	0xff9fffff
 8006238:	fff7ffff 	.word	0xfff7ffff

0800623c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af02      	add	r7, sp, #8
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2280      	movs	r2, #128	; 0x80
 8006248:	2100      	movs	r1, #0
 800624a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800624c:	f7fd fe48 	bl	8003ee0 <HAL_GetTick>
 8006250:	0003      	movs	r3, r0
 8006252:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2208      	movs	r2, #8
 800625c:	4013      	ands	r3, r2
 800625e:	2b08      	cmp	r3, #8
 8006260:	d10c      	bne.n	800627c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2280      	movs	r2, #128	; 0x80
 8006266:	0391      	lsls	r1, r2, #14
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	4a17      	ldr	r2, [pc, #92]	; (80062c8 <UART_CheckIdleState+0x8c>)
 800626c:	9200      	str	r2, [sp, #0]
 800626e:	2200      	movs	r2, #0
 8006270:	f000 f82c 	bl	80062cc <UART_WaitOnFlagUntilTimeout>
 8006274:	1e03      	subs	r3, r0, #0
 8006276:	d001      	beq.n	800627c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e021      	b.n	80062c0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2204      	movs	r2, #4
 8006284:	4013      	ands	r3, r2
 8006286:	2b04      	cmp	r3, #4
 8006288:	d10c      	bne.n	80062a4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2280      	movs	r2, #128	; 0x80
 800628e:	03d1      	lsls	r1, r2, #15
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	4a0d      	ldr	r2, [pc, #52]	; (80062c8 <UART_CheckIdleState+0x8c>)
 8006294:	9200      	str	r2, [sp, #0]
 8006296:	2200      	movs	r2, #0
 8006298:	f000 f818 	bl	80062cc <UART_WaitOnFlagUntilTimeout>
 800629c:	1e03      	subs	r3, r0, #0
 800629e:	d001      	beq.n	80062a4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e00d      	b.n	80062c0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2220      	movs	r2, #32
 80062ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2274      	movs	r2, #116	; 0x74
 80062ba:	2100      	movs	r1, #0
 80062bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	0018      	movs	r0, r3
 80062c2:	46bd      	mov	sp, r7
 80062c4:	b004      	add	sp, #16
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	01ffffff 	.word	0x01ffffff

080062cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b094      	sub	sp, #80	; 0x50
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	1dfb      	adds	r3, r7, #7
 80062da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062dc:	e0a3      	b.n	8006426 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062e0:	3301      	adds	r3, #1
 80062e2:	d100      	bne.n	80062e6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80062e4:	e09f      	b.n	8006426 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e6:	f7fd fdfb 	bl	8003ee0 <HAL_GetTick>
 80062ea:	0002      	movs	r2, r0
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d302      	bcc.n	80062fc <UART_WaitOnFlagUntilTimeout+0x30>
 80062f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d13d      	bne.n	8006378 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006300:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006304:	647b      	str	r3, [r7, #68]	; 0x44
 8006306:	2301      	movs	r3, #1
 8006308:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800630a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630c:	f383 8810 	msr	PRIMASK, r3
}
 8006310:	46c0      	nop			; (mov r8, r8)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	494c      	ldr	r1, [pc, #304]	; (8006450 <UART_WaitOnFlagUntilTimeout+0x184>)
 800631e:	400a      	ands	r2, r1
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006324:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	f383 8810 	msr	PRIMASK, r3
}
 800632c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800632e:	f3ef 8310 	mrs	r3, PRIMASK
 8006332:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006336:	643b      	str	r3, [r7, #64]	; 0x40
 8006338:	2301      	movs	r3, #1
 800633a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800633c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633e:	f383 8810 	msr	PRIMASK, r3
}
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2101      	movs	r1, #1
 8006350:	438a      	bics	r2, r1
 8006352:	609a      	str	r2, [r3, #8]
 8006354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006356:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800635a:	f383 8810 	msr	PRIMASK, r3
}
 800635e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2220      	movs	r2, #32
 8006364:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2274      	movs	r2, #116	; 0x74
 8006370:	2100      	movs	r1, #0
 8006372:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e067      	b.n	8006448 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2204      	movs	r2, #4
 8006380:	4013      	ands	r3, r2
 8006382:	d050      	beq.n	8006426 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69da      	ldr	r2, [r3, #28]
 800638a:	2380      	movs	r3, #128	; 0x80
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	401a      	ands	r2, r3
 8006390:	2380      	movs	r3, #128	; 0x80
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	429a      	cmp	r2, r3
 8006396:	d146      	bne.n	8006426 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2280      	movs	r2, #128	; 0x80
 800639e:	0112      	lsls	r2, r2, #4
 80063a0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063a2:	f3ef 8310 	mrs	r3, PRIMASK
 80063a6:	613b      	str	r3, [r7, #16]
  return(result);
 80063a8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063ac:	2301      	movs	r3, #1
 80063ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f383 8810 	msr	PRIMASK, r3
}
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4923      	ldr	r1, [pc, #140]	; (8006450 <UART_WaitOnFlagUntilTimeout+0x184>)
 80063c4:	400a      	ands	r2, r1
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	f383 8810 	msr	PRIMASK, r3
}
 80063d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063d4:	f3ef 8310 	mrs	r3, PRIMASK
 80063d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80063da:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80063de:	2301      	movs	r3, #1
 80063e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e2:	6a3b      	ldr	r3, [r7, #32]
 80063e4:	f383 8810 	msr	PRIMASK, r3
}
 80063e8:	46c0      	nop			; (mov r8, r8)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2101      	movs	r1, #1
 80063f6:	438a      	bics	r2, r1
 80063f8:	609a      	str	r2, [r3, #8]
 80063fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	f383 8810 	msr	PRIMASK, r3
}
 8006404:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2220      	movs	r2, #32
 800640a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2220      	movs	r2, #32
 8006410:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2280      	movs	r2, #128	; 0x80
 8006416:	2120      	movs	r1, #32
 8006418:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2274      	movs	r2, #116	; 0x74
 800641e:	2100      	movs	r1, #0
 8006420:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e010      	b.n	8006448 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	4013      	ands	r3, r2
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	425a      	negs	r2, r3
 8006436:	4153      	adcs	r3, r2
 8006438:	b2db      	uxtb	r3, r3
 800643a:	001a      	movs	r2, r3
 800643c:	1dfb      	adds	r3, r7, #7
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	429a      	cmp	r2, r3
 8006442:	d100      	bne.n	8006446 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006444:	e74b      	b.n	80062de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	0018      	movs	r0, r3
 800644a:	46bd      	mov	sp, r7
 800644c:	b014      	add	sp, #80	; 0x50
 800644e:	bd80      	pop	{r7, pc}
 8006450:	fffffe5f 	.word	0xfffffe5f

08006454 <__errno>:
 8006454:	4b01      	ldr	r3, [pc, #4]	; (800645c <__errno+0x8>)
 8006456:	6818      	ldr	r0, [r3, #0]
 8006458:	4770      	bx	lr
 800645a:	46c0      	nop			; (mov r8, r8)
 800645c:	2000000c 	.word	0x2000000c

08006460 <__libc_init_array>:
 8006460:	b570      	push	{r4, r5, r6, lr}
 8006462:	2600      	movs	r6, #0
 8006464:	4d0c      	ldr	r5, [pc, #48]	; (8006498 <__libc_init_array+0x38>)
 8006466:	4c0d      	ldr	r4, [pc, #52]	; (800649c <__libc_init_array+0x3c>)
 8006468:	1b64      	subs	r4, r4, r5
 800646a:	10a4      	asrs	r4, r4, #2
 800646c:	42a6      	cmp	r6, r4
 800646e:	d109      	bne.n	8006484 <__libc_init_array+0x24>
 8006470:	2600      	movs	r6, #0
 8006472:	f004 fd55 	bl	800af20 <_init>
 8006476:	4d0a      	ldr	r5, [pc, #40]	; (80064a0 <__libc_init_array+0x40>)
 8006478:	4c0a      	ldr	r4, [pc, #40]	; (80064a4 <__libc_init_array+0x44>)
 800647a:	1b64      	subs	r4, r4, r5
 800647c:	10a4      	asrs	r4, r4, #2
 800647e:	42a6      	cmp	r6, r4
 8006480:	d105      	bne.n	800648e <__libc_init_array+0x2e>
 8006482:	bd70      	pop	{r4, r5, r6, pc}
 8006484:	00b3      	lsls	r3, r6, #2
 8006486:	58eb      	ldr	r3, [r5, r3]
 8006488:	4798      	blx	r3
 800648a:	3601      	adds	r6, #1
 800648c:	e7ee      	b.n	800646c <__libc_init_array+0xc>
 800648e:	00b3      	lsls	r3, r6, #2
 8006490:	58eb      	ldr	r3, [r5, r3]
 8006492:	4798      	blx	r3
 8006494:	3601      	adds	r6, #1
 8006496:	e7f2      	b.n	800647e <__libc_init_array+0x1e>
 8006498:	0800b60c 	.word	0x0800b60c
 800649c:	0800b60c 	.word	0x0800b60c
 80064a0:	0800b60c 	.word	0x0800b60c
 80064a4:	0800b610 	.word	0x0800b610

080064a8 <memset>:
 80064a8:	0003      	movs	r3, r0
 80064aa:	1882      	adds	r2, r0, r2
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d100      	bne.n	80064b2 <memset+0xa>
 80064b0:	4770      	bx	lr
 80064b2:	7019      	strb	r1, [r3, #0]
 80064b4:	3301      	adds	r3, #1
 80064b6:	e7f9      	b.n	80064ac <memset+0x4>

080064b8 <__cvt>:
 80064b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ba:	001e      	movs	r6, r3
 80064bc:	2300      	movs	r3, #0
 80064be:	0014      	movs	r4, r2
 80064c0:	b08b      	sub	sp, #44	; 0x2c
 80064c2:	429e      	cmp	r6, r3
 80064c4:	da04      	bge.n	80064d0 <__cvt+0x18>
 80064c6:	2180      	movs	r1, #128	; 0x80
 80064c8:	0609      	lsls	r1, r1, #24
 80064ca:	1873      	adds	r3, r6, r1
 80064cc:	001e      	movs	r6, r3
 80064ce:	232d      	movs	r3, #45	; 0x2d
 80064d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80064d4:	7013      	strb	r3, [r2, #0]
 80064d6:	2320      	movs	r3, #32
 80064d8:	2203      	movs	r2, #3
 80064da:	439f      	bics	r7, r3
 80064dc:	2f46      	cmp	r7, #70	; 0x46
 80064de:	d007      	beq.n	80064f0 <__cvt+0x38>
 80064e0:	003b      	movs	r3, r7
 80064e2:	3b45      	subs	r3, #69	; 0x45
 80064e4:	4259      	negs	r1, r3
 80064e6:	414b      	adcs	r3, r1
 80064e8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80064ea:	3a01      	subs	r2, #1
 80064ec:	18cb      	adds	r3, r1, r3
 80064ee:	9310      	str	r3, [sp, #64]	; 0x40
 80064f0:	ab09      	add	r3, sp, #36	; 0x24
 80064f2:	9304      	str	r3, [sp, #16]
 80064f4:	ab08      	add	r3, sp, #32
 80064f6:	9303      	str	r3, [sp, #12]
 80064f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064fa:	9200      	str	r2, [sp, #0]
 80064fc:	9302      	str	r3, [sp, #8]
 80064fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006500:	0022      	movs	r2, r4
 8006502:	9301      	str	r3, [sp, #4]
 8006504:	0033      	movs	r3, r6
 8006506:	f001 fdd1 	bl	80080ac <_dtoa_r>
 800650a:	0005      	movs	r5, r0
 800650c:	2f47      	cmp	r7, #71	; 0x47
 800650e:	d102      	bne.n	8006516 <__cvt+0x5e>
 8006510:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006512:	07db      	lsls	r3, r3, #31
 8006514:	d528      	bpl.n	8006568 <__cvt+0xb0>
 8006516:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006518:	18eb      	adds	r3, r5, r3
 800651a:	9307      	str	r3, [sp, #28]
 800651c:	2f46      	cmp	r7, #70	; 0x46
 800651e:	d114      	bne.n	800654a <__cvt+0x92>
 8006520:	782b      	ldrb	r3, [r5, #0]
 8006522:	2b30      	cmp	r3, #48	; 0x30
 8006524:	d10c      	bne.n	8006540 <__cvt+0x88>
 8006526:	2200      	movs	r2, #0
 8006528:	2300      	movs	r3, #0
 800652a:	0020      	movs	r0, r4
 800652c:	0031      	movs	r1, r6
 800652e:	f7f9 ff8d 	bl	800044c <__aeabi_dcmpeq>
 8006532:	2800      	cmp	r0, #0
 8006534:	d104      	bne.n	8006540 <__cvt+0x88>
 8006536:	2301      	movs	r3, #1
 8006538:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800653a:	1a9b      	subs	r3, r3, r2
 800653c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006542:	9a07      	ldr	r2, [sp, #28]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	18d3      	adds	r3, r2, r3
 8006548:	9307      	str	r3, [sp, #28]
 800654a:	2200      	movs	r2, #0
 800654c:	2300      	movs	r3, #0
 800654e:	0020      	movs	r0, r4
 8006550:	0031      	movs	r1, r6
 8006552:	f7f9 ff7b 	bl	800044c <__aeabi_dcmpeq>
 8006556:	2800      	cmp	r0, #0
 8006558:	d001      	beq.n	800655e <__cvt+0xa6>
 800655a:	9b07      	ldr	r3, [sp, #28]
 800655c:	9309      	str	r3, [sp, #36]	; 0x24
 800655e:	2230      	movs	r2, #48	; 0x30
 8006560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006562:	9907      	ldr	r1, [sp, #28]
 8006564:	428b      	cmp	r3, r1
 8006566:	d306      	bcc.n	8006576 <__cvt+0xbe>
 8006568:	0028      	movs	r0, r5
 800656a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800656c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800656e:	1b5b      	subs	r3, r3, r5
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	b00b      	add	sp, #44	; 0x2c
 8006574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006576:	1c59      	adds	r1, r3, #1
 8006578:	9109      	str	r1, [sp, #36]	; 0x24
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	e7f0      	b.n	8006560 <__cvt+0xa8>

0800657e <__exponent>:
 800657e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006580:	1c83      	adds	r3, r0, #2
 8006582:	b087      	sub	sp, #28
 8006584:	9303      	str	r3, [sp, #12]
 8006586:	0005      	movs	r5, r0
 8006588:	000c      	movs	r4, r1
 800658a:	232b      	movs	r3, #43	; 0x2b
 800658c:	7002      	strb	r2, [r0, #0]
 800658e:	2900      	cmp	r1, #0
 8006590:	da01      	bge.n	8006596 <__exponent+0x18>
 8006592:	424c      	negs	r4, r1
 8006594:	3302      	adds	r3, #2
 8006596:	706b      	strb	r3, [r5, #1]
 8006598:	2c09      	cmp	r4, #9
 800659a:	dd31      	ble.n	8006600 <__exponent+0x82>
 800659c:	270a      	movs	r7, #10
 800659e:	ab04      	add	r3, sp, #16
 80065a0:	1dde      	adds	r6, r3, #7
 80065a2:	0020      	movs	r0, r4
 80065a4:	0039      	movs	r1, r7
 80065a6:	9601      	str	r6, [sp, #4]
 80065a8:	f7f9 ff3a 	bl	8000420 <__aeabi_idivmod>
 80065ac:	3e01      	subs	r6, #1
 80065ae:	3130      	adds	r1, #48	; 0x30
 80065b0:	0020      	movs	r0, r4
 80065b2:	7031      	strb	r1, [r6, #0]
 80065b4:	0039      	movs	r1, r7
 80065b6:	9402      	str	r4, [sp, #8]
 80065b8:	f7f9 fe4c 	bl	8000254 <__divsi3>
 80065bc:	9b02      	ldr	r3, [sp, #8]
 80065be:	0004      	movs	r4, r0
 80065c0:	2b63      	cmp	r3, #99	; 0x63
 80065c2:	dcee      	bgt.n	80065a2 <__exponent+0x24>
 80065c4:	9b01      	ldr	r3, [sp, #4]
 80065c6:	3430      	adds	r4, #48	; 0x30
 80065c8:	1e9a      	subs	r2, r3, #2
 80065ca:	0013      	movs	r3, r2
 80065cc:	9903      	ldr	r1, [sp, #12]
 80065ce:	7014      	strb	r4, [r2, #0]
 80065d0:	a804      	add	r0, sp, #16
 80065d2:	3007      	adds	r0, #7
 80065d4:	4298      	cmp	r0, r3
 80065d6:	d80e      	bhi.n	80065f6 <__exponent+0x78>
 80065d8:	ab04      	add	r3, sp, #16
 80065da:	3307      	adds	r3, #7
 80065dc:	2000      	movs	r0, #0
 80065de:	429a      	cmp	r2, r3
 80065e0:	d804      	bhi.n	80065ec <__exponent+0x6e>
 80065e2:	ab04      	add	r3, sp, #16
 80065e4:	3009      	adds	r0, #9
 80065e6:	18c0      	adds	r0, r0, r3
 80065e8:	9b01      	ldr	r3, [sp, #4]
 80065ea:	1ac0      	subs	r0, r0, r3
 80065ec:	9b03      	ldr	r3, [sp, #12]
 80065ee:	1818      	adds	r0, r3, r0
 80065f0:	1b40      	subs	r0, r0, r5
 80065f2:	b007      	add	sp, #28
 80065f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065f6:	7818      	ldrb	r0, [r3, #0]
 80065f8:	3301      	adds	r3, #1
 80065fa:	7008      	strb	r0, [r1, #0]
 80065fc:	3101      	adds	r1, #1
 80065fe:	e7e7      	b.n	80065d0 <__exponent+0x52>
 8006600:	2330      	movs	r3, #48	; 0x30
 8006602:	18e4      	adds	r4, r4, r3
 8006604:	70ab      	strb	r3, [r5, #2]
 8006606:	1d28      	adds	r0, r5, #4
 8006608:	70ec      	strb	r4, [r5, #3]
 800660a:	e7f1      	b.n	80065f0 <__exponent+0x72>

0800660c <_printf_float>:
 800660c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800660e:	b095      	sub	sp, #84	; 0x54
 8006610:	000c      	movs	r4, r1
 8006612:	9209      	str	r2, [sp, #36]	; 0x24
 8006614:	001e      	movs	r6, r3
 8006616:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006618:	0007      	movs	r7, r0
 800661a:	f002 fed5 	bl	80093c8 <_localeconv_r>
 800661e:	6803      	ldr	r3, [r0, #0]
 8006620:	0018      	movs	r0, r3
 8006622:	930c      	str	r3, [sp, #48]	; 0x30
 8006624:	f7f9 fd70 	bl	8000108 <strlen>
 8006628:	2300      	movs	r3, #0
 800662a:	9312      	str	r3, [sp, #72]	; 0x48
 800662c:	7e23      	ldrb	r3, [r4, #24]
 800662e:	2207      	movs	r2, #7
 8006630:	930a      	str	r3, [sp, #40]	; 0x28
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	900e      	str	r0, [sp, #56]	; 0x38
 8006636:	930d      	str	r3, [sp, #52]	; 0x34
 8006638:	990d      	ldr	r1, [sp, #52]	; 0x34
 800663a:	682b      	ldr	r3, [r5, #0]
 800663c:	05c9      	lsls	r1, r1, #23
 800663e:	d547      	bpl.n	80066d0 <_printf_float+0xc4>
 8006640:	189b      	adds	r3, r3, r2
 8006642:	4393      	bics	r3, r2
 8006644:	001a      	movs	r2, r3
 8006646:	3208      	adds	r2, #8
 8006648:	602a      	str	r2, [r5, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	64a2      	str	r2, [r4, #72]	; 0x48
 8006650:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006652:	2201      	movs	r2, #1
 8006654:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006656:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006658:	930b      	str	r3, [sp, #44]	; 0x2c
 800665a:	006b      	lsls	r3, r5, #1
 800665c:	085b      	lsrs	r3, r3, #1
 800665e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006660:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006662:	4ba7      	ldr	r3, [pc, #668]	; (8006900 <_printf_float+0x2f4>)
 8006664:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006666:	4252      	negs	r2, r2
 8006668:	f7fb ffee 	bl	8002648 <__aeabi_dcmpun>
 800666c:	2800      	cmp	r0, #0
 800666e:	d131      	bne.n	80066d4 <_printf_float+0xc8>
 8006670:	2201      	movs	r2, #1
 8006672:	4ba3      	ldr	r3, [pc, #652]	; (8006900 <_printf_float+0x2f4>)
 8006674:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006676:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006678:	4252      	negs	r2, r2
 800667a:	f7f9 fef7 	bl	800046c <__aeabi_dcmple>
 800667e:	2800      	cmp	r0, #0
 8006680:	d128      	bne.n	80066d4 <_printf_float+0xc8>
 8006682:	2200      	movs	r2, #0
 8006684:	2300      	movs	r3, #0
 8006686:	0029      	movs	r1, r5
 8006688:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800668a:	f7f9 fee5 	bl	8000458 <__aeabi_dcmplt>
 800668e:	2800      	cmp	r0, #0
 8006690:	d003      	beq.n	800669a <_printf_float+0x8e>
 8006692:	0023      	movs	r3, r4
 8006694:	222d      	movs	r2, #45	; 0x2d
 8006696:	3343      	adds	r3, #67	; 0x43
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800669c:	4d99      	ldr	r5, [pc, #612]	; (8006904 <_printf_float+0x2f8>)
 800669e:	2b47      	cmp	r3, #71	; 0x47
 80066a0:	d900      	bls.n	80066a4 <_printf_float+0x98>
 80066a2:	4d99      	ldr	r5, [pc, #612]	; (8006908 <_printf_float+0x2fc>)
 80066a4:	2303      	movs	r3, #3
 80066a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066a8:	6123      	str	r3, [r4, #16]
 80066aa:	3301      	adds	r3, #1
 80066ac:	439a      	bics	r2, r3
 80066ae:	2300      	movs	r3, #0
 80066b0:	6022      	str	r2, [r4, #0]
 80066b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80066b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b6:	0021      	movs	r1, r4
 80066b8:	0038      	movs	r0, r7
 80066ba:	9600      	str	r6, [sp, #0]
 80066bc:	aa13      	add	r2, sp, #76	; 0x4c
 80066be:	f000 f9e7 	bl	8006a90 <_printf_common>
 80066c2:	1c43      	adds	r3, r0, #1
 80066c4:	d000      	beq.n	80066c8 <_printf_float+0xbc>
 80066c6:	e0a2      	b.n	800680e <_printf_float+0x202>
 80066c8:	2001      	movs	r0, #1
 80066ca:	4240      	negs	r0, r0
 80066cc:	b015      	add	sp, #84	; 0x54
 80066ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066d0:	3307      	adds	r3, #7
 80066d2:	e7b6      	b.n	8006642 <_printf_float+0x36>
 80066d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066d6:	002b      	movs	r3, r5
 80066d8:	0010      	movs	r0, r2
 80066da:	0029      	movs	r1, r5
 80066dc:	f7fb ffb4 	bl	8002648 <__aeabi_dcmpun>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d00b      	beq.n	80066fc <_printf_float+0xf0>
 80066e4:	2d00      	cmp	r5, #0
 80066e6:	da03      	bge.n	80066f0 <_printf_float+0xe4>
 80066e8:	0023      	movs	r3, r4
 80066ea:	222d      	movs	r2, #45	; 0x2d
 80066ec:	3343      	adds	r3, #67	; 0x43
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f2:	4d86      	ldr	r5, [pc, #536]	; (800690c <_printf_float+0x300>)
 80066f4:	2b47      	cmp	r3, #71	; 0x47
 80066f6:	d9d5      	bls.n	80066a4 <_printf_float+0x98>
 80066f8:	4d85      	ldr	r5, [pc, #532]	; (8006910 <_printf_float+0x304>)
 80066fa:	e7d3      	b.n	80066a4 <_printf_float+0x98>
 80066fc:	2220      	movs	r2, #32
 80066fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006700:	6863      	ldr	r3, [r4, #4]
 8006702:	4391      	bics	r1, r2
 8006704:	910f      	str	r1, [sp, #60]	; 0x3c
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	d149      	bne.n	800679e <_printf_float+0x192>
 800670a:	3307      	adds	r3, #7
 800670c:	6063      	str	r3, [r4, #4]
 800670e:	2380      	movs	r3, #128	; 0x80
 8006710:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	4313      	orrs	r3, r2
 8006716:	2200      	movs	r2, #0
 8006718:	9206      	str	r2, [sp, #24]
 800671a:	aa12      	add	r2, sp, #72	; 0x48
 800671c:	9205      	str	r2, [sp, #20]
 800671e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006720:	a908      	add	r1, sp, #32
 8006722:	9204      	str	r2, [sp, #16]
 8006724:	aa11      	add	r2, sp, #68	; 0x44
 8006726:	9203      	str	r2, [sp, #12]
 8006728:	2223      	movs	r2, #35	; 0x23
 800672a:	6023      	str	r3, [r4, #0]
 800672c:	9301      	str	r3, [sp, #4]
 800672e:	6863      	ldr	r3, [r4, #4]
 8006730:	1852      	adds	r2, r2, r1
 8006732:	9202      	str	r2, [sp, #8]
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	0038      	movs	r0, r7
 8006738:	002b      	movs	r3, r5
 800673a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800673c:	f7ff febc 	bl	80064b8 <__cvt>
 8006740:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006742:	0005      	movs	r5, r0
 8006744:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006746:	2b47      	cmp	r3, #71	; 0x47
 8006748:	d108      	bne.n	800675c <_printf_float+0x150>
 800674a:	1ccb      	adds	r3, r1, #3
 800674c:	db02      	blt.n	8006754 <_printf_float+0x148>
 800674e:	6863      	ldr	r3, [r4, #4]
 8006750:	4299      	cmp	r1, r3
 8006752:	dd48      	ble.n	80067e6 <_printf_float+0x1da>
 8006754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006756:	3b02      	subs	r3, #2
 8006758:	b2db      	uxtb	r3, r3
 800675a:	930a      	str	r3, [sp, #40]	; 0x28
 800675c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800675e:	2b65      	cmp	r3, #101	; 0x65
 8006760:	d824      	bhi.n	80067ac <_printf_float+0x1a0>
 8006762:	0020      	movs	r0, r4
 8006764:	001a      	movs	r2, r3
 8006766:	3901      	subs	r1, #1
 8006768:	3050      	adds	r0, #80	; 0x50
 800676a:	9111      	str	r1, [sp, #68]	; 0x44
 800676c:	f7ff ff07 	bl	800657e <__exponent>
 8006770:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006772:	900b      	str	r0, [sp, #44]	; 0x2c
 8006774:	1813      	adds	r3, r2, r0
 8006776:	6123      	str	r3, [r4, #16]
 8006778:	2a01      	cmp	r2, #1
 800677a:	dc02      	bgt.n	8006782 <_printf_float+0x176>
 800677c:	6822      	ldr	r2, [r4, #0]
 800677e:	07d2      	lsls	r2, r2, #31
 8006780:	d501      	bpl.n	8006786 <_printf_float+0x17a>
 8006782:	3301      	adds	r3, #1
 8006784:	6123      	str	r3, [r4, #16]
 8006786:	2323      	movs	r3, #35	; 0x23
 8006788:	aa08      	add	r2, sp, #32
 800678a:	189b      	adds	r3, r3, r2
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d100      	bne.n	8006794 <_printf_float+0x188>
 8006792:	e78f      	b.n	80066b4 <_printf_float+0xa8>
 8006794:	0023      	movs	r3, r4
 8006796:	222d      	movs	r2, #45	; 0x2d
 8006798:	3343      	adds	r3, #67	; 0x43
 800679a:	701a      	strb	r2, [r3, #0]
 800679c:	e78a      	b.n	80066b4 <_printf_float+0xa8>
 800679e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067a0:	2a47      	cmp	r2, #71	; 0x47
 80067a2:	d1b4      	bne.n	800670e <_printf_float+0x102>
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1b2      	bne.n	800670e <_printf_float+0x102>
 80067a8:	3301      	adds	r3, #1
 80067aa:	e7af      	b.n	800670c <_printf_float+0x100>
 80067ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ae:	2b66      	cmp	r3, #102	; 0x66
 80067b0:	d11b      	bne.n	80067ea <_printf_float+0x1de>
 80067b2:	6863      	ldr	r3, [r4, #4]
 80067b4:	2900      	cmp	r1, #0
 80067b6:	dd0d      	ble.n	80067d4 <_printf_float+0x1c8>
 80067b8:	6121      	str	r1, [r4, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d102      	bne.n	80067c4 <_printf_float+0x1b8>
 80067be:	6822      	ldr	r2, [r4, #0]
 80067c0:	07d2      	lsls	r2, r2, #31
 80067c2:	d502      	bpl.n	80067ca <_printf_float+0x1be>
 80067c4:	3301      	adds	r3, #1
 80067c6:	1859      	adds	r1, r3, r1
 80067c8:	6121      	str	r1, [r4, #16]
 80067ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80067ce:	2300      	movs	r3, #0
 80067d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80067d2:	e7d8      	b.n	8006786 <_printf_float+0x17a>
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d103      	bne.n	80067e0 <_printf_float+0x1d4>
 80067d8:	2201      	movs	r2, #1
 80067da:	6821      	ldr	r1, [r4, #0]
 80067dc:	4211      	tst	r1, r2
 80067de:	d000      	beq.n	80067e2 <_printf_float+0x1d6>
 80067e0:	1c9a      	adds	r2, r3, #2
 80067e2:	6122      	str	r2, [r4, #16]
 80067e4:	e7f1      	b.n	80067ca <_printf_float+0x1be>
 80067e6:	2367      	movs	r3, #103	; 0x67
 80067e8:	930a      	str	r3, [sp, #40]	; 0x28
 80067ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067ee:	4293      	cmp	r3, r2
 80067f0:	db06      	blt.n	8006800 <_printf_float+0x1f4>
 80067f2:	6822      	ldr	r2, [r4, #0]
 80067f4:	6123      	str	r3, [r4, #16]
 80067f6:	07d2      	lsls	r2, r2, #31
 80067f8:	d5e7      	bpl.n	80067ca <_printf_float+0x1be>
 80067fa:	3301      	adds	r3, #1
 80067fc:	6123      	str	r3, [r4, #16]
 80067fe:	e7e4      	b.n	80067ca <_printf_float+0x1be>
 8006800:	2101      	movs	r1, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	dc01      	bgt.n	800680a <_printf_float+0x1fe>
 8006806:	1849      	adds	r1, r1, r1
 8006808:	1ac9      	subs	r1, r1, r3
 800680a:	1852      	adds	r2, r2, r1
 800680c:	e7e9      	b.n	80067e2 <_printf_float+0x1d6>
 800680e:	6822      	ldr	r2, [r4, #0]
 8006810:	0553      	lsls	r3, r2, #21
 8006812:	d407      	bmi.n	8006824 <_printf_float+0x218>
 8006814:	6923      	ldr	r3, [r4, #16]
 8006816:	002a      	movs	r2, r5
 8006818:	0038      	movs	r0, r7
 800681a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800681c:	47b0      	blx	r6
 800681e:	1c43      	adds	r3, r0, #1
 8006820:	d128      	bne.n	8006874 <_printf_float+0x268>
 8006822:	e751      	b.n	80066c8 <_printf_float+0xbc>
 8006824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006826:	2b65      	cmp	r3, #101	; 0x65
 8006828:	d800      	bhi.n	800682c <_printf_float+0x220>
 800682a:	e0e1      	b.n	80069f0 <_printf_float+0x3e4>
 800682c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800682e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006830:	2200      	movs	r2, #0
 8006832:	2300      	movs	r3, #0
 8006834:	f7f9 fe0a 	bl	800044c <__aeabi_dcmpeq>
 8006838:	2800      	cmp	r0, #0
 800683a:	d031      	beq.n	80068a0 <_printf_float+0x294>
 800683c:	2301      	movs	r3, #1
 800683e:	0038      	movs	r0, r7
 8006840:	4a34      	ldr	r2, [pc, #208]	; (8006914 <_printf_float+0x308>)
 8006842:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006844:	47b0      	blx	r6
 8006846:	1c43      	adds	r3, r0, #1
 8006848:	d100      	bne.n	800684c <_printf_float+0x240>
 800684a:	e73d      	b.n	80066c8 <_printf_float+0xbc>
 800684c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800684e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006850:	4293      	cmp	r3, r2
 8006852:	db02      	blt.n	800685a <_printf_float+0x24e>
 8006854:	6823      	ldr	r3, [r4, #0]
 8006856:	07db      	lsls	r3, r3, #31
 8006858:	d50c      	bpl.n	8006874 <_printf_float+0x268>
 800685a:	0038      	movs	r0, r7
 800685c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800685e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006860:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006862:	47b0      	blx	r6
 8006864:	2500      	movs	r5, #0
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	d100      	bne.n	800686c <_printf_float+0x260>
 800686a:	e72d      	b.n	80066c8 <_printf_float+0xbc>
 800686c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800686e:	3b01      	subs	r3, #1
 8006870:	42ab      	cmp	r3, r5
 8006872:	dc0a      	bgt.n	800688a <_printf_float+0x27e>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	079b      	lsls	r3, r3, #30
 8006878:	d500      	bpl.n	800687c <_printf_float+0x270>
 800687a:	e106      	b.n	8006a8a <_printf_float+0x47e>
 800687c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800687e:	68e0      	ldr	r0, [r4, #12]
 8006880:	4298      	cmp	r0, r3
 8006882:	db00      	blt.n	8006886 <_printf_float+0x27a>
 8006884:	e722      	b.n	80066cc <_printf_float+0xc0>
 8006886:	0018      	movs	r0, r3
 8006888:	e720      	b.n	80066cc <_printf_float+0xc0>
 800688a:	0022      	movs	r2, r4
 800688c:	2301      	movs	r3, #1
 800688e:	0038      	movs	r0, r7
 8006890:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006892:	321a      	adds	r2, #26
 8006894:	47b0      	blx	r6
 8006896:	1c43      	adds	r3, r0, #1
 8006898:	d100      	bne.n	800689c <_printf_float+0x290>
 800689a:	e715      	b.n	80066c8 <_printf_float+0xbc>
 800689c:	3501      	adds	r5, #1
 800689e:	e7e5      	b.n	800686c <_printf_float+0x260>
 80068a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	dc38      	bgt.n	8006918 <_printf_float+0x30c>
 80068a6:	2301      	movs	r3, #1
 80068a8:	0038      	movs	r0, r7
 80068aa:	4a1a      	ldr	r2, [pc, #104]	; (8006914 <_printf_float+0x308>)
 80068ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068ae:	47b0      	blx	r6
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d100      	bne.n	80068b6 <_printf_float+0x2aa>
 80068b4:	e708      	b.n	80066c8 <_printf_float+0xbc>
 80068b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068ba:	4313      	orrs	r3, r2
 80068bc:	d102      	bne.n	80068c4 <_printf_float+0x2b8>
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	07db      	lsls	r3, r3, #31
 80068c2:	d5d7      	bpl.n	8006874 <_printf_float+0x268>
 80068c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068c6:	0038      	movs	r0, r7
 80068c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068cc:	47b0      	blx	r6
 80068ce:	1c43      	adds	r3, r0, #1
 80068d0:	d100      	bne.n	80068d4 <_printf_float+0x2c8>
 80068d2:	e6f9      	b.n	80066c8 <_printf_float+0xbc>
 80068d4:	2300      	movs	r3, #0
 80068d6:	930a      	str	r3, [sp, #40]	; 0x28
 80068d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068dc:	425b      	negs	r3, r3
 80068de:	4293      	cmp	r3, r2
 80068e0:	dc01      	bgt.n	80068e6 <_printf_float+0x2da>
 80068e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068e4:	e797      	b.n	8006816 <_printf_float+0x20a>
 80068e6:	0022      	movs	r2, r4
 80068e8:	2301      	movs	r3, #1
 80068ea:	0038      	movs	r0, r7
 80068ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068ee:	321a      	adds	r2, #26
 80068f0:	47b0      	blx	r6
 80068f2:	1c43      	adds	r3, r0, #1
 80068f4:	d100      	bne.n	80068f8 <_printf_float+0x2ec>
 80068f6:	e6e7      	b.n	80066c8 <_printf_float+0xbc>
 80068f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068fa:	3301      	adds	r3, #1
 80068fc:	e7eb      	b.n	80068d6 <_printf_float+0x2ca>
 80068fe:	46c0      	nop			; (mov r8, r8)
 8006900:	7fefffff 	.word	0x7fefffff
 8006904:	0800b16c 	.word	0x0800b16c
 8006908:	0800b170 	.word	0x0800b170
 800690c:	0800b174 	.word	0x0800b174
 8006910:	0800b178 	.word	0x0800b178
 8006914:	0800b17c 	.word	0x0800b17c
 8006918:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800691a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800691c:	920a      	str	r2, [sp, #40]	; 0x28
 800691e:	429a      	cmp	r2, r3
 8006920:	dd00      	ble.n	8006924 <_printf_float+0x318>
 8006922:	930a      	str	r3, [sp, #40]	; 0x28
 8006924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006926:	2b00      	cmp	r3, #0
 8006928:	dc3c      	bgt.n	80069a4 <_printf_float+0x398>
 800692a:	2300      	movs	r3, #0
 800692c:	930d      	str	r3, [sp, #52]	; 0x34
 800692e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006930:	43db      	mvns	r3, r3
 8006932:	17db      	asrs	r3, r3, #31
 8006934:	930f      	str	r3, [sp, #60]	; 0x3c
 8006936:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006938:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800693a:	930b      	str	r3, [sp, #44]	; 0x2c
 800693c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800693e:	4013      	ands	r3, r2
 8006940:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006946:	4293      	cmp	r3, r2
 8006948:	dc34      	bgt.n	80069b4 <_printf_float+0x3a8>
 800694a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800694c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800694e:	4293      	cmp	r3, r2
 8006950:	db3d      	blt.n	80069ce <_printf_float+0x3c2>
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	07db      	lsls	r3, r3, #31
 8006956:	d43a      	bmi.n	80069ce <_printf_float+0x3c2>
 8006958:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800695a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800695c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	1a52      	subs	r2, r2, r1
 8006962:	920a      	str	r2, [sp, #40]	; 0x28
 8006964:	429a      	cmp	r2, r3
 8006966:	dd00      	ble.n	800696a <_printf_float+0x35e>
 8006968:	930a      	str	r3, [sp, #40]	; 0x28
 800696a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800696c:	2b00      	cmp	r3, #0
 800696e:	dc36      	bgt.n	80069de <_printf_float+0x3d2>
 8006970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006972:	2500      	movs	r5, #0
 8006974:	43db      	mvns	r3, r3
 8006976:	17db      	asrs	r3, r3, #31
 8006978:	930b      	str	r3, [sp, #44]	; 0x2c
 800697a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800697c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800697e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006980:	1a9b      	subs	r3, r3, r2
 8006982:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006984:	400a      	ands	r2, r1
 8006986:	1a9b      	subs	r3, r3, r2
 8006988:	42ab      	cmp	r3, r5
 800698a:	dc00      	bgt.n	800698e <_printf_float+0x382>
 800698c:	e772      	b.n	8006874 <_printf_float+0x268>
 800698e:	0022      	movs	r2, r4
 8006990:	2301      	movs	r3, #1
 8006992:	0038      	movs	r0, r7
 8006994:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006996:	321a      	adds	r2, #26
 8006998:	47b0      	blx	r6
 800699a:	1c43      	adds	r3, r0, #1
 800699c:	d100      	bne.n	80069a0 <_printf_float+0x394>
 800699e:	e693      	b.n	80066c8 <_printf_float+0xbc>
 80069a0:	3501      	adds	r5, #1
 80069a2:	e7ea      	b.n	800697a <_printf_float+0x36e>
 80069a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a6:	002a      	movs	r2, r5
 80069a8:	0038      	movs	r0, r7
 80069aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069ac:	47b0      	blx	r6
 80069ae:	1c43      	adds	r3, r0, #1
 80069b0:	d1bb      	bne.n	800692a <_printf_float+0x31e>
 80069b2:	e689      	b.n	80066c8 <_printf_float+0xbc>
 80069b4:	0022      	movs	r2, r4
 80069b6:	2301      	movs	r3, #1
 80069b8:	0038      	movs	r0, r7
 80069ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069bc:	321a      	adds	r2, #26
 80069be:	47b0      	blx	r6
 80069c0:	1c43      	adds	r3, r0, #1
 80069c2:	d100      	bne.n	80069c6 <_printf_float+0x3ba>
 80069c4:	e680      	b.n	80066c8 <_printf_float+0xbc>
 80069c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069c8:	3301      	adds	r3, #1
 80069ca:	930d      	str	r3, [sp, #52]	; 0x34
 80069cc:	e7b3      	b.n	8006936 <_printf_float+0x32a>
 80069ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069d0:	0038      	movs	r0, r7
 80069d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069d6:	47b0      	blx	r6
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	d1bd      	bne.n	8006958 <_printf_float+0x34c>
 80069dc:	e674      	b.n	80066c8 <_printf_float+0xbc>
 80069de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069e0:	0038      	movs	r0, r7
 80069e2:	18ea      	adds	r2, r5, r3
 80069e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e8:	47b0      	blx	r6
 80069ea:	1c43      	adds	r3, r0, #1
 80069ec:	d1c0      	bne.n	8006970 <_printf_float+0x364>
 80069ee:	e66b      	b.n	80066c8 <_printf_float+0xbc>
 80069f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	dc02      	bgt.n	80069fc <_printf_float+0x3f0>
 80069f6:	2301      	movs	r3, #1
 80069f8:	421a      	tst	r2, r3
 80069fa:	d034      	beq.n	8006a66 <_printf_float+0x45a>
 80069fc:	2301      	movs	r3, #1
 80069fe:	002a      	movs	r2, r5
 8006a00:	0038      	movs	r0, r7
 8006a02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a04:	47b0      	blx	r6
 8006a06:	1c43      	adds	r3, r0, #1
 8006a08:	d100      	bne.n	8006a0c <_printf_float+0x400>
 8006a0a:	e65d      	b.n	80066c8 <_printf_float+0xbc>
 8006a0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a0e:	0038      	movs	r0, r7
 8006a10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a14:	47b0      	blx	r6
 8006a16:	1c43      	adds	r3, r0, #1
 8006a18:	d100      	bne.n	8006a1c <_printf_float+0x410>
 8006a1a:	e655      	b.n	80066c8 <_printf_float+0xbc>
 8006a1c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006a1e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006a20:	2200      	movs	r2, #0
 8006a22:	2300      	movs	r3, #0
 8006a24:	f7f9 fd12 	bl	800044c <__aeabi_dcmpeq>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d11a      	bne.n	8006a62 <_printf_float+0x456>
 8006a2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a2e:	1c6a      	adds	r2, r5, #1
 8006a30:	3b01      	subs	r3, #1
 8006a32:	0038      	movs	r0, r7
 8006a34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a36:	47b0      	blx	r6
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d10e      	bne.n	8006a5a <_printf_float+0x44e>
 8006a3c:	e644      	b.n	80066c8 <_printf_float+0xbc>
 8006a3e:	0022      	movs	r2, r4
 8006a40:	2301      	movs	r3, #1
 8006a42:	0038      	movs	r0, r7
 8006a44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a46:	321a      	adds	r2, #26
 8006a48:	47b0      	blx	r6
 8006a4a:	1c43      	adds	r3, r0, #1
 8006a4c:	d100      	bne.n	8006a50 <_printf_float+0x444>
 8006a4e:	e63b      	b.n	80066c8 <_printf_float+0xbc>
 8006a50:	3501      	adds	r5, #1
 8006a52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a54:	3b01      	subs	r3, #1
 8006a56:	42ab      	cmp	r3, r5
 8006a58:	dcf1      	bgt.n	8006a3e <_printf_float+0x432>
 8006a5a:	0022      	movs	r2, r4
 8006a5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a5e:	3250      	adds	r2, #80	; 0x50
 8006a60:	e6da      	b.n	8006818 <_printf_float+0x20c>
 8006a62:	2500      	movs	r5, #0
 8006a64:	e7f5      	b.n	8006a52 <_printf_float+0x446>
 8006a66:	002a      	movs	r2, r5
 8006a68:	e7e3      	b.n	8006a32 <_printf_float+0x426>
 8006a6a:	0022      	movs	r2, r4
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	0038      	movs	r0, r7
 8006a70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a72:	3219      	adds	r2, #25
 8006a74:	47b0      	blx	r6
 8006a76:	1c43      	adds	r3, r0, #1
 8006a78:	d100      	bne.n	8006a7c <_printf_float+0x470>
 8006a7a:	e625      	b.n	80066c8 <_printf_float+0xbc>
 8006a7c:	3501      	adds	r5, #1
 8006a7e:	68e3      	ldr	r3, [r4, #12]
 8006a80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	42ab      	cmp	r3, r5
 8006a86:	dcf0      	bgt.n	8006a6a <_printf_float+0x45e>
 8006a88:	e6f8      	b.n	800687c <_printf_float+0x270>
 8006a8a:	2500      	movs	r5, #0
 8006a8c:	e7f7      	b.n	8006a7e <_printf_float+0x472>
 8006a8e:	46c0      	nop			; (mov r8, r8)

08006a90 <_printf_common>:
 8006a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a92:	0015      	movs	r5, r2
 8006a94:	9301      	str	r3, [sp, #4]
 8006a96:	688a      	ldr	r2, [r1, #8]
 8006a98:	690b      	ldr	r3, [r1, #16]
 8006a9a:	000c      	movs	r4, r1
 8006a9c:	9000      	str	r0, [sp, #0]
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	da00      	bge.n	8006aa4 <_printf_common+0x14>
 8006aa2:	0013      	movs	r3, r2
 8006aa4:	0022      	movs	r2, r4
 8006aa6:	602b      	str	r3, [r5, #0]
 8006aa8:	3243      	adds	r2, #67	; 0x43
 8006aaa:	7812      	ldrb	r2, [r2, #0]
 8006aac:	2a00      	cmp	r2, #0
 8006aae:	d001      	beq.n	8006ab4 <_printf_common+0x24>
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	602b      	str	r3, [r5, #0]
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	069b      	lsls	r3, r3, #26
 8006ab8:	d502      	bpl.n	8006ac0 <_printf_common+0x30>
 8006aba:	682b      	ldr	r3, [r5, #0]
 8006abc:	3302      	adds	r3, #2
 8006abe:	602b      	str	r3, [r5, #0]
 8006ac0:	6822      	ldr	r2, [r4, #0]
 8006ac2:	2306      	movs	r3, #6
 8006ac4:	0017      	movs	r7, r2
 8006ac6:	401f      	ands	r7, r3
 8006ac8:	421a      	tst	r2, r3
 8006aca:	d027      	beq.n	8006b1c <_printf_common+0x8c>
 8006acc:	0023      	movs	r3, r4
 8006ace:	3343      	adds	r3, #67	; 0x43
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	1e5a      	subs	r2, r3, #1
 8006ad4:	4193      	sbcs	r3, r2
 8006ad6:	6822      	ldr	r2, [r4, #0]
 8006ad8:	0692      	lsls	r2, r2, #26
 8006ada:	d430      	bmi.n	8006b3e <_printf_common+0xae>
 8006adc:	0022      	movs	r2, r4
 8006ade:	9901      	ldr	r1, [sp, #4]
 8006ae0:	9800      	ldr	r0, [sp, #0]
 8006ae2:	9e08      	ldr	r6, [sp, #32]
 8006ae4:	3243      	adds	r2, #67	; 0x43
 8006ae6:	47b0      	blx	r6
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	d025      	beq.n	8006b38 <_printf_common+0xa8>
 8006aec:	2306      	movs	r3, #6
 8006aee:	6820      	ldr	r0, [r4, #0]
 8006af0:	682a      	ldr	r2, [r5, #0]
 8006af2:	68e1      	ldr	r1, [r4, #12]
 8006af4:	2500      	movs	r5, #0
 8006af6:	4003      	ands	r3, r0
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d103      	bne.n	8006b04 <_printf_common+0x74>
 8006afc:	1a8d      	subs	r5, r1, r2
 8006afe:	43eb      	mvns	r3, r5
 8006b00:	17db      	asrs	r3, r3, #31
 8006b02:	401d      	ands	r5, r3
 8006b04:	68a3      	ldr	r3, [r4, #8]
 8006b06:	6922      	ldr	r2, [r4, #16]
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	dd01      	ble.n	8006b10 <_printf_common+0x80>
 8006b0c:	1a9b      	subs	r3, r3, r2
 8006b0e:	18ed      	adds	r5, r5, r3
 8006b10:	2700      	movs	r7, #0
 8006b12:	42bd      	cmp	r5, r7
 8006b14:	d120      	bne.n	8006b58 <_printf_common+0xc8>
 8006b16:	2000      	movs	r0, #0
 8006b18:	e010      	b.n	8006b3c <_printf_common+0xac>
 8006b1a:	3701      	adds	r7, #1
 8006b1c:	68e3      	ldr	r3, [r4, #12]
 8006b1e:	682a      	ldr	r2, [r5, #0]
 8006b20:	1a9b      	subs	r3, r3, r2
 8006b22:	42bb      	cmp	r3, r7
 8006b24:	ddd2      	ble.n	8006acc <_printf_common+0x3c>
 8006b26:	0022      	movs	r2, r4
 8006b28:	2301      	movs	r3, #1
 8006b2a:	9901      	ldr	r1, [sp, #4]
 8006b2c:	9800      	ldr	r0, [sp, #0]
 8006b2e:	9e08      	ldr	r6, [sp, #32]
 8006b30:	3219      	adds	r2, #25
 8006b32:	47b0      	blx	r6
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d1f0      	bne.n	8006b1a <_printf_common+0x8a>
 8006b38:	2001      	movs	r0, #1
 8006b3a:	4240      	negs	r0, r0
 8006b3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b3e:	2030      	movs	r0, #48	; 0x30
 8006b40:	18e1      	adds	r1, r4, r3
 8006b42:	3143      	adds	r1, #67	; 0x43
 8006b44:	7008      	strb	r0, [r1, #0]
 8006b46:	0021      	movs	r1, r4
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	3145      	adds	r1, #69	; 0x45
 8006b4c:	7809      	ldrb	r1, [r1, #0]
 8006b4e:	18a2      	adds	r2, r4, r2
 8006b50:	3243      	adds	r2, #67	; 0x43
 8006b52:	3302      	adds	r3, #2
 8006b54:	7011      	strb	r1, [r2, #0]
 8006b56:	e7c1      	b.n	8006adc <_printf_common+0x4c>
 8006b58:	0022      	movs	r2, r4
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	9901      	ldr	r1, [sp, #4]
 8006b5e:	9800      	ldr	r0, [sp, #0]
 8006b60:	9e08      	ldr	r6, [sp, #32]
 8006b62:	321a      	adds	r2, #26
 8006b64:	47b0      	blx	r6
 8006b66:	1c43      	adds	r3, r0, #1
 8006b68:	d0e6      	beq.n	8006b38 <_printf_common+0xa8>
 8006b6a:	3701      	adds	r7, #1
 8006b6c:	e7d1      	b.n	8006b12 <_printf_common+0x82>
	...

08006b70 <_printf_i>:
 8006b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b72:	b08b      	sub	sp, #44	; 0x2c
 8006b74:	9206      	str	r2, [sp, #24]
 8006b76:	000a      	movs	r2, r1
 8006b78:	3243      	adds	r2, #67	; 0x43
 8006b7a:	9307      	str	r3, [sp, #28]
 8006b7c:	9005      	str	r0, [sp, #20]
 8006b7e:	9204      	str	r2, [sp, #16]
 8006b80:	7e0a      	ldrb	r2, [r1, #24]
 8006b82:	000c      	movs	r4, r1
 8006b84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b86:	2a78      	cmp	r2, #120	; 0x78
 8006b88:	d807      	bhi.n	8006b9a <_printf_i+0x2a>
 8006b8a:	2a62      	cmp	r2, #98	; 0x62
 8006b8c:	d809      	bhi.n	8006ba2 <_printf_i+0x32>
 8006b8e:	2a00      	cmp	r2, #0
 8006b90:	d100      	bne.n	8006b94 <_printf_i+0x24>
 8006b92:	e0c1      	b.n	8006d18 <_printf_i+0x1a8>
 8006b94:	2a58      	cmp	r2, #88	; 0x58
 8006b96:	d100      	bne.n	8006b9a <_printf_i+0x2a>
 8006b98:	e08c      	b.n	8006cb4 <_printf_i+0x144>
 8006b9a:	0026      	movs	r6, r4
 8006b9c:	3642      	adds	r6, #66	; 0x42
 8006b9e:	7032      	strb	r2, [r6, #0]
 8006ba0:	e022      	b.n	8006be8 <_printf_i+0x78>
 8006ba2:	0010      	movs	r0, r2
 8006ba4:	3863      	subs	r0, #99	; 0x63
 8006ba6:	2815      	cmp	r0, #21
 8006ba8:	d8f7      	bhi.n	8006b9a <_printf_i+0x2a>
 8006baa:	f7f9 fabf 	bl	800012c <__gnu_thumb1_case_shi>
 8006bae:	0016      	.short	0x0016
 8006bb0:	fff6001f 	.word	0xfff6001f
 8006bb4:	fff6fff6 	.word	0xfff6fff6
 8006bb8:	001ffff6 	.word	0x001ffff6
 8006bbc:	fff6fff6 	.word	0xfff6fff6
 8006bc0:	fff6fff6 	.word	0xfff6fff6
 8006bc4:	003600a8 	.word	0x003600a8
 8006bc8:	fff6009a 	.word	0xfff6009a
 8006bcc:	00b9fff6 	.word	0x00b9fff6
 8006bd0:	0036fff6 	.word	0x0036fff6
 8006bd4:	fff6fff6 	.word	0xfff6fff6
 8006bd8:	009e      	.short	0x009e
 8006bda:	0026      	movs	r6, r4
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	3642      	adds	r6, #66	; 0x42
 8006be0:	1d11      	adds	r1, r2, #4
 8006be2:	6019      	str	r1, [r3, #0]
 8006be4:	6813      	ldr	r3, [r2, #0]
 8006be6:	7033      	strb	r3, [r6, #0]
 8006be8:	2301      	movs	r3, #1
 8006bea:	e0a7      	b.n	8006d3c <_printf_i+0x1cc>
 8006bec:	6808      	ldr	r0, [r1, #0]
 8006bee:	6819      	ldr	r1, [r3, #0]
 8006bf0:	1d0a      	adds	r2, r1, #4
 8006bf2:	0605      	lsls	r5, r0, #24
 8006bf4:	d50b      	bpl.n	8006c0e <_printf_i+0x9e>
 8006bf6:	680d      	ldr	r5, [r1, #0]
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	2d00      	cmp	r5, #0
 8006bfc:	da03      	bge.n	8006c06 <_printf_i+0x96>
 8006bfe:	232d      	movs	r3, #45	; 0x2d
 8006c00:	9a04      	ldr	r2, [sp, #16]
 8006c02:	426d      	negs	r5, r5
 8006c04:	7013      	strb	r3, [r2, #0]
 8006c06:	4b61      	ldr	r3, [pc, #388]	; (8006d8c <_printf_i+0x21c>)
 8006c08:	270a      	movs	r7, #10
 8006c0a:	9303      	str	r3, [sp, #12]
 8006c0c:	e01b      	b.n	8006c46 <_printf_i+0xd6>
 8006c0e:	680d      	ldr	r5, [r1, #0]
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	0641      	lsls	r1, r0, #25
 8006c14:	d5f1      	bpl.n	8006bfa <_printf_i+0x8a>
 8006c16:	b22d      	sxth	r5, r5
 8006c18:	e7ef      	b.n	8006bfa <_printf_i+0x8a>
 8006c1a:	680d      	ldr	r5, [r1, #0]
 8006c1c:	6819      	ldr	r1, [r3, #0]
 8006c1e:	1d08      	adds	r0, r1, #4
 8006c20:	6018      	str	r0, [r3, #0]
 8006c22:	062e      	lsls	r6, r5, #24
 8006c24:	d501      	bpl.n	8006c2a <_printf_i+0xba>
 8006c26:	680d      	ldr	r5, [r1, #0]
 8006c28:	e003      	b.n	8006c32 <_printf_i+0xc2>
 8006c2a:	066d      	lsls	r5, r5, #25
 8006c2c:	d5fb      	bpl.n	8006c26 <_printf_i+0xb6>
 8006c2e:	680d      	ldr	r5, [r1, #0]
 8006c30:	b2ad      	uxth	r5, r5
 8006c32:	4b56      	ldr	r3, [pc, #344]	; (8006d8c <_printf_i+0x21c>)
 8006c34:	2708      	movs	r7, #8
 8006c36:	9303      	str	r3, [sp, #12]
 8006c38:	2a6f      	cmp	r2, #111	; 0x6f
 8006c3a:	d000      	beq.n	8006c3e <_printf_i+0xce>
 8006c3c:	3702      	adds	r7, #2
 8006c3e:	0023      	movs	r3, r4
 8006c40:	2200      	movs	r2, #0
 8006c42:	3343      	adds	r3, #67	; 0x43
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	6863      	ldr	r3, [r4, #4]
 8006c48:	60a3      	str	r3, [r4, #8]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	db03      	blt.n	8006c56 <_printf_i+0xe6>
 8006c4e:	2204      	movs	r2, #4
 8006c50:	6821      	ldr	r1, [r4, #0]
 8006c52:	4391      	bics	r1, r2
 8006c54:	6021      	str	r1, [r4, #0]
 8006c56:	2d00      	cmp	r5, #0
 8006c58:	d102      	bne.n	8006c60 <_printf_i+0xf0>
 8006c5a:	9e04      	ldr	r6, [sp, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00c      	beq.n	8006c7a <_printf_i+0x10a>
 8006c60:	9e04      	ldr	r6, [sp, #16]
 8006c62:	0028      	movs	r0, r5
 8006c64:	0039      	movs	r1, r7
 8006c66:	f7f9 faf1 	bl	800024c <__aeabi_uidivmod>
 8006c6a:	9b03      	ldr	r3, [sp, #12]
 8006c6c:	3e01      	subs	r6, #1
 8006c6e:	5c5b      	ldrb	r3, [r3, r1]
 8006c70:	7033      	strb	r3, [r6, #0]
 8006c72:	002b      	movs	r3, r5
 8006c74:	0005      	movs	r5, r0
 8006c76:	429f      	cmp	r7, r3
 8006c78:	d9f3      	bls.n	8006c62 <_printf_i+0xf2>
 8006c7a:	2f08      	cmp	r7, #8
 8006c7c:	d109      	bne.n	8006c92 <_printf_i+0x122>
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	07db      	lsls	r3, r3, #31
 8006c82:	d506      	bpl.n	8006c92 <_printf_i+0x122>
 8006c84:	6863      	ldr	r3, [r4, #4]
 8006c86:	6922      	ldr	r2, [r4, #16]
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	dc02      	bgt.n	8006c92 <_printf_i+0x122>
 8006c8c:	2330      	movs	r3, #48	; 0x30
 8006c8e:	3e01      	subs	r6, #1
 8006c90:	7033      	strb	r3, [r6, #0]
 8006c92:	9b04      	ldr	r3, [sp, #16]
 8006c94:	1b9b      	subs	r3, r3, r6
 8006c96:	6123      	str	r3, [r4, #16]
 8006c98:	9b07      	ldr	r3, [sp, #28]
 8006c9a:	0021      	movs	r1, r4
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	9805      	ldr	r0, [sp, #20]
 8006ca0:	9b06      	ldr	r3, [sp, #24]
 8006ca2:	aa09      	add	r2, sp, #36	; 0x24
 8006ca4:	f7ff fef4 	bl	8006a90 <_printf_common>
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	d14c      	bne.n	8006d46 <_printf_i+0x1d6>
 8006cac:	2001      	movs	r0, #1
 8006cae:	4240      	negs	r0, r0
 8006cb0:	b00b      	add	sp, #44	; 0x2c
 8006cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cb4:	3145      	adds	r1, #69	; 0x45
 8006cb6:	700a      	strb	r2, [r1, #0]
 8006cb8:	4a34      	ldr	r2, [pc, #208]	; (8006d8c <_printf_i+0x21c>)
 8006cba:	9203      	str	r2, [sp, #12]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	6821      	ldr	r1, [r4, #0]
 8006cc0:	ca20      	ldmia	r2!, {r5}
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	0608      	lsls	r0, r1, #24
 8006cc6:	d516      	bpl.n	8006cf6 <_printf_i+0x186>
 8006cc8:	07cb      	lsls	r3, r1, #31
 8006cca:	d502      	bpl.n	8006cd2 <_printf_i+0x162>
 8006ccc:	2320      	movs	r3, #32
 8006cce:	4319      	orrs	r1, r3
 8006cd0:	6021      	str	r1, [r4, #0]
 8006cd2:	2710      	movs	r7, #16
 8006cd4:	2d00      	cmp	r5, #0
 8006cd6:	d1b2      	bne.n	8006c3e <_printf_i+0xce>
 8006cd8:	2320      	movs	r3, #32
 8006cda:	6822      	ldr	r2, [r4, #0]
 8006cdc:	439a      	bics	r2, r3
 8006cde:	6022      	str	r2, [r4, #0]
 8006ce0:	e7ad      	b.n	8006c3e <_printf_i+0xce>
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	6809      	ldr	r1, [r1, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	6022      	str	r2, [r4, #0]
 8006cea:	0022      	movs	r2, r4
 8006cec:	2178      	movs	r1, #120	; 0x78
 8006cee:	3245      	adds	r2, #69	; 0x45
 8006cf0:	7011      	strb	r1, [r2, #0]
 8006cf2:	4a27      	ldr	r2, [pc, #156]	; (8006d90 <_printf_i+0x220>)
 8006cf4:	e7e1      	b.n	8006cba <_printf_i+0x14a>
 8006cf6:	0648      	lsls	r0, r1, #25
 8006cf8:	d5e6      	bpl.n	8006cc8 <_printf_i+0x158>
 8006cfa:	b2ad      	uxth	r5, r5
 8006cfc:	e7e4      	b.n	8006cc8 <_printf_i+0x158>
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	680d      	ldr	r5, [r1, #0]
 8006d02:	1d10      	adds	r0, r2, #4
 8006d04:	6949      	ldr	r1, [r1, #20]
 8006d06:	6018      	str	r0, [r3, #0]
 8006d08:	6813      	ldr	r3, [r2, #0]
 8006d0a:	062e      	lsls	r6, r5, #24
 8006d0c:	d501      	bpl.n	8006d12 <_printf_i+0x1a2>
 8006d0e:	6019      	str	r1, [r3, #0]
 8006d10:	e002      	b.n	8006d18 <_printf_i+0x1a8>
 8006d12:	066d      	lsls	r5, r5, #25
 8006d14:	d5fb      	bpl.n	8006d0e <_printf_i+0x19e>
 8006d16:	8019      	strh	r1, [r3, #0]
 8006d18:	2300      	movs	r3, #0
 8006d1a:	9e04      	ldr	r6, [sp, #16]
 8006d1c:	6123      	str	r3, [r4, #16]
 8006d1e:	e7bb      	b.n	8006c98 <_printf_i+0x128>
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	1d11      	adds	r1, r2, #4
 8006d24:	6019      	str	r1, [r3, #0]
 8006d26:	6816      	ldr	r6, [r2, #0]
 8006d28:	2100      	movs	r1, #0
 8006d2a:	0030      	movs	r0, r6
 8006d2c:	6862      	ldr	r2, [r4, #4]
 8006d2e:	f002 fb6b 	bl	8009408 <memchr>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d001      	beq.n	8006d3a <_printf_i+0x1ca>
 8006d36:	1b80      	subs	r0, r0, r6
 8006d38:	6060      	str	r0, [r4, #4]
 8006d3a:	6863      	ldr	r3, [r4, #4]
 8006d3c:	6123      	str	r3, [r4, #16]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	9a04      	ldr	r2, [sp, #16]
 8006d42:	7013      	strb	r3, [r2, #0]
 8006d44:	e7a8      	b.n	8006c98 <_printf_i+0x128>
 8006d46:	6923      	ldr	r3, [r4, #16]
 8006d48:	0032      	movs	r2, r6
 8006d4a:	9906      	ldr	r1, [sp, #24]
 8006d4c:	9805      	ldr	r0, [sp, #20]
 8006d4e:	9d07      	ldr	r5, [sp, #28]
 8006d50:	47a8      	blx	r5
 8006d52:	1c43      	adds	r3, r0, #1
 8006d54:	d0aa      	beq.n	8006cac <_printf_i+0x13c>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	079b      	lsls	r3, r3, #30
 8006d5a:	d415      	bmi.n	8006d88 <_printf_i+0x218>
 8006d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d5e:	68e0      	ldr	r0, [r4, #12]
 8006d60:	4298      	cmp	r0, r3
 8006d62:	daa5      	bge.n	8006cb0 <_printf_i+0x140>
 8006d64:	0018      	movs	r0, r3
 8006d66:	e7a3      	b.n	8006cb0 <_printf_i+0x140>
 8006d68:	0022      	movs	r2, r4
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	9906      	ldr	r1, [sp, #24]
 8006d6e:	9805      	ldr	r0, [sp, #20]
 8006d70:	9e07      	ldr	r6, [sp, #28]
 8006d72:	3219      	adds	r2, #25
 8006d74:	47b0      	blx	r6
 8006d76:	1c43      	adds	r3, r0, #1
 8006d78:	d098      	beq.n	8006cac <_printf_i+0x13c>
 8006d7a:	3501      	adds	r5, #1
 8006d7c:	68e3      	ldr	r3, [r4, #12]
 8006d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d80:	1a9b      	subs	r3, r3, r2
 8006d82:	42ab      	cmp	r3, r5
 8006d84:	dcf0      	bgt.n	8006d68 <_printf_i+0x1f8>
 8006d86:	e7e9      	b.n	8006d5c <_printf_i+0x1ec>
 8006d88:	2500      	movs	r5, #0
 8006d8a:	e7f7      	b.n	8006d7c <_printf_i+0x20c>
 8006d8c:	0800b17e 	.word	0x0800b17e
 8006d90:	0800b18f 	.word	0x0800b18f

08006d94 <_scanf_float>:
 8006d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d96:	b08b      	sub	sp, #44	; 0x2c
 8006d98:	0015      	movs	r5, r2
 8006d9a:	9001      	str	r0, [sp, #4]
 8006d9c:	22ae      	movs	r2, #174	; 0xae
 8006d9e:	2000      	movs	r0, #0
 8006da0:	9306      	str	r3, [sp, #24]
 8006da2:	688b      	ldr	r3, [r1, #8]
 8006da4:	000e      	movs	r6, r1
 8006da6:	1e59      	subs	r1, r3, #1
 8006da8:	0052      	lsls	r2, r2, #1
 8006daa:	9005      	str	r0, [sp, #20]
 8006dac:	4291      	cmp	r1, r2
 8006dae:	d905      	bls.n	8006dbc <_scanf_float+0x28>
 8006db0:	3b5e      	subs	r3, #94	; 0x5e
 8006db2:	3bff      	subs	r3, #255	; 0xff
 8006db4:	9305      	str	r3, [sp, #20]
 8006db6:	235e      	movs	r3, #94	; 0x5e
 8006db8:	33ff      	adds	r3, #255	; 0xff
 8006dba:	60b3      	str	r3, [r6, #8]
 8006dbc:	23f0      	movs	r3, #240	; 0xf0
 8006dbe:	6832      	ldr	r2, [r6, #0]
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	6033      	str	r3, [r6, #0]
 8006dc6:	0033      	movs	r3, r6
 8006dc8:	2400      	movs	r4, #0
 8006dca:	331c      	adds	r3, #28
 8006dcc:	001f      	movs	r7, r3
 8006dce:	9303      	str	r3, [sp, #12]
 8006dd0:	9402      	str	r4, [sp, #8]
 8006dd2:	9408      	str	r4, [sp, #32]
 8006dd4:	9407      	str	r4, [sp, #28]
 8006dd6:	9400      	str	r4, [sp, #0]
 8006dd8:	9404      	str	r4, [sp, #16]
 8006dda:	68b2      	ldr	r2, [r6, #8]
 8006ddc:	2a00      	cmp	r2, #0
 8006dde:	d00a      	beq.n	8006df6 <_scanf_float+0x62>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	2b4e      	cmp	r3, #78	; 0x4e
 8006de6:	d844      	bhi.n	8006e72 <_scanf_float+0xde>
 8006de8:	0018      	movs	r0, r3
 8006dea:	2b40      	cmp	r3, #64	; 0x40
 8006dec:	d82c      	bhi.n	8006e48 <_scanf_float+0xb4>
 8006dee:	382b      	subs	r0, #43	; 0x2b
 8006df0:	b2c1      	uxtb	r1, r0
 8006df2:	290e      	cmp	r1, #14
 8006df4:	d92a      	bls.n	8006e4c <_scanf_float+0xb8>
 8006df6:	9b00      	ldr	r3, [sp, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <_scanf_float+0x70>
 8006dfc:	6832      	ldr	r2, [r6, #0]
 8006dfe:	4ba4      	ldr	r3, [pc, #656]	; (8007090 <_scanf_float+0x2fc>)
 8006e00:	4013      	ands	r3, r2
 8006e02:	6033      	str	r3, [r6, #0]
 8006e04:	9b02      	ldr	r3, [sp, #8]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d900      	bls.n	8006e0e <_scanf_float+0x7a>
 8006e0c:	e0f9      	b.n	8007002 <_scanf_float+0x26e>
 8006e0e:	24be      	movs	r4, #190	; 0xbe
 8006e10:	0064      	lsls	r4, r4, #1
 8006e12:	9b03      	ldr	r3, [sp, #12]
 8006e14:	429f      	cmp	r7, r3
 8006e16:	d900      	bls.n	8006e1a <_scanf_float+0x86>
 8006e18:	e0e9      	b.n	8006fee <_scanf_float+0x25a>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	9302      	str	r3, [sp, #8]
 8006e1e:	e185      	b.n	800712c <_scanf_float+0x398>
 8006e20:	0018      	movs	r0, r3
 8006e22:	3861      	subs	r0, #97	; 0x61
 8006e24:	280d      	cmp	r0, #13
 8006e26:	d8e6      	bhi.n	8006df6 <_scanf_float+0x62>
 8006e28:	f7f9 f980 	bl	800012c <__gnu_thumb1_case_shi>
 8006e2c:	ffe50083 	.word	0xffe50083
 8006e30:	ffe5ffe5 	.word	0xffe5ffe5
 8006e34:	00a200b6 	.word	0x00a200b6
 8006e38:	ffe5ffe5 	.word	0xffe5ffe5
 8006e3c:	ffe50089 	.word	0xffe50089
 8006e40:	ffe5ffe5 	.word	0xffe5ffe5
 8006e44:	0065ffe5 	.word	0x0065ffe5
 8006e48:	3841      	subs	r0, #65	; 0x41
 8006e4a:	e7eb      	b.n	8006e24 <_scanf_float+0x90>
 8006e4c:	280e      	cmp	r0, #14
 8006e4e:	d8d2      	bhi.n	8006df6 <_scanf_float+0x62>
 8006e50:	f7f9 f96c 	bl	800012c <__gnu_thumb1_case_shi>
 8006e54:	ffd1004b 	.word	0xffd1004b
 8006e58:	0098004b 	.word	0x0098004b
 8006e5c:	0020ffd1 	.word	0x0020ffd1
 8006e60:	00400040 	.word	0x00400040
 8006e64:	00400040 	.word	0x00400040
 8006e68:	00400040 	.word	0x00400040
 8006e6c:	00400040 	.word	0x00400040
 8006e70:	0040      	.short	0x0040
 8006e72:	2b6e      	cmp	r3, #110	; 0x6e
 8006e74:	d809      	bhi.n	8006e8a <_scanf_float+0xf6>
 8006e76:	2b60      	cmp	r3, #96	; 0x60
 8006e78:	d8d2      	bhi.n	8006e20 <_scanf_float+0x8c>
 8006e7a:	2b54      	cmp	r3, #84	; 0x54
 8006e7c:	d07d      	beq.n	8006f7a <_scanf_float+0x1e6>
 8006e7e:	2b59      	cmp	r3, #89	; 0x59
 8006e80:	d1b9      	bne.n	8006df6 <_scanf_float+0x62>
 8006e82:	2c07      	cmp	r4, #7
 8006e84:	d1b7      	bne.n	8006df6 <_scanf_float+0x62>
 8006e86:	2408      	movs	r4, #8
 8006e88:	e02c      	b.n	8006ee4 <_scanf_float+0x150>
 8006e8a:	2b74      	cmp	r3, #116	; 0x74
 8006e8c:	d075      	beq.n	8006f7a <_scanf_float+0x1e6>
 8006e8e:	2b79      	cmp	r3, #121	; 0x79
 8006e90:	d0f7      	beq.n	8006e82 <_scanf_float+0xee>
 8006e92:	e7b0      	b.n	8006df6 <_scanf_float+0x62>
 8006e94:	6831      	ldr	r1, [r6, #0]
 8006e96:	05c8      	lsls	r0, r1, #23
 8006e98:	d51c      	bpl.n	8006ed4 <_scanf_float+0x140>
 8006e9a:	2380      	movs	r3, #128	; 0x80
 8006e9c:	4399      	bics	r1, r3
 8006e9e:	9b00      	ldr	r3, [sp, #0]
 8006ea0:	6031      	str	r1, [r6, #0]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	9b05      	ldr	r3, [sp, #20]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <_scanf_float+0x120>
 8006eac:	3b01      	subs	r3, #1
 8006eae:	3201      	adds	r2, #1
 8006eb0:	9305      	str	r3, [sp, #20]
 8006eb2:	60b2      	str	r2, [r6, #8]
 8006eb4:	68b3      	ldr	r3, [r6, #8]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	60b3      	str	r3, [r6, #8]
 8006eba:	6933      	ldr	r3, [r6, #16]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	6133      	str	r3, [r6, #16]
 8006ec0:	686b      	ldr	r3, [r5, #4]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	606b      	str	r3, [r5, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	dc00      	bgt.n	8006ecc <_scanf_float+0x138>
 8006eca:	e086      	b.n	8006fda <_scanf_float+0x246>
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	602b      	str	r3, [r5, #0]
 8006ed2:	e782      	b.n	8006dda <_scanf_float+0x46>
 8006ed4:	9a02      	ldr	r2, [sp, #8]
 8006ed6:	1912      	adds	r2, r2, r4
 8006ed8:	2a00      	cmp	r2, #0
 8006eda:	d18c      	bne.n	8006df6 <_scanf_float+0x62>
 8006edc:	4a6d      	ldr	r2, [pc, #436]	; (8007094 <_scanf_float+0x300>)
 8006ede:	6831      	ldr	r1, [r6, #0]
 8006ee0:	400a      	ands	r2, r1
 8006ee2:	6032      	str	r2, [r6, #0]
 8006ee4:	703b      	strb	r3, [r7, #0]
 8006ee6:	3701      	adds	r7, #1
 8006ee8:	e7e4      	b.n	8006eb4 <_scanf_float+0x120>
 8006eea:	2180      	movs	r1, #128	; 0x80
 8006eec:	6832      	ldr	r2, [r6, #0]
 8006eee:	420a      	tst	r2, r1
 8006ef0:	d081      	beq.n	8006df6 <_scanf_float+0x62>
 8006ef2:	438a      	bics	r2, r1
 8006ef4:	e7f5      	b.n	8006ee2 <_scanf_float+0x14e>
 8006ef6:	9a02      	ldr	r2, [sp, #8]
 8006ef8:	2a00      	cmp	r2, #0
 8006efa:	d10f      	bne.n	8006f1c <_scanf_float+0x188>
 8006efc:	9a00      	ldr	r2, [sp, #0]
 8006efe:	2a00      	cmp	r2, #0
 8006f00:	d10f      	bne.n	8006f22 <_scanf_float+0x18e>
 8006f02:	6832      	ldr	r2, [r6, #0]
 8006f04:	21e0      	movs	r1, #224	; 0xe0
 8006f06:	0010      	movs	r0, r2
 8006f08:	00c9      	lsls	r1, r1, #3
 8006f0a:	4008      	ands	r0, r1
 8006f0c:	4288      	cmp	r0, r1
 8006f0e:	d108      	bne.n	8006f22 <_scanf_float+0x18e>
 8006f10:	4961      	ldr	r1, [pc, #388]	; (8007098 <_scanf_float+0x304>)
 8006f12:	400a      	ands	r2, r1
 8006f14:	6032      	str	r2, [r6, #0]
 8006f16:	2201      	movs	r2, #1
 8006f18:	9202      	str	r2, [sp, #8]
 8006f1a:	e7e3      	b.n	8006ee4 <_scanf_float+0x150>
 8006f1c:	9a02      	ldr	r2, [sp, #8]
 8006f1e:	2a02      	cmp	r2, #2
 8006f20:	d059      	beq.n	8006fd6 <_scanf_float+0x242>
 8006f22:	2c01      	cmp	r4, #1
 8006f24:	d002      	beq.n	8006f2c <_scanf_float+0x198>
 8006f26:	2c04      	cmp	r4, #4
 8006f28:	d000      	beq.n	8006f2c <_scanf_float+0x198>
 8006f2a:	e764      	b.n	8006df6 <_scanf_float+0x62>
 8006f2c:	3401      	adds	r4, #1
 8006f2e:	b2e4      	uxtb	r4, r4
 8006f30:	e7d8      	b.n	8006ee4 <_scanf_float+0x150>
 8006f32:	9a02      	ldr	r2, [sp, #8]
 8006f34:	2a01      	cmp	r2, #1
 8006f36:	d000      	beq.n	8006f3a <_scanf_float+0x1a6>
 8006f38:	e75d      	b.n	8006df6 <_scanf_float+0x62>
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	e7ec      	b.n	8006f18 <_scanf_float+0x184>
 8006f3e:	2c00      	cmp	r4, #0
 8006f40:	d110      	bne.n	8006f64 <_scanf_float+0x1d0>
 8006f42:	9a00      	ldr	r2, [sp, #0]
 8006f44:	2a00      	cmp	r2, #0
 8006f46:	d000      	beq.n	8006f4a <_scanf_float+0x1b6>
 8006f48:	e758      	b.n	8006dfc <_scanf_float+0x68>
 8006f4a:	6832      	ldr	r2, [r6, #0]
 8006f4c:	21e0      	movs	r1, #224	; 0xe0
 8006f4e:	0010      	movs	r0, r2
 8006f50:	00c9      	lsls	r1, r1, #3
 8006f52:	4008      	ands	r0, r1
 8006f54:	4288      	cmp	r0, r1
 8006f56:	d000      	beq.n	8006f5a <_scanf_float+0x1c6>
 8006f58:	e754      	b.n	8006e04 <_scanf_float+0x70>
 8006f5a:	494f      	ldr	r1, [pc, #316]	; (8007098 <_scanf_float+0x304>)
 8006f5c:	3401      	adds	r4, #1
 8006f5e:	400a      	ands	r2, r1
 8006f60:	6032      	str	r2, [r6, #0]
 8006f62:	e7bf      	b.n	8006ee4 <_scanf_float+0x150>
 8006f64:	21fd      	movs	r1, #253	; 0xfd
 8006f66:	1ee2      	subs	r2, r4, #3
 8006f68:	420a      	tst	r2, r1
 8006f6a:	d000      	beq.n	8006f6e <_scanf_float+0x1da>
 8006f6c:	e743      	b.n	8006df6 <_scanf_float+0x62>
 8006f6e:	e7dd      	b.n	8006f2c <_scanf_float+0x198>
 8006f70:	2c02      	cmp	r4, #2
 8006f72:	d000      	beq.n	8006f76 <_scanf_float+0x1e2>
 8006f74:	e73f      	b.n	8006df6 <_scanf_float+0x62>
 8006f76:	2403      	movs	r4, #3
 8006f78:	e7b4      	b.n	8006ee4 <_scanf_float+0x150>
 8006f7a:	2c06      	cmp	r4, #6
 8006f7c:	d000      	beq.n	8006f80 <_scanf_float+0x1ec>
 8006f7e:	e73a      	b.n	8006df6 <_scanf_float+0x62>
 8006f80:	2407      	movs	r4, #7
 8006f82:	e7af      	b.n	8006ee4 <_scanf_float+0x150>
 8006f84:	6832      	ldr	r2, [r6, #0]
 8006f86:	0591      	lsls	r1, r2, #22
 8006f88:	d400      	bmi.n	8006f8c <_scanf_float+0x1f8>
 8006f8a:	e734      	b.n	8006df6 <_scanf_float+0x62>
 8006f8c:	4943      	ldr	r1, [pc, #268]	; (800709c <_scanf_float+0x308>)
 8006f8e:	400a      	ands	r2, r1
 8006f90:	6032      	str	r2, [r6, #0]
 8006f92:	9a00      	ldr	r2, [sp, #0]
 8006f94:	9204      	str	r2, [sp, #16]
 8006f96:	e7a5      	b.n	8006ee4 <_scanf_float+0x150>
 8006f98:	21a0      	movs	r1, #160	; 0xa0
 8006f9a:	2080      	movs	r0, #128	; 0x80
 8006f9c:	6832      	ldr	r2, [r6, #0]
 8006f9e:	00c9      	lsls	r1, r1, #3
 8006fa0:	4011      	ands	r1, r2
 8006fa2:	00c0      	lsls	r0, r0, #3
 8006fa4:	4281      	cmp	r1, r0
 8006fa6:	d006      	beq.n	8006fb6 <_scanf_float+0x222>
 8006fa8:	4202      	tst	r2, r0
 8006faa:	d100      	bne.n	8006fae <_scanf_float+0x21a>
 8006fac:	e723      	b.n	8006df6 <_scanf_float+0x62>
 8006fae:	9900      	ldr	r1, [sp, #0]
 8006fb0:	2900      	cmp	r1, #0
 8006fb2:	d100      	bne.n	8006fb6 <_scanf_float+0x222>
 8006fb4:	e726      	b.n	8006e04 <_scanf_float+0x70>
 8006fb6:	0591      	lsls	r1, r2, #22
 8006fb8:	d404      	bmi.n	8006fc4 <_scanf_float+0x230>
 8006fba:	9900      	ldr	r1, [sp, #0]
 8006fbc:	9804      	ldr	r0, [sp, #16]
 8006fbe:	9708      	str	r7, [sp, #32]
 8006fc0:	1a09      	subs	r1, r1, r0
 8006fc2:	9107      	str	r1, [sp, #28]
 8006fc4:	4934      	ldr	r1, [pc, #208]	; (8007098 <_scanf_float+0x304>)
 8006fc6:	400a      	ands	r2, r1
 8006fc8:	21c0      	movs	r1, #192	; 0xc0
 8006fca:	0049      	lsls	r1, r1, #1
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	6032      	str	r2, [r6, #0]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	9200      	str	r2, [sp, #0]
 8006fd4:	e786      	b.n	8006ee4 <_scanf_float+0x150>
 8006fd6:	2203      	movs	r2, #3
 8006fd8:	e79e      	b.n	8006f18 <_scanf_float+0x184>
 8006fda:	23c0      	movs	r3, #192	; 0xc0
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	0029      	movs	r1, r5
 8006fe0:	58f3      	ldr	r3, [r6, r3]
 8006fe2:	9801      	ldr	r0, [sp, #4]
 8006fe4:	4798      	blx	r3
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d100      	bne.n	8006fec <_scanf_float+0x258>
 8006fea:	e6f6      	b.n	8006dda <_scanf_float+0x46>
 8006fec:	e703      	b.n	8006df6 <_scanf_float+0x62>
 8006fee:	3f01      	subs	r7, #1
 8006ff0:	5933      	ldr	r3, [r6, r4]
 8006ff2:	002a      	movs	r2, r5
 8006ff4:	7839      	ldrb	r1, [r7, #0]
 8006ff6:	9801      	ldr	r0, [sp, #4]
 8006ff8:	4798      	blx	r3
 8006ffa:	6933      	ldr	r3, [r6, #16]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	6133      	str	r3, [r6, #16]
 8007000:	e707      	b.n	8006e12 <_scanf_float+0x7e>
 8007002:	1e63      	subs	r3, r4, #1
 8007004:	2b06      	cmp	r3, #6
 8007006:	d80e      	bhi.n	8007026 <_scanf_float+0x292>
 8007008:	9702      	str	r7, [sp, #8]
 800700a:	2c02      	cmp	r4, #2
 800700c:	d920      	bls.n	8007050 <_scanf_float+0x2bc>
 800700e:	1be3      	subs	r3, r4, r7
 8007010:	b2db      	uxtb	r3, r3
 8007012:	9305      	str	r3, [sp, #20]
 8007014:	9b02      	ldr	r3, [sp, #8]
 8007016:	9a05      	ldr	r2, [sp, #20]
 8007018:	189b      	adds	r3, r3, r2
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b03      	cmp	r3, #3
 800701e:	d827      	bhi.n	8007070 <_scanf_float+0x2dc>
 8007020:	3c03      	subs	r4, #3
 8007022:	b2e4      	uxtb	r4, r4
 8007024:	1b3f      	subs	r7, r7, r4
 8007026:	6833      	ldr	r3, [r6, #0]
 8007028:	05da      	lsls	r2, r3, #23
 800702a:	d554      	bpl.n	80070d6 <_scanf_float+0x342>
 800702c:	055b      	lsls	r3, r3, #21
 800702e:	d537      	bpl.n	80070a0 <_scanf_float+0x30c>
 8007030:	24be      	movs	r4, #190	; 0xbe
 8007032:	0064      	lsls	r4, r4, #1
 8007034:	9b03      	ldr	r3, [sp, #12]
 8007036:	429f      	cmp	r7, r3
 8007038:	d800      	bhi.n	800703c <_scanf_float+0x2a8>
 800703a:	e6ee      	b.n	8006e1a <_scanf_float+0x86>
 800703c:	3f01      	subs	r7, #1
 800703e:	5933      	ldr	r3, [r6, r4]
 8007040:	002a      	movs	r2, r5
 8007042:	7839      	ldrb	r1, [r7, #0]
 8007044:	9801      	ldr	r0, [sp, #4]
 8007046:	4798      	blx	r3
 8007048:	6933      	ldr	r3, [r6, #16]
 800704a:	3b01      	subs	r3, #1
 800704c:	6133      	str	r3, [r6, #16]
 800704e:	e7f1      	b.n	8007034 <_scanf_float+0x2a0>
 8007050:	24be      	movs	r4, #190	; 0xbe
 8007052:	0064      	lsls	r4, r4, #1
 8007054:	9b03      	ldr	r3, [sp, #12]
 8007056:	429f      	cmp	r7, r3
 8007058:	d800      	bhi.n	800705c <_scanf_float+0x2c8>
 800705a:	e6de      	b.n	8006e1a <_scanf_float+0x86>
 800705c:	3f01      	subs	r7, #1
 800705e:	5933      	ldr	r3, [r6, r4]
 8007060:	002a      	movs	r2, r5
 8007062:	7839      	ldrb	r1, [r7, #0]
 8007064:	9801      	ldr	r0, [sp, #4]
 8007066:	4798      	blx	r3
 8007068:	6933      	ldr	r3, [r6, #16]
 800706a:	3b01      	subs	r3, #1
 800706c:	6133      	str	r3, [r6, #16]
 800706e:	e7f1      	b.n	8007054 <_scanf_float+0x2c0>
 8007070:	9b02      	ldr	r3, [sp, #8]
 8007072:	002a      	movs	r2, r5
 8007074:	3b01      	subs	r3, #1
 8007076:	7819      	ldrb	r1, [r3, #0]
 8007078:	9302      	str	r3, [sp, #8]
 800707a:	23be      	movs	r3, #190	; 0xbe
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	58f3      	ldr	r3, [r6, r3]
 8007080:	9801      	ldr	r0, [sp, #4]
 8007082:	9309      	str	r3, [sp, #36]	; 0x24
 8007084:	4798      	blx	r3
 8007086:	6933      	ldr	r3, [r6, #16]
 8007088:	3b01      	subs	r3, #1
 800708a:	6133      	str	r3, [r6, #16]
 800708c:	e7c2      	b.n	8007014 <_scanf_float+0x280>
 800708e:	46c0      	nop			; (mov r8, r8)
 8007090:	fffffeff 	.word	0xfffffeff
 8007094:	fffffe7f 	.word	0xfffffe7f
 8007098:	fffff87f 	.word	0xfffff87f
 800709c:	fffffd7f 	.word	0xfffffd7f
 80070a0:	6933      	ldr	r3, [r6, #16]
 80070a2:	1e7c      	subs	r4, r7, #1
 80070a4:	7821      	ldrb	r1, [r4, #0]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	6133      	str	r3, [r6, #16]
 80070aa:	2965      	cmp	r1, #101	; 0x65
 80070ac:	d00c      	beq.n	80070c8 <_scanf_float+0x334>
 80070ae:	2945      	cmp	r1, #69	; 0x45
 80070b0:	d00a      	beq.n	80070c8 <_scanf_float+0x334>
 80070b2:	23be      	movs	r3, #190	; 0xbe
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	58f3      	ldr	r3, [r6, r3]
 80070b8:	002a      	movs	r2, r5
 80070ba:	9801      	ldr	r0, [sp, #4]
 80070bc:	4798      	blx	r3
 80070be:	6933      	ldr	r3, [r6, #16]
 80070c0:	1ebc      	subs	r4, r7, #2
 80070c2:	3b01      	subs	r3, #1
 80070c4:	7821      	ldrb	r1, [r4, #0]
 80070c6:	6133      	str	r3, [r6, #16]
 80070c8:	23be      	movs	r3, #190	; 0xbe
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	002a      	movs	r2, r5
 80070ce:	58f3      	ldr	r3, [r6, r3]
 80070d0:	9801      	ldr	r0, [sp, #4]
 80070d2:	4798      	blx	r3
 80070d4:	0027      	movs	r7, r4
 80070d6:	6832      	ldr	r2, [r6, #0]
 80070d8:	2310      	movs	r3, #16
 80070da:	0011      	movs	r1, r2
 80070dc:	4019      	ands	r1, r3
 80070de:	9102      	str	r1, [sp, #8]
 80070e0:	421a      	tst	r2, r3
 80070e2:	d158      	bne.n	8007196 <_scanf_float+0x402>
 80070e4:	23c0      	movs	r3, #192	; 0xc0
 80070e6:	7039      	strb	r1, [r7, #0]
 80070e8:	6832      	ldr	r2, [r6, #0]
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	4013      	ands	r3, r2
 80070ee:	2280      	movs	r2, #128	; 0x80
 80070f0:	00d2      	lsls	r2, r2, #3
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d11d      	bne.n	8007132 <_scanf_float+0x39e>
 80070f6:	9b04      	ldr	r3, [sp, #16]
 80070f8:	9a00      	ldr	r2, [sp, #0]
 80070fa:	9900      	ldr	r1, [sp, #0]
 80070fc:	1a9a      	subs	r2, r3, r2
 80070fe:	428b      	cmp	r3, r1
 8007100:	d124      	bne.n	800714c <_scanf_float+0x3b8>
 8007102:	2200      	movs	r2, #0
 8007104:	9903      	ldr	r1, [sp, #12]
 8007106:	9801      	ldr	r0, [sp, #4]
 8007108:	f000 feaa 	bl	8007e60 <_strtod_r>
 800710c:	9b06      	ldr	r3, [sp, #24]
 800710e:	000d      	movs	r5, r1
 8007110:	6831      	ldr	r1, [r6, #0]
 8007112:	0004      	movs	r4, r0
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	078a      	lsls	r2, r1, #30
 8007118:	d525      	bpl.n	8007166 <_scanf_float+0x3d2>
 800711a:	1d1a      	adds	r2, r3, #4
 800711c:	9906      	ldr	r1, [sp, #24]
 800711e:	600a      	str	r2, [r1, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	601c      	str	r4, [r3, #0]
 8007124:	605d      	str	r5, [r3, #4]
 8007126:	68f3      	ldr	r3, [r6, #12]
 8007128:	3301      	adds	r3, #1
 800712a:	60f3      	str	r3, [r6, #12]
 800712c:	9802      	ldr	r0, [sp, #8]
 800712e:	b00b      	add	sp, #44	; 0x2c
 8007130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007132:	9b07      	ldr	r3, [sp, #28]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0e4      	beq.n	8007102 <_scanf_float+0x36e>
 8007138:	9b08      	ldr	r3, [sp, #32]
 800713a:	9a02      	ldr	r2, [sp, #8]
 800713c:	1c59      	adds	r1, r3, #1
 800713e:	9801      	ldr	r0, [sp, #4]
 8007140:	230a      	movs	r3, #10
 8007142:	f000 ff23 	bl	8007f8c <_strtol_r>
 8007146:	9b07      	ldr	r3, [sp, #28]
 8007148:	9f08      	ldr	r7, [sp, #32]
 800714a:	1ac2      	subs	r2, r0, r3
 800714c:	0033      	movs	r3, r6
 800714e:	3370      	adds	r3, #112	; 0x70
 8007150:	33ff      	adds	r3, #255	; 0xff
 8007152:	429f      	cmp	r7, r3
 8007154:	d302      	bcc.n	800715c <_scanf_float+0x3c8>
 8007156:	0037      	movs	r7, r6
 8007158:	376f      	adds	r7, #111	; 0x6f
 800715a:	37ff      	adds	r7, #255	; 0xff
 800715c:	0038      	movs	r0, r7
 800715e:	490f      	ldr	r1, [pc, #60]	; (800719c <_scanf_float+0x408>)
 8007160:	f000 f824 	bl	80071ac <siprintf>
 8007164:	e7cd      	b.n	8007102 <_scanf_float+0x36e>
 8007166:	1d1a      	adds	r2, r3, #4
 8007168:	0749      	lsls	r1, r1, #29
 800716a:	d4d7      	bmi.n	800711c <_scanf_float+0x388>
 800716c:	9906      	ldr	r1, [sp, #24]
 800716e:	0020      	movs	r0, r4
 8007170:	600a      	str	r2, [r1, #0]
 8007172:	681f      	ldr	r7, [r3, #0]
 8007174:	0022      	movs	r2, r4
 8007176:	002b      	movs	r3, r5
 8007178:	0029      	movs	r1, r5
 800717a:	f7fb fa65 	bl	8002648 <__aeabi_dcmpun>
 800717e:	2800      	cmp	r0, #0
 8007180:	d004      	beq.n	800718c <_scanf_float+0x3f8>
 8007182:	4807      	ldr	r0, [pc, #28]	; (80071a0 <_scanf_float+0x40c>)
 8007184:	f000 f80e 	bl	80071a4 <nanf>
 8007188:	6038      	str	r0, [r7, #0]
 800718a:	e7cc      	b.n	8007126 <_scanf_float+0x392>
 800718c:	0020      	movs	r0, r4
 800718e:	0029      	movs	r1, r5
 8007190:	f7fb fb4c 	bl	800282c <__aeabi_d2f>
 8007194:	e7f8      	b.n	8007188 <_scanf_float+0x3f4>
 8007196:	2300      	movs	r3, #0
 8007198:	e640      	b.n	8006e1c <_scanf_float+0x88>
 800719a:	46c0      	nop			; (mov r8, r8)
 800719c:	0800b1a0 	.word	0x0800b1a0
 80071a0:	0800b5a8 	.word	0x0800b5a8

080071a4 <nanf>:
 80071a4:	4800      	ldr	r0, [pc, #0]	; (80071a8 <nanf+0x4>)
 80071a6:	4770      	bx	lr
 80071a8:	7fc00000 	.word	0x7fc00000

080071ac <siprintf>:
 80071ac:	b40e      	push	{r1, r2, r3}
 80071ae:	b500      	push	{lr}
 80071b0:	490b      	ldr	r1, [pc, #44]	; (80071e0 <siprintf+0x34>)
 80071b2:	b09c      	sub	sp, #112	; 0x70
 80071b4:	ab1d      	add	r3, sp, #116	; 0x74
 80071b6:	9002      	str	r0, [sp, #8]
 80071b8:	9006      	str	r0, [sp, #24]
 80071ba:	9107      	str	r1, [sp, #28]
 80071bc:	9104      	str	r1, [sp, #16]
 80071be:	4809      	ldr	r0, [pc, #36]	; (80071e4 <siprintf+0x38>)
 80071c0:	4909      	ldr	r1, [pc, #36]	; (80071e8 <siprintf+0x3c>)
 80071c2:	cb04      	ldmia	r3!, {r2}
 80071c4:	9105      	str	r1, [sp, #20]
 80071c6:	6800      	ldr	r0, [r0, #0]
 80071c8:	a902      	add	r1, sp, #8
 80071ca:	9301      	str	r3, [sp, #4]
 80071cc:	f002 ff6a 	bl	800a0a4 <_svfiprintf_r>
 80071d0:	2300      	movs	r3, #0
 80071d2:	9a02      	ldr	r2, [sp, #8]
 80071d4:	7013      	strb	r3, [r2, #0]
 80071d6:	b01c      	add	sp, #112	; 0x70
 80071d8:	bc08      	pop	{r3}
 80071da:	b003      	add	sp, #12
 80071dc:	4718      	bx	r3
 80071de:	46c0      	nop			; (mov r8, r8)
 80071e0:	7fffffff 	.word	0x7fffffff
 80071e4:	2000000c 	.word	0x2000000c
 80071e8:	ffff0208 	.word	0xffff0208

080071ec <strcat>:
 80071ec:	0002      	movs	r2, r0
 80071ee:	b510      	push	{r4, lr}
 80071f0:	7813      	ldrb	r3, [r2, #0]
 80071f2:	0014      	movs	r4, r2
 80071f4:	3201      	adds	r2, #1
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1fa      	bne.n	80071f0 <strcat+0x4>
 80071fa:	5cca      	ldrb	r2, [r1, r3]
 80071fc:	54e2      	strb	r2, [r4, r3]
 80071fe:	3301      	adds	r3, #1
 8007200:	2a00      	cmp	r2, #0
 8007202:	d1fa      	bne.n	80071fa <strcat+0xe>
 8007204:	bd10      	pop	{r4, pc}
	...

08007208 <sulp>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	0016      	movs	r6, r2
 800720c:	000d      	movs	r5, r1
 800720e:	f002 fc93 	bl	8009b38 <__ulp>
 8007212:	2e00      	cmp	r6, #0
 8007214:	d00d      	beq.n	8007232 <sulp+0x2a>
 8007216:	236b      	movs	r3, #107	; 0x6b
 8007218:	006a      	lsls	r2, r5, #1
 800721a:	0d52      	lsrs	r2, r2, #21
 800721c:	1a9b      	subs	r3, r3, r2
 800721e:	2b00      	cmp	r3, #0
 8007220:	dd07      	ble.n	8007232 <sulp+0x2a>
 8007222:	2400      	movs	r4, #0
 8007224:	4a03      	ldr	r2, [pc, #12]	; (8007234 <sulp+0x2c>)
 8007226:	051b      	lsls	r3, r3, #20
 8007228:	189d      	adds	r5, r3, r2
 800722a:	002b      	movs	r3, r5
 800722c:	0022      	movs	r2, r4
 800722e:	f7fa fc0d 	bl	8001a4c <__aeabi_dmul>
 8007232:	bd70      	pop	{r4, r5, r6, pc}
 8007234:	3ff00000 	.word	0x3ff00000

08007238 <_strtod_l>:
 8007238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800723a:	001d      	movs	r5, r3
 800723c:	2300      	movs	r3, #0
 800723e:	b0a5      	sub	sp, #148	; 0x94
 8007240:	9320      	str	r3, [sp, #128]	; 0x80
 8007242:	4bac      	ldr	r3, [pc, #688]	; (80074f4 <_strtod_l+0x2bc>)
 8007244:	9005      	str	r0, [sp, #20]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	9108      	str	r1, [sp, #32]
 800724a:	0018      	movs	r0, r3
 800724c:	9307      	str	r3, [sp, #28]
 800724e:	921b      	str	r2, [sp, #108]	; 0x6c
 8007250:	f7f8 ff5a 	bl	8000108 <strlen>
 8007254:	2600      	movs	r6, #0
 8007256:	0004      	movs	r4, r0
 8007258:	2700      	movs	r7, #0
 800725a:	9b08      	ldr	r3, [sp, #32]
 800725c:	931f      	str	r3, [sp, #124]	; 0x7c
 800725e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007260:	7813      	ldrb	r3, [r2, #0]
 8007262:	2b2b      	cmp	r3, #43	; 0x2b
 8007264:	d058      	beq.n	8007318 <_strtod_l+0xe0>
 8007266:	d844      	bhi.n	80072f2 <_strtod_l+0xba>
 8007268:	2b0d      	cmp	r3, #13
 800726a:	d83d      	bhi.n	80072e8 <_strtod_l+0xb0>
 800726c:	2b08      	cmp	r3, #8
 800726e:	d83d      	bhi.n	80072ec <_strtod_l+0xb4>
 8007270:	2b00      	cmp	r3, #0
 8007272:	d047      	beq.n	8007304 <_strtod_l+0xcc>
 8007274:	2300      	movs	r3, #0
 8007276:	930e      	str	r3, [sp, #56]	; 0x38
 8007278:	2200      	movs	r2, #0
 800727a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800727c:	920a      	str	r2, [sp, #40]	; 0x28
 800727e:	9306      	str	r3, [sp, #24]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	2b30      	cmp	r3, #48	; 0x30
 8007284:	d000      	beq.n	8007288 <_strtod_l+0x50>
 8007286:	e07f      	b.n	8007388 <_strtod_l+0x150>
 8007288:	9b06      	ldr	r3, [sp, #24]
 800728a:	3220      	adds	r2, #32
 800728c:	785b      	ldrb	r3, [r3, #1]
 800728e:	4393      	bics	r3, r2
 8007290:	2b58      	cmp	r3, #88	; 0x58
 8007292:	d000      	beq.n	8007296 <_strtod_l+0x5e>
 8007294:	e06e      	b.n	8007374 <_strtod_l+0x13c>
 8007296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007298:	9502      	str	r5, [sp, #8]
 800729a:	9301      	str	r3, [sp, #4]
 800729c:	ab20      	add	r3, sp, #128	; 0x80
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	4a95      	ldr	r2, [pc, #596]	; (80074f8 <_strtod_l+0x2c0>)
 80072a2:	ab21      	add	r3, sp, #132	; 0x84
 80072a4:	9805      	ldr	r0, [sp, #20]
 80072a6:	a91f      	add	r1, sp, #124	; 0x7c
 80072a8:	f001 fd84 	bl	8008db4 <__gethex>
 80072ac:	2307      	movs	r3, #7
 80072ae:	0005      	movs	r5, r0
 80072b0:	0004      	movs	r4, r0
 80072b2:	401d      	ands	r5, r3
 80072b4:	4218      	tst	r0, r3
 80072b6:	d006      	beq.n	80072c6 <_strtod_l+0x8e>
 80072b8:	2d06      	cmp	r5, #6
 80072ba:	d12f      	bne.n	800731c <_strtod_l+0xe4>
 80072bc:	9b06      	ldr	r3, [sp, #24]
 80072be:	3301      	adds	r3, #1
 80072c0:	931f      	str	r3, [sp, #124]	; 0x7c
 80072c2:	2300      	movs	r3, #0
 80072c4:	930e      	str	r3, [sp, #56]	; 0x38
 80072c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <_strtod_l+0x9a>
 80072cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072ce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01c      	beq.n	8007312 <_strtod_l+0xda>
 80072d8:	2380      	movs	r3, #128	; 0x80
 80072da:	0032      	movs	r2, r6
 80072dc:	061b      	lsls	r3, r3, #24
 80072de:	18fb      	adds	r3, r7, r3
 80072e0:	0010      	movs	r0, r2
 80072e2:	0019      	movs	r1, r3
 80072e4:	b025      	add	sp, #148	; 0x94
 80072e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072e8:	2b20      	cmp	r3, #32
 80072ea:	d1c3      	bne.n	8007274 <_strtod_l+0x3c>
 80072ec:	3201      	adds	r2, #1
 80072ee:	921f      	str	r2, [sp, #124]	; 0x7c
 80072f0:	e7b5      	b.n	800725e <_strtod_l+0x26>
 80072f2:	2b2d      	cmp	r3, #45	; 0x2d
 80072f4:	d1be      	bne.n	8007274 <_strtod_l+0x3c>
 80072f6:	3b2c      	subs	r3, #44	; 0x2c
 80072f8:	930e      	str	r3, [sp, #56]	; 0x38
 80072fa:	1c53      	adds	r3, r2, #1
 80072fc:	931f      	str	r3, [sp, #124]	; 0x7c
 80072fe:	7853      	ldrb	r3, [r2, #1]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1b9      	bne.n	8007278 <_strtod_l+0x40>
 8007304:	9b08      	ldr	r3, [sp, #32]
 8007306:	931f      	str	r3, [sp, #124]	; 0x7c
 8007308:	2300      	movs	r3, #0
 800730a:	930e      	str	r3, [sp, #56]	; 0x38
 800730c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1dc      	bne.n	80072cc <_strtod_l+0x94>
 8007312:	0032      	movs	r2, r6
 8007314:	003b      	movs	r3, r7
 8007316:	e7e3      	b.n	80072e0 <_strtod_l+0xa8>
 8007318:	2300      	movs	r3, #0
 800731a:	e7ed      	b.n	80072f8 <_strtod_l+0xc0>
 800731c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800731e:	2a00      	cmp	r2, #0
 8007320:	d007      	beq.n	8007332 <_strtod_l+0xfa>
 8007322:	2135      	movs	r1, #53	; 0x35
 8007324:	a822      	add	r0, sp, #136	; 0x88
 8007326:	f002 fd08 	bl	8009d3a <__copybits>
 800732a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800732c:	9805      	ldr	r0, [sp, #20]
 800732e:	f002 f8c3 	bl	80094b8 <_Bfree>
 8007332:	1e68      	subs	r0, r5, #1
 8007334:	2804      	cmp	r0, #4
 8007336:	d806      	bhi.n	8007346 <_strtod_l+0x10e>
 8007338:	f7f8 feee 	bl	8000118 <__gnu_thumb1_case_uqi>
 800733c:	1816030b 	.word	0x1816030b
 8007340:	0b          	.byte	0x0b
 8007341:	00          	.byte	0x00
 8007342:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007344:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8007346:	0723      	lsls	r3, r4, #28
 8007348:	d5bd      	bpl.n	80072c6 <_strtod_l+0x8e>
 800734a:	2380      	movs	r3, #128	; 0x80
 800734c:	061b      	lsls	r3, r3, #24
 800734e:	431f      	orrs	r7, r3
 8007350:	e7b9      	b.n	80072c6 <_strtod_l+0x8e>
 8007352:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007354:	4a69      	ldr	r2, [pc, #420]	; (80074fc <_strtod_l+0x2c4>)
 8007356:	496a      	ldr	r1, [pc, #424]	; (8007500 <_strtod_l+0x2c8>)
 8007358:	401a      	ands	r2, r3
 800735a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800735c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800735e:	185b      	adds	r3, r3, r1
 8007360:	051b      	lsls	r3, r3, #20
 8007362:	431a      	orrs	r2, r3
 8007364:	0017      	movs	r7, r2
 8007366:	e7ee      	b.n	8007346 <_strtod_l+0x10e>
 8007368:	4f66      	ldr	r7, [pc, #408]	; (8007504 <_strtod_l+0x2cc>)
 800736a:	e7ec      	b.n	8007346 <_strtod_l+0x10e>
 800736c:	2601      	movs	r6, #1
 800736e:	4f66      	ldr	r7, [pc, #408]	; (8007508 <_strtod_l+0x2d0>)
 8007370:	4276      	negs	r6, r6
 8007372:	e7e8      	b.n	8007346 <_strtod_l+0x10e>
 8007374:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	921f      	str	r2, [sp, #124]	; 0x7c
 800737a:	785b      	ldrb	r3, [r3, #1]
 800737c:	2b30      	cmp	r3, #48	; 0x30
 800737e:	d0f9      	beq.n	8007374 <_strtod_l+0x13c>
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0a0      	beq.n	80072c6 <_strtod_l+0x8e>
 8007384:	2301      	movs	r3, #1
 8007386:	930a      	str	r3, [sp, #40]	; 0x28
 8007388:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800738a:	220a      	movs	r2, #10
 800738c:	9310      	str	r3, [sp, #64]	; 0x40
 800738e:	2300      	movs	r3, #0
 8007390:	930f      	str	r3, [sp, #60]	; 0x3c
 8007392:	930b      	str	r3, [sp, #44]	; 0x2c
 8007394:	9309      	str	r3, [sp, #36]	; 0x24
 8007396:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007398:	7805      	ldrb	r5, [r0, #0]
 800739a:	002b      	movs	r3, r5
 800739c:	3b30      	subs	r3, #48	; 0x30
 800739e:	b2d9      	uxtb	r1, r3
 80073a0:	2909      	cmp	r1, #9
 80073a2:	d927      	bls.n	80073f4 <_strtod_l+0x1bc>
 80073a4:	0022      	movs	r2, r4
 80073a6:	9907      	ldr	r1, [sp, #28]
 80073a8:	f002 ff94 	bl	800a2d4 <strncmp>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	d033      	beq.n	8007418 <_strtod_l+0x1e0>
 80073b0:	2000      	movs	r0, #0
 80073b2:	002b      	movs	r3, r5
 80073b4:	4684      	mov	ip, r0
 80073b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073b8:	900c      	str	r0, [sp, #48]	; 0x30
 80073ba:	9206      	str	r2, [sp, #24]
 80073bc:	2220      	movs	r2, #32
 80073be:	0019      	movs	r1, r3
 80073c0:	4391      	bics	r1, r2
 80073c2:	000a      	movs	r2, r1
 80073c4:	2100      	movs	r1, #0
 80073c6:	9107      	str	r1, [sp, #28]
 80073c8:	2a45      	cmp	r2, #69	; 0x45
 80073ca:	d000      	beq.n	80073ce <_strtod_l+0x196>
 80073cc:	e0c5      	b.n	800755a <_strtod_l+0x322>
 80073ce:	9b06      	ldr	r3, [sp, #24]
 80073d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073d2:	4303      	orrs	r3, r0
 80073d4:	4313      	orrs	r3, r2
 80073d6:	428b      	cmp	r3, r1
 80073d8:	d094      	beq.n	8007304 <_strtod_l+0xcc>
 80073da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80073dc:	9308      	str	r3, [sp, #32]
 80073de:	3301      	adds	r3, #1
 80073e0:	931f      	str	r3, [sp, #124]	; 0x7c
 80073e2:	9b08      	ldr	r3, [sp, #32]
 80073e4:	785b      	ldrb	r3, [r3, #1]
 80073e6:	2b2b      	cmp	r3, #43	; 0x2b
 80073e8:	d076      	beq.n	80074d8 <_strtod_l+0x2a0>
 80073ea:	000c      	movs	r4, r1
 80073ec:	2b2d      	cmp	r3, #45	; 0x2d
 80073ee:	d179      	bne.n	80074e4 <_strtod_l+0x2ac>
 80073f0:	2401      	movs	r4, #1
 80073f2:	e072      	b.n	80074da <_strtod_l+0x2a2>
 80073f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073f6:	2908      	cmp	r1, #8
 80073f8:	dc09      	bgt.n	800740e <_strtod_l+0x1d6>
 80073fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073fc:	4351      	muls	r1, r2
 80073fe:	185b      	adds	r3, r3, r1
 8007400:	930b      	str	r3, [sp, #44]	; 0x2c
 8007402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007404:	3001      	adds	r0, #1
 8007406:	3301      	adds	r3, #1
 8007408:	9309      	str	r3, [sp, #36]	; 0x24
 800740a:	901f      	str	r0, [sp, #124]	; 0x7c
 800740c:	e7c3      	b.n	8007396 <_strtod_l+0x15e>
 800740e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007410:	4351      	muls	r1, r2
 8007412:	185b      	adds	r3, r3, r1
 8007414:	930f      	str	r3, [sp, #60]	; 0x3c
 8007416:	e7f4      	b.n	8007402 <_strtod_l+0x1ca>
 8007418:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800741a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800741c:	191c      	adds	r4, r3, r4
 800741e:	941f      	str	r4, [sp, #124]	; 0x7c
 8007420:	7823      	ldrb	r3, [r4, #0]
 8007422:	2a00      	cmp	r2, #0
 8007424:	d039      	beq.n	800749a <_strtod_l+0x262>
 8007426:	900c      	str	r0, [sp, #48]	; 0x30
 8007428:	9206      	str	r2, [sp, #24]
 800742a:	001a      	movs	r2, r3
 800742c:	3a30      	subs	r2, #48	; 0x30
 800742e:	2a09      	cmp	r2, #9
 8007430:	d912      	bls.n	8007458 <_strtod_l+0x220>
 8007432:	2201      	movs	r2, #1
 8007434:	4694      	mov	ip, r2
 8007436:	e7c1      	b.n	80073bc <_strtod_l+0x184>
 8007438:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800743a:	3001      	adds	r0, #1
 800743c:	1c5a      	adds	r2, r3, #1
 800743e:	921f      	str	r2, [sp, #124]	; 0x7c
 8007440:	785b      	ldrb	r3, [r3, #1]
 8007442:	2b30      	cmp	r3, #48	; 0x30
 8007444:	d0f8      	beq.n	8007438 <_strtod_l+0x200>
 8007446:	001a      	movs	r2, r3
 8007448:	3a31      	subs	r2, #49	; 0x31
 800744a:	2a08      	cmp	r2, #8
 800744c:	d83f      	bhi.n	80074ce <_strtod_l+0x296>
 800744e:	900c      	str	r0, [sp, #48]	; 0x30
 8007450:	2000      	movs	r0, #0
 8007452:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007454:	9006      	str	r0, [sp, #24]
 8007456:	9210      	str	r2, [sp, #64]	; 0x40
 8007458:	001a      	movs	r2, r3
 800745a:	1c41      	adds	r1, r0, #1
 800745c:	3a30      	subs	r2, #48	; 0x30
 800745e:	2b30      	cmp	r3, #48	; 0x30
 8007460:	d015      	beq.n	800748e <_strtod_l+0x256>
 8007462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007464:	185b      	adds	r3, r3, r1
 8007466:	210a      	movs	r1, #10
 8007468:	930c      	str	r3, [sp, #48]	; 0x30
 800746a:	9b06      	ldr	r3, [sp, #24]
 800746c:	18c4      	adds	r4, r0, r3
 800746e:	42a3      	cmp	r3, r4
 8007470:	d115      	bne.n	800749e <_strtod_l+0x266>
 8007472:	9906      	ldr	r1, [sp, #24]
 8007474:	9b06      	ldr	r3, [sp, #24]
 8007476:	3101      	adds	r1, #1
 8007478:	1809      	adds	r1, r1, r0
 800747a:	181b      	adds	r3, r3, r0
 800747c:	9106      	str	r1, [sp, #24]
 800747e:	2b08      	cmp	r3, #8
 8007480:	dc1b      	bgt.n	80074ba <_strtod_l+0x282>
 8007482:	230a      	movs	r3, #10
 8007484:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007486:	434b      	muls	r3, r1
 8007488:	2100      	movs	r1, #0
 800748a:	18d3      	adds	r3, r2, r3
 800748c:	930b      	str	r3, [sp, #44]	; 0x2c
 800748e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007490:	0008      	movs	r0, r1
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	921f      	str	r2, [sp, #124]	; 0x7c
 8007496:	785b      	ldrb	r3, [r3, #1]
 8007498:	e7c7      	b.n	800742a <_strtod_l+0x1f2>
 800749a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800749c:	e7d1      	b.n	8007442 <_strtod_l+0x20a>
 800749e:	2b08      	cmp	r3, #8
 80074a0:	dc04      	bgt.n	80074ac <_strtod_l+0x274>
 80074a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80074a4:	434d      	muls	r5, r1
 80074a6:	950b      	str	r5, [sp, #44]	; 0x2c
 80074a8:	3301      	adds	r3, #1
 80074aa:	e7e0      	b.n	800746e <_strtod_l+0x236>
 80074ac:	1c5d      	adds	r5, r3, #1
 80074ae:	2d10      	cmp	r5, #16
 80074b0:	dcfa      	bgt.n	80074a8 <_strtod_l+0x270>
 80074b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80074b4:	434d      	muls	r5, r1
 80074b6:	950f      	str	r5, [sp, #60]	; 0x3c
 80074b8:	e7f6      	b.n	80074a8 <_strtod_l+0x270>
 80074ba:	9b06      	ldr	r3, [sp, #24]
 80074bc:	2100      	movs	r1, #0
 80074be:	2b10      	cmp	r3, #16
 80074c0:	dce5      	bgt.n	800748e <_strtod_l+0x256>
 80074c2:	230a      	movs	r3, #10
 80074c4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80074c6:	4343      	muls	r3, r0
 80074c8:	18d3      	adds	r3, r2, r3
 80074ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80074cc:	e7df      	b.n	800748e <_strtod_l+0x256>
 80074ce:	2200      	movs	r2, #0
 80074d0:	920c      	str	r2, [sp, #48]	; 0x30
 80074d2:	9206      	str	r2, [sp, #24]
 80074d4:	3201      	adds	r2, #1
 80074d6:	e7ad      	b.n	8007434 <_strtod_l+0x1fc>
 80074d8:	2400      	movs	r4, #0
 80074da:	9b08      	ldr	r3, [sp, #32]
 80074dc:	3302      	adds	r3, #2
 80074de:	931f      	str	r3, [sp, #124]	; 0x7c
 80074e0:	9b08      	ldr	r3, [sp, #32]
 80074e2:	789b      	ldrb	r3, [r3, #2]
 80074e4:	001a      	movs	r2, r3
 80074e6:	3a30      	subs	r2, #48	; 0x30
 80074e8:	2a09      	cmp	r2, #9
 80074ea:	d913      	bls.n	8007514 <_strtod_l+0x2dc>
 80074ec:	9a08      	ldr	r2, [sp, #32]
 80074ee:	921f      	str	r2, [sp, #124]	; 0x7c
 80074f0:	2200      	movs	r2, #0
 80074f2:	e031      	b.n	8007558 <_strtod_l+0x320>
 80074f4:	0800b3f0 	.word	0x0800b3f0
 80074f8:	0800b1a8 	.word	0x0800b1a8
 80074fc:	ffefffff 	.word	0xffefffff
 8007500:	00000433 	.word	0x00000433
 8007504:	7ff00000 	.word	0x7ff00000
 8007508:	7fffffff 	.word	0x7fffffff
 800750c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	921f      	str	r2, [sp, #124]	; 0x7c
 8007512:	785b      	ldrb	r3, [r3, #1]
 8007514:	2b30      	cmp	r3, #48	; 0x30
 8007516:	d0f9      	beq.n	800750c <_strtod_l+0x2d4>
 8007518:	2200      	movs	r2, #0
 800751a:	9207      	str	r2, [sp, #28]
 800751c:	001a      	movs	r2, r3
 800751e:	3a31      	subs	r2, #49	; 0x31
 8007520:	2a08      	cmp	r2, #8
 8007522:	d81a      	bhi.n	800755a <_strtod_l+0x322>
 8007524:	3b30      	subs	r3, #48	; 0x30
 8007526:	001a      	movs	r2, r3
 8007528:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800752a:	9307      	str	r3, [sp, #28]
 800752c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800752e:	1c59      	adds	r1, r3, #1
 8007530:	911f      	str	r1, [sp, #124]	; 0x7c
 8007532:	785b      	ldrb	r3, [r3, #1]
 8007534:	001d      	movs	r5, r3
 8007536:	3d30      	subs	r5, #48	; 0x30
 8007538:	2d09      	cmp	r5, #9
 800753a:	d939      	bls.n	80075b0 <_strtod_l+0x378>
 800753c:	9d07      	ldr	r5, [sp, #28]
 800753e:	1b49      	subs	r1, r1, r5
 8007540:	4db0      	ldr	r5, [pc, #704]	; (8007804 <_strtod_l+0x5cc>)
 8007542:	9507      	str	r5, [sp, #28]
 8007544:	2908      	cmp	r1, #8
 8007546:	dc03      	bgt.n	8007550 <_strtod_l+0x318>
 8007548:	9207      	str	r2, [sp, #28]
 800754a:	42aa      	cmp	r2, r5
 800754c:	dd00      	ble.n	8007550 <_strtod_l+0x318>
 800754e:	9507      	str	r5, [sp, #28]
 8007550:	2c00      	cmp	r4, #0
 8007552:	d002      	beq.n	800755a <_strtod_l+0x322>
 8007554:	9a07      	ldr	r2, [sp, #28]
 8007556:	4252      	negs	r2, r2
 8007558:	9207      	str	r2, [sp, #28]
 800755a:	9a06      	ldr	r2, [sp, #24]
 800755c:	2a00      	cmp	r2, #0
 800755e:	d14b      	bne.n	80075f8 <_strtod_l+0x3c0>
 8007560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007562:	4310      	orrs	r0, r2
 8007564:	d000      	beq.n	8007568 <_strtod_l+0x330>
 8007566:	e6ae      	b.n	80072c6 <_strtod_l+0x8e>
 8007568:	4662      	mov	r2, ip
 800756a:	2a00      	cmp	r2, #0
 800756c:	d000      	beq.n	8007570 <_strtod_l+0x338>
 800756e:	e6c9      	b.n	8007304 <_strtod_l+0xcc>
 8007570:	2b69      	cmp	r3, #105	; 0x69
 8007572:	d025      	beq.n	80075c0 <_strtod_l+0x388>
 8007574:	dc21      	bgt.n	80075ba <_strtod_l+0x382>
 8007576:	2b49      	cmp	r3, #73	; 0x49
 8007578:	d022      	beq.n	80075c0 <_strtod_l+0x388>
 800757a:	2b4e      	cmp	r3, #78	; 0x4e
 800757c:	d000      	beq.n	8007580 <_strtod_l+0x348>
 800757e:	e6c1      	b.n	8007304 <_strtod_l+0xcc>
 8007580:	49a1      	ldr	r1, [pc, #644]	; (8007808 <_strtod_l+0x5d0>)
 8007582:	a81f      	add	r0, sp, #124	; 0x7c
 8007584:	f001 fe64 	bl	8009250 <__match>
 8007588:	2800      	cmp	r0, #0
 800758a:	d100      	bne.n	800758e <_strtod_l+0x356>
 800758c:	e6ba      	b.n	8007304 <_strtod_l+0xcc>
 800758e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b28      	cmp	r3, #40	; 0x28
 8007594:	d12a      	bne.n	80075ec <_strtod_l+0x3b4>
 8007596:	499d      	ldr	r1, [pc, #628]	; (800780c <_strtod_l+0x5d4>)
 8007598:	aa22      	add	r2, sp, #136	; 0x88
 800759a:	a81f      	add	r0, sp, #124	; 0x7c
 800759c:	f001 fe6c 	bl	8009278 <__hexnan>
 80075a0:	2805      	cmp	r0, #5
 80075a2:	d123      	bne.n	80075ec <_strtod_l+0x3b4>
 80075a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075a6:	4a9a      	ldr	r2, [pc, #616]	; (8007810 <_strtod_l+0x5d8>)
 80075a8:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80075aa:	431a      	orrs	r2, r3
 80075ac:	0017      	movs	r7, r2
 80075ae:	e68a      	b.n	80072c6 <_strtod_l+0x8e>
 80075b0:	210a      	movs	r1, #10
 80075b2:	434a      	muls	r2, r1
 80075b4:	18d2      	adds	r2, r2, r3
 80075b6:	3a30      	subs	r2, #48	; 0x30
 80075b8:	e7b8      	b.n	800752c <_strtod_l+0x2f4>
 80075ba:	2b6e      	cmp	r3, #110	; 0x6e
 80075bc:	d0e0      	beq.n	8007580 <_strtod_l+0x348>
 80075be:	e6a1      	b.n	8007304 <_strtod_l+0xcc>
 80075c0:	4994      	ldr	r1, [pc, #592]	; (8007814 <_strtod_l+0x5dc>)
 80075c2:	a81f      	add	r0, sp, #124	; 0x7c
 80075c4:	f001 fe44 	bl	8009250 <__match>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d100      	bne.n	80075ce <_strtod_l+0x396>
 80075cc:	e69a      	b.n	8007304 <_strtod_l+0xcc>
 80075ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80075d0:	4991      	ldr	r1, [pc, #580]	; (8007818 <_strtod_l+0x5e0>)
 80075d2:	3b01      	subs	r3, #1
 80075d4:	a81f      	add	r0, sp, #124	; 0x7c
 80075d6:	931f      	str	r3, [sp, #124]	; 0x7c
 80075d8:	f001 fe3a 	bl	8009250 <__match>
 80075dc:	2800      	cmp	r0, #0
 80075de:	d102      	bne.n	80075e6 <_strtod_l+0x3ae>
 80075e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80075e2:	3301      	adds	r3, #1
 80075e4:	931f      	str	r3, [sp, #124]	; 0x7c
 80075e6:	2600      	movs	r6, #0
 80075e8:	4f89      	ldr	r7, [pc, #548]	; (8007810 <_strtod_l+0x5d8>)
 80075ea:	e66c      	b.n	80072c6 <_strtod_l+0x8e>
 80075ec:	488b      	ldr	r0, [pc, #556]	; (800781c <_strtod_l+0x5e4>)
 80075ee:	f002 fe59 	bl	800a2a4 <nan>
 80075f2:	0006      	movs	r6, r0
 80075f4:	000f      	movs	r7, r1
 80075f6:	e666      	b.n	80072c6 <_strtod_l+0x8e>
 80075f8:	9b07      	ldr	r3, [sp, #28]
 80075fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075fc:	1a9b      	subs	r3, r3, r2
 80075fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <_strtod_l+0x3d2>
 8007606:	9b06      	ldr	r3, [sp, #24]
 8007608:	9309      	str	r3, [sp, #36]	; 0x24
 800760a:	9c06      	ldr	r4, [sp, #24]
 800760c:	2c10      	cmp	r4, #16
 800760e:	dd00      	ble.n	8007612 <_strtod_l+0x3da>
 8007610:	2410      	movs	r4, #16
 8007612:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007614:	f7fb f89c 	bl	8002750 <__aeabi_ui2d>
 8007618:	9b06      	ldr	r3, [sp, #24]
 800761a:	0006      	movs	r6, r0
 800761c:	000f      	movs	r7, r1
 800761e:	2b09      	cmp	r3, #9
 8007620:	dd15      	ble.n	800764e <_strtod_l+0x416>
 8007622:	0022      	movs	r2, r4
 8007624:	4b7e      	ldr	r3, [pc, #504]	; (8007820 <_strtod_l+0x5e8>)
 8007626:	3a09      	subs	r2, #9
 8007628:	00d2      	lsls	r2, r2, #3
 800762a:	189b      	adds	r3, r3, r2
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f7fa fa0c 	bl	8001a4c <__aeabi_dmul>
 8007634:	0006      	movs	r6, r0
 8007636:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007638:	000f      	movs	r7, r1
 800763a:	f7fb f889 	bl	8002750 <__aeabi_ui2d>
 800763e:	0002      	movs	r2, r0
 8007640:	000b      	movs	r3, r1
 8007642:	0030      	movs	r0, r6
 8007644:	0039      	movs	r1, r7
 8007646:	f7f9 fac3 	bl	8000bd0 <__aeabi_dadd>
 800764a:	0006      	movs	r6, r0
 800764c:	000f      	movs	r7, r1
 800764e:	9b06      	ldr	r3, [sp, #24]
 8007650:	2b0f      	cmp	r3, #15
 8007652:	dc39      	bgt.n	80076c8 <_strtod_l+0x490>
 8007654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007656:	2b00      	cmp	r3, #0
 8007658:	d100      	bne.n	800765c <_strtod_l+0x424>
 800765a:	e634      	b.n	80072c6 <_strtod_l+0x8e>
 800765c:	dd24      	ble.n	80076a8 <_strtod_l+0x470>
 800765e:	2b16      	cmp	r3, #22
 8007660:	dc09      	bgt.n	8007676 <_strtod_l+0x43e>
 8007662:	496f      	ldr	r1, [pc, #444]	; (8007820 <_strtod_l+0x5e8>)
 8007664:	00db      	lsls	r3, r3, #3
 8007666:	18c9      	adds	r1, r1, r3
 8007668:	0032      	movs	r2, r6
 800766a:	6808      	ldr	r0, [r1, #0]
 800766c:	6849      	ldr	r1, [r1, #4]
 800766e:	003b      	movs	r3, r7
 8007670:	f7fa f9ec 	bl	8001a4c <__aeabi_dmul>
 8007674:	e7bd      	b.n	80075f2 <_strtod_l+0x3ba>
 8007676:	2325      	movs	r3, #37	; 0x25
 8007678:	9a06      	ldr	r2, [sp, #24]
 800767a:	1a9b      	subs	r3, r3, r2
 800767c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800767e:	4293      	cmp	r3, r2
 8007680:	db22      	blt.n	80076c8 <_strtod_l+0x490>
 8007682:	240f      	movs	r4, #15
 8007684:	9b06      	ldr	r3, [sp, #24]
 8007686:	4d66      	ldr	r5, [pc, #408]	; (8007820 <_strtod_l+0x5e8>)
 8007688:	1ae4      	subs	r4, r4, r3
 800768a:	00e1      	lsls	r1, r4, #3
 800768c:	1869      	adds	r1, r5, r1
 800768e:	0032      	movs	r2, r6
 8007690:	6808      	ldr	r0, [r1, #0]
 8007692:	6849      	ldr	r1, [r1, #4]
 8007694:	003b      	movs	r3, r7
 8007696:	f7fa f9d9 	bl	8001a4c <__aeabi_dmul>
 800769a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800769c:	1b1c      	subs	r4, r3, r4
 800769e:	00e4      	lsls	r4, r4, #3
 80076a0:	192c      	adds	r4, r5, r4
 80076a2:	6822      	ldr	r2, [r4, #0]
 80076a4:	6863      	ldr	r3, [r4, #4]
 80076a6:	e7e3      	b.n	8007670 <_strtod_l+0x438>
 80076a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076aa:	3316      	adds	r3, #22
 80076ac:	db0c      	blt.n	80076c8 <_strtod_l+0x490>
 80076ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076b0:	9a07      	ldr	r2, [sp, #28]
 80076b2:	0030      	movs	r0, r6
 80076b4:	1a9a      	subs	r2, r3, r2
 80076b6:	4b5a      	ldr	r3, [pc, #360]	; (8007820 <_strtod_l+0x5e8>)
 80076b8:	00d2      	lsls	r2, r2, #3
 80076ba:	189b      	adds	r3, r3, r2
 80076bc:	0039      	movs	r1, r7
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f7f9 fdc1 	bl	8001248 <__aeabi_ddiv>
 80076c6:	e794      	b.n	80075f2 <_strtod_l+0x3ba>
 80076c8:	9b06      	ldr	r3, [sp, #24]
 80076ca:	1b1c      	subs	r4, r3, r4
 80076cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ce:	18e4      	adds	r4, r4, r3
 80076d0:	2c00      	cmp	r4, #0
 80076d2:	dd72      	ble.n	80077ba <_strtod_l+0x582>
 80076d4:	230f      	movs	r3, #15
 80076d6:	0021      	movs	r1, r4
 80076d8:	4019      	ands	r1, r3
 80076da:	421c      	tst	r4, r3
 80076dc:	d00a      	beq.n	80076f4 <_strtod_l+0x4bc>
 80076de:	00cb      	lsls	r3, r1, #3
 80076e0:	494f      	ldr	r1, [pc, #316]	; (8007820 <_strtod_l+0x5e8>)
 80076e2:	0032      	movs	r2, r6
 80076e4:	18c9      	adds	r1, r1, r3
 80076e6:	6808      	ldr	r0, [r1, #0]
 80076e8:	6849      	ldr	r1, [r1, #4]
 80076ea:	003b      	movs	r3, r7
 80076ec:	f7fa f9ae 	bl	8001a4c <__aeabi_dmul>
 80076f0:	0006      	movs	r6, r0
 80076f2:	000f      	movs	r7, r1
 80076f4:	230f      	movs	r3, #15
 80076f6:	439c      	bics	r4, r3
 80076f8:	d04a      	beq.n	8007790 <_strtod_l+0x558>
 80076fa:	3326      	adds	r3, #38	; 0x26
 80076fc:	33ff      	adds	r3, #255	; 0xff
 80076fe:	429c      	cmp	r4, r3
 8007700:	dd22      	ble.n	8007748 <_strtod_l+0x510>
 8007702:	2300      	movs	r3, #0
 8007704:	9306      	str	r3, [sp, #24]
 8007706:	9307      	str	r3, [sp, #28]
 8007708:	930b      	str	r3, [sp, #44]	; 0x2c
 800770a:	9309      	str	r3, [sp, #36]	; 0x24
 800770c:	2322      	movs	r3, #34	; 0x22
 800770e:	2600      	movs	r6, #0
 8007710:	9a05      	ldr	r2, [sp, #20]
 8007712:	4f3f      	ldr	r7, [pc, #252]	; (8007810 <_strtod_l+0x5d8>)
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007718:	42b3      	cmp	r3, r6
 800771a:	d100      	bne.n	800771e <_strtod_l+0x4e6>
 800771c:	e5d3      	b.n	80072c6 <_strtod_l+0x8e>
 800771e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007720:	9805      	ldr	r0, [sp, #20]
 8007722:	f001 fec9 	bl	80094b8 <_Bfree>
 8007726:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007728:	9805      	ldr	r0, [sp, #20]
 800772a:	f001 fec5 	bl	80094b8 <_Bfree>
 800772e:	9907      	ldr	r1, [sp, #28]
 8007730:	9805      	ldr	r0, [sp, #20]
 8007732:	f001 fec1 	bl	80094b8 <_Bfree>
 8007736:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007738:	9805      	ldr	r0, [sp, #20]
 800773a:	f001 febd 	bl	80094b8 <_Bfree>
 800773e:	9906      	ldr	r1, [sp, #24]
 8007740:	9805      	ldr	r0, [sp, #20]
 8007742:	f001 feb9 	bl	80094b8 <_Bfree>
 8007746:	e5be      	b.n	80072c6 <_strtod_l+0x8e>
 8007748:	2300      	movs	r3, #0
 800774a:	0030      	movs	r0, r6
 800774c:	0039      	movs	r1, r7
 800774e:	4d35      	ldr	r5, [pc, #212]	; (8007824 <_strtod_l+0x5ec>)
 8007750:	1124      	asrs	r4, r4, #4
 8007752:	9308      	str	r3, [sp, #32]
 8007754:	2c01      	cmp	r4, #1
 8007756:	dc1e      	bgt.n	8007796 <_strtod_l+0x55e>
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <_strtod_l+0x528>
 800775c:	0006      	movs	r6, r0
 800775e:	000f      	movs	r7, r1
 8007760:	4b31      	ldr	r3, [pc, #196]	; (8007828 <_strtod_l+0x5f0>)
 8007762:	0032      	movs	r2, r6
 8007764:	18ff      	adds	r7, r7, r3
 8007766:	9b08      	ldr	r3, [sp, #32]
 8007768:	00dd      	lsls	r5, r3, #3
 800776a:	4b2e      	ldr	r3, [pc, #184]	; (8007824 <_strtod_l+0x5ec>)
 800776c:	195d      	adds	r5, r3, r5
 800776e:	6828      	ldr	r0, [r5, #0]
 8007770:	6869      	ldr	r1, [r5, #4]
 8007772:	003b      	movs	r3, r7
 8007774:	f7fa f96a 	bl	8001a4c <__aeabi_dmul>
 8007778:	4b25      	ldr	r3, [pc, #148]	; (8007810 <_strtod_l+0x5d8>)
 800777a:	4a2c      	ldr	r2, [pc, #176]	; (800782c <_strtod_l+0x5f4>)
 800777c:	0006      	movs	r6, r0
 800777e:	400b      	ands	r3, r1
 8007780:	4293      	cmp	r3, r2
 8007782:	d8be      	bhi.n	8007702 <_strtod_l+0x4ca>
 8007784:	4a2a      	ldr	r2, [pc, #168]	; (8007830 <_strtod_l+0x5f8>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d913      	bls.n	80077b2 <_strtod_l+0x57a>
 800778a:	2601      	movs	r6, #1
 800778c:	4f29      	ldr	r7, [pc, #164]	; (8007834 <_strtod_l+0x5fc>)
 800778e:	4276      	negs	r6, r6
 8007790:	2300      	movs	r3, #0
 8007792:	9308      	str	r3, [sp, #32]
 8007794:	e087      	b.n	80078a6 <_strtod_l+0x66e>
 8007796:	2201      	movs	r2, #1
 8007798:	4214      	tst	r4, r2
 800779a:	d004      	beq.n	80077a6 <_strtod_l+0x56e>
 800779c:	682a      	ldr	r2, [r5, #0]
 800779e:	686b      	ldr	r3, [r5, #4]
 80077a0:	f7fa f954 	bl	8001a4c <__aeabi_dmul>
 80077a4:	2301      	movs	r3, #1
 80077a6:	9a08      	ldr	r2, [sp, #32]
 80077a8:	1064      	asrs	r4, r4, #1
 80077aa:	3201      	adds	r2, #1
 80077ac:	9208      	str	r2, [sp, #32]
 80077ae:	3508      	adds	r5, #8
 80077b0:	e7d0      	b.n	8007754 <_strtod_l+0x51c>
 80077b2:	23d4      	movs	r3, #212	; 0xd4
 80077b4:	049b      	lsls	r3, r3, #18
 80077b6:	18cf      	adds	r7, r1, r3
 80077b8:	e7ea      	b.n	8007790 <_strtod_l+0x558>
 80077ba:	2c00      	cmp	r4, #0
 80077bc:	d0e8      	beq.n	8007790 <_strtod_l+0x558>
 80077be:	4264      	negs	r4, r4
 80077c0:	220f      	movs	r2, #15
 80077c2:	0023      	movs	r3, r4
 80077c4:	4013      	ands	r3, r2
 80077c6:	4214      	tst	r4, r2
 80077c8:	d00a      	beq.n	80077e0 <_strtod_l+0x5a8>
 80077ca:	00da      	lsls	r2, r3, #3
 80077cc:	4b14      	ldr	r3, [pc, #80]	; (8007820 <_strtod_l+0x5e8>)
 80077ce:	0030      	movs	r0, r6
 80077d0:	189b      	adds	r3, r3, r2
 80077d2:	0039      	movs	r1, r7
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f7f9 fd36 	bl	8001248 <__aeabi_ddiv>
 80077dc:	0006      	movs	r6, r0
 80077de:	000f      	movs	r7, r1
 80077e0:	1124      	asrs	r4, r4, #4
 80077e2:	d0d5      	beq.n	8007790 <_strtod_l+0x558>
 80077e4:	2c1f      	cmp	r4, #31
 80077e6:	dd27      	ble.n	8007838 <_strtod_l+0x600>
 80077e8:	2300      	movs	r3, #0
 80077ea:	9306      	str	r3, [sp, #24]
 80077ec:	9307      	str	r3, [sp, #28]
 80077ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80077f0:	9309      	str	r3, [sp, #36]	; 0x24
 80077f2:	2322      	movs	r3, #34	; 0x22
 80077f4:	9a05      	ldr	r2, [sp, #20]
 80077f6:	2600      	movs	r6, #0
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077fc:	2700      	movs	r7, #0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d18d      	bne.n	800771e <_strtod_l+0x4e6>
 8007802:	e560      	b.n	80072c6 <_strtod_l+0x8e>
 8007804:	00004e1f 	.word	0x00004e1f
 8007808:	0800b179 	.word	0x0800b179
 800780c:	0800b1bc 	.word	0x0800b1bc
 8007810:	7ff00000 	.word	0x7ff00000
 8007814:	0800b171 	.word	0x0800b171
 8007818:	0800b2fc 	.word	0x0800b2fc
 800781c:	0800b5a8 	.word	0x0800b5a8
 8007820:	0800b488 	.word	0x0800b488
 8007824:	0800b460 	.word	0x0800b460
 8007828:	fcb00000 	.word	0xfcb00000
 800782c:	7ca00000 	.word	0x7ca00000
 8007830:	7c900000 	.word	0x7c900000
 8007834:	7fefffff 	.word	0x7fefffff
 8007838:	2310      	movs	r3, #16
 800783a:	0022      	movs	r2, r4
 800783c:	401a      	ands	r2, r3
 800783e:	9208      	str	r2, [sp, #32]
 8007840:	421c      	tst	r4, r3
 8007842:	d001      	beq.n	8007848 <_strtod_l+0x610>
 8007844:	335a      	adds	r3, #90	; 0x5a
 8007846:	9308      	str	r3, [sp, #32]
 8007848:	0030      	movs	r0, r6
 800784a:	0039      	movs	r1, r7
 800784c:	2300      	movs	r3, #0
 800784e:	4dc5      	ldr	r5, [pc, #788]	; (8007b64 <_strtod_l+0x92c>)
 8007850:	2201      	movs	r2, #1
 8007852:	4214      	tst	r4, r2
 8007854:	d004      	beq.n	8007860 <_strtod_l+0x628>
 8007856:	682a      	ldr	r2, [r5, #0]
 8007858:	686b      	ldr	r3, [r5, #4]
 800785a:	f7fa f8f7 	bl	8001a4c <__aeabi_dmul>
 800785e:	2301      	movs	r3, #1
 8007860:	1064      	asrs	r4, r4, #1
 8007862:	3508      	adds	r5, #8
 8007864:	2c00      	cmp	r4, #0
 8007866:	d1f3      	bne.n	8007850 <_strtod_l+0x618>
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <_strtod_l+0x638>
 800786c:	0006      	movs	r6, r0
 800786e:	000f      	movs	r7, r1
 8007870:	9b08      	ldr	r3, [sp, #32]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00f      	beq.n	8007896 <_strtod_l+0x65e>
 8007876:	236b      	movs	r3, #107	; 0x6b
 8007878:	007a      	lsls	r2, r7, #1
 800787a:	0d52      	lsrs	r2, r2, #21
 800787c:	0039      	movs	r1, r7
 800787e:	1a9b      	subs	r3, r3, r2
 8007880:	2b00      	cmp	r3, #0
 8007882:	dd08      	ble.n	8007896 <_strtod_l+0x65e>
 8007884:	2b1f      	cmp	r3, #31
 8007886:	dc00      	bgt.n	800788a <_strtod_l+0x652>
 8007888:	e124      	b.n	8007ad4 <_strtod_l+0x89c>
 800788a:	2600      	movs	r6, #0
 800788c:	2b34      	cmp	r3, #52	; 0x34
 800788e:	dc00      	bgt.n	8007892 <_strtod_l+0x65a>
 8007890:	e119      	b.n	8007ac6 <_strtod_l+0x88e>
 8007892:	27dc      	movs	r7, #220	; 0xdc
 8007894:	04bf      	lsls	r7, r7, #18
 8007896:	2200      	movs	r2, #0
 8007898:	2300      	movs	r3, #0
 800789a:	0030      	movs	r0, r6
 800789c:	0039      	movs	r1, r7
 800789e:	f7f8 fdd5 	bl	800044c <__aeabi_dcmpeq>
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d1a0      	bne.n	80077e8 <_strtod_l+0x5b0>
 80078a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	9910      	ldr	r1, [sp, #64]	; 0x40
 80078ae:	9b06      	ldr	r3, [sp, #24]
 80078b0:	9805      	ldr	r0, [sp, #20]
 80078b2:	f001 fe69 	bl	8009588 <__s2b>
 80078b6:	900b      	str	r0, [sp, #44]	; 0x2c
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d100      	bne.n	80078be <_strtod_l+0x686>
 80078bc:	e721      	b.n	8007702 <_strtod_l+0x4ca>
 80078be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c0:	9907      	ldr	r1, [sp, #28]
 80078c2:	17da      	asrs	r2, r3, #31
 80078c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078c6:	1a5b      	subs	r3, r3, r1
 80078c8:	401a      	ands	r2, r3
 80078ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078cc:	9215      	str	r2, [sp, #84]	; 0x54
 80078ce:	43db      	mvns	r3, r3
 80078d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078d2:	17db      	asrs	r3, r3, #31
 80078d4:	401a      	ands	r2, r3
 80078d6:	2300      	movs	r3, #0
 80078d8:	921a      	str	r2, [sp, #104]	; 0x68
 80078da:	9306      	str	r3, [sp, #24]
 80078dc:	9307      	str	r3, [sp, #28]
 80078de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078e0:	9805      	ldr	r0, [sp, #20]
 80078e2:	6859      	ldr	r1, [r3, #4]
 80078e4:	f001 fda4 	bl	8009430 <_Balloc>
 80078e8:	9009      	str	r0, [sp, #36]	; 0x24
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d100      	bne.n	80078f0 <_strtod_l+0x6b8>
 80078ee:	e70d      	b.n	800770c <_strtod_l+0x4d4>
 80078f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	310c      	adds	r1, #12
 80078f8:	1c9a      	adds	r2, r3, #2
 80078fa:	0092      	lsls	r2, r2, #2
 80078fc:	300c      	adds	r0, #12
 80078fe:	930c      	str	r3, [sp, #48]	; 0x30
 8007900:	f001 fd8d 	bl	800941e <memcpy>
 8007904:	ab22      	add	r3, sp, #136	; 0x88
 8007906:	9301      	str	r3, [sp, #4]
 8007908:	ab21      	add	r3, sp, #132	; 0x84
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	0032      	movs	r2, r6
 800790e:	003b      	movs	r3, r7
 8007910:	9805      	ldr	r0, [sp, #20]
 8007912:	9612      	str	r6, [sp, #72]	; 0x48
 8007914:	9713      	str	r7, [sp, #76]	; 0x4c
 8007916:	f002 f983 	bl	8009c20 <__d2b>
 800791a:	9020      	str	r0, [sp, #128]	; 0x80
 800791c:	2800      	cmp	r0, #0
 800791e:	d100      	bne.n	8007922 <_strtod_l+0x6ea>
 8007920:	e6f4      	b.n	800770c <_strtod_l+0x4d4>
 8007922:	2101      	movs	r1, #1
 8007924:	9805      	ldr	r0, [sp, #20]
 8007926:	f001 fec3 	bl	80096b0 <__i2b>
 800792a:	9007      	str	r0, [sp, #28]
 800792c:	2800      	cmp	r0, #0
 800792e:	d100      	bne.n	8007932 <_strtod_l+0x6fa>
 8007930:	e6ec      	b.n	800770c <_strtod_l+0x4d4>
 8007932:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007934:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007936:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007938:	1ad4      	subs	r4, r2, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	db01      	blt.n	8007942 <_strtod_l+0x70a>
 800793e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8007940:	195d      	adds	r5, r3, r5
 8007942:	9908      	ldr	r1, [sp, #32]
 8007944:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007946:	1a5b      	subs	r3, r3, r1
 8007948:	2136      	movs	r1, #54	; 0x36
 800794a:	189b      	adds	r3, r3, r2
 800794c:	1a8a      	subs	r2, r1, r2
 800794e:	4986      	ldr	r1, [pc, #536]	; (8007b68 <_strtod_l+0x930>)
 8007950:	2001      	movs	r0, #1
 8007952:	468c      	mov	ip, r1
 8007954:	2100      	movs	r1, #0
 8007956:	3b01      	subs	r3, #1
 8007958:	9110      	str	r1, [sp, #64]	; 0x40
 800795a:	9014      	str	r0, [sp, #80]	; 0x50
 800795c:	4563      	cmp	r3, ip
 800795e:	da07      	bge.n	8007970 <_strtod_l+0x738>
 8007960:	4661      	mov	r1, ip
 8007962:	1ac9      	subs	r1, r1, r3
 8007964:	1a52      	subs	r2, r2, r1
 8007966:	291f      	cmp	r1, #31
 8007968:	dd00      	ble.n	800796c <_strtod_l+0x734>
 800796a:	e0b8      	b.n	8007ade <_strtod_l+0x8a6>
 800796c:	4088      	lsls	r0, r1
 800796e:	9014      	str	r0, [sp, #80]	; 0x50
 8007970:	18ab      	adds	r3, r5, r2
 8007972:	930c      	str	r3, [sp, #48]	; 0x30
 8007974:	18a4      	adds	r4, r4, r2
 8007976:	9b08      	ldr	r3, [sp, #32]
 8007978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800797a:	191c      	adds	r4, r3, r4
 800797c:	002b      	movs	r3, r5
 800797e:	4295      	cmp	r5, r2
 8007980:	dd00      	ble.n	8007984 <_strtod_l+0x74c>
 8007982:	0013      	movs	r3, r2
 8007984:	42a3      	cmp	r3, r4
 8007986:	dd00      	ble.n	800798a <_strtod_l+0x752>
 8007988:	0023      	movs	r3, r4
 800798a:	2b00      	cmp	r3, #0
 800798c:	dd04      	ble.n	8007998 <_strtod_l+0x760>
 800798e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007990:	1ae4      	subs	r4, r4, r3
 8007992:	1ad2      	subs	r2, r2, r3
 8007994:	920c      	str	r2, [sp, #48]	; 0x30
 8007996:	1aed      	subs	r5, r5, r3
 8007998:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800799a:	2b00      	cmp	r3, #0
 800799c:	dd17      	ble.n	80079ce <_strtod_l+0x796>
 800799e:	001a      	movs	r2, r3
 80079a0:	9907      	ldr	r1, [sp, #28]
 80079a2:	9805      	ldr	r0, [sp, #20]
 80079a4:	f001 ff4a 	bl	800983c <__pow5mult>
 80079a8:	9007      	str	r0, [sp, #28]
 80079aa:	2800      	cmp	r0, #0
 80079ac:	d100      	bne.n	80079b0 <_strtod_l+0x778>
 80079ae:	e6ad      	b.n	800770c <_strtod_l+0x4d4>
 80079b0:	0001      	movs	r1, r0
 80079b2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80079b4:	9805      	ldr	r0, [sp, #20]
 80079b6:	f001 fe91 	bl	80096dc <__multiply>
 80079ba:	900f      	str	r0, [sp, #60]	; 0x3c
 80079bc:	2800      	cmp	r0, #0
 80079be:	d100      	bne.n	80079c2 <_strtod_l+0x78a>
 80079c0:	e6a4      	b.n	800770c <_strtod_l+0x4d4>
 80079c2:	9920      	ldr	r1, [sp, #128]	; 0x80
 80079c4:	9805      	ldr	r0, [sp, #20]
 80079c6:	f001 fd77 	bl	80094b8 <_Bfree>
 80079ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079cc:	9320      	str	r3, [sp, #128]	; 0x80
 80079ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	dd00      	ble.n	80079d6 <_strtod_l+0x79e>
 80079d4:	e089      	b.n	8007aea <_strtod_l+0x8b2>
 80079d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079d8:	2b00      	cmp	r3, #0
 80079da:	dd08      	ble.n	80079ee <_strtod_l+0x7b6>
 80079dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80079de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079e0:	9805      	ldr	r0, [sp, #20]
 80079e2:	f001 ff2b 	bl	800983c <__pow5mult>
 80079e6:	9009      	str	r0, [sp, #36]	; 0x24
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d100      	bne.n	80079ee <_strtod_l+0x7b6>
 80079ec:	e68e      	b.n	800770c <_strtod_l+0x4d4>
 80079ee:	2c00      	cmp	r4, #0
 80079f0:	dd08      	ble.n	8007a04 <_strtod_l+0x7cc>
 80079f2:	0022      	movs	r2, r4
 80079f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079f6:	9805      	ldr	r0, [sp, #20]
 80079f8:	f001 ff7c 	bl	80098f4 <__lshift>
 80079fc:	9009      	str	r0, [sp, #36]	; 0x24
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d100      	bne.n	8007a04 <_strtod_l+0x7cc>
 8007a02:	e683      	b.n	800770c <_strtod_l+0x4d4>
 8007a04:	2d00      	cmp	r5, #0
 8007a06:	dd08      	ble.n	8007a1a <_strtod_l+0x7e2>
 8007a08:	002a      	movs	r2, r5
 8007a0a:	9907      	ldr	r1, [sp, #28]
 8007a0c:	9805      	ldr	r0, [sp, #20]
 8007a0e:	f001 ff71 	bl	80098f4 <__lshift>
 8007a12:	9007      	str	r0, [sp, #28]
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d100      	bne.n	8007a1a <_strtod_l+0x7e2>
 8007a18:	e678      	b.n	800770c <_strtod_l+0x4d4>
 8007a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a1c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007a1e:	9805      	ldr	r0, [sp, #20]
 8007a20:	f001 fff2 	bl	8009a08 <__mdiff>
 8007a24:	9006      	str	r0, [sp, #24]
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d100      	bne.n	8007a2c <_strtod_l+0x7f4>
 8007a2a:	e66f      	b.n	800770c <_strtod_l+0x4d4>
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	68c3      	ldr	r3, [r0, #12]
 8007a30:	9907      	ldr	r1, [sp, #28]
 8007a32:	60c2      	str	r2, [r0, #12]
 8007a34:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a36:	f001 ffcb 	bl	80099d0 <__mcmp>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	da5f      	bge.n	8007afe <_strtod_l+0x8c6>
 8007a3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a40:	4333      	orrs	r3, r6
 8007a42:	d000      	beq.n	8007a46 <_strtod_l+0x80e>
 8007a44:	e08a      	b.n	8007b5c <_strtod_l+0x924>
 8007a46:	033b      	lsls	r3, r7, #12
 8007a48:	d000      	beq.n	8007a4c <_strtod_l+0x814>
 8007a4a:	e087      	b.n	8007b5c <_strtod_l+0x924>
 8007a4c:	22d6      	movs	r2, #214	; 0xd6
 8007a4e:	4b47      	ldr	r3, [pc, #284]	; (8007b6c <_strtod_l+0x934>)
 8007a50:	04d2      	lsls	r2, r2, #19
 8007a52:	403b      	ands	r3, r7
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d800      	bhi.n	8007a5a <_strtod_l+0x822>
 8007a58:	e080      	b.n	8007b5c <_strtod_l+0x924>
 8007a5a:	9b06      	ldr	r3, [sp, #24]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d104      	bne.n	8007a6e <_strtod_l+0x836>
 8007a64:	9b06      	ldr	r3, [sp, #24]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	930a      	str	r3, [sp, #40]	; 0x28
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	dd76      	ble.n	8007b5c <_strtod_l+0x924>
 8007a6e:	9906      	ldr	r1, [sp, #24]
 8007a70:	2201      	movs	r2, #1
 8007a72:	9805      	ldr	r0, [sp, #20]
 8007a74:	f001 ff3e 	bl	80098f4 <__lshift>
 8007a78:	9907      	ldr	r1, [sp, #28]
 8007a7a:	9006      	str	r0, [sp, #24]
 8007a7c:	f001 ffa8 	bl	80099d0 <__mcmp>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	dd6b      	ble.n	8007b5c <_strtod_l+0x924>
 8007a84:	9908      	ldr	r1, [sp, #32]
 8007a86:	003b      	movs	r3, r7
 8007a88:	4a38      	ldr	r2, [pc, #224]	; (8007b6c <_strtod_l+0x934>)
 8007a8a:	2900      	cmp	r1, #0
 8007a8c:	d100      	bne.n	8007a90 <_strtod_l+0x858>
 8007a8e:	e092      	b.n	8007bb6 <_strtod_l+0x97e>
 8007a90:	0011      	movs	r1, r2
 8007a92:	20d6      	movs	r0, #214	; 0xd6
 8007a94:	4039      	ands	r1, r7
 8007a96:	04c0      	lsls	r0, r0, #19
 8007a98:	4281      	cmp	r1, r0
 8007a9a:	dd00      	ble.n	8007a9e <_strtod_l+0x866>
 8007a9c:	e08b      	b.n	8007bb6 <_strtod_l+0x97e>
 8007a9e:	23dc      	movs	r3, #220	; 0xdc
 8007aa0:	049b      	lsls	r3, r3, #18
 8007aa2:	4299      	cmp	r1, r3
 8007aa4:	dc00      	bgt.n	8007aa8 <_strtod_l+0x870>
 8007aa6:	e6a4      	b.n	80077f2 <_strtod_l+0x5ba>
 8007aa8:	0030      	movs	r0, r6
 8007aaa:	0039      	movs	r1, r7
 8007aac:	2200      	movs	r2, #0
 8007aae:	4b30      	ldr	r3, [pc, #192]	; (8007b70 <_strtod_l+0x938>)
 8007ab0:	f7f9 ffcc 	bl	8001a4c <__aeabi_dmul>
 8007ab4:	0006      	movs	r6, r0
 8007ab6:	000f      	movs	r7, r1
 8007ab8:	4308      	orrs	r0, r1
 8007aba:	d000      	beq.n	8007abe <_strtod_l+0x886>
 8007abc:	e62f      	b.n	800771e <_strtod_l+0x4e6>
 8007abe:	2322      	movs	r3, #34	; 0x22
 8007ac0:	9a05      	ldr	r2, [sp, #20]
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	e62b      	b.n	800771e <_strtod_l+0x4e6>
 8007ac6:	234b      	movs	r3, #75	; 0x4b
 8007ac8:	1a9a      	subs	r2, r3, r2
 8007aca:	3b4c      	subs	r3, #76	; 0x4c
 8007acc:	4093      	lsls	r3, r2
 8007ace:	4019      	ands	r1, r3
 8007ad0:	000f      	movs	r7, r1
 8007ad2:	e6e0      	b.n	8007896 <_strtod_l+0x65e>
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	4252      	negs	r2, r2
 8007ad8:	409a      	lsls	r2, r3
 8007ada:	4016      	ands	r6, r2
 8007adc:	e6db      	b.n	8007896 <_strtod_l+0x65e>
 8007ade:	4925      	ldr	r1, [pc, #148]	; (8007b74 <_strtod_l+0x93c>)
 8007ae0:	1acb      	subs	r3, r1, r3
 8007ae2:	0001      	movs	r1, r0
 8007ae4:	4099      	lsls	r1, r3
 8007ae6:	9110      	str	r1, [sp, #64]	; 0x40
 8007ae8:	e741      	b.n	800796e <_strtod_l+0x736>
 8007aea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007aec:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007aee:	9805      	ldr	r0, [sp, #20]
 8007af0:	f001 ff00 	bl	80098f4 <__lshift>
 8007af4:	9020      	str	r0, [sp, #128]	; 0x80
 8007af6:	2800      	cmp	r0, #0
 8007af8:	d000      	beq.n	8007afc <_strtod_l+0x8c4>
 8007afa:	e76c      	b.n	80079d6 <_strtod_l+0x79e>
 8007afc:	e606      	b.n	800770c <_strtod_l+0x4d4>
 8007afe:	970c      	str	r7, [sp, #48]	; 0x30
 8007b00:	2800      	cmp	r0, #0
 8007b02:	d176      	bne.n	8007bf2 <_strtod_l+0x9ba>
 8007b04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b06:	033b      	lsls	r3, r7, #12
 8007b08:	0b1b      	lsrs	r3, r3, #12
 8007b0a:	2a00      	cmp	r2, #0
 8007b0c:	d038      	beq.n	8007b80 <_strtod_l+0x948>
 8007b0e:	4a1a      	ldr	r2, [pc, #104]	; (8007b78 <_strtod_l+0x940>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d138      	bne.n	8007b86 <_strtod_l+0x94e>
 8007b14:	2201      	movs	r2, #1
 8007b16:	9b08      	ldr	r3, [sp, #32]
 8007b18:	4252      	negs	r2, r2
 8007b1a:	0031      	movs	r1, r6
 8007b1c:	0010      	movs	r0, r2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00b      	beq.n	8007b3a <_strtod_l+0x902>
 8007b22:	24d4      	movs	r4, #212	; 0xd4
 8007b24:	4b11      	ldr	r3, [pc, #68]	; (8007b6c <_strtod_l+0x934>)
 8007b26:	0010      	movs	r0, r2
 8007b28:	403b      	ands	r3, r7
 8007b2a:	04e4      	lsls	r4, r4, #19
 8007b2c:	42a3      	cmp	r3, r4
 8007b2e:	d804      	bhi.n	8007b3a <_strtod_l+0x902>
 8007b30:	306c      	adds	r0, #108	; 0x6c
 8007b32:	0d1b      	lsrs	r3, r3, #20
 8007b34:	1ac3      	subs	r3, r0, r3
 8007b36:	409a      	lsls	r2, r3
 8007b38:	0010      	movs	r0, r2
 8007b3a:	4281      	cmp	r1, r0
 8007b3c:	d123      	bne.n	8007b86 <_strtod_l+0x94e>
 8007b3e:	4b0f      	ldr	r3, [pc, #60]	; (8007b7c <_strtod_l+0x944>)
 8007b40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d102      	bne.n	8007b4c <_strtod_l+0x914>
 8007b46:	1c4b      	adds	r3, r1, #1
 8007b48:	d100      	bne.n	8007b4c <_strtod_l+0x914>
 8007b4a:	e5df      	b.n	800770c <_strtod_l+0x4d4>
 8007b4c:	4b07      	ldr	r3, [pc, #28]	; (8007b6c <_strtod_l+0x934>)
 8007b4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b50:	2600      	movs	r6, #0
 8007b52:	401a      	ands	r2, r3
 8007b54:	0013      	movs	r3, r2
 8007b56:	2280      	movs	r2, #128	; 0x80
 8007b58:	0352      	lsls	r2, r2, #13
 8007b5a:	189f      	adds	r7, r3, r2
 8007b5c:	9b08      	ldr	r3, [sp, #32]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1a2      	bne.n	8007aa8 <_strtod_l+0x870>
 8007b62:	e5dc      	b.n	800771e <_strtod_l+0x4e6>
 8007b64:	0800b1d0 	.word	0x0800b1d0
 8007b68:	fffffc02 	.word	0xfffffc02
 8007b6c:	7ff00000 	.word	0x7ff00000
 8007b70:	39500000 	.word	0x39500000
 8007b74:	fffffbe2 	.word	0xfffffbe2
 8007b78:	000fffff 	.word	0x000fffff
 8007b7c:	7fefffff 	.word	0x7fefffff
 8007b80:	4333      	orrs	r3, r6
 8007b82:	d100      	bne.n	8007b86 <_strtod_l+0x94e>
 8007b84:	e77e      	b.n	8007a84 <_strtod_l+0x84c>
 8007b86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d01d      	beq.n	8007bc8 <_strtod_l+0x990>
 8007b8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b90:	4213      	tst	r3, r2
 8007b92:	d0e3      	beq.n	8007b5c <_strtod_l+0x924>
 8007b94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b96:	0030      	movs	r0, r6
 8007b98:	0039      	movs	r1, r7
 8007b9a:	9a08      	ldr	r2, [sp, #32]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d017      	beq.n	8007bd0 <_strtod_l+0x998>
 8007ba0:	f7ff fb32 	bl	8007208 <sulp>
 8007ba4:	0002      	movs	r2, r0
 8007ba6:	000b      	movs	r3, r1
 8007ba8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007baa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007bac:	f7f9 f810 	bl	8000bd0 <__aeabi_dadd>
 8007bb0:	0006      	movs	r6, r0
 8007bb2:	000f      	movs	r7, r1
 8007bb4:	e7d2      	b.n	8007b5c <_strtod_l+0x924>
 8007bb6:	2601      	movs	r6, #1
 8007bb8:	4013      	ands	r3, r2
 8007bba:	4a99      	ldr	r2, [pc, #612]	; (8007e20 <_strtod_l+0xbe8>)
 8007bbc:	4276      	negs	r6, r6
 8007bbe:	189b      	adds	r3, r3, r2
 8007bc0:	4a98      	ldr	r2, [pc, #608]	; (8007e24 <_strtod_l+0xbec>)
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	0017      	movs	r7, r2
 8007bc6:	e7c9      	b.n	8007b5c <_strtod_l+0x924>
 8007bc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bca:	4233      	tst	r3, r6
 8007bcc:	d0c6      	beq.n	8007b5c <_strtod_l+0x924>
 8007bce:	e7e1      	b.n	8007b94 <_strtod_l+0x95c>
 8007bd0:	f7ff fb1a 	bl	8007208 <sulp>
 8007bd4:	0002      	movs	r2, r0
 8007bd6:	000b      	movs	r3, r1
 8007bd8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007bda:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007bdc:	f7fa f9a2 	bl	8001f24 <__aeabi_dsub>
 8007be0:	2200      	movs	r2, #0
 8007be2:	2300      	movs	r3, #0
 8007be4:	0006      	movs	r6, r0
 8007be6:	000f      	movs	r7, r1
 8007be8:	f7f8 fc30 	bl	800044c <__aeabi_dcmpeq>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d0b5      	beq.n	8007b5c <_strtod_l+0x924>
 8007bf0:	e5ff      	b.n	80077f2 <_strtod_l+0x5ba>
 8007bf2:	9907      	ldr	r1, [sp, #28]
 8007bf4:	9806      	ldr	r0, [sp, #24]
 8007bf6:	f002 f877 	bl	8009ce8 <__ratio>
 8007bfa:	2380      	movs	r3, #128	; 0x80
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	05db      	lsls	r3, r3, #23
 8007c00:	0004      	movs	r4, r0
 8007c02:	000d      	movs	r5, r1
 8007c04:	f7f8 fc32 	bl	800046c <__aeabi_dcmple>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d075      	beq.n	8007cf8 <_strtod_l+0xac0>
 8007c0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d047      	beq.n	8007ca2 <_strtod_l+0xa6a>
 8007c12:	2300      	movs	r3, #0
 8007c14:	4c84      	ldr	r4, [pc, #528]	; (8007e28 <_strtod_l+0xbf0>)
 8007c16:	2500      	movs	r5, #0
 8007c18:	9310      	str	r3, [sp, #64]	; 0x40
 8007c1a:	9411      	str	r4, [sp, #68]	; 0x44
 8007c1c:	4c82      	ldr	r4, [pc, #520]	; (8007e28 <_strtod_l+0xbf0>)
 8007c1e:	4a83      	ldr	r2, [pc, #524]	; (8007e2c <_strtod_l+0xbf4>)
 8007c20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c22:	4013      	ands	r3, r2
 8007c24:	9314      	str	r3, [sp, #80]	; 0x50
 8007c26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c28:	4b81      	ldr	r3, [pc, #516]	; (8007e30 <_strtod_l+0xbf8>)
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d000      	beq.n	8007c30 <_strtod_l+0x9f8>
 8007c2e:	e0ac      	b.n	8007d8a <_strtod_l+0xb52>
 8007c30:	4a80      	ldr	r2, [pc, #512]	; (8007e34 <_strtod_l+0xbfc>)
 8007c32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c34:	4694      	mov	ip, r2
 8007c36:	4463      	add	r3, ip
 8007c38:	001f      	movs	r7, r3
 8007c3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c3e:	0030      	movs	r0, r6
 8007c40:	0039      	movs	r1, r7
 8007c42:	920c      	str	r2, [sp, #48]	; 0x30
 8007c44:	930d      	str	r3, [sp, #52]	; 0x34
 8007c46:	f001 ff77 	bl	8009b38 <__ulp>
 8007c4a:	0002      	movs	r2, r0
 8007c4c:	000b      	movs	r3, r1
 8007c4e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007c52:	f7f9 fefb 	bl	8001a4c <__aeabi_dmul>
 8007c56:	0032      	movs	r2, r6
 8007c58:	003b      	movs	r3, r7
 8007c5a:	f7f8 ffb9 	bl	8000bd0 <__aeabi_dadd>
 8007c5e:	4a73      	ldr	r2, [pc, #460]	; (8007e2c <_strtod_l+0xbf4>)
 8007c60:	4b75      	ldr	r3, [pc, #468]	; (8007e38 <_strtod_l+0xc00>)
 8007c62:	0006      	movs	r6, r0
 8007c64:	400a      	ands	r2, r1
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d95e      	bls.n	8007d28 <_strtod_l+0xaf0>
 8007c6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c6c:	4b73      	ldr	r3, [pc, #460]	; (8007e3c <_strtod_l+0xc04>)
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d103      	bne.n	8007c7a <_strtod_l+0xa42>
 8007c72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c74:	3301      	adds	r3, #1
 8007c76:	d100      	bne.n	8007c7a <_strtod_l+0xa42>
 8007c78:	e548      	b.n	800770c <_strtod_l+0x4d4>
 8007c7a:	2601      	movs	r6, #1
 8007c7c:	4f6f      	ldr	r7, [pc, #444]	; (8007e3c <_strtod_l+0xc04>)
 8007c7e:	4276      	negs	r6, r6
 8007c80:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007c82:	9805      	ldr	r0, [sp, #20]
 8007c84:	f001 fc18 	bl	80094b8 <_Bfree>
 8007c88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c8a:	9805      	ldr	r0, [sp, #20]
 8007c8c:	f001 fc14 	bl	80094b8 <_Bfree>
 8007c90:	9907      	ldr	r1, [sp, #28]
 8007c92:	9805      	ldr	r0, [sp, #20]
 8007c94:	f001 fc10 	bl	80094b8 <_Bfree>
 8007c98:	9906      	ldr	r1, [sp, #24]
 8007c9a:	9805      	ldr	r0, [sp, #20]
 8007c9c:	f001 fc0c 	bl	80094b8 <_Bfree>
 8007ca0:	e61d      	b.n	80078de <_strtod_l+0x6a6>
 8007ca2:	2e00      	cmp	r6, #0
 8007ca4:	d11c      	bne.n	8007ce0 <_strtod_l+0xaa8>
 8007ca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ca8:	031b      	lsls	r3, r3, #12
 8007caa:	d11f      	bne.n	8007cec <_strtod_l+0xab4>
 8007cac:	2200      	movs	r2, #0
 8007cae:	0020      	movs	r0, r4
 8007cb0:	0029      	movs	r1, r5
 8007cb2:	4b5d      	ldr	r3, [pc, #372]	; (8007e28 <_strtod_l+0xbf0>)
 8007cb4:	f7f8 fbd0 	bl	8000458 <__aeabi_dcmplt>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d11a      	bne.n	8007cf2 <_strtod_l+0xaba>
 8007cbc:	0020      	movs	r0, r4
 8007cbe:	0029      	movs	r1, r5
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	4b5f      	ldr	r3, [pc, #380]	; (8007e40 <_strtod_l+0xc08>)
 8007cc4:	f7f9 fec2 	bl	8001a4c <__aeabi_dmul>
 8007cc8:	0005      	movs	r5, r0
 8007cca:	000c      	movs	r4, r1
 8007ccc:	2380      	movs	r3, #128	; 0x80
 8007cce:	061b      	lsls	r3, r3, #24
 8007cd0:	18e3      	adds	r3, r4, r3
 8007cd2:	951c      	str	r5, [sp, #112]	; 0x70
 8007cd4:	931d      	str	r3, [sp, #116]	; 0x74
 8007cd6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007cd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007cda:	9210      	str	r2, [sp, #64]	; 0x40
 8007cdc:	9311      	str	r3, [sp, #68]	; 0x44
 8007cde:	e79e      	b.n	8007c1e <_strtod_l+0x9e6>
 8007ce0:	2e01      	cmp	r6, #1
 8007ce2:	d103      	bne.n	8007cec <_strtod_l+0xab4>
 8007ce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d100      	bne.n	8007cec <_strtod_l+0xab4>
 8007cea:	e582      	b.n	80077f2 <_strtod_l+0x5ba>
 8007cec:	2300      	movs	r3, #0
 8007cee:	4c55      	ldr	r4, [pc, #340]	; (8007e44 <_strtod_l+0xc0c>)
 8007cf0:	e791      	b.n	8007c16 <_strtod_l+0x9de>
 8007cf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007cf4:	4c52      	ldr	r4, [pc, #328]	; (8007e40 <_strtod_l+0xc08>)
 8007cf6:	e7e9      	b.n	8007ccc <_strtod_l+0xa94>
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	0020      	movs	r0, r4
 8007cfc:	0029      	movs	r1, r5
 8007cfe:	4b50      	ldr	r3, [pc, #320]	; (8007e40 <_strtod_l+0xc08>)
 8007d00:	f7f9 fea4 	bl	8001a4c <__aeabi_dmul>
 8007d04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d06:	0005      	movs	r5, r0
 8007d08:	000b      	movs	r3, r1
 8007d0a:	000c      	movs	r4, r1
 8007d0c:	2a00      	cmp	r2, #0
 8007d0e:	d107      	bne.n	8007d20 <_strtod_l+0xae8>
 8007d10:	2280      	movs	r2, #128	; 0x80
 8007d12:	0612      	lsls	r2, r2, #24
 8007d14:	188b      	adds	r3, r1, r2
 8007d16:	9016      	str	r0, [sp, #88]	; 0x58
 8007d18:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d1a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007d1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d1e:	e7dc      	b.n	8007cda <_strtod_l+0xaa2>
 8007d20:	0002      	movs	r2, r0
 8007d22:	9216      	str	r2, [sp, #88]	; 0x58
 8007d24:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d26:	e7f8      	b.n	8007d1a <_strtod_l+0xae2>
 8007d28:	23d4      	movs	r3, #212	; 0xd4
 8007d2a:	049b      	lsls	r3, r3, #18
 8007d2c:	18cf      	adds	r7, r1, r3
 8007d2e:	9b08      	ldr	r3, [sp, #32]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1a5      	bne.n	8007c80 <_strtod_l+0xa48>
 8007d34:	4b3d      	ldr	r3, [pc, #244]	; (8007e2c <_strtod_l+0xbf4>)
 8007d36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d38:	403b      	ands	r3, r7
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d1a0      	bne.n	8007c80 <_strtod_l+0xa48>
 8007d3e:	0028      	movs	r0, r5
 8007d40:	0021      	movs	r1, r4
 8007d42:	f7f8 fbcf 	bl	80004e4 <__aeabi_d2lz>
 8007d46:	f7f8 fc09 	bl	800055c <__aeabi_l2d>
 8007d4a:	0002      	movs	r2, r0
 8007d4c:	000b      	movs	r3, r1
 8007d4e:	0028      	movs	r0, r5
 8007d50:	0021      	movs	r1, r4
 8007d52:	f7fa f8e7 	bl	8001f24 <__aeabi_dsub>
 8007d56:	033b      	lsls	r3, r7, #12
 8007d58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d5a:	0b1b      	lsrs	r3, r3, #12
 8007d5c:	4333      	orrs	r3, r6
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	0004      	movs	r4, r0
 8007d62:	000d      	movs	r5, r1
 8007d64:	4a38      	ldr	r2, [pc, #224]	; (8007e48 <_strtod_l+0xc10>)
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d055      	beq.n	8007e16 <_strtod_l+0xbde>
 8007d6a:	4b38      	ldr	r3, [pc, #224]	; (8007e4c <_strtod_l+0xc14>)
 8007d6c:	f7f8 fb74 	bl	8000458 <__aeabi_dcmplt>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d000      	beq.n	8007d76 <_strtod_l+0xb3e>
 8007d74:	e4d3      	b.n	800771e <_strtod_l+0x4e6>
 8007d76:	0020      	movs	r0, r4
 8007d78:	0029      	movs	r1, r5
 8007d7a:	4a35      	ldr	r2, [pc, #212]	; (8007e50 <_strtod_l+0xc18>)
 8007d7c:	4b30      	ldr	r3, [pc, #192]	; (8007e40 <_strtod_l+0xc08>)
 8007d7e:	f7f8 fb7f 	bl	8000480 <__aeabi_dcmpgt>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d100      	bne.n	8007d88 <_strtod_l+0xb50>
 8007d86:	e77b      	b.n	8007c80 <_strtod_l+0xa48>
 8007d88:	e4c9      	b.n	800771e <_strtod_l+0x4e6>
 8007d8a:	9b08      	ldr	r3, [sp, #32]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d02b      	beq.n	8007de8 <_strtod_l+0xbb0>
 8007d90:	23d4      	movs	r3, #212	; 0xd4
 8007d92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d94:	04db      	lsls	r3, r3, #19
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d826      	bhi.n	8007de8 <_strtod_l+0xbb0>
 8007d9a:	0028      	movs	r0, r5
 8007d9c:	0021      	movs	r1, r4
 8007d9e:	4a2d      	ldr	r2, [pc, #180]	; (8007e54 <_strtod_l+0xc1c>)
 8007da0:	4b2d      	ldr	r3, [pc, #180]	; (8007e58 <_strtod_l+0xc20>)
 8007da2:	f7f8 fb63 	bl	800046c <__aeabi_dcmple>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d017      	beq.n	8007dda <_strtod_l+0xba2>
 8007daa:	0028      	movs	r0, r5
 8007dac:	0021      	movs	r1, r4
 8007dae:	f7f8 fb7b 	bl	80004a8 <__aeabi_d2uiz>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d100      	bne.n	8007db8 <_strtod_l+0xb80>
 8007db6:	3001      	adds	r0, #1
 8007db8:	f7fa fcca 	bl	8002750 <__aeabi_ui2d>
 8007dbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dbe:	0005      	movs	r5, r0
 8007dc0:	000b      	movs	r3, r1
 8007dc2:	000c      	movs	r4, r1
 8007dc4:	2a00      	cmp	r2, #0
 8007dc6:	d122      	bne.n	8007e0e <_strtod_l+0xbd6>
 8007dc8:	2280      	movs	r2, #128	; 0x80
 8007dca:	0612      	lsls	r2, r2, #24
 8007dcc:	188b      	adds	r3, r1, r2
 8007dce:	9018      	str	r0, [sp, #96]	; 0x60
 8007dd0:	9319      	str	r3, [sp, #100]	; 0x64
 8007dd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007dd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007dd6:	9210      	str	r2, [sp, #64]	; 0x40
 8007dd8:	9311      	str	r3, [sp, #68]	; 0x44
 8007dda:	22d6      	movs	r2, #214	; 0xd6
 8007ddc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007dde:	04d2      	lsls	r2, r2, #19
 8007de0:	189b      	adds	r3, r3, r2
 8007de2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007de4:	1a9b      	subs	r3, r3, r2
 8007de6:	9311      	str	r3, [sp, #68]	; 0x44
 8007de8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007dea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007dec:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007dee:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007df0:	f001 fea2 	bl	8009b38 <__ulp>
 8007df4:	0002      	movs	r2, r0
 8007df6:	000b      	movs	r3, r1
 8007df8:	0030      	movs	r0, r6
 8007dfa:	0039      	movs	r1, r7
 8007dfc:	f7f9 fe26 	bl	8001a4c <__aeabi_dmul>
 8007e00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e04:	f7f8 fee4 	bl	8000bd0 <__aeabi_dadd>
 8007e08:	0006      	movs	r6, r0
 8007e0a:	000f      	movs	r7, r1
 8007e0c:	e78f      	b.n	8007d2e <_strtod_l+0xaf6>
 8007e0e:	0002      	movs	r2, r0
 8007e10:	9218      	str	r2, [sp, #96]	; 0x60
 8007e12:	9319      	str	r3, [sp, #100]	; 0x64
 8007e14:	e7dd      	b.n	8007dd2 <_strtod_l+0xb9a>
 8007e16:	4b11      	ldr	r3, [pc, #68]	; (8007e5c <_strtod_l+0xc24>)
 8007e18:	f7f8 fb1e 	bl	8000458 <__aeabi_dcmplt>
 8007e1c:	e7b1      	b.n	8007d82 <_strtod_l+0xb4a>
 8007e1e:	46c0      	nop			; (mov r8, r8)
 8007e20:	fff00000 	.word	0xfff00000
 8007e24:	000fffff 	.word	0x000fffff
 8007e28:	3ff00000 	.word	0x3ff00000
 8007e2c:	7ff00000 	.word	0x7ff00000
 8007e30:	7fe00000 	.word	0x7fe00000
 8007e34:	fcb00000 	.word	0xfcb00000
 8007e38:	7c9fffff 	.word	0x7c9fffff
 8007e3c:	7fefffff 	.word	0x7fefffff
 8007e40:	3fe00000 	.word	0x3fe00000
 8007e44:	bff00000 	.word	0xbff00000
 8007e48:	94a03595 	.word	0x94a03595
 8007e4c:	3fdfffff 	.word	0x3fdfffff
 8007e50:	35afe535 	.word	0x35afe535
 8007e54:	ffc00000 	.word	0xffc00000
 8007e58:	41dfffff 	.word	0x41dfffff
 8007e5c:	3fcfffff 	.word	0x3fcfffff

08007e60 <_strtod_r>:
 8007e60:	b510      	push	{r4, lr}
 8007e62:	4b02      	ldr	r3, [pc, #8]	; (8007e6c <_strtod_r+0xc>)
 8007e64:	f7ff f9e8 	bl	8007238 <_strtod_l>
 8007e68:	bd10      	pop	{r4, pc}
 8007e6a:	46c0      	nop			; (mov r8, r8)
 8007e6c:	20000074 	.word	0x20000074

08007e70 <_strtol_l.constprop.0>:
 8007e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e72:	b087      	sub	sp, #28
 8007e74:	001e      	movs	r6, r3
 8007e76:	9005      	str	r0, [sp, #20]
 8007e78:	9101      	str	r1, [sp, #4]
 8007e7a:	9202      	str	r2, [sp, #8]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d045      	beq.n	8007f0c <_strtol_l.constprop.0+0x9c>
 8007e80:	000b      	movs	r3, r1
 8007e82:	2e24      	cmp	r6, #36	; 0x24
 8007e84:	d842      	bhi.n	8007f0c <_strtol_l.constprop.0+0x9c>
 8007e86:	4a3f      	ldr	r2, [pc, #252]	; (8007f84 <_strtol_l.constprop.0+0x114>)
 8007e88:	2108      	movs	r1, #8
 8007e8a:	4694      	mov	ip, r2
 8007e8c:	001a      	movs	r2, r3
 8007e8e:	4660      	mov	r0, ip
 8007e90:	7814      	ldrb	r4, [r2, #0]
 8007e92:	3301      	adds	r3, #1
 8007e94:	5d00      	ldrb	r0, [r0, r4]
 8007e96:	001d      	movs	r5, r3
 8007e98:	0007      	movs	r7, r0
 8007e9a:	400f      	ands	r7, r1
 8007e9c:	4208      	tst	r0, r1
 8007e9e:	d1f5      	bne.n	8007e8c <_strtol_l.constprop.0+0x1c>
 8007ea0:	2c2d      	cmp	r4, #45	; 0x2d
 8007ea2:	d13a      	bne.n	8007f1a <_strtol_l.constprop.0+0xaa>
 8007ea4:	2701      	movs	r7, #1
 8007ea6:	781c      	ldrb	r4, [r3, #0]
 8007ea8:	1c95      	adds	r5, r2, #2
 8007eaa:	2e00      	cmp	r6, #0
 8007eac:	d065      	beq.n	8007f7a <_strtol_l.constprop.0+0x10a>
 8007eae:	2e10      	cmp	r6, #16
 8007eb0:	d109      	bne.n	8007ec6 <_strtol_l.constprop.0+0x56>
 8007eb2:	2c30      	cmp	r4, #48	; 0x30
 8007eb4:	d107      	bne.n	8007ec6 <_strtol_l.constprop.0+0x56>
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	782b      	ldrb	r3, [r5, #0]
 8007eba:	4393      	bics	r3, r2
 8007ebc:	2b58      	cmp	r3, #88	; 0x58
 8007ebe:	d157      	bne.n	8007f70 <_strtol_l.constprop.0+0x100>
 8007ec0:	2610      	movs	r6, #16
 8007ec2:	786c      	ldrb	r4, [r5, #1]
 8007ec4:	3502      	adds	r5, #2
 8007ec6:	4b30      	ldr	r3, [pc, #192]	; (8007f88 <_strtol_l.constprop.0+0x118>)
 8007ec8:	0031      	movs	r1, r6
 8007eca:	18fb      	adds	r3, r7, r3
 8007ecc:	0018      	movs	r0, r3
 8007ece:	9303      	str	r3, [sp, #12]
 8007ed0:	f7f8 f9bc 	bl	800024c <__aeabi_uidivmod>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	4684      	mov	ip, r0
 8007eda:	0018      	movs	r0, r3
 8007edc:	9104      	str	r1, [sp, #16]
 8007ede:	4252      	negs	r2, r2
 8007ee0:	0021      	movs	r1, r4
 8007ee2:	3930      	subs	r1, #48	; 0x30
 8007ee4:	2909      	cmp	r1, #9
 8007ee6:	d81d      	bhi.n	8007f24 <_strtol_l.constprop.0+0xb4>
 8007ee8:	000c      	movs	r4, r1
 8007eea:	42a6      	cmp	r6, r4
 8007eec:	dd28      	ble.n	8007f40 <_strtol_l.constprop.0+0xd0>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	db24      	blt.n	8007f3c <_strtol_l.constprop.0+0xcc>
 8007ef2:	0013      	movs	r3, r2
 8007ef4:	4584      	cmp	ip, r0
 8007ef6:	d306      	bcc.n	8007f06 <_strtol_l.constprop.0+0x96>
 8007ef8:	d102      	bne.n	8007f00 <_strtol_l.constprop.0+0x90>
 8007efa:	9904      	ldr	r1, [sp, #16]
 8007efc:	42a1      	cmp	r1, r4
 8007efe:	db02      	blt.n	8007f06 <_strtol_l.constprop.0+0x96>
 8007f00:	2301      	movs	r3, #1
 8007f02:	4370      	muls	r0, r6
 8007f04:	1820      	adds	r0, r4, r0
 8007f06:	782c      	ldrb	r4, [r5, #0]
 8007f08:	3501      	adds	r5, #1
 8007f0a:	e7e9      	b.n	8007ee0 <_strtol_l.constprop.0+0x70>
 8007f0c:	f7fe faa2 	bl	8006454 <__errno>
 8007f10:	2316      	movs	r3, #22
 8007f12:	6003      	str	r3, [r0, #0]
 8007f14:	2000      	movs	r0, #0
 8007f16:	b007      	add	sp, #28
 8007f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f1a:	2c2b      	cmp	r4, #43	; 0x2b
 8007f1c:	d1c5      	bne.n	8007eaa <_strtol_l.constprop.0+0x3a>
 8007f1e:	781c      	ldrb	r4, [r3, #0]
 8007f20:	1c95      	adds	r5, r2, #2
 8007f22:	e7c2      	b.n	8007eaa <_strtol_l.constprop.0+0x3a>
 8007f24:	0021      	movs	r1, r4
 8007f26:	3941      	subs	r1, #65	; 0x41
 8007f28:	2919      	cmp	r1, #25
 8007f2a:	d801      	bhi.n	8007f30 <_strtol_l.constprop.0+0xc0>
 8007f2c:	3c37      	subs	r4, #55	; 0x37
 8007f2e:	e7dc      	b.n	8007eea <_strtol_l.constprop.0+0x7a>
 8007f30:	0021      	movs	r1, r4
 8007f32:	3961      	subs	r1, #97	; 0x61
 8007f34:	2919      	cmp	r1, #25
 8007f36:	d803      	bhi.n	8007f40 <_strtol_l.constprop.0+0xd0>
 8007f38:	3c57      	subs	r4, #87	; 0x57
 8007f3a:	e7d6      	b.n	8007eea <_strtol_l.constprop.0+0x7a>
 8007f3c:	0013      	movs	r3, r2
 8007f3e:	e7e2      	b.n	8007f06 <_strtol_l.constprop.0+0x96>
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	da09      	bge.n	8007f58 <_strtol_l.constprop.0+0xe8>
 8007f44:	2322      	movs	r3, #34	; 0x22
 8007f46:	9a05      	ldr	r2, [sp, #20]
 8007f48:	9803      	ldr	r0, [sp, #12]
 8007f4a:	6013      	str	r3, [r2, #0]
 8007f4c:	9b02      	ldr	r3, [sp, #8]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0e1      	beq.n	8007f16 <_strtol_l.constprop.0+0xa6>
 8007f52:	1e6b      	subs	r3, r5, #1
 8007f54:	9301      	str	r3, [sp, #4]
 8007f56:	e007      	b.n	8007f68 <_strtol_l.constprop.0+0xf8>
 8007f58:	2f00      	cmp	r7, #0
 8007f5a:	d000      	beq.n	8007f5e <_strtol_l.constprop.0+0xee>
 8007f5c:	4240      	negs	r0, r0
 8007f5e:	9a02      	ldr	r2, [sp, #8]
 8007f60:	2a00      	cmp	r2, #0
 8007f62:	d0d8      	beq.n	8007f16 <_strtol_l.constprop.0+0xa6>
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1f4      	bne.n	8007f52 <_strtol_l.constprop.0+0xe2>
 8007f68:	9b02      	ldr	r3, [sp, #8]
 8007f6a:	9a01      	ldr	r2, [sp, #4]
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	e7d2      	b.n	8007f16 <_strtol_l.constprop.0+0xa6>
 8007f70:	2430      	movs	r4, #48	; 0x30
 8007f72:	2e00      	cmp	r6, #0
 8007f74:	d1a7      	bne.n	8007ec6 <_strtol_l.constprop.0+0x56>
 8007f76:	3608      	adds	r6, #8
 8007f78:	e7a5      	b.n	8007ec6 <_strtol_l.constprop.0+0x56>
 8007f7a:	2c30      	cmp	r4, #48	; 0x30
 8007f7c:	d09b      	beq.n	8007eb6 <_strtol_l.constprop.0+0x46>
 8007f7e:	260a      	movs	r6, #10
 8007f80:	e7a1      	b.n	8007ec6 <_strtol_l.constprop.0+0x56>
 8007f82:	46c0      	nop			; (mov r8, r8)
 8007f84:	0800b1f9 	.word	0x0800b1f9
 8007f88:	7fffffff 	.word	0x7fffffff

08007f8c <_strtol_r>:
 8007f8c:	b510      	push	{r4, lr}
 8007f8e:	f7ff ff6f 	bl	8007e70 <_strtol_l.constprop.0>
 8007f92:	bd10      	pop	{r4, pc}

08007f94 <quorem>:
 8007f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f96:	0006      	movs	r6, r0
 8007f98:	690b      	ldr	r3, [r1, #16]
 8007f9a:	6932      	ldr	r2, [r6, #16]
 8007f9c:	b087      	sub	sp, #28
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	9103      	str	r1, [sp, #12]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	db65      	blt.n	8008072 <quorem+0xde>
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	009c      	lsls	r4, r3, #2
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	000b      	movs	r3, r1
 8007fae:	3314      	adds	r3, #20
 8007fb0:	9305      	str	r3, [sp, #20]
 8007fb2:	191b      	adds	r3, r3, r4
 8007fb4:	9304      	str	r3, [sp, #16]
 8007fb6:	0033      	movs	r3, r6
 8007fb8:	3314      	adds	r3, #20
 8007fba:	9302      	str	r3, [sp, #8]
 8007fbc:	191c      	adds	r4, r3, r4
 8007fbe:	9b04      	ldr	r3, [sp, #16]
 8007fc0:	6827      	ldr	r7, [r4, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	0038      	movs	r0, r7
 8007fc6:	1c5d      	adds	r5, r3, #1
 8007fc8:	0029      	movs	r1, r5
 8007fca:	9301      	str	r3, [sp, #4]
 8007fcc:	f7f8 f8b8 	bl	8000140 <__udivsi3>
 8007fd0:	9001      	str	r0, [sp, #4]
 8007fd2:	42af      	cmp	r7, r5
 8007fd4:	d324      	bcc.n	8008020 <quorem+0x8c>
 8007fd6:	2500      	movs	r5, #0
 8007fd8:	46ac      	mov	ip, r5
 8007fda:	9802      	ldr	r0, [sp, #8]
 8007fdc:	9f05      	ldr	r7, [sp, #20]
 8007fde:	cf08      	ldmia	r7!, {r3}
 8007fe0:	9a01      	ldr	r2, [sp, #4]
 8007fe2:	b299      	uxth	r1, r3
 8007fe4:	4351      	muls	r1, r2
 8007fe6:	0c1b      	lsrs	r3, r3, #16
 8007fe8:	4353      	muls	r3, r2
 8007fea:	1949      	adds	r1, r1, r5
 8007fec:	0c0a      	lsrs	r2, r1, #16
 8007fee:	189b      	adds	r3, r3, r2
 8007ff0:	6802      	ldr	r2, [r0, #0]
 8007ff2:	b289      	uxth	r1, r1
 8007ff4:	b292      	uxth	r2, r2
 8007ff6:	4462      	add	r2, ip
 8007ff8:	1a52      	subs	r2, r2, r1
 8007ffa:	6801      	ldr	r1, [r0, #0]
 8007ffc:	0c1d      	lsrs	r5, r3, #16
 8007ffe:	0c09      	lsrs	r1, r1, #16
 8008000:	b29b      	uxth	r3, r3
 8008002:	1acb      	subs	r3, r1, r3
 8008004:	1411      	asrs	r1, r2, #16
 8008006:	185b      	adds	r3, r3, r1
 8008008:	1419      	asrs	r1, r3, #16
 800800a:	b292      	uxth	r2, r2
 800800c:	041b      	lsls	r3, r3, #16
 800800e:	431a      	orrs	r2, r3
 8008010:	9b04      	ldr	r3, [sp, #16]
 8008012:	468c      	mov	ip, r1
 8008014:	c004      	stmia	r0!, {r2}
 8008016:	42bb      	cmp	r3, r7
 8008018:	d2e1      	bcs.n	8007fde <quorem+0x4a>
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d030      	beq.n	8008082 <quorem+0xee>
 8008020:	0030      	movs	r0, r6
 8008022:	9903      	ldr	r1, [sp, #12]
 8008024:	f001 fcd4 	bl	80099d0 <__mcmp>
 8008028:	2800      	cmp	r0, #0
 800802a:	db21      	blt.n	8008070 <quorem+0xdc>
 800802c:	0030      	movs	r0, r6
 800802e:	2400      	movs	r4, #0
 8008030:	9b01      	ldr	r3, [sp, #4]
 8008032:	9903      	ldr	r1, [sp, #12]
 8008034:	3301      	adds	r3, #1
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	3014      	adds	r0, #20
 800803a:	3114      	adds	r1, #20
 800803c:	6803      	ldr	r3, [r0, #0]
 800803e:	c920      	ldmia	r1!, {r5}
 8008040:	b29a      	uxth	r2, r3
 8008042:	1914      	adds	r4, r2, r4
 8008044:	b2aa      	uxth	r2, r5
 8008046:	1aa2      	subs	r2, r4, r2
 8008048:	0c1b      	lsrs	r3, r3, #16
 800804a:	0c2d      	lsrs	r5, r5, #16
 800804c:	1414      	asrs	r4, r2, #16
 800804e:	1b5b      	subs	r3, r3, r5
 8008050:	191b      	adds	r3, r3, r4
 8008052:	141c      	asrs	r4, r3, #16
 8008054:	b292      	uxth	r2, r2
 8008056:	041b      	lsls	r3, r3, #16
 8008058:	4313      	orrs	r3, r2
 800805a:	c008      	stmia	r0!, {r3}
 800805c:	9b04      	ldr	r3, [sp, #16]
 800805e:	428b      	cmp	r3, r1
 8008060:	d2ec      	bcs.n	800803c <quorem+0xa8>
 8008062:	9b00      	ldr	r3, [sp, #0]
 8008064:	9a02      	ldr	r2, [sp, #8]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	18d3      	adds	r3, r2, r3
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	2a00      	cmp	r2, #0
 800806e:	d015      	beq.n	800809c <quorem+0x108>
 8008070:	9801      	ldr	r0, [sp, #4]
 8008072:	b007      	add	sp, #28
 8008074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d106      	bne.n	800808a <quorem+0xf6>
 800807c:	9b00      	ldr	r3, [sp, #0]
 800807e:	3b01      	subs	r3, #1
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	9b02      	ldr	r3, [sp, #8]
 8008084:	3c04      	subs	r4, #4
 8008086:	42a3      	cmp	r3, r4
 8008088:	d3f5      	bcc.n	8008076 <quorem+0xe2>
 800808a:	9b00      	ldr	r3, [sp, #0]
 800808c:	6133      	str	r3, [r6, #16]
 800808e:	e7c7      	b.n	8008020 <quorem+0x8c>
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	2a00      	cmp	r2, #0
 8008094:	d106      	bne.n	80080a4 <quorem+0x110>
 8008096:	9a00      	ldr	r2, [sp, #0]
 8008098:	3a01      	subs	r2, #1
 800809a:	9200      	str	r2, [sp, #0]
 800809c:	9a02      	ldr	r2, [sp, #8]
 800809e:	3b04      	subs	r3, #4
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d3f5      	bcc.n	8008090 <quorem+0xfc>
 80080a4:	9b00      	ldr	r3, [sp, #0]
 80080a6:	6133      	str	r3, [r6, #16]
 80080a8:	e7e2      	b.n	8008070 <quorem+0xdc>
	...

080080ac <_dtoa_r>:
 80080ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ae:	b09d      	sub	sp, #116	; 0x74
 80080b0:	9202      	str	r2, [sp, #8]
 80080b2:	9303      	str	r3, [sp, #12]
 80080b4:	9b02      	ldr	r3, [sp, #8]
 80080b6:	9c03      	ldr	r4, [sp, #12]
 80080b8:	9308      	str	r3, [sp, #32]
 80080ba:	9409      	str	r4, [sp, #36]	; 0x24
 80080bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80080be:	0007      	movs	r7, r0
 80080c0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80080c2:	2c00      	cmp	r4, #0
 80080c4:	d10e      	bne.n	80080e4 <_dtoa_r+0x38>
 80080c6:	2010      	movs	r0, #16
 80080c8:	f001 f982 	bl	80093d0 <malloc>
 80080cc:	1e02      	subs	r2, r0, #0
 80080ce:	6278      	str	r0, [r7, #36]	; 0x24
 80080d0:	d104      	bne.n	80080dc <_dtoa_r+0x30>
 80080d2:	21ea      	movs	r1, #234	; 0xea
 80080d4:	4bc7      	ldr	r3, [pc, #796]	; (80083f4 <_dtoa_r+0x348>)
 80080d6:	48c8      	ldr	r0, [pc, #800]	; (80083f8 <_dtoa_r+0x34c>)
 80080d8:	f002 f91c 	bl	800a314 <__assert_func>
 80080dc:	6044      	str	r4, [r0, #4]
 80080de:	6084      	str	r4, [r0, #8]
 80080e0:	6004      	str	r4, [r0, #0]
 80080e2:	60c4      	str	r4, [r0, #12]
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	6819      	ldr	r1, [r3, #0]
 80080e8:	2900      	cmp	r1, #0
 80080ea:	d00a      	beq.n	8008102 <_dtoa_r+0x56>
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	2301      	movs	r3, #1
 80080f0:	4093      	lsls	r3, r2
 80080f2:	604a      	str	r2, [r1, #4]
 80080f4:	608b      	str	r3, [r1, #8]
 80080f6:	0038      	movs	r0, r7
 80080f8:	f001 f9de 	bl	80094b8 <_Bfree>
 80080fc:	2200      	movs	r2, #0
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	9b03      	ldr	r3, [sp, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	da20      	bge.n	800814a <_dtoa_r+0x9e>
 8008108:	2301      	movs	r3, #1
 800810a:	602b      	str	r3, [r5, #0]
 800810c:	9b03      	ldr	r3, [sp, #12]
 800810e:	005b      	lsls	r3, r3, #1
 8008110:	085b      	lsrs	r3, r3, #1
 8008112:	9309      	str	r3, [sp, #36]	; 0x24
 8008114:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008116:	4bb9      	ldr	r3, [pc, #740]	; (80083fc <_dtoa_r+0x350>)
 8008118:	4ab8      	ldr	r2, [pc, #736]	; (80083fc <_dtoa_r+0x350>)
 800811a:	402b      	ands	r3, r5
 800811c:	4293      	cmp	r3, r2
 800811e:	d117      	bne.n	8008150 <_dtoa_r+0xa4>
 8008120:	4bb7      	ldr	r3, [pc, #732]	; (8008400 <_dtoa_r+0x354>)
 8008122:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008124:	0328      	lsls	r0, r5, #12
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	9b02      	ldr	r3, [sp, #8]
 800812a:	0b00      	lsrs	r0, r0, #12
 800812c:	4318      	orrs	r0, r3
 800812e:	d101      	bne.n	8008134 <_dtoa_r+0x88>
 8008130:	f000 fdbf 	bl	8008cb2 <_dtoa_r+0xc06>
 8008134:	48b3      	ldr	r0, [pc, #716]	; (8008404 <_dtoa_r+0x358>)
 8008136:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008138:	9006      	str	r0, [sp, #24]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <_dtoa_r+0x98>
 800813e:	4bb2      	ldr	r3, [pc, #712]	; (8008408 <_dtoa_r+0x35c>)
 8008140:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008142:	6013      	str	r3, [r2, #0]
 8008144:	9806      	ldr	r0, [sp, #24]
 8008146:	b01d      	add	sp, #116	; 0x74
 8008148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800814a:	2300      	movs	r3, #0
 800814c:	602b      	str	r3, [r5, #0]
 800814e:	e7e1      	b.n	8008114 <_dtoa_r+0x68>
 8008150:	9b08      	ldr	r3, [sp, #32]
 8008152:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008154:	9312      	str	r3, [sp, #72]	; 0x48
 8008156:	9413      	str	r4, [sp, #76]	; 0x4c
 8008158:	9812      	ldr	r0, [sp, #72]	; 0x48
 800815a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800815c:	2200      	movs	r2, #0
 800815e:	2300      	movs	r3, #0
 8008160:	f7f8 f974 	bl	800044c <__aeabi_dcmpeq>
 8008164:	1e04      	subs	r4, r0, #0
 8008166:	d009      	beq.n	800817c <_dtoa_r+0xd0>
 8008168:	2301      	movs	r3, #1
 800816a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800816c:	6013      	str	r3, [r2, #0]
 800816e:	4ba7      	ldr	r3, [pc, #668]	; (800840c <_dtoa_r+0x360>)
 8008170:	9306      	str	r3, [sp, #24]
 8008172:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008174:	2b00      	cmp	r3, #0
 8008176:	d0e5      	beq.n	8008144 <_dtoa_r+0x98>
 8008178:	4ba5      	ldr	r3, [pc, #660]	; (8008410 <_dtoa_r+0x364>)
 800817a:	e7e1      	b.n	8008140 <_dtoa_r+0x94>
 800817c:	ab1a      	add	r3, sp, #104	; 0x68
 800817e:	9301      	str	r3, [sp, #4]
 8008180:	ab1b      	add	r3, sp, #108	; 0x6c
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	0038      	movs	r0, r7
 8008186:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008188:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800818a:	f001 fd49 	bl	8009c20 <__d2b>
 800818e:	006e      	lsls	r6, r5, #1
 8008190:	9005      	str	r0, [sp, #20]
 8008192:	0d76      	lsrs	r6, r6, #21
 8008194:	d100      	bne.n	8008198 <_dtoa_r+0xec>
 8008196:	e07c      	b.n	8008292 <_dtoa_r+0x1e6>
 8008198:	9812      	ldr	r0, [sp, #72]	; 0x48
 800819a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800819c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800819e:	4a9d      	ldr	r2, [pc, #628]	; (8008414 <_dtoa_r+0x368>)
 80081a0:	031b      	lsls	r3, r3, #12
 80081a2:	0b1b      	lsrs	r3, r3, #12
 80081a4:	431a      	orrs	r2, r3
 80081a6:	0011      	movs	r1, r2
 80081a8:	4b9b      	ldr	r3, [pc, #620]	; (8008418 <_dtoa_r+0x36c>)
 80081aa:	9418      	str	r4, [sp, #96]	; 0x60
 80081ac:	18f6      	adds	r6, r6, r3
 80081ae:	2200      	movs	r2, #0
 80081b0:	4b9a      	ldr	r3, [pc, #616]	; (800841c <_dtoa_r+0x370>)
 80081b2:	f7f9 feb7 	bl	8001f24 <__aeabi_dsub>
 80081b6:	4a9a      	ldr	r2, [pc, #616]	; (8008420 <_dtoa_r+0x374>)
 80081b8:	4b9a      	ldr	r3, [pc, #616]	; (8008424 <_dtoa_r+0x378>)
 80081ba:	f7f9 fc47 	bl	8001a4c <__aeabi_dmul>
 80081be:	4a9a      	ldr	r2, [pc, #616]	; (8008428 <_dtoa_r+0x37c>)
 80081c0:	4b9a      	ldr	r3, [pc, #616]	; (800842c <_dtoa_r+0x380>)
 80081c2:	f7f8 fd05 	bl	8000bd0 <__aeabi_dadd>
 80081c6:	0004      	movs	r4, r0
 80081c8:	0030      	movs	r0, r6
 80081ca:	000d      	movs	r5, r1
 80081cc:	f7fa fa90 	bl	80026f0 <__aeabi_i2d>
 80081d0:	4a97      	ldr	r2, [pc, #604]	; (8008430 <_dtoa_r+0x384>)
 80081d2:	4b98      	ldr	r3, [pc, #608]	; (8008434 <_dtoa_r+0x388>)
 80081d4:	f7f9 fc3a 	bl	8001a4c <__aeabi_dmul>
 80081d8:	0002      	movs	r2, r0
 80081da:	000b      	movs	r3, r1
 80081dc:	0020      	movs	r0, r4
 80081de:	0029      	movs	r1, r5
 80081e0:	f7f8 fcf6 	bl	8000bd0 <__aeabi_dadd>
 80081e4:	0004      	movs	r4, r0
 80081e6:	000d      	movs	r5, r1
 80081e8:	f7fa fa4c 	bl	8002684 <__aeabi_d2iz>
 80081ec:	2200      	movs	r2, #0
 80081ee:	9002      	str	r0, [sp, #8]
 80081f0:	2300      	movs	r3, #0
 80081f2:	0020      	movs	r0, r4
 80081f4:	0029      	movs	r1, r5
 80081f6:	f7f8 f92f 	bl	8000458 <__aeabi_dcmplt>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d00b      	beq.n	8008216 <_dtoa_r+0x16a>
 80081fe:	9802      	ldr	r0, [sp, #8]
 8008200:	f7fa fa76 	bl	80026f0 <__aeabi_i2d>
 8008204:	002b      	movs	r3, r5
 8008206:	0022      	movs	r2, r4
 8008208:	f7f8 f920 	bl	800044c <__aeabi_dcmpeq>
 800820c:	4243      	negs	r3, r0
 800820e:	4158      	adcs	r0, r3
 8008210:	9b02      	ldr	r3, [sp, #8]
 8008212:	1a1b      	subs	r3, r3, r0
 8008214:	9302      	str	r3, [sp, #8]
 8008216:	2301      	movs	r3, #1
 8008218:	9316      	str	r3, [sp, #88]	; 0x58
 800821a:	9b02      	ldr	r3, [sp, #8]
 800821c:	2b16      	cmp	r3, #22
 800821e:	d80f      	bhi.n	8008240 <_dtoa_r+0x194>
 8008220:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008222:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008224:	00da      	lsls	r2, r3, #3
 8008226:	4b84      	ldr	r3, [pc, #528]	; (8008438 <_dtoa_r+0x38c>)
 8008228:	189b      	adds	r3, r3, r2
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f7f8 f913 	bl	8000458 <__aeabi_dcmplt>
 8008232:	2800      	cmp	r0, #0
 8008234:	d049      	beq.n	80082ca <_dtoa_r+0x21e>
 8008236:	9b02      	ldr	r3, [sp, #8]
 8008238:	3b01      	subs	r3, #1
 800823a:	9302      	str	r3, [sp, #8]
 800823c:	2300      	movs	r3, #0
 800823e:	9316      	str	r3, [sp, #88]	; 0x58
 8008240:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008242:	1b9e      	subs	r6, r3, r6
 8008244:	2300      	movs	r3, #0
 8008246:	930a      	str	r3, [sp, #40]	; 0x28
 8008248:	0033      	movs	r3, r6
 800824a:	3b01      	subs	r3, #1
 800824c:	930d      	str	r3, [sp, #52]	; 0x34
 800824e:	d504      	bpl.n	800825a <_dtoa_r+0x1ae>
 8008250:	2301      	movs	r3, #1
 8008252:	1b9b      	subs	r3, r3, r6
 8008254:	930a      	str	r3, [sp, #40]	; 0x28
 8008256:	2300      	movs	r3, #0
 8008258:	930d      	str	r3, [sp, #52]	; 0x34
 800825a:	9b02      	ldr	r3, [sp, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	db36      	blt.n	80082ce <_dtoa_r+0x222>
 8008260:	9a02      	ldr	r2, [sp, #8]
 8008262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008264:	4694      	mov	ip, r2
 8008266:	4463      	add	r3, ip
 8008268:	930d      	str	r3, [sp, #52]	; 0x34
 800826a:	2300      	movs	r3, #0
 800826c:	9215      	str	r2, [sp, #84]	; 0x54
 800826e:	930e      	str	r3, [sp, #56]	; 0x38
 8008270:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008272:	2401      	movs	r4, #1
 8008274:	2b09      	cmp	r3, #9
 8008276:	d864      	bhi.n	8008342 <_dtoa_r+0x296>
 8008278:	2b05      	cmp	r3, #5
 800827a:	dd02      	ble.n	8008282 <_dtoa_r+0x1d6>
 800827c:	2400      	movs	r4, #0
 800827e:	3b04      	subs	r3, #4
 8008280:	9322      	str	r3, [sp, #136]	; 0x88
 8008282:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008284:	1e98      	subs	r0, r3, #2
 8008286:	2803      	cmp	r0, #3
 8008288:	d864      	bhi.n	8008354 <_dtoa_r+0x2a8>
 800828a:	f7f7 ff45 	bl	8000118 <__gnu_thumb1_case_uqi>
 800828e:	3829      	.short	0x3829
 8008290:	5836      	.short	0x5836
 8008292:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008294:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008296:	189e      	adds	r6, r3, r2
 8008298:	4b68      	ldr	r3, [pc, #416]	; (800843c <_dtoa_r+0x390>)
 800829a:	18f2      	adds	r2, r6, r3
 800829c:	2a20      	cmp	r2, #32
 800829e:	dd0f      	ble.n	80082c0 <_dtoa_r+0x214>
 80082a0:	2340      	movs	r3, #64	; 0x40
 80082a2:	1a9b      	subs	r3, r3, r2
 80082a4:	409d      	lsls	r5, r3
 80082a6:	4b66      	ldr	r3, [pc, #408]	; (8008440 <_dtoa_r+0x394>)
 80082a8:	9802      	ldr	r0, [sp, #8]
 80082aa:	18f3      	adds	r3, r6, r3
 80082ac:	40d8      	lsrs	r0, r3
 80082ae:	4328      	orrs	r0, r5
 80082b0:	f7fa fa4e 	bl	8002750 <__aeabi_ui2d>
 80082b4:	2301      	movs	r3, #1
 80082b6:	4c63      	ldr	r4, [pc, #396]	; (8008444 <_dtoa_r+0x398>)
 80082b8:	3e01      	subs	r6, #1
 80082ba:	1909      	adds	r1, r1, r4
 80082bc:	9318      	str	r3, [sp, #96]	; 0x60
 80082be:	e776      	b.n	80081ae <_dtoa_r+0x102>
 80082c0:	2320      	movs	r3, #32
 80082c2:	9802      	ldr	r0, [sp, #8]
 80082c4:	1a9b      	subs	r3, r3, r2
 80082c6:	4098      	lsls	r0, r3
 80082c8:	e7f2      	b.n	80082b0 <_dtoa_r+0x204>
 80082ca:	9016      	str	r0, [sp, #88]	; 0x58
 80082cc:	e7b8      	b.n	8008240 <_dtoa_r+0x194>
 80082ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d0:	9a02      	ldr	r2, [sp, #8]
 80082d2:	1a9b      	subs	r3, r3, r2
 80082d4:	930a      	str	r3, [sp, #40]	; 0x28
 80082d6:	4253      	negs	r3, r2
 80082d8:	930e      	str	r3, [sp, #56]	; 0x38
 80082da:	2300      	movs	r3, #0
 80082dc:	9315      	str	r3, [sp, #84]	; 0x54
 80082de:	e7c7      	b.n	8008270 <_dtoa_r+0x1c4>
 80082e0:	2300      	movs	r3, #0
 80082e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80082e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082e6:	930c      	str	r3, [sp, #48]	; 0x30
 80082e8:	9307      	str	r3, [sp, #28]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	dc13      	bgt.n	8008316 <_dtoa_r+0x26a>
 80082ee:	2301      	movs	r3, #1
 80082f0:	001a      	movs	r2, r3
 80082f2:	930c      	str	r3, [sp, #48]	; 0x30
 80082f4:	9307      	str	r3, [sp, #28]
 80082f6:	9223      	str	r2, [sp, #140]	; 0x8c
 80082f8:	e00d      	b.n	8008316 <_dtoa_r+0x26a>
 80082fa:	2301      	movs	r3, #1
 80082fc:	e7f1      	b.n	80082e2 <_dtoa_r+0x236>
 80082fe:	2300      	movs	r3, #0
 8008300:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008302:	930f      	str	r3, [sp, #60]	; 0x3c
 8008304:	4694      	mov	ip, r2
 8008306:	9b02      	ldr	r3, [sp, #8]
 8008308:	4463      	add	r3, ip
 800830a:	930c      	str	r3, [sp, #48]	; 0x30
 800830c:	3301      	adds	r3, #1
 800830e:	9307      	str	r3, [sp, #28]
 8008310:	2b00      	cmp	r3, #0
 8008312:	dc00      	bgt.n	8008316 <_dtoa_r+0x26a>
 8008314:	2301      	movs	r3, #1
 8008316:	2200      	movs	r2, #0
 8008318:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800831a:	6042      	str	r2, [r0, #4]
 800831c:	3204      	adds	r2, #4
 800831e:	0015      	movs	r5, r2
 8008320:	3514      	adds	r5, #20
 8008322:	6841      	ldr	r1, [r0, #4]
 8008324:	429d      	cmp	r5, r3
 8008326:	d919      	bls.n	800835c <_dtoa_r+0x2b0>
 8008328:	0038      	movs	r0, r7
 800832a:	f001 f881 	bl	8009430 <_Balloc>
 800832e:	9006      	str	r0, [sp, #24]
 8008330:	2800      	cmp	r0, #0
 8008332:	d117      	bne.n	8008364 <_dtoa_r+0x2b8>
 8008334:	21d5      	movs	r1, #213	; 0xd5
 8008336:	0002      	movs	r2, r0
 8008338:	4b43      	ldr	r3, [pc, #268]	; (8008448 <_dtoa_r+0x39c>)
 800833a:	0049      	lsls	r1, r1, #1
 800833c:	e6cb      	b.n	80080d6 <_dtoa_r+0x2a>
 800833e:	2301      	movs	r3, #1
 8008340:	e7de      	b.n	8008300 <_dtoa_r+0x254>
 8008342:	2300      	movs	r3, #0
 8008344:	940f      	str	r4, [sp, #60]	; 0x3c
 8008346:	9322      	str	r3, [sp, #136]	; 0x88
 8008348:	3b01      	subs	r3, #1
 800834a:	930c      	str	r3, [sp, #48]	; 0x30
 800834c:	9307      	str	r3, [sp, #28]
 800834e:	2200      	movs	r2, #0
 8008350:	3313      	adds	r3, #19
 8008352:	e7d0      	b.n	80082f6 <_dtoa_r+0x24a>
 8008354:	2301      	movs	r3, #1
 8008356:	930f      	str	r3, [sp, #60]	; 0x3c
 8008358:	3b02      	subs	r3, #2
 800835a:	e7f6      	b.n	800834a <_dtoa_r+0x29e>
 800835c:	3101      	adds	r1, #1
 800835e:	6041      	str	r1, [r0, #4]
 8008360:	0052      	lsls	r2, r2, #1
 8008362:	e7dc      	b.n	800831e <_dtoa_r+0x272>
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	9a06      	ldr	r2, [sp, #24]
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	9b07      	ldr	r3, [sp, #28]
 800836c:	2b0e      	cmp	r3, #14
 800836e:	d900      	bls.n	8008372 <_dtoa_r+0x2c6>
 8008370:	e0eb      	b.n	800854a <_dtoa_r+0x49e>
 8008372:	2c00      	cmp	r4, #0
 8008374:	d100      	bne.n	8008378 <_dtoa_r+0x2cc>
 8008376:	e0e8      	b.n	800854a <_dtoa_r+0x49e>
 8008378:	9b02      	ldr	r3, [sp, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	dd68      	ble.n	8008450 <_dtoa_r+0x3a4>
 800837e:	001a      	movs	r2, r3
 8008380:	210f      	movs	r1, #15
 8008382:	4b2d      	ldr	r3, [pc, #180]	; (8008438 <_dtoa_r+0x38c>)
 8008384:	400a      	ands	r2, r1
 8008386:	00d2      	lsls	r2, r2, #3
 8008388:	189b      	adds	r3, r3, r2
 800838a:	681d      	ldr	r5, [r3, #0]
 800838c:	685e      	ldr	r6, [r3, #4]
 800838e:	9b02      	ldr	r3, [sp, #8]
 8008390:	111c      	asrs	r4, r3, #4
 8008392:	2302      	movs	r3, #2
 8008394:	9310      	str	r3, [sp, #64]	; 0x40
 8008396:	9b02      	ldr	r3, [sp, #8]
 8008398:	05db      	lsls	r3, r3, #23
 800839a:	d50b      	bpl.n	80083b4 <_dtoa_r+0x308>
 800839c:	4b2b      	ldr	r3, [pc, #172]	; (800844c <_dtoa_r+0x3a0>)
 800839e:	400c      	ands	r4, r1
 80083a0:	6a1a      	ldr	r2, [r3, #32]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80083a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80083a8:	f7f8 ff4e 	bl	8001248 <__aeabi_ddiv>
 80083ac:	2303      	movs	r3, #3
 80083ae:	9008      	str	r0, [sp, #32]
 80083b0:	9109      	str	r1, [sp, #36]	; 0x24
 80083b2:	9310      	str	r3, [sp, #64]	; 0x40
 80083b4:	4b25      	ldr	r3, [pc, #148]	; (800844c <_dtoa_r+0x3a0>)
 80083b6:	9314      	str	r3, [sp, #80]	; 0x50
 80083b8:	2c00      	cmp	r4, #0
 80083ba:	d108      	bne.n	80083ce <_dtoa_r+0x322>
 80083bc:	9808      	ldr	r0, [sp, #32]
 80083be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083c0:	002a      	movs	r2, r5
 80083c2:	0033      	movs	r3, r6
 80083c4:	f7f8 ff40 	bl	8001248 <__aeabi_ddiv>
 80083c8:	9008      	str	r0, [sp, #32]
 80083ca:	9109      	str	r1, [sp, #36]	; 0x24
 80083cc:	e05c      	b.n	8008488 <_dtoa_r+0x3dc>
 80083ce:	2301      	movs	r3, #1
 80083d0:	421c      	tst	r4, r3
 80083d2:	d00b      	beq.n	80083ec <_dtoa_r+0x340>
 80083d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083d6:	0028      	movs	r0, r5
 80083d8:	3301      	adds	r3, #1
 80083da:	9310      	str	r3, [sp, #64]	; 0x40
 80083dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083de:	0031      	movs	r1, r6
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	f7f9 fb32 	bl	8001a4c <__aeabi_dmul>
 80083e8:	0005      	movs	r5, r0
 80083ea:	000e      	movs	r6, r1
 80083ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083ee:	1064      	asrs	r4, r4, #1
 80083f0:	3308      	adds	r3, #8
 80083f2:	e7e0      	b.n	80083b6 <_dtoa_r+0x30a>
 80083f4:	0800b306 	.word	0x0800b306
 80083f8:	0800b31d 	.word	0x0800b31d
 80083fc:	7ff00000 	.word	0x7ff00000
 8008400:	0000270f 	.word	0x0000270f
 8008404:	0800b302 	.word	0x0800b302
 8008408:	0800b305 	.word	0x0800b305
 800840c:	0800b17c 	.word	0x0800b17c
 8008410:	0800b17d 	.word	0x0800b17d
 8008414:	3ff00000 	.word	0x3ff00000
 8008418:	fffffc01 	.word	0xfffffc01
 800841c:	3ff80000 	.word	0x3ff80000
 8008420:	636f4361 	.word	0x636f4361
 8008424:	3fd287a7 	.word	0x3fd287a7
 8008428:	8b60c8b3 	.word	0x8b60c8b3
 800842c:	3fc68a28 	.word	0x3fc68a28
 8008430:	509f79fb 	.word	0x509f79fb
 8008434:	3fd34413 	.word	0x3fd34413
 8008438:	0800b488 	.word	0x0800b488
 800843c:	00000432 	.word	0x00000432
 8008440:	00000412 	.word	0x00000412
 8008444:	fe100000 	.word	0xfe100000
 8008448:	0800b378 	.word	0x0800b378
 800844c:	0800b460 	.word	0x0800b460
 8008450:	2302      	movs	r3, #2
 8008452:	9310      	str	r3, [sp, #64]	; 0x40
 8008454:	9b02      	ldr	r3, [sp, #8]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d016      	beq.n	8008488 <_dtoa_r+0x3dc>
 800845a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800845c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800845e:	425c      	negs	r4, r3
 8008460:	230f      	movs	r3, #15
 8008462:	4ab6      	ldr	r2, [pc, #728]	; (800873c <_dtoa_r+0x690>)
 8008464:	4023      	ands	r3, r4
 8008466:	00db      	lsls	r3, r3, #3
 8008468:	18d3      	adds	r3, r2, r3
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f7f9 faed 	bl	8001a4c <__aeabi_dmul>
 8008472:	2601      	movs	r6, #1
 8008474:	2300      	movs	r3, #0
 8008476:	9008      	str	r0, [sp, #32]
 8008478:	9109      	str	r1, [sp, #36]	; 0x24
 800847a:	4db1      	ldr	r5, [pc, #708]	; (8008740 <_dtoa_r+0x694>)
 800847c:	1124      	asrs	r4, r4, #4
 800847e:	2c00      	cmp	r4, #0
 8008480:	d000      	beq.n	8008484 <_dtoa_r+0x3d8>
 8008482:	e094      	b.n	80085ae <_dtoa_r+0x502>
 8008484:	2b00      	cmp	r3, #0
 8008486:	d19f      	bne.n	80083c8 <_dtoa_r+0x31c>
 8008488:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800848a:	2b00      	cmp	r3, #0
 800848c:	d100      	bne.n	8008490 <_dtoa_r+0x3e4>
 800848e:	e09b      	b.n	80085c8 <_dtoa_r+0x51c>
 8008490:	9c08      	ldr	r4, [sp, #32]
 8008492:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008494:	2200      	movs	r2, #0
 8008496:	0020      	movs	r0, r4
 8008498:	0029      	movs	r1, r5
 800849a:	4baa      	ldr	r3, [pc, #680]	; (8008744 <_dtoa_r+0x698>)
 800849c:	f7f7 ffdc 	bl	8000458 <__aeabi_dcmplt>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	d100      	bne.n	80084a6 <_dtoa_r+0x3fa>
 80084a4:	e090      	b.n	80085c8 <_dtoa_r+0x51c>
 80084a6:	9b07      	ldr	r3, [sp, #28]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d100      	bne.n	80084ae <_dtoa_r+0x402>
 80084ac:	e08c      	b.n	80085c8 <_dtoa_r+0x51c>
 80084ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	dd46      	ble.n	8008542 <_dtoa_r+0x496>
 80084b4:	9b02      	ldr	r3, [sp, #8]
 80084b6:	2200      	movs	r2, #0
 80084b8:	0020      	movs	r0, r4
 80084ba:	0029      	movs	r1, r5
 80084bc:	1e5e      	subs	r6, r3, #1
 80084be:	4ba2      	ldr	r3, [pc, #648]	; (8008748 <_dtoa_r+0x69c>)
 80084c0:	f7f9 fac4 	bl	8001a4c <__aeabi_dmul>
 80084c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084c6:	9008      	str	r0, [sp, #32]
 80084c8:	9109      	str	r1, [sp, #36]	; 0x24
 80084ca:	3301      	adds	r3, #1
 80084cc:	9310      	str	r3, [sp, #64]	; 0x40
 80084ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80084d2:	9c08      	ldr	r4, [sp, #32]
 80084d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80084d6:	9314      	str	r3, [sp, #80]	; 0x50
 80084d8:	f7fa f90a 	bl	80026f0 <__aeabi_i2d>
 80084dc:	0022      	movs	r2, r4
 80084de:	002b      	movs	r3, r5
 80084e0:	f7f9 fab4 	bl	8001a4c <__aeabi_dmul>
 80084e4:	2200      	movs	r2, #0
 80084e6:	4b99      	ldr	r3, [pc, #612]	; (800874c <_dtoa_r+0x6a0>)
 80084e8:	f7f8 fb72 	bl	8000bd0 <__aeabi_dadd>
 80084ec:	9010      	str	r0, [sp, #64]	; 0x40
 80084ee:	9111      	str	r1, [sp, #68]	; 0x44
 80084f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084f4:	9208      	str	r2, [sp, #32]
 80084f6:	9309      	str	r3, [sp, #36]	; 0x24
 80084f8:	4a95      	ldr	r2, [pc, #596]	; (8008750 <_dtoa_r+0x6a4>)
 80084fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084fc:	4694      	mov	ip, r2
 80084fe:	4463      	add	r3, ip
 8008500:	9317      	str	r3, [sp, #92]	; 0x5c
 8008502:	9309      	str	r3, [sp, #36]	; 0x24
 8008504:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008506:	2b00      	cmp	r3, #0
 8008508:	d161      	bne.n	80085ce <_dtoa_r+0x522>
 800850a:	2200      	movs	r2, #0
 800850c:	0020      	movs	r0, r4
 800850e:	0029      	movs	r1, r5
 8008510:	4b90      	ldr	r3, [pc, #576]	; (8008754 <_dtoa_r+0x6a8>)
 8008512:	f7f9 fd07 	bl	8001f24 <__aeabi_dsub>
 8008516:	9a08      	ldr	r2, [sp, #32]
 8008518:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800851a:	0004      	movs	r4, r0
 800851c:	000d      	movs	r5, r1
 800851e:	f7f7 ffaf 	bl	8000480 <__aeabi_dcmpgt>
 8008522:	2800      	cmp	r0, #0
 8008524:	d000      	beq.n	8008528 <_dtoa_r+0x47c>
 8008526:	e2af      	b.n	8008a88 <_dtoa_r+0x9dc>
 8008528:	488b      	ldr	r0, [pc, #556]	; (8008758 <_dtoa_r+0x6ac>)
 800852a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800852c:	4684      	mov	ip, r0
 800852e:	4461      	add	r1, ip
 8008530:	000b      	movs	r3, r1
 8008532:	0020      	movs	r0, r4
 8008534:	0029      	movs	r1, r5
 8008536:	9a08      	ldr	r2, [sp, #32]
 8008538:	f7f7 ff8e 	bl	8000458 <__aeabi_dcmplt>
 800853c:	2800      	cmp	r0, #0
 800853e:	d000      	beq.n	8008542 <_dtoa_r+0x496>
 8008540:	e29f      	b.n	8008a82 <_dtoa_r+0x9d6>
 8008542:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008544:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008546:	9308      	str	r3, [sp, #32]
 8008548:	9409      	str	r4, [sp, #36]	; 0x24
 800854a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800854c:	2b00      	cmp	r3, #0
 800854e:	da00      	bge.n	8008552 <_dtoa_r+0x4a6>
 8008550:	e172      	b.n	8008838 <_dtoa_r+0x78c>
 8008552:	9a02      	ldr	r2, [sp, #8]
 8008554:	2a0e      	cmp	r2, #14
 8008556:	dd00      	ble.n	800855a <_dtoa_r+0x4ae>
 8008558:	e16e      	b.n	8008838 <_dtoa_r+0x78c>
 800855a:	4b78      	ldr	r3, [pc, #480]	; (800873c <_dtoa_r+0x690>)
 800855c:	00d2      	lsls	r2, r2, #3
 800855e:	189b      	adds	r3, r3, r2
 8008560:	685c      	ldr	r4, [r3, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	930a      	str	r3, [sp, #40]	; 0x28
 8008566:	940b      	str	r4, [sp, #44]	; 0x2c
 8008568:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800856a:	2b00      	cmp	r3, #0
 800856c:	db00      	blt.n	8008570 <_dtoa_r+0x4c4>
 800856e:	e0f7      	b.n	8008760 <_dtoa_r+0x6b4>
 8008570:	9b07      	ldr	r3, [sp, #28]
 8008572:	2b00      	cmp	r3, #0
 8008574:	dd00      	ble.n	8008578 <_dtoa_r+0x4cc>
 8008576:	e0f3      	b.n	8008760 <_dtoa_r+0x6b4>
 8008578:	d000      	beq.n	800857c <_dtoa_r+0x4d0>
 800857a:	e282      	b.n	8008a82 <_dtoa_r+0x9d6>
 800857c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800857e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008580:	2200      	movs	r2, #0
 8008582:	4b74      	ldr	r3, [pc, #464]	; (8008754 <_dtoa_r+0x6a8>)
 8008584:	f7f9 fa62 	bl	8001a4c <__aeabi_dmul>
 8008588:	9a08      	ldr	r2, [sp, #32]
 800858a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858c:	f7f7 ff82 	bl	8000494 <__aeabi_dcmpge>
 8008590:	9e07      	ldr	r6, [sp, #28]
 8008592:	0035      	movs	r5, r6
 8008594:	2800      	cmp	r0, #0
 8008596:	d000      	beq.n	800859a <_dtoa_r+0x4ee>
 8008598:	e259      	b.n	8008a4e <_dtoa_r+0x9a2>
 800859a:	9b06      	ldr	r3, [sp, #24]
 800859c:	9a06      	ldr	r2, [sp, #24]
 800859e:	3301      	adds	r3, #1
 80085a0:	9308      	str	r3, [sp, #32]
 80085a2:	2331      	movs	r3, #49	; 0x31
 80085a4:	7013      	strb	r3, [r2, #0]
 80085a6:	9b02      	ldr	r3, [sp, #8]
 80085a8:	3301      	adds	r3, #1
 80085aa:	9302      	str	r3, [sp, #8]
 80085ac:	e254      	b.n	8008a58 <_dtoa_r+0x9ac>
 80085ae:	4234      	tst	r4, r6
 80085b0:	d007      	beq.n	80085c2 <_dtoa_r+0x516>
 80085b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085b4:	3301      	adds	r3, #1
 80085b6:	9310      	str	r3, [sp, #64]	; 0x40
 80085b8:	682a      	ldr	r2, [r5, #0]
 80085ba:	686b      	ldr	r3, [r5, #4]
 80085bc:	f7f9 fa46 	bl	8001a4c <__aeabi_dmul>
 80085c0:	0033      	movs	r3, r6
 80085c2:	1064      	asrs	r4, r4, #1
 80085c4:	3508      	adds	r5, #8
 80085c6:	e75a      	b.n	800847e <_dtoa_r+0x3d2>
 80085c8:	9e02      	ldr	r6, [sp, #8]
 80085ca:	9b07      	ldr	r3, [sp, #28]
 80085cc:	e780      	b.n	80084d0 <_dtoa_r+0x424>
 80085ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80085d2:	1e5a      	subs	r2, r3, #1
 80085d4:	4b59      	ldr	r3, [pc, #356]	; (800873c <_dtoa_r+0x690>)
 80085d6:	00d2      	lsls	r2, r2, #3
 80085d8:	189b      	adds	r3, r3, r2
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	2900      	cmp	r1, #0
 80085e0:	d051      	beq.n	8008686 <_dtoa_r+0x5da>
 80085e2:	2000      	movs	r0, #0
 80085e4:	495d      	ldr	r1, [pc, #372]	; (800875c <_dtoa_r+0x6b0>)
 80085e6:	f7f8 fe2f 	bl	8001248 <__aeabi_ddiv>
 80085ea:	9a08      	ldr	r2, [sp, #32]
 80085ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ee:	f7f9 fc99 	bl	8001f24 <__aeabi_dsub>
 80085f2:	9a06      	ldr	r2, [sp, #24]
 80085f4:	9b06      	ldr	r3, [sp, #24]
 80085f6:	4694      	mov	ip, r2
 80085f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80085fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085fc:	9010      	str	r0, [sp, #64]	; 0x40
 80085fe:	9111      	str	r1, [sp, #68]	; 0x44
 8008600:	4463      	add	r3, ip
 8008602:	9319      	str	r3, [sp, #100]	; 0x64
 8008604:	0029      	movs	r1, r5
 8008606:	0020      	movs	r0, r4
 8008608:	f7fa f83c 	bl	8002684 <__aeabi_d2iz>
 800860c:	9014      	str	r0, [sp, #80]	; 0x50
 800860e:	f7fa f86f 	bl	80026f0 <__aeabi_i2d>
 8008612:	0002      	movs	r2, r0
 8008614:	000b      	movs	r3, r1
 8008616:	0020      	movs	r0, r4
 8008618:	0029      	movs	r1, r5
 800861a:	f7f9 fc83 	bl	8001f24 <__aeabi_dsub>
 800861e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008620:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008622:	3301      	adds	r3, #1
 8008624:	9308      	str	r3, [sp, #32]
 8008626:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008628:	0004      	movs	r4, r0
 800862a:	3330      	adds	r3, #48	; 0x30
 800862c:	7013      	strb	r3, [r2, #0]
 800862e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008630:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008632:	000d      	movs	r5, r1
 8008634:	f7f7 ff10 	bl	8000458 <__aeabi_dcmplt>
 8008638:	2800      	cmp	r0, #0
 800863a:	d175      	bne.n	8008728 <_dtoa_r+0x67c>
 800863c:	0022      	movs	r2, r4
 800863e:	002b      	movs	r3, r5
 8008640:	2000      	movs	r0, #0
 8008642:	4940      	ldr	r1, [pc, #256]	; (8008744 <_dtoa_r+0x698>)
 8008644:	f7f9 fc6e 	bl	8001f24 <__aeabi_dsub>
 8008648:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800864a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800864c:	f7f7 ff04 	bl	8000458 <__aeabi_dcmplt>
 8008650:	2800      	cmp	r0, #0
 8008652:	d000      	beq.n	8008656 <_dtoa_r+0x5aa>
 8008654:	e0d2      	b.n	80087fc <_dtoa_r+0x750>
 8008656:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008658:	9a08      	ldr	r2, [sp, #32]
 800865a:	4293      	cmp	r3, r2
 800865c:	d100      	bne.n	8008660 <_dtoa_r+0x5b4>
 800865e:	e770      	b.n	8008542 <_dtoa_r+0x496>
 8008660:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008662:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008664:	2200      	movs	r2, #0
 8008666:	4b38      	ldr	r3, [pc, #224]	; (8008748 <_dtoa_r+0x69c>)
 8008668:	f7f9 f9f0 	bl	8001a4c <__aeabi_dmul>
 800866c:	4b36      	ldr	r3, [pc, #216]	; (8008748 <_dtoa_r+0x69c>)
 800866e:	9010      	str	r0, [sp, #64]	; 0x40
 8008670:	9111      	str	r1, [sp, #68]	; 0x44
 8008672:	2200      	movs	r2, #0
 8008674:	0020      	movs	r0, r4
 8008676:	0029      	movs	r1, r5
 8008678:	f7f9 f9e8 	bl	8001a4c <__aeabi_dmul>
 800867c:	9b08      	ldr	r3, [sp, #32]
 800867e:	0004      	movs	r4, r0
 8008680:	000d      	movs	r5, r1
 8008682:	9317      	str	r3, [sp, #92]	; 0x5c
 8008684:	e7be      	b.n	8008604 <_dtoa_r+0x558>
 8008686:	9808      	ldr	r0, [sp, #32]
 8008688:	9909      	ldr	r1, [sp, #36]	; 0x24
 800868a:	f7f9 f9df 	bl	8001a4c <__aeabi_dmul>
 800868e:	9a06      	ldr	r2, [sp, #24]
 8008690:	9b06      	ldr	r3, [sp, #24]
 8008692:	4694      	mov	ip, r2
 8008694:	9308      	str	r3, [sp, #32]
 8008696:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008698:	9010      	str	r0, [sp, #64]	; 0x40
 800869a:	9111      	str	r1, [sp, #68]	; 0x44
 800869c:	4463      	add	r3, ip
 800869e:	9319      	str	r3, [sp, #100]	; 0x64
 80086a0:	0029      	movs	r1, r5
 80086a2:	0020      	movs	r0, r4
 80086a4:	f7f9 ffee 	bl	8002684 <__aeabi_d2iz>
 80086a8:	9017      	str	r0, [sp, #92]	; 0x5c
 80086aa:	f7fa f821 	bl	80026f0 <__aeabi_i2d>
 80086ae:	0002      	movs	r2, r0
 80086b0:	000b      	movs	r3, r1
 80086b2:	0020      	movs	r0, r4
 80086b4:	0029      	movs	r1, r5
 80086b6:	f7f9 fc35 	bl	8001f24 <__aeabi_dsub>
 80086ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086bc:	9a08      	ldr	r2, [sp, #32]
 80086be:	3330      	adds	r3, #48	; 0x30
 80086c0:	7013      	strb	r3, [r2, #0]
 80086c2:	0013      	movs	r3, r2
 80086c4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80086c6:	3301      	adds	r3, #1
 80086c8:	0004      	movs	r4, r0
 80086ca:	000d      	movs	r5, r1
 80086cc:	9308      	str	r3, [sp, #32]
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d12c      	bne.n	800872c <_dtoa_r+0x680>
 80086d2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80086d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80086d6:	9a06      	ldr	r2, [sp, #24]
 80086d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086da:	4694      	mov	ip, r2
 80086dc:	4463      	add	r3, ip
 80086de:	2200      	movs	r2, #0
 80086e0:	9308      	str	r3, [sp, #32]
 80086e2:	4b1e      	ldr	r3, [pc, #120]	; (800875c <_dtoa_r+0x6b0>)
 80086e4:	f7f8 fa74 	bl	8000bd0 <__aeabi_dadd>
 80086e8:	0002      	movs	r2, r0
 80086ea:	000b      	movs	r3, r1
 80086ec:	0020      	movs	r0, r4
 80086ee:	0029      	movs	r1, r5
 80086f0:	f7f7 fec6 	bl	8000480 <__aeabi_dcmpgt>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d000      	beq.n	80086fa <_dtoa_r+0x64e>
 80086f8:	e080      	b.n	80087fc <_dtoa_r+0x750>
 80086fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086fe:	2000      	movs	r0, #0
 8008700:	4916      	ldr	r1, [pc, #88]	; (800875c <_dtoa_r+0x6b0>)
 8008702:	f7f9 fc0f 	bl	8001f24 <__aeabi_dsub>
 8008706:	0002      	movs	r2, r0
 8008708:	000b      	movs	r3, r1
 800870a:	0020      	movs	r0, r4
 800870c:	0029      	movs	r1, r5
 800870e:	f7f7 fea3 	bl	8000458 <__aeabi_dcmplt>
 8008712:	2800      	cmp	r0, #0
 8008714:	d100      	bne.n	8008718 <_dtoa_r+0x66c>
 8008716:	e714      	b.n	8008542 <_dtoa_r+0x496>
 8008718:	9b08      	ldr	r3, [sp, #32]
 800871a:	001a      	movs	r2, r3
 800871c:	3a01      	subs	r2, #1
 800871e:	9208      	str	r2, [sp, #32]
 8008720:	7812      	ldrb	r2, [r2, #0]
 8008722:	2a30      	cmp	r2, #48	; 0x30
 8008724:	d0f8      	beq.n	8008718 <_dtoa_r+0x66c>
 8008726:	9308      	str	r3, [sp, #32]
 8008728:	9602      	str	r6, [sp, #8]
 800872a:	e055      	b.n	80087d8 <_dtoa_r+0x72c>
 800872c:	2200      	movs	r2, #0
 800872e:	4b06      	ldr	r3, [pc, #24]	; (8008748 <_dtoa_r+0x69c>)
 8008730:	f7f9 f98c 	bl	8001a4c <__aeabi_dmul>
 8008734:	0004      	movs	r4, r0
 8008736:	000d      	movs	r5, r1
 8008738:	e7b2      	b.n	80086a0 <_dtoa_r+0x5f4>
 800873a:	46c0      	nop			; (mov r8, r8)
 800873c:	0800b488 	.word	0x0800b488
 8008740:	0800b460 	.word	0x0800b460
 8008744:	3ff00000 	.word	0x3ff00000
 8008748:	40240000 	.word	0x40240000
 800874c:	401c0000 	.word	0x401c0000
 8008750:	fcc00000 	.word	0xfcc00000
 8008754:	40140000 	.word	0x40140000
 8008758:	7cc00000 	.word	0x7cc00000
 800875c:	3fe00000 	.word	0x3fe00000
 8008760:	9b07      	ldr	r3, [sp, #28]
 8008762:	9e06      	ldr	r6, [sp, #24]
 8008764:	3b01      	subs	r3, #1
 8008766:	199b      	adds	r3, r3, r6
 8008768:	930c      	str	r3, [sp, #48]	; 0x30
 800876a:	9c08      	ldr	r4, [sp, #32]
 800876c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800876e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008772:	0020      	movs	r0, r4
 8008774:	0029      	movs	r1, r5
 8008776:	f7f8 fd67 	bl	8001248 <__aeabi_ddiv>
 800877a:	f7f9 ff83 	bl	8002684 <__aeabi_d2iz>
 800877e:	9007      	str	r0, [sp, #28]
 8008780:	f7f9 ffb6 	bl	80026f0 <__aeabi_i2d>
 8008784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008788:	f7f9 f960 	bl	8001a4c <__aeabi_dmul>
 800878c:	0002      	movs	r2, r0
 800878e:	000b      	movs	r3, r1
 8008790:	0020      	movs	r0, r4
 8008792:	0029      	movs	r1, r5
 8008794:	f7f9 fbc6 	bl	8001f24 <__aeabi_dsub>
 8008798:	0033      	movs	r3, r6
 800879a:	9a07      	ldr	r2, [sp, #28]
 800879c:	3601      	adds	r6, #1
 800879e:	3230      	adds	r2, #48	; 0x30
 80087a0:	701a      	strb	r2, [r3, #0]
 80087a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087a4:	9608      	str	r6, [sp, #32]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d139      	bne.n	800881e <_dtoa_r+0x772>
 80087aa:	0002      	movs	r2, r0
 80087ac:	000b      	movs	r3, r1
 80087ae:	f7f8 fa0f 	bl	8000bd0 <__aeabi_dadd>
 80087b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087b6:	0004      	movs	r4, r0
 80087b8:	000d      	movs	r5, r1
 80087ba:	f7f7 fe61 	bl	8000480 <__aeabi_dcmpgt>
 80087be:	2800      	cmp	r0, #0
 80087c0:	d11b      	bne.n	80087fa <_dtoa_r+0x74e>
 80087c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087c6:	0020      	movs	r0, r4
 80087c8:	0029      	movs	r1, r5
 80087ca:	f7f7 fe3f 	bl	800044c <__aeabi_dcmpeq>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d002      	beq.n	80087d8 <_dtoa_r+0x72c>
 80087d2:	9b07      	ldr	r3, [sp, #28]
 80087d4:	07db      	lsls	r3, r3, #31
 80087d6:	d410      	bmi.n	80087fa <_dtoa_r+0x74e>
 80087d8:	0038      	movs	r0, r7
 80087da:	9905      	ldr	r1, [sp, #20]
 80087dc:	f000 fe6c 	bl	80094b8 <_Bfree>
 80087e0:	2300      	movs	r3, #0
 80087e2:	9a08      	ldr	r2, [sp, #32]
 80087e4:	9802      	ldr	r0, [sp, #8]
 80087e6:	7013      	strb	r3, [r2, #0]
 80087e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80087ea:	3001      	adds	r0, #1
 80087ec:	6018      	str	r0, [r3, #0]
 80087ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d100      	bne.n	80087f6 <_dtoa_r+0x74a>
 80087f4:	e4a6      	b.n	8008144 <_dtoa_r+0x98>
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	e4a4      	b.n	8008144 <_dtoa_r+0x98>
 80087fa:	9e02      	ldr	r6, [sp, #8]
 80087fc:	9b08      	ldr	r3, [sp, #32]
 80087fe:	9308      	str	r3, [sp, #32]
 8008800:	3b01      	subs	r3, #1
 8008802:	781a      	ldrb	r2, [r3, #0]
 8008804:	2a39      	cmp	r2, #57	; 0x39
 8008806:	d106      	bne.n	8008816 <_dtoa_r+0x76a>
 8008808:	9a06      	ldr	r2, [sp, #24]
 800880a:	429a      	cmp	r2, r3
 800880c:	d1f7      	bne.n	80087fe <_dtoa_r+0x752>
 800880e:	2230      	movs	r2, #48	; 0x30
 8008810:	9906      	ldr	r1, [sp, #24]
 8008812:	3601      	adds	r6, #1
 8008814:	700a      	strb	r2, [r1, #0]
 8008816:	781a      	ldrb	r2, [r3, #0]
 8008818:	3201      	adds	r2, #1
 800881a:	701a      	strb	r2, [r3, #0]
 800881c:	e784      	b.n	8008728 <_dtoa_r+0x67c>
 800881e:	2200      	movs	r2, #0
 8008820:	4baa      	ldr	r3, [pc, #680]	; (8008acc <_dtoa_r+0xa20>)
 8008822:	f7f9 f913 	bl	8001a4c <__aeabi_dmul>
 8008826:	2200      	movs	r2, #0
 8008828:	2300      	movs	r3, #0
 800882a:	0004      	movs	r4, r0
 800882c:	000d      	movs	r5, r1
 800882e:	f7f7 fe0d 	bl	800044c <__aeabi_dcmpeq>
 8008832:	2800      	cmp	r0, #0
 8008834:	d09b      	beq.n	800876e <_dtoa_r+0x6c2>
 8008836:	e7cf      	b.n	80087d8 <_dtoa_r+0x72c>
 8008838:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800883a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800883c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800883e:	2d00      	cmp	r5, #0
 8008840:	d012      	beq.n	8008868 <_dtoa_r+0x7bc>
 8008842:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008844:	2a01      	cmp	r2, #1
 8008846:	dc66      	bgt.n	8008916 <_dtoa_r+0x86a>
 8008848:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800884a:	2a00      	cmp	r2, #0
 800884c:	d05d      	beq.n	800890a <_dtoa_r+0x85e>
 800884e:	4aa0      	ldr	r2, [pc, #640]	; (8008ad0 <_dtoa_r+0xa24>)
 8008850:	189b      	adds	r3, r3, r2
 8008852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008854:	2101      	movs	r1, #1
 8008856:	18d2      	adds	r2, r2, r3
 8008858:	920a      	str	r2, [sp, #40]	; 0x28
 800885a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800885c:	0038      	movs	r0, r7
 800885e:	18d3      	adds	r3, r2, r3
 8008860:	930d      	str	r3, [sp, #52]	; 0x34
 8008862:	f000 ff25 	bl	80096b0 <__i2b>
 8008866:	0005      	movs	r5, r0
 8008868:	2c00      	cmp	r4, #0
 800886a:	dd0e      	ble.n	800888a <_dtoa_r+0x7de>
 800886c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800886e:	2b00      	cmp	r3, #0
 8008870:	dd0b      	ble.n	800888a <_dtoa_r+0x7de>
 8008872:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008874:	0023      	movs	r3, r4
 8008876:	4294      	cmp	r4, r2
 8008878:	dd00      	ble.n	800887c <_dtoa_r+0x7d0>
 800887a:	0013      	movs	r3, r2
 800887c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800887e:	1ae4      	subs	r4, r4, r3
 8008880:	1ad2      	subs	r2, r2, r3
 8008882:	920a      	str	r2, [sp, #40]	; 0x28
 8008884:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	930d      	str	r3, [sp, #52]	; 0x34
 800888a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800888c:	2b00      	cmp	r3, #0
 800888e:	d01f      	beq.n	80088d0 <_dtoa_r+0x824>
 8008890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008892:	2b00      	cmp	r3, #0
 8008894:	d054      	beq.n	8008940 <_dtoa_r+0x894>
 8008896:	2e00      	cmp	r6, #0
 8008898:	dd11      	ble.n	80088be <_dtoa_r+0x812>
 800889a:	0029      	movs	r1, r5
 800889c:	0032      	movs	r2, r6
 800889e:	0038      	movs	r0, r7
 80088a0:	f000 ffcc 	bl	800983c <__pow5mult>
 80088a4:	9a05      	ldr	r2, [sp, #20]
 80088a6:	0001      	movs	r1, r0
 80088a8:	0005      	movs	r5, r0
 80088aa:	0038      	movs	r0, r7
 80088ac:	f000 ff16 	bl	80096dc <__multiply>
 80088b0:	9905      	ldr	r1, [sp, #20]
 80088b2:	9014      	str	r0, [sp, #80]	; 0x50
 80088b4:	0038      	movs	r0, r7
 80088b6:	f000 fdff 	bl	80094b8 <_Bfree>
 80088ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088bc:	9305      	str	r3, [sp, #20]
 80088be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088c0:	1b9a      	subs	r2, r3, r6
 80088c2:	42b3      	cmp	r3, r6
 80088c4:	d004      	beq.n	80088d0 <_dtoa_r+0x824>
 80088c6:	0038      	movs	r0, r7
 80088c8:	9905      	ldr	r1, [sp, #20]
 80088ca:	f000 ffb7 	bl	800983c <__pow5mult>
 80088ce:	9005      	str	r0, [sp, #20]
 80088d0:	2101      	movs	r1, #1
 80088d2:	0038      	movs	r0, r7
 80088d4:	f000 feec 	bl	80096b0 <__i2b>
 80088d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088da:	0006      	movs	r6, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	dd31      	ble.n	8008944 <_dtoa_r+0x898>
 80088e0:	001a      	movs	r2, r3
 80088e2:	0001      	movs	r1, r0
 80088e4:	0038      	movs	r0, r7
 80088e6:	f000 ffa9 	bl	800983c <__pow5mult>
 80088ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088ec:	0006      	movs	r6, r0
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	dd2d      	ble.n	800894e <_dtoa_r+0x8a2>
 80088f2:	2300      	movs	r3, #0
 80088f4:	930e      	str	r3, [sp, #56]	; 0x38
 80088f6:	6933      	ldr	r3, [r6, #16]
 80088f8:	3303      	adds	r3, #3
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	18f3      	adds	r3, r6, r3
 80088fe:	6858      	ldr	r0, [r3, #4]
 8008900:	f000 fe8e 	bl	8009620 <__hi0bits>
 8008904:	2320      	movs	r3, #32
 8008906:	1a18      	subs	r0, r3, r0
 8008908:	e039      	b.n	800897e <_dtoa_r+0x8d2>
 800890a:	2336      	movs	r3, #54	; 0x36
 800890c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800890e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008910:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008912:	1a9b      	subs	r3, r3, r2
 8008914:	e79d      	b.n	8008852 <_dtoa_r+0x7a6>
 8008916:	9b07      	ldr	r3, [sp, #28]
 8008918:	1e5e      	subs	r6, r3, #1
 800891a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800891c:	42b3      	cmp	r3, r6
 800891e:	db07      	blt.n	8008930 <_dtoa_r+0x884>
 8008920:	1b9e      	subs	r6, r3, r6
 8008922:	9b07      	ldr	r3, [sp, #28]
 8008924:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008926:	2b00      	cmp	r3, #0
 8008928:	da93      	bge.n	8008852 <_dtoa_r+0x7a6>
 800892a:	1ae4      	subs	r4, r4, r3
 800892c:	2300      	movs	r3, #0
 800892e:	e790      	b.n	8008852 <_dtoa_r+0x7a6>
 8008930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008932:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008934:	1af3      	subs	r3, r6, r3
 8008936:	18d3      	adds	r3, r2, r3
 8008938:	960e      	str	r6, [sp, #56]	; 0x38
 800893a:	9315      	str	r3, [sp, #84]	; 0x54
 800893c:	2600      	movs	r6, #0
 800893e:	e7f0      	b.n	8008922 <_dtoa_r+0x876>
 8008940:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008942:	e7c0      	b.n	80088c6 <_dtoa_r+0x81a>
 8008944:	2300      	movs	r3, #0
 8008946:	930e      	str	r3, [sp, #56]	; 0x38
 8008948:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800894a:	2b01      	cmp	r3, #1
 800894c:	dc13      	bgt.n	8008976 <_dtoa_r+0x8ca>
 800894e:	2300      	movs	r3, #0
 8008950:	930e      	str	r3, [sp, #56]	; 0x38
 8008952:	9b08      	ldr	r3, [sp, #32]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10e      	bne.n	8008976 <_dtoa_r+0x8ca>
 8008958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800895a:	031b      	lsls	r3, r3, #12
 800895c:	d10b      	bne.n	8008976 <_dtoa_r+0x8ca>
 800895e:	4b5d      	ldr	r3, [pc, #372]	; (8008ad4 <_dtoa_r+0xa28>)
 8008960:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008962:	4213      	tst	r3, r2
 8008964:	d007      	beq.n	8008976 <_dtoa_r+0x8ca>
 8008966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008968:	3301      	adds	r3, #1
 800896a:	930a      	str	r3, [sp, #40]	; 0x28
 800896c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800896e:	3301      	adds	r3, #1
 8008970:	930d      	str	r3, [sp, #52]	; 0x34
 8008972:	2301      	movs	r3, #1
 8008974:	930e      	str	r3, [sp, #56]	; 0x38
 8008976:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008978:	2001      	movs	r0, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1bb      	bne.n	80088f6 <_dtoa_r+0x84a>
 800897e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008980:	221f      	movs	r2, #31
 8008982:	1818      	adds	r0, r3, r0
 8008984:	0003      	movs	r3, r0
 8008986:	4013      	ands	r3, r2
 8008988:	4210      	tst	r0, r2
 800898a:	d046      	beq.n	8008a1a <_dtoa_r+0x96e>
 800898c:	3201      	adds	r2, #1
 800898e:	1ad2      	subs	r2, r2, r3
 8008990:	2a04      	cmp	r2, #4
 8008992:	dd3f      	ble.n	8008a14 <_dtoa_r+0x968>
 8008994:	221c      	movs	r2, #28
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800899a:	18e4      	adds	r4, r4, r3
 800899c:	18d2      	adds	r2, r2, r3
 800899e:	920a      	str	r2, [sp, #40]	; 0x28
 80089a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089a2:	18d3      	adds	r3, r2, r3
 80089a4:	930d      	str	r3, [sp, #52]	; 0x34
 80089a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	dd05      	ble.n	80089b8 <_dtoa_r+0x90c>
 80089ac:	001a      	movs	r2, r3
 80089ae:	0038      	movs	r0, r7
 80089b0:	9905      	ldr	r1, [sp, #20]
 80089b2:	f000 ff9f 	bl	80098f4 <__lshift>
 80089b6:	9005      	str	r0, [sp, #20]
 80089b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	dd05      	ble.n	80089ca <_dtoa_r+0x91e>
 80089be:	0031      	movs	r1, r6
 80089c0:	001a      	movs	r2, r3
 80089c2:	0038      	movs	r0, r7
 80089c4:	f000 ff96 	bl	80098f4 <__lshift>
 80089c8:	0006      	movs	r6, r0
 80089ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d026      	beq.n	8008a1e <_dtoa_r+0x972>
 80089d0:	0031      	movs	r1, r6
 80089d2:	9805      	ldr	r0, [sp, #20]
 80089d4:	f000 fffc 	bl	80099d0 <__mcmp>
 80089d8:	2800      	cmp	r0, #0
 80089da:	da20      	bge.n	8008a1e <_dtoa_r+0x972>
 80089dc:	9b02      	ldr	r3, [sp, #8]
 80089de:	220a      	movs	r2, #10
 80089e0:	3b01      	subs	r3, #1
 80089e2:	9302      	str	r3, [sp, #8]
 80089e4:	0038      	movs	r0, r7
 80089e6:	2300      	movs	r3, #0
 80089e8:	9905      	ldr	r1, [sp, #20]
 80089ea:	f000 fd89 	bl	8009500 <__multadd>
 80089ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089f0:	9005      	str	r0, [sp, #20]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d100      	bne.n	80089f8 <_dtoa_r+0x94c>
 80089f6:	e166      	b.n	8008cc6 <_dtoa_r+0xc1a>
 80089f8:	2300      	movs	r3, #0
 80089fa:	0029      	movs	r1, r5
 80089fc:	220a      	movs	r2, #10
 80089fe:	0038      	movs	r0, r7
 8008a00:	f000 fd7e 	bl	8009500 <__multadd>
 8008a04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a06:	0005      	movs	r5, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	dc47      	bgt.n	8008a9c <_dtoa_r+0x9f0>
 8008a0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	dc0d      	bgt.n	8008a2e <_dtoa_r+0x982>
 8008a12:	e043      	b.n	8008a9c <_dtoa_r+0x9f0>
 8008a14:	2a04      	cmp	r2, #4
 8008a16:	d0c6      	beq.n	80089a6 <_dtoa_r+0x8fa>
 8008a18:	0013      	movs	r3, r2
 8008a1a:	331c      	adds	r3, #28
 8008a1c:	e7bc      	b.n	8008998 <_dtoa_r+0x8ec>
 8008a1e:	9b07      	ldr	r3, [sp, #28]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	dc35      	bgt.n	8008a90 <_dtoa_r+0x9e4>
 8008a24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	dd32      	ble.n	8008a90 <_dtoa_r+0x9e4>
 8008a2a:	9b07      	ldr	r3, [sp, #28]
 8008a2c:	930c      	str	r3, [sp, #48]	; 0x30
 8008a2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10c      	bne.n	8008a4e <_dtoa_r+0x9a2>
 8008a34:	0031      	movs	r1, r6
 8008a36:	2205      	movs	r2, #5
 8008a38:	0038      	movs	r0, r7
 8008a3a:	f000 fd61 	bl	8009500 <__multadd>
 8008a3e:	0006      	movs	r6, r0
 8008a40:	0001      	movs	r1, r0
 8008a42:	9805      	ldr	r0, [sp, #20]
 8008a44:	f000 ffc4 	bl	80099d0 <__mcmp>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	dd00      	ble.n	8008a4e <_dtoa_r+0x9a2>
 8008a4c:	e5a5      	b.n	800859a <_dtoa_r+0x4ee>
 8008a4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a50:	43db      	mvns	r3, r3
 8008a52:	9302      	str	r3, [sp, #8]
 8008a54:	9b06      	ldr	r3, [sp, #24]
 8008a56:	9308      	str	r3, [sp, #32]
 8008a58:	2400      	movs	r4, #0
 8008a5a:	0031      	movs	r1, r6
 8008a5c:	0038      	movs	r0, r7
 8008a5e:	f000 fd2b 	bl	80094b8 <_Bfree>
 8008a62:	2d00      	cmp	r5, #0
 8008a64:	d100      	bne.n	8008a68 <_dtoa_r+0x9bc>
 8008a66:	e6b7      	b.n	80087d8 <_dtoa_r+0x72c>
 8008a68:	2c00      	cmp	r4, #0
 8008a6a:	d005      	beq.n	8008a78 <_dtoa_r+0x9cc>
 8008a6c:	42ac      	cmp	r4, r5
 8008a6e:	d003      	beq.n	8008a78 <_dtoa_r+0x9cc>
 8008a70:	0021      	movs	r1, r4
 8008a72:	0038      	movs	r0, r7
 8008a74:	f000 fd20 	bl	80094b8 <_Bfree>
 8008a78:	0029      	movs	r1, r5
 8008a7a:	0038      	movs	r0, r7
 8008a7c:	f000 fd1c 	bl	80094b8 <_Bfree>
 8008a80:	e6aa      	b.n	80087d8 <_dtoa_r+0x72c>
 8008a82:	2600      	movs	r6, #0
 8008a84:	0035      	movs	r5, r6
 8008a86:	e7e2      	b.n	8008a4e <_dtoa_r+0x9a2>
 8008a88:	9602      	str	r6, [sp, #8]
 8008a8a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008a8c:	0035      	movs	r5, r6
 8008a8e:	e584      	b.n	800859a <_dtoa_r+0x4ee>
 8008a90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d100      	bne.n	8008a98 <_dtoa_r+0x9ec>
 8008a96:	e0ce      	b.n	8008c36 <_dtoa_r+0xb8a>
 8008a98:	9b07      	ldr	r3, [sp, #28]
 8008a9a:	930c      	str	r3, [sp, #48]	; 0x30
 8008a9c:	2c00      	cmp	r4, #0
 8008a9e:	dd05      	ble.n	8008aac <_dtoa_r+0xa00>
 8008aa0:	0029      	movs	r1, r5
 8008aa2:	0022      	movs	r2, r4
 8008aa4:	0038      	movs	r0, r7
 8008aa6:	f000 ff25 	bl	80098f4 <__lshift>
 8008aaa:	0005      	movs	r5, r0
 8008aac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008aae:	0028      	movs	r0, r5
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d022      	beq.n	8008afa <_dtoa_r+0xa4e>
 8008ab4:	0038      	movs	r0, r7
 8008ab6:	6869      	ldr	r1, [r5, #4]
 8008ab8:	f000 fcba 	bl	8009430 <_Balloc>
 8008abc:	1e04      	subs	r4, r0, #0
 8008abe:	d10f      	bne.n	8008ae0 <_dtoa_r+0xa34>
 8008ac0:	0002      	movs	r2, r0
 8008ac2:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <_dtoa_r+0xa2c>)
 8008ac4:	4905      	ldr	r1, [pc, #20]	; (8008adc <_dtoa_r+0xa30>)
 8008ac6:	f7ff fb06 	bl	80080d6 <_dtoa_r+0x2a>
 8008aca:	46c0      	nop			; (mov r8, r8)
 8008acc:	40240000 	.word	0x40240000
 8008ad0:	00000433 	.word	0x00000433
 8008ad4:	7ff00000 	.word	0x7ff00000
 8008ad8:	0800b378 	.word	0x0800b378
 8008adc:	000002ea 	.word	0x000002ea
 8008ae0:	0029      	movs	r1, r5
 8008ae2:	692b      	ldr	r3, [r5, #16]
 8008ae4:	310c      	adds	r1, #12
 8008ae6:	1c9a      	adds	r2, r3, #2
 8008ae8:	0092      	lsls	r2, r2, #2
 8008aea:	300c      	adds	r0, #12
 8008aec:	f000 fc97 	bl	800941e <memcpy>
 8008af0:	2201      	movs	r2, #1
 8008af2:	0021      	movs	r1, r4
 8008af4:	0038      	movs	r0, r7
 8008af6:	f000 fefd 	bl	80098f4 <__lshift>
 8008afa:	9b06      	ldr	r3, [sp, #24]
 8008afc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008afe:	930a      	str	r3, [sp, #40]	; 0x28
 8008b00:	3b01      	subs	r3, #1
 8008b02:	189b      	adds	r3, r3, r2
 8008b04:	2201      	movs	r2, #1
 8008b06:	002c      	movs	r4, r5
 8008b08:	0005      	movs	r5, r0
 8008b0a:	9314      	str	r3, [sp, #80]	; 0x50
 8008b0c:	9b08      	ldr	r3, [sp, #32]
 8008b0e:	4013      	ands	r3, r2
 8008b10:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b12:	0031      	movs	r1, r6
 8008b14:	9805      	ldr	r0, [sp, #20]
 8008b16:	f7ff fa3d 	bl	8007f94 <quorem>
 8008b1a:	0003      	movs	r3, r0
 8008b1c:	0021      	movs	r1, r4
 8008b1e:	3330      	adds	r3, #48	; 0x30
 8008b20:	900d      	str	r0, [sp, #52]	; 0x34
 8008b22:	9805      	ldr	r0, [sp, #20]
 8008b24:	9307      	str	r3, [sp, #28]
 8008b26:	f000 ff53 	bl	80099d0 <__mcmp>
 8008b2a:	002a      	movs	r2, r5
 8008b2c:	900e      	str	r0, [sp, #56]	; 0x38
 8008b2e:	0031      	movs	r1, r6
 8008b30:	0038      	movs	r0, r7
 8008b32:	f000 ff69 	bl	8009a08 <__mdiff>
 8008b36:	68c3      	ldr	r3, [r0, #12]
 8008b38:	9008      	str	r0, [sp, #32]
 8008b3a:	9310      	str	r3, [sp, #64]	; 0x40
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	930c      	str	r3, [sp, #48]	; 0x30
 8008b40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d104      	bne.n	8008b50 <_dtoa_r+0xaa4>
 8008b46:	0001      	movs	r1, r0
 8008b48:	9805      	ldr	r0, [sp, #20]
 8008b4a:	f000 ff41 	bl	80099d0 <__mcmp>
 8008b4e:	900c      	str	r0, [sp, #48]	; 0x30
 8008b50:	0038      	movs	r0, r7
 8008b52:	9908      	ldr	r1, [sp, #32]
 8008b54:	f000 fcb0 	bl	80094b8 <_Bfree>
 8008b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	9308      	str	r3, [sp, #32]
 8008b60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b62:	4313      	orrs	r3, r2
 8008b64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b66:	4313      	orrs	r3, r2
 8008b68:	d10c      	bne.n	8008b84 <_dtoa_r+0xad8>
 8008b6a:	9b07      	ldr	r3, [sp, #28]
 8008b6c:	2b39      	cmp	r3, #57	; 0x39
 8008b6e:	d026      	beq.n	8008bbe <_dtoa_r+0xb12>
 8008b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	dd02      	ble.n	8008b7c <_dtoa_r+0xad0>
 8008b76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b78:	3331      	adds	r3, #49	; 0x31
 8008b7a:	9307      	str	r3, [sp, #28]
 8008b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b7e:	9a07      	ldr	r2, [sp, #28]
 8008b80:	701a      	strb	r2, [r3, #0]
 8008b82:	e76a      	b.n	8008a5a <_dtoa_r+0x9ae>
 8008b84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	db04      	blt.n	8008b94 <_dtoa_r+0xae8>
 8008b8a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b90:	4313      	orrs	r3, r2
 8008b92:	d11f      	bne.n	8008bd4 <_dtoa_r+0xb28>
 8008b94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	ddf0      	ble.n	8008b7c <_dtoa_r+0xad0>
 8008b9a:	9905      	ldr	r1, [sp, #20]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	0038      	movs	r0, r7
 8008ba0:	f000 fea8 	bl	80098f4 <__lshift>
 8008ba4:	0031      	movs	r1, r6
 8008ba6:	9005      	str	r0, [sp, #20]
 8008ba8:	f000 ff12 	bl	80099d0 <__mcmp>
 8008bac:	2800      	cmp	r0, #0
 8008bae:	dc03      	bgt.n	8008bb8 <_dtoa_r+0xb0c>
 8008bb0:	d1e4      	bne.n	8008b7c <_dtoa_r+0xad0>
 8008bb2:	9b07      	ldr	r3, [sp, #28]
 8008bb4:	07db      	lsls	r3, r3, #31
 8008bb6:	d5e1      	bpl.n	8008b7c <_dtoa_r+0xad0>
 8008bb8:	9b07      	ldr	r3, [sp, #28]
 8008bba:	2b39      	cmp	r3, #57	; 0x39
 8008bbc:	d1db      	bne.n	8008b76 <_dtoa_r+0xaca>
 8008bbe:	2339      	movs	r3, #57	; 0x39
 8008bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bc2:	7013      	strb	r3, [r2, #0]
 8008bc4:	9b08      	ldr	r3, [sp, #32]
 8008bc6:	9308      	str	r3, [sp, #32]
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	781a      	ldrb	r2, [r3, #0]
 8008bcc:	2a39      	cmp	r2, #57	; 0x39
 8008bce:	d068      	beq.n	8008ca2 <_dtoa_r+0xbf6>
 8008bd0:	3201      	adds	r2, #1
 8008bd2:	e7d5      	b.n	8008b80 <_dtoa_r+0xad4>
 8008bd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	dd07      	ble.n	8008bea <_dtoa_r+0xb3e>
 8008bda:	9b07      	ldr	r3, [sp, #28]
 8008bdc:	2b39      	cmp	r3, #57	; 0x39
 8008bde:	d0ee      	beq.n	8008bbe <_dtoa_r+0xb12>
 8008be0:	9b07      	ldr	r3, [sp, #28]
 8008be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008be4:	3301      	adds	r3, #1
 8008be6:	7013      	strb	r3, [r2, #0]
 8008be8:	e737      	b.n	8008a5a <_dtoa_r+0x9ae>
 8008bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bec:	9a07      	ldr	r2, [sp, #28]
 8008bee:	701a      	strb	r2, [r3, #0]
 8008bf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008bf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d03e      	beq.n	8008c76 <_dtoa_r+0xbca>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	220a      	movs	r2, #10
 8008bfc:	9905      	ldr	r1, [sp, #20]
 8008bfe:	0038      	movs	r0, r7
 8008c00:	f000 fc7e 	bl	8009500 <__multadd>
 8008c04:	2300      	movs	r3, #0
 8008c06:	9005      	str	r0, [sp, #20]
 8008c08:	220a      	movs	r2, #10
 8008c0a:	0021      	movs	r1, r4
 8008c0c:	0038      	movs	r0, r7
 8008c0e:	42ac      	cmp	r4, r5
 8008c10:	d106      	bne.n	8008c20 <_dtoa_r+0xb74>
 8008c12:	f000 fc75 	bl	8009500 <__multadd>
 8008c16:	0004      	movs	r4, r0
 8008c18:	0005      	movs	r5, r0
 8008c1a:	9b08      	ldr	r3, [sp, #32]
 8008c1c:	930a      	str	r3, [sp, #40]	; 0x28
 8008c1e:	e778      	b.n	8008b12 <_dtoa_r+0xa66>
 8008c20:	f000 fc6e 	bl	8009500 <__multadd>
 8008c24:	0029      	movs	r1, r5
 8008c26:	0004      	movs	r4, r0
 8008c28:	2300      	movs	r3, #0
 8008c2a:	220a      	movs	r2, #10
 8008c2c:	0038      	movs	r0, r7
 8008c2e:	f000 fc67 	bl	8009500 <__multadd>
 8008c32:	0005      	movs	r5, r0
 8008c34:	e7f1      	b.n	8008c1a <_dtoa_r+0xb6e>
 8008c36:	9b07      	ldr	r3, [sp, #28]
 8008c38:	930c      	str	r3, [sp, #48]	; 0x30
 8008c3a:	2400      	movs	r4, #0
 8008c3c:	0031      	movs	r1, r6
 8008c3e:	9805      	ldr	r0, [sp, #20]
 8008c40:	f7ff f9a8 	bl	8007f94 <quorem>
 8008c44:	9b06      	ldr	r3, [sp, #24]
 8008c46:	3030      	adds	r0, #48	; 0x30
 8008c48:	5518      	strb	r0, [r3, r4]
 8008c4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c4c:	3401      	adds	r4, #1
 8008c4e:	9007      	str	r0, [sp, #28]
 8008c50:	42a3      	cmp	r3, r4
 8008c52:	dd07      	ble.n	8008c64 <_dtoa_r+0xbb8>
 8008c54:	2300      	movs	r3, #0
 8008c56:	220a      	movs	r2, #10
 8008c58:	0038      	movs	r0, r7
 8008c5a:	9905      	ldr	r1, [sp, #20]
 8008c5c:	f000 fc50 	bl	8009500 <__multadd>
 8008c60:	9005      	str	r0, [sp, #20]
 8008c62:	e7eb      	b.n	8008c3c <_dtoa_r+0xb90>
 8008c64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c66:	2001      	movs	r0, #1
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	dd00      	ble.n	8008c6e <_dtoa_r+0xbc2>
 8008c6c:	0018      	movs	r0, r3
 8008c6e:	2400      	movs	r4, #0
 8008c70:	9b06      	ldr	r3, [sp, #24]
 8008c72:	181b      	adds	r3, r3, r0
 8008c74:	9308      	str	r3, [sp, #32]
 8008c76:	9905      	ldr	r1, [sp, #20]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	0038      	movs	r0, r7
 8008c7c:	f000 fe3a 	bl	80098f4 <__lshift>
 8008c80:	0031      	movs	r1, r6
 8008c82:	9005      	str	r0, [sp, #20]
 8008c84:	f000 fea4 	bl	80099d0 <__mcmp>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	dc9b      	bgt.n	8008bc4 <_dtoa_r+0xb18>
 8008c8c:	d102      	bne.n	8008c94 <_dtoa_r+0xbe8>
 8008c8e:	9b07      	ldr	r3, [sp, #28]
 8008c90:	07db      	lsls	r3, r3, #31
 8008c92:	d497      	bmi.n	8008bc4 <_dtoa_r+0xb18>
 8008c94:	9b08      	ldr	r3, [sp, #32]
 8008c96:	9308      	str	r3, [sp, #32]
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	781a      	ldrb	r2, [r3, #0]
 8008c9c:	2a30      	cmp	r2, #48	; 0x30
 8008c9e:	d0fa      	beq.n	8008c96 <_dtoa_r+0xbea>
 8008ca0:	e6db      	b.n	8008a5a <_dtoa_r+0x9ae>
 8008ca2:	9a06      	ldr	r2, [sp, #24]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d18e      	bne.n	8008bc6 <_dtoa_r+0xb1a>
 8008ca8:	9b02      	ldr	r3, [sp, #8]
 8008caa:	3301      	adds	r3, #1
 8008cac:	9302      	str	r3, [sp, #8]
 8008cae:	2331      	movs	r3, #49	; 0x31
 8008cb0:	e799      	b.n	8008be6 <_dtoa_r+0xb3a>
 8008cb2:	4b09      	ldr	r3, [pc, #36]	; (8008cd8 <_dtoa_r+0xc2c>)
 8008cb4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008cb6:	9306      	str	r3, [sp, #24]
 8008cb8:	4b08      	ldr	r3, [pc, #32]	; (8008cdc <_dtoa_r+0xc30>)
 8008cba:	2a00      	cmp	r2, #0
 8008cbc:	d001      	beq.n	8008cc2 <_dtoa_r+0xc16>
 8008cbe:	f7ff fa3f 	bl	8008140 <_dtoa_r+0x94>
 8008cc2:	f7ff fa3f 	bl	8008144 <_dtoa_r+0x98>
 8008cc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	dcb6      	bgt.n	8008c3a <_dtoa_r+0xb8e>
 8008ccc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	dd00      	ble.n	8008cd4 <_dtoa_r+0xc28>
 8008cd2:	e6ac      	b.n	8008a2e <_dtoa_r+0x982>
 8008cd4:	e7b1      	b.n	8008c3a <_dtoa_r+0xb8e>
 8008cd6:	46c0      	nop			; (mov r8, r8)
 8008cd8:	0800b2f9 	.word	0x0800b2f9
 8008cdc:	0800b301 	.word	0x0800b301

08008ce0 <rshift>:
 8008ce0:	0002      	movs	r2, r0
 8008ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ce4:	6904      	ldr	r4, [r0, #16]
 8008ce6:	3214      	adds	r2, #20
 8008ce8:	0013      	movs	r3, r2
 8008cea:	b085      	sub	sp, #20
 8008cec:	114f      	asrs	r7, r1, #5
 8008cee:	42bc      	cmp	r4, r7
 8008cf0:	dd31      	ble.n	8008d56 <rshift+0x76>
 8008cf2:	00bb      	lsls	r3, r7, #2
 8008cf4:	18d3      	adds	r3, r2, r3
 8008cf6:	261f      	movs	r6, #31
 8008cf8:	9301      	str	r3, [sp, #4]
 8008cfa:	000b      	movs	r3, r1
 8008cfc:	00a5      	lsls	r5, r4, #2
 8008cfe:	4033      	ands	r3, r6
 8008d00:	1955      	adds	r5, r2, r5
 8008d02:	9302      	str	r3, [sp, #8]
 8008d04:	4231      	tst	r1, r6
 8008d06:	d10c      	bne.n	8008d22 <rshift+0x42>
 8008d08:	0016      	movs	r6, r2
 8008d0a:	9901      	ldr	r1, [sp, #4]
 8008d0c:	428d      	cmp	r5, r1
 8008d0e:	d838      	bhi.n	8008d82 <rshift+0xa2>
 8008d10:	9901      	ldr	r1, [sp, #4]
 8008d12:	2300      	movs	r3, #0
 8008d14:	3903      	subs	r1, #3
 8008d16:	428d      	cmp	r5, r1
 8008d18:	d301      	bcc.n	8008d1e <rshift+0x3e>
 8008d1a:	1be3      	subs	r3, r4, r7
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	18d3      	adds	r3, r2, r3
 8008d20:	e019      	b.n	8008d56 <rshift+0x76>
 8008d22:	2120      	movs	r1, #32
 8008d24:	9b02      	ldr	r3, [sp, #8]
 8008d26:	9e01      	ldr	r6, [sp, #4]
 8008d28:	1acb      	subs	r3, r1, r3
 8008d2a:	9303      	str	r3, [sp, #12]
 8008d2c:	ce02      	ldmia	r6!, {r1}
 8008d2e:	9b02      	ldr	r3, [sp, #8]
 8008d30:	4694      	mov	ip, r2
 8008d32:	40d9      	lsrs	r1, r3
 8008d34:	9100      	str	r1, [sp, #0]
 8008d36:	42b5      	cmp	r5, r6
 8008d38:	d816      	bhi.n	8008d68 <rshift+0x88>
 8008d3a:	9e01      	ldr	r6, [sp, #4]
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	3601      	adds	r6, #1
 8008d40:	42b5      	cmp	r5, r6
 8008d42:	d302      	bcc.n	8008d4a <rshift+0x6a>
 8008d44:	1be3      	subs	r3, r4, r7
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	3b04      	subs	r3, #4
 8008d4a:	9900      	ldr	r1, [sp, #0]
 8008d4c:	18d3      	adds	r3, r2, r3
 8008d4e:	6019      	str	r1, [r3, #0]
 8008d50:	2900      	cmp	r1, #0
 8008d52:	d000      	beq.n	8008d56 <rshift+0x76>
 8008d54:	3304      	adds	r3, #4
 8008d56:	1a99      	subs	r1, r3, r2
 8008d58:	1089      	asrs	r1, r1, #2
 8008d5a:	6101      	str	r1, [r0, #16]
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d101      	bne.n	8008d64 <rshift+0x84>
 8008d60:	2300      	movs	r3, #0
 8008d62:	6143      	str	r3, [r0, #20]
 8008d64:	b005      	add	sp, #20
 8008d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d68:	6833      	ldr	r3, [r6, #0]
 8008d6a:	9903      	ldr	r1, [sp, #12]
 8008d6c:	408b      	lsls	r3, r1
 8008d6e:	9900      	ldr	r1, [sp, #0]
 8008d70:	4319      	orrs	r1, r3
 8008d72:	4663      	mov	r3, ip
 8008d74:	c302      	stmia	r3!, {r1}
 8008d76:	469c      	mov	ip, r3
 8008d78:	ce02      	ldmia	r6!, {r1}
 8008d7a:	9b02      	ldr	r3, [sp, #8]
 8008d7c:	40d9      	lsrs	r1, r3
 8008d7e:	9100      	str	r1, [sp, #0]
 8008d80:	e7d9      	b.n	8008d36 <rshift+0x56>
 8008d82:	c908      	ldmia	r1!, {r3}
 8008d84:	c608      	stmia	r6!, {r3}
 8008d86:	e7c1      	b.n	8008d0c <rshift+0x2c>

08008d88 <__hexdig_fun>:
 8008d88:	0002      	movs	r2, r0
 8008d8a:	3a30      	subs	r2, #48	; 0x30
 8008d8c:	0003      	movs	r3, r0
 8008d8e:	2a09      	cmp	r2, #9
 8008d90:	d802      	bhi.n	8008d98 <__hexdig_fun+0x10>
 8008d92:	3b20      	subs	r3, #32
 8008d94:	b2d8      	uxtb	r0, r3
 8008d96:	4770      	bx	lr
 8008d98:	0002      	movs	r2, r0
 8008d9a:	3a61      	subs	r2, #97	; 0x61
 8008d9c:	2a05      	cmp	r2, #5
 8008d9e:	d801      	bhi.n	8008da4 <__hexdig_fun+0x1c>
 8008da0:	3b47      	subs	r3, #71	; 0x47
 8008da2:	e7f7      	b.n	8008d94 <__hexdig_fun+0xc>
 8008da4:	001a      	movs	r2, r3
 8008da6:	3a41      	subs	r2, #65	; 0x41
 8008da8:	2000      	movs	r0, #0
 8008daa:	2a05      	cmp	r2, #5
 8008dac:	d8f3      	bhi.n	8008d96 <__hexdig_fun+0xe>
 8008dae:	3b27      	subs	r3, #39	; 0x27
 8008db0:	e7f0      	b.n	8008d94 <__hexdig_fun+0xc>
	...

08008db4 <__gethex>:
 8008db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008db6:	b08d      	sub	sp, #52	; 0x34
 8008db8:	930a      	str	r3, [sp, #40]	; 0x28
 8008dba:	4bbf      	ldr	r3, [pc, #764]	; (80090b8 <__gethex+0x304>)
 8008dbc:	9005      	str	r0, [sp, #20]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	9109      	str	r1, [sp, #36]	; 0x24
 8008dc2:	0018      	movs	r0, r3
 8008dc4:	9202      	str	r2, [sp, #8]
 8008dc6:	9307      	str	r3, [sp, #28]
 8008dc8:	f7f7 f99e 	bl	8000108 <strlen>
 8008dcc:	2202      	movs	r2, #2
 8008dce:	9b07      	ldr	r3, [sp, #28]
 8008dd0:	4252      	negs	r2, r2
 8008dd2:	181b      	adds	r3, r3, r0
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	9003      	str	r0, [sp, #12]
 8008dda:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dde:	6819      	ldr	r1, [r3, #0]
 8008de0:	1c8b      	adds	r3, r1, #2
 8008de2:	1a52      	subs	r2, r2, r1
 8008de4:	18d1      	adds	r1, r2, r3
 8008de6:	9301      	str	r3, [sp, #4]
 8008de8:	9108      	str	r1, [sp, #32]
 8008dea:	9901      	ldr	r1, [sp, #4]
 8008dec:	3301      	adds	r3, #1
 8008dee:	7808      	ldrb	r0, [r1, #0]
 8008df0:	2830      	cmp	r0, #48	; 0x30
 8008df2:	d0f7      	beq.n	8008de4 <__gethex+0x30>
 8008df4:	f7ff ffc8 	bl	8008d88 <__hexdig_fun>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	001c      	movs	r4, r3
 8008dfc:	9304      	str	r3, [sp, #16]
 8008dfe:	4298      	cmp	r0, r3
 8008e00:	d11f      	bne.n	8008e42 <__gethex+0x8e>
 8008e02:	9a03      	ldr	r2, [sp, #12]
 8008e04:	9907      	ldr	r1, [sp, #28]
 8008e06:	9801      	ldr	r0, [sp, #4]
 8008e08:	f001 fa64 	bl	800a2d4 <strncmp>
 8008e0c:	0007      	movs	r7, r0
 8008e0e:	42a0      	cmp	r0, r4
 8008e10:	d000      	beq.n	8008e14 <__gethex+0x60>
 8008e12:	e06b      	b.n	8008eec <__gethex+0x138>
 8008e14:	9b01      	ldr	r3, [sp, #4]
 8008e16:	9a03      	ldr	r2, [sp, #12]
 8008e18:	5c98      	ldrb	r0, [r3, r2]
 8008e1a:	189d      	adds	r5, r3, r2
 8008e1c:	f7ff ffb4 	bl	8008d88 <__hexdig_fun>
 8008e20:	2301      	movs	r3, #1
 8008e22:	9304      	str	r3, [sp, #16]
 8008e24:	42a0      	cmp	r0, r4
 8008e26:	d030      	beq.n	8008e8a <__gethex+0xd6>
 8008e28:	9501      	str	r5, [sp, #4]
 8008e2a:	9b01      	ldr	r3, [sp, #4]
 8008e2c:	7818      	ldrb	r0, [r3, #0]
 8008e2e:	2830      	cmp	r0, #48	; 0x30
 8008e30:	d009      	beq.n	8008e46 <__gethex+0x92>
 8008e32:	f7ff ffa9 	bl	8008d88 <__hexdig_fun>
 8008e36:	4242      	negs	r2, r0
 8008e38:	4142      	adcs	r2, r0
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	002c      	movs	r4, r5
 8008e3e:	9204      	str	r2, [sp, #16]
 8008e40:	9308      	str	r3, [sp, #32]
 8008e42:	9d01      	ldr	r5, [sp, #4]
 8008e44:	e004      	b.n	8008e50 <__gethex+0x9c>
 8008e46:	9b01      	ldr	r3, [sp, #4]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	9301      	str	r3, [sp, #4]
 8008e4c:	e7ed      	b.n	8008e2a <__gethex+0x76>
 8008e4e:	3501      	adds	r5, #1
 8008e50:	7828      	ldrb	r0, [r5, #0]
 8008e52:	f7ff ff99 	bl	8008d88 <__hexdig_fun>
 8008e56:	1e07      	subs	r7, r0, #0
 8008e58:	d1f9      	bne.n	8008e4e <__gethex+0x9a>
 8008e5a:	0028      	movs	r0, r5
 8008e5c:	9a03      	ldr	r2, [sp, #12]
 8008e5e:	9907      	ldr	r1, [sp, #28]
 8008e60:	f001 fa38 	bl	800a2d4 <strncmp>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d10e      	bne.n	8008e86 <__gethex+0xd2>
 8008e68:	2c00      	cmp	r4, #0
 8008e6a:	d107      	bne.n	8008e7c <__gethex+0xc8>
 8008e6c:	9b03      	ldr	r3, [sp, #12]
 8008e6e:	18ed      	adds	r5, r5, r3
 8008e70:	002c      	movs	r4, r5
 8008e72:	7828      	ldrb	r0, [r5, #0]
 8008e74:	f7ff ff88 	bl	8008d88 <__hexdig_fun>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d102      	bne.n	8008e82 <__gethex+0xce>
 8008e7c:	1b64      	subs	r4, r4, r5
 8008e7e:	00a7      	lsls	r7, r4, #2
 8008e80:	e003      	b.n	8008e8a <__gethex+0xd6>
 8008e82:	3501      	adds	r5, #1
 8008e84:	e7f5      	b.n	8008e72 <__gethex+0xbe>
 8008e86:	2c00      	cmp	r4, #0
 8008e88:	d1f8      	bne.n	8008e7c <__gethex+0xc8>
 8008e8a:	2220      	movs	r2, #32
 8008e8c:	782b      	ldrb	r3, [r5, #0]
 8008e8e:	002e      	movs	r6, r5
 8008e90:	4393      	bics	r3, r2
 8008e92:	2b50      	cmp	r3, #80	; 0x50
 8008e94:	d11d      	bne.n	8008ed2 <__gethex+0x11e>
 8008e96:	786b      	ldrb	r3, [r5, #1]
 8008e98:	2b2b      	cmp	r3, #43	; 0x2b
 8008e9a:	d02c      	beq.n	8008ef6 <__gethex+0x142>
 8008e9c:	2b2d      	cmp	r3, #45	; 0x2d
 8008e9e:	d02e      	beq.n	8008efe <__gethex+0x14a>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	1c6e      	adds	r6, r5, #1
 8008ea4:	9306      	str	r3, [sp, #24]
 8008ea6:	7830      	ldrb	r0, [r6, #0]
 8008ea8:	f7ff ff6e 	bl	8008d88 <__hexdig_fun>
 8008eac:	1e43      	subs	r3, r0, #1
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	2b18      	cmp	r3, #24
 8008eb2:	d82b      	bhi.n	8008f0c <__gethex+0x158>
 8008eb4:	3810      	subs	r0, #16
 8008eb6:	0004      	movs	r4, r0
 8008eb8:	7870      	ldrb	r0, [r6, #1]
 8008eba:	f7ff ff65 	bl	8008d88 <__hexdig_fun>
 8008ebe:	1e43      	subs	r3, r0, #1
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	3601      	adds	r6, #1
 8008ec4:	2b18      	cmp	r3, #24
 8008ec6:	d91c      	bls.n	8008f02 <__gethex+0x14e>
 8008ec8:	9b06      	ldr	r3, [sp, #24]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d000      	beq.n	8008ed0 <__gethex+0x11c>
 8008ece:	4264      	negs	r4, r4
 8008ed0:	193f      	adds	r7, r7, r4
 8008ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed4:	601e      	str	r6, [r3, #0]
 8008ed6:	9b04      	ldr	r3, [sp, #16]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d019      	beq.n	8008f10 <__gethex+0x15c>
 8008edc:	2600      	movs	r6, #0
 8008ede:	9b08      	ldr	r3, [sp, #32]
 8008ee0:	42b3      	cmp	r3, r6
 8008ee2:	d100      	bne.n	8008ee6 <__gethex+0x132>
 8008ee4:	3606      	adds	r6, #6
 8008ee6:	0030      	movs	r0, r6
 8008ee8:	b00d      	add	sp, #52	; 0x34
 8008eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eec:	2301      	movs	r3, #1
 8008eee:	2700      	movs	r7, #0
 8008ef0:	9d01      	ldr	r5, [sp, #4]
 8008ef2:	9304      	str	r3, [sp, #16]
 8008ef4:	e7c9      	b.n	8008e8a <__gethex+0xd6>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9306      	str	r3, [sp, #24]
 8008efa:	1cae      	adds	r6, r5, #2
 8008efc:	e7d3      	b.n	8008ea6 <__gethex+0xf2>
 8008efe:	2301      	movs	r3, #1
 8008f00:	e7fa      	b.n	8008ef8 <__gethex+0x144>
 8008f02:	230a      	movs	r3, #10
 8008f04:	435c      	muls	r4, r3
 8008f06:	1824      	adds	r4, r4, r0
 8008f08:	3c10      	subs	r4, #16
 8008f0a:	e7d5      	b.n	8008eb8 <__gethex+0x104>
 8008f0c:	002e      	movs	r6, r5
 8008f0e:	e7e0      	b.n	8008ed2 <__gethex+0x11e>
 8008f10:	9b01      	ldr	r3, [sp, #4]
 8008f12:	9904      	ldr	r1, [sp, #16]
 8008f14:	1aeb      	subs	r3, r5, r3
 8008f16:	3b01      	subs	r3, #1
 8008f18:	2b07      	cmp	r3, #7
 8008f1a:	dc0a      	bgt.n	8008f32 <__gethex+0x17e>
 8008f1c:	9805      	ldr	r0, [sp, #20]
 8008f1e:	f000 fa87 	bl	8009430 <_Balloc>
 8008f22:	1e04      	subs	r4, r0, #0
 8008f24:	d108      	bne.n	8008f38 <__gethex+0x184>
 8008f26:	0002      	movs	r2, r0
 8008f28:	21de      	movs	r1, #222	; 0xde
 8008f2a:	4b64      	ldr	r3, [pc, #400]	; (80090bc <__gethex+0x308>)
 8008f2c:	4864      	ldr	r0, [pc, #400]	; (80090c0 <__gethex+0x30c>)
 8008f2e:	f001 f9f1 	bl	800a314 <__assert_func>
 8008f32:	3101      	adds	r1, #1
 8008f34:	105b      	asrs	r3, r3, #1
 8008f36:	e7ef      	b.n	8008f18 <__gethex+0x164>
 8008f38:	0003      	movs	r3, r0
 8008f3a:	3314      	adds	r3, #20
 8008f3c:	9304      	str	r3, [sp, #16]
 8008f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f40:	2300      	movs	r3, #0
 8008f42:	001e      	movs	r6, r3
 8008f44:	9306      	str	r3, [sp, #24]
 8008f46:	9b01      	ldr	r3, [sp, #4]
 8008f48:	42ab      	cmp	r3, r5
 8008f4a:	d340      	bcc.n	8008fce <__gethex+0x21a>
 8008f4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f4e:	9b04      	ldr	r3, [sp, #16]
 8008f50:	c540      	stmia	r5!, {r6}
 8008f52:	1aed      	subs	r5, r5, r3
 8008f54:	10ad      	asrs	r5, r5, #2
 8008f56:	0030      	movs	r0, r6
 8008f58:	6125      	str	r5, [r4, #16]
 8008f5a:	f000 fb61 	bl	8009620 <__hi0bits>
 8008f5e:	9b02      	ldr	r3, [sp, #8]
 8008f60:	016d      	lsls	r5, r5, #5
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	1a2e      	subs	r6, r5, r0
 8008f66:	9301      	str	r3, [sp, #4]
 8008f68:	429e      	cmp	r6, r3
 8008f6a:	dd5a      	ble.n	8009022 <__gethex+0x26e>
 8008f6c:	1af6      	subs	r6, r6, r3
 8008f6e:	0031      	movs	r1, r6
 8008f70:	0020      	movs	r0, r4
 8008f72:	f000 ff03 	bl	8009d7c <__any_on>
 8008f76:	1e05      	subs	r5, r0, #0
 8008f78:	d016      	beq.n	8008fa8 <__gethex+0x1f4>
 8008f7a:	2501      	movs	r5, #1
 8008f7c:	211f      	movs	r1, #31
 8008f7e:	0028      	movs	r0, r5
 8008f80:	1e73      	subs	r3, r6, #1
 8008f82:	4019      	ands	r1, r3
 8008f84:	4088      	lsls	r0, r1
 8008f86:	0001      	movs	r1, r0
 8008f88:	115a      	asrs	r2, r3, #5
 8008f8a:	9804      	ldr	r0, [sp, #16]
 8008f8c:	0092      	lsls	r2, r2, #2
 8008f8e:	5812      	ldr	r2, [r2, r0]
 8008f90:	420a      	tst	r2, r1
 8008f92:	d009      	beq.n	8008fa8 <__gethex+0x1f4>
 8008f94:	42ab      	cmp	r3, r5
 8008f96:	dd06      	ble.n	8008fa6 <__gethex+0x1f2>
 8008f98:	0020      	movs	r0, r4
 8008f9a:	1eb1      	subs	r1, r6, #2
 8008f9c:	f000 feee 	bl	8009d7c <__any_on>
 8008fa0:	3502      	adds	r5, #2
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	d100      	bne.n	8008fa8 <__gethex+0x1f4>
 8008fa6:	2502      	movs	r5, #2
 8008fa8:	0031      	movs	r1, r6
 8008faa:	0020      	movs	r0, r4
 8008fac:	f7ff fe98 	bl	8008ce0 <rshift>
 8008fb0:	19bf      	adds	r7, r7, r6
 8008fb2:	9b02      	ldr	r3, [sp, #8]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	9303      	str	r3, [sp, #12]
 8008fb8:	42bb      	cmp	r3, r7
 8008fba:	da42      	bge.n	8009042 <__gethex+0x28e>
 8008fbc:	0021      	movs	r1, r4
 8008fbe:	9805      	ldr	r0, [sp, #20]
 8008fc0:	f000 fa7a 	bl	80094b8 <_Bfree>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fc8:	26a3      	movs	r6, #163	; 0xa3
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	e78b      	b.n	8008ee6 <__gethex+0x132>
 8008fce:	1e6b      	subs	r3, r5, #1
 8008fd0:	9308      	str	r3, [sp, #32]
 8008fd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d014      	beq.n	8009004 <__gethex+0x250>
 8008fda:	9b06      	ldr	r3, [sp, #24]
 8008fdc:	2b20      	cmp	r3, #32
 8008fde:	d104      	bne.n	8008fea <__gethex+0x236>
 8008fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe2:	c340      	stmia	r3!, {r6}
 8008fe4:	2600      	movs	r6, #0
 8008fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe8:	9606      	str	r6, [sp, #24]
 8008fea:	9b08      	ldr	r3, [sp, #32]
 8008fec:	7818      	ldrb	r0, [r3, #0]
 8008fee:	f7ff fecb 	bl	8008d88 <__hexdig_fun>
 8008ff2:	230f      	movs	r3, #15
 8008ff4:	4018      	ands	r0, r3
 8008ff6:	9b06      	ldr	r3, [sp, #24]
 8008ff8:	9d08      	ldr	r5, [sp, #32]
 8008ffa:	4098      	lsls	r0, r3
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	4306      	orrs	r6, r0
 8009000:	9306      	str	r3, [sp, #24]
 8009002:	e7a0      	b.n	8008f46 <__gethex+0x192>
 8009004:	2301      	movs	r3, #1
 8009006:	9a03      	ldr	r2, [sp, #12]
 8009008:	1a9d      	subs	r5, r3, r2
 800900a:	9b08      	ldr	r3, [sp, #32]
 800900c:	195d      	adds	r5, r3, r5
 800900e:	9b01      	ldr	r3, [sp, #4]
 8009010:	429d      	cmp	r5, r3
 8009012:	d3e2      	bcc.n	8008fda <__gethex+0x226>
 8009014:	0028      	movs	r0, r5
 8009016:	9907      	ldr	r1, [sp, #28]
 8009018:	f001 f95c 	bl	800a2d4 <strncmp>
 800901c:	2800      	cmp	r0, #0
 800901e:	d1dc      	bne.n	8008fda <__gethex+0x226>
 8009020:	e791      	b.n	8008f46 <__gethex+0x192>
 8009022:	9b01      	ldr	r3, [sp, #4]
 8009024:	2500      	movs	r5, #0
 8009026:	429e      	cmp	r6, r3
 8009028:	dac3      	bge.n	8008fb2 <__gethex+0x1fe>
 800902a:	1b9e      	subs	r6, r3, r6
 800902c:	0021      	movs	r1, r4
 800902e:	0032      	movs	r2, r6
 8009030:	9805      	ldr	r0, [sp, #20]
 8009032:	f000 fc5f 	bl	80098f4 <__lshift>
 8009036:	0003      	movs	r3, r0
 8009038:	3314      	adds	r3, #20
 800903a:	0004      	movs	r4, r0
 800903c:	1bbf      	subs	r7, r7, r6
 800903e:	9304      	str	r3, [sp, #16]
 8009040:	e7b7      	b.n	8008fb2 <__gethex+0x1fe>
 8009042:	9b02      	ldr	r3, [sp, #8]
 8009044:	685e      	ldr	r6, [r3, #4]
 8009046:	42be      	cmp	r6, r7
 8009048:	dd71      	ble.n	800912e <__gethex+0x37a>
 800904a:	9b01      	ldr	r3, [sp, #4]
 800904c:	1bf6      	subs	r6, r6, r7
 800904e:	42b3      	cmp	r3, r6
 8009050:	dc38      	bgt.n	80090c4 <__gethex+0x310>
 8009052:	9b02      	ldr	r3, [sp, #8]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	2b02      	cmp	r3, #2
 8009058:	d026      	beq.n	80090a8 <__gethex+0x2f4>
 800905a:	2b03      	cmp	r3, #3
 800905c:	d028      	beq.n	80090b0 <__gethex+0x2fc>
 800905e:	2b01      	cmp	r3, #1
 8009060:	d119      	bne.n	8009096 <__gethex+0x2e2>
 8009062:	9b01      	ldr	r3, [sp, #4]
 8009064:	42b3      	cmp	r3, r6
 8009066:	d116      	bne.n	8009096 <__gethex+0x2e2>
 8009068:	2b01      	cmp	r3, #1
 800906a:	d10d      	bne.n	8009088 <__gethex+0x2d4>
 800906c:	9b02      	ldr	r3, [sp, #8]
 800906e:	2662      	movs	r6, #98	; 0x62
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	9301      	str	r3, [sp, #4]
 8009074:	9a01      	ldr	r2, [sp, #4]
 8009076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	2301      	movs	r3, #1
 800907c:	9a04      	ldr	r2, [sp, #16]
 800907e:	6123      	str	r3, [r4, #16]
 8009080:	6013      	str	r3, [r2, #0]
 8009082:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009084:	601c      	str	r4, [r3, #0]
 8009086:	e72e      	b.n	8008ee6 <__gethex+0x132>
 8009088:	9901      	ldr	r1, [sp, #4]
 800908a:	0020      	movs	r0, r4
 800908c:	3901      	subs	r1, #1
 800908e:	f000 fe75 	bl	8009d7c <__any_on>
 8009092:	2800      	cmp	r0, #0
 8009094:	d1ea      	bne.n	800906c <__gethex+0x2b8>
 8009096:	0021      	movs	r1, r4
 8009098:	9805      	ldr	r0, [sp, #20]
 800909a:	f000 fa0d 	bl	80094b8 <_Bfree>
 800909e:	2300      	movs	r3, #0
 80090a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090a2:	2650      	movs	r6, #80	; 0x50
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	e71e      	b.n	8008ee6 <__gethex+0x132>
 80090a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1f3      	bne.n	8009096 <__gethex+0x2e2>
 80090ae:	e7dd      	b.n	800906c <__gethex+0x2b8>
 80090b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1da      	bne.n	800906c <__gethex+0x2b8>
 80090b6:	e7ee      	b.n	8009096 <__gethex+0x2e2>
 80090b8:	0800b3f0 	.word	0x0800b3f0
 80090bc:	0800b378 	.word	0x0800b378
 80090c0:	0800b389 	.word	0x0800b389
 80090c4:	1e77      	subs	r7, r6, #1
 80090c6:	2d00      	cmp	r5, #0
 80090c8:	d12f      	bne.n	800912a <__gethex+0x376>
 80090ca:	2f00      	cmp	r7, #0
 80090cc:	d004      	beq.n	80090d8 <__gethex+0x324>
 80090ce:	0039      	movs	r1, r7
 80090d0:	0020      	movs	r0, r4
 80090d2:	f000 fe53 	bl	8009d7c <__any_on>
 80090d6:	0005      	movs	r5, r0
 80090d8:	231f      	movs	r3, #31
 80090da:	117a      	asrs	r2, r7, #5
 80090dc:	401f      	ands	r7, r3
 80090de:	3b1e      	subs	r3, #30
 80090e0:	40bb      	lsls	r3, r7
 80090e2:	9904      	ldr	r1, [sp, #16]
 80090e4:	0092      	lsls	r2, r2, #2
 80090e6:	5852      	ldr	r2, [r2, r1]
 80090e8:	421a      	tst	r2, r3
 80090ea:	d001      	beq.n	80090f0 <__gethex+0x33c>
 80090ec:	2302      	movs	r3, #2
 80090ee:	431d      	orrs	r5, r3
 80090f0:	9b01      	ldr	r3, [sp, #4]
 80090f2:	0031      	movs	r1, r6
 80090f4:	1b9b      	subs	r3, r3, r6
 80090f6:	2602      	movs	r6, #2
 80090f8:	0020      	movs	r0, r4
 80090fa:	9301      	str	r3, [sp, #4]
 80090fc:	f7ff fdf0 	bl	8008ce0 <rshift>
 8009100:	9b02      	ldr	r3, [sp, #8]
 8009102:	685f      	ldr	r7, [r3, #4]
 8009104:	2d00      	cmp	r5, #0
 8009106:	d041      	beq.n	800918c <__gethex+0x3d8>
 8009108:	9b02      	ldr	r3, [sp, #8]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	2b02      	cmp	r3, #2
 800910e:	d010      	beq.n	8009132 <__gethex+0x37e>
 8009110:	2b03      	cmp	r3, #3
 8009112:	d012      	beq.n	800913a <__gethex+0x386>
 8009114:	2b01      	cmp	r3, #1
 8009116:	d106      	bne.n	8009126 <__gethex+0x372>
 8009118:	07aa      	lsls	r2, r5, #30
 800911a:	d504      	bpl.n	8009126 <__gethex+0x372>
 800911c:	9a04      	ldr	r2, [sp, #16]
 800911e:	6810      	ldr	r0, [r2, #0]
 8009120:	4305      	orrs	r5, r0
 8009122:	421d      	tst	r5, r3
 8009124:	d10c      	bne.n	8009140 <__gethex+0x38c>
 8009126:	2310      	movs	r3, #16
 8009128:	e02f      	b.n	800918a <__gethex+0x3d6>
 800912a:	2501      	movs	r5, #1
 800912c:	e7d4      	b.n	80090d8 <__gethex+0x324>
 800912e:	2601      	movs	r6, #1
 8009130:	e7e8      	b.n	8009104 <__gethex+0x350>
 8009132:	2301      	movs	r3, #1
 8009134:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009136:	1a9b      	subs	r3, r3, r2
 8009138:	9313      	str	r3, [sp, #76]	; 0x4c
 800913a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0f2      	beq.n	8009126 <__gethex+0x372>
 8009140:	6923      	ldr	r3, [r4, #16]
 8009142:	2000      	movs	r0, #0
 8009144:	9303      	str	r3, [sp, #12]
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	9304      	str	r3, [sp, #16]
 800914a:	0023      	movs	r3, r4
 800914c:	9a04      	ldr	r2, [sp, #16]
 800914e:	3314      	adds	r3, #20
 8009150:	1899      	adds	r1, r3, r2
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	1c55      	adds	r5, r2, #1
 8009156:	d01e      	beq.n	8009196 <__gethex+0x3e2>
 8009158:	3201      	adds	r2, #1
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	0023      	movs	r3, r4
 800915e:	3314      	adds	r3, #20
 8009160:	2e02      	cmp	r6, #2
 8009162:	d140      	bne.n	80091e6 <__gethex+0x432>
 8009164:	9a02      	ldr	r2, [sp, #8]
 8009166:	9901      	ldr	r1, [sp, #4]
 8009168:	6812      	ldr	r2, [r2, #0]
 800916a:	3a01      	subs	r2, #1
 800916c:	428a      	cmp	r2, r1
 800916e:	d10b      	bne.n	8009188 <__gethex+0x3d4>
 8009170:	114a      	asrs	r2, r1, #5
 8009172:	211f      	movs	r1, #31
 8009174:	9801      	ldr	r0, [sp, #4]
 8009176:	0092      	lsls	r2, r2, #2
 8009178:	4001      	ands	r1, r0
 800917a:	2001      	movs	r0, #1
 800917c:	0005      	movs	r5, r0
 800917e:	408d      	lsls	r5, r1
 8009180:	58d3      	ldr	r3, [r2, r3]
 8009182:	422b      	tst	r3, r5
 8009184:	d000      	beq.n	8009188 <__gethex+0x3d4>
 8009186:	2601      	movs	r6, #1
 8009188:	2320      	movs	r3, #32
 800918a:	431e      	orrs	r6, r3
 800918c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800918e:	601c      	str	r4, [r3, #0]
 8009190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009192:	601f      	str	r7, [r3, #0]
 8009194:	e6a7      	b.n	8008ee6 <__gethex+0x132>
 8009196:	c301      	stmia	r3!, {r0}
 8009198:	4299      	cmp	r1, r3
 800919a:	d8da      	bhi.n	8009152 <__gethex+0x39e>
 800919c:	9b03      	ldr	r3, [sp, #12]
 800919e:	68a2      	ldr	r2, [r4, #8]
 80091a0:	4293      	cmp	r3, r2
 80091a2:	db17      	blt.n	80091d4 <__gethex+0x420>
 80091a4:	6863      	ldr	r3, [r4, #4]
 80091a6:	9805      	ldr	r0, [sp, #20]
 80091a8:	1c59      	adds	r1, r3, #1
 80091aa:	f000 f941 	bl	8009430 <_Balloc>
 80091ae:	1e05      	subs	r5, r0, #0
 80091b0:	d103      	bne.n	80091ba <__gethex+0x406>
 80091b2:	0002      	movs	r2, r0
 80091b4:	2184      	movs	r1, #132	; 0x84
 80091b6:	4b1c      	ldr	r3, [pc, #112]	; (8009228 <__gethex+0x474>)
 80091b8:	e6b8      	b.n	8008f2c <__gethex+0x178>
 80091ba:	0021      	movs	r1, r4
 80091bc:	6923      	ldr	r3, [r4, #16]
 80091be:	310c      	adds	r1, #12
 80091c0:	1c9a      	adds	r2, r3, #2
 80091c2:	0092      	lsls	r2, r2, #2
 80091c4:	300c      	adds	r0, #12
 80091c6:	f000 f92a 	bl	800941e <memcpy>
 80091ca:	0021      	movs	r1, r4
 80091cc:	9805      	ldr	r0, [sp, #20]
 80091ce:	f000 f973 	bl	80094b8 <_Bfree>
 80091d2:	002c      	movs	r4, r5
 80091d4:	6923      	ldr	r3, [r4, #16]
 80091d6:	1c5a      	adds	r2, r3, #1
 80091d8:	6122      	str	r2, [r4, #16]
 80091da:	2201      	movs	r2, #1
 80091dc:	3304      	adds	r3, #4
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	18e3      	adds	r3, r4, r3
 80091e2:	605a      	str	r2, [r3, #4]
 80091e4:	e7ba      	b.n	800915c <__gethex+0x3a8>
 80091e6:	6922      	ldr	r2, [r4, #16]
 80091e8:	9903      	ldr	r1, [sp, #12]
 80091ea:	428a      	cmp	r2, r1
 80091ec:	dd09      	ble.n	8009202 <__gethex+0x44e>
 80091ee:	2101      	movs	r1, #1
 80091f0:	0020      	movs	r0, r4
 80091f2:	f7ff fd75 	bl	8008ce0 <rshift>
 80091f6:	9b02      	ldr	r3, [sp, #8]
 80091f8:	3701      	adds	r7, #1
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	42bb      	cmp	r3, r7
 80091fe:	dac2      	bge.n	8009186 <__gethex+0x3d2>
 8009200:	e6dc      	b.n	8008fbc <__gethex+0x208>
 8009202:	221f      	movs	r2, #31
 8009204:	9d01      	ldr	r5, [sp, #4]
 8009206:	9901      	ldr	r1, [sp, #4]
 8009208:	2601      	movs	r6, #1
 800920a:	4015      	ands	r5, r2
 800920c:	4211      	tst	r1, r2
 800920e:	d0bb      	beq.n	8009188 <__gethex+0x3d4>
 8009210:	9a04      	ldr	r2, [sp, #16]
 8009212:	189b      	adds	r3, r3, r2
 8009214:	3b04      	subs	r3, #4
 8009216:	6818      	ldr	r0, [r3, #0]
 8009218:	f000 fa02 	bl	8009620 <__hi0bits>
 800921c:	2320      	movs	r3, #32
 800921e:	1b5d      	subs	r5, r3, r5
 8009220:	42a8      	cmp	r0, r5
 8009222:	dbe4      	blt.n	80091ee <__gethex+0x43a>
 8009224:	e7b0      	b.n	8009188 <__gethex+0x3d4>
 8009226:	46c0      	nop			; (mov r8, r8)
 8009228:	0800b378 	.word	0x0800b378

0800922c <L_shift>:
 800922c:	2308      	movs	r3, #8
 800922e:	b570      	push	{r4, r5, r6, lr}
 8009230:	2520      	movs	r5, #32
 8009232:	1a9a      	subs	r2, r3, r2
 8009234:	0092      	lsls	r2, r2, #2
 8009236:	1aad      	subs	r5, r5, r2
 8009238:	6843      	ldr	r3, [r0, #4]
 800923a:	6806      	ldr	r6, [r0, #0]
 800923c:	001c      	movs	r4, r3
 800923e:	40ac      	lsls	r4, r5
 8009240:	40d3      	lsrs	r3, r2
 8009242:	4334      	orrs	r4, r6
 8009244:	6004      	str	r4, [r0, #0]
 8009246:	6043      	str	r3, [r0, #4]
 8009248:	3004      	adds	r0, #4
 800924a:	4288      	cmp	r0, r1
 800924c:	d3f4      	bcc.n	8009238 <L_shift+0xc>
 800924e:	bd70      	pop	{r4, r5, r6, pc}

08009250 <__match>:
 8009250:	b530      	push	{r4, r5, lr}
 8009252:	6803      	ldr	r3, [r0, #0]
 8009254:	780c      	ldrb	r4, [r1, #0]
 8009256:	3301      	adds	r3, #1
 8009258:	2c00      	cmp	r4, #0
 800925a:	d102      	bne.n	8009262 <__match+0x12>
 800925c:	6003      	str	r3, [r0, #0]
 800925e:	2001      	movs	r0, #1
 8009260:	bd30      	pop	{r4, r5, pc}
 8009262:	781a      	ldrb	r2, [r3, #0]
 8009264:	0015      	movs	r5, r2
 8009266:	3d41      	subs	r5, #65	; 0x41
 8009268:	2d19      	cmp	r5, #25
 800926a:	d800      	bhi.n	800926e <__match+0x1e>
 800926c:	3220      	adds	r2, #32
 800926e:	3101      	adds	r1, #1
 8009270:	42a2      	cmp	r2, r4
 8009272:	d0ef      	beq.n	8009254 <__match+0x4>
 8009274:	2000      	movs	r0, #0
 8009276:	e7f3      	b.n	8009260 <__match+0x10>

08009278 <__hexnan>:
 8009278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800927a:	680b      	ldr	r3, [r1, #0]
 800927c:	b08b      	sub	sp, #44	; 0x2c
 800927e:	9201      	str	r2, [sp, #4]
 8009280:	9901      	ldr	r1, [sp, #4]
 8009282:	115a      	asrs	r2, r3, #5
 8009284:	0092      	lsls	r2, r2, #2
 8009286:	188a      	adds	r2, r1, r2
 8009288:	9202      	str	r2, [sp, #8]
 800928a:	0019      	movs	r1, r3
 800928c:	221f      	movs	r2, #31
 800928e:	4011      	ands	r1, r2
 8009290:	9008      	str	r0, [sp, #32]
 8009292:	9106      	str	r1, [sp, #24]
 8009294:	4213      	tst	r3, r2
 8009296:	d002      	beq.n	800929e <__hexnan+0x26>
 8009298:	9b02      	ldr	r3, [sp, #8]
 800929a:	3304      	adds	r3, #4
 800929c:	9302      	str	r3, [sp, #8]
 800929e:	9b02      	ldr	r3, [sp, #8]
 80092a0:	2500      	movs	r5, #0
 80092a2:	1f1e      	subs	r6, r3, #4
 80092a4:	0037      	movs	r7, r6
 80092a6:	0034      	movs	r4, r6
 80092a8:	9b08      	ldr	r3, [sp, #32]
 80092aa:	6035      	str	r5, [r6, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	9507      	str	r5, [sp, #28]
 80092b0:	9305      	str	r3, [sp, #20]
 80092b2:	9503      	str	r5, [sp, #12]
 80092b4:	9b05      	ldr	r3, [sp, #20]
 80092b6:	3301      	adds	r3, #1
 80092b8:	9309      	str	r3, [sp, #36]	; 0x24
 80092ba:	9b05      	ldr	r3, [sp, #20]
 80092bc:	785b      	ldrb	r3, [r3, #1]
 80092be:	9304      	str	r3, [sp, #16]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d028      	beq.n	8009316 <__hexnan+0x9e>
 80092c4:	9804      	ldr	r0, [sp, #16]
 80092c6:	f7ff fd5f 	bl	8008d88 <__hexdig_fun>
 80092ca:	2800      	cmp	r0, #0
 80092cc:	d154      	bne.n	8009378 <__hexnan+0x100>
 80092ce:	9b04      	ldr	r3, [sp, #16]
 80092d0:	2b20      	cmp	r3, #32
 80092d2:	d819      	bhi.n	8009308 <__hexnan+0x90>
 80092d4:	9b03      	ldr	r3, [sp, #12]
 80092d6:	9a07      	ldr	r2, [sp, #28]
 80092d8:	4293      	cmp	r3, r2
 80092da:	dd12      	ble.n	8009302 <__hexnan+0x8a>
 80092dc:	42bc      	cmp	r4, r7
 80092de:	d206      	bcs.n	80092ee <__hexnan+0x76>
 80092e0:	2d07      	cmp	r5, #7
 80092e2:	dc04      	bgt.n	80092ee <__hexnan+0x76>
 80092e4:	002a      	movs	r2, r5
 80092e6:	0039      	movs	r1, r7
 80092e8:	0020      	movs	r0, r4
 80092ea:	f7ff ff9f 	bl	800922c <L_shift>
 80092ee:	9b01      	ldr	r3, [sp, #4]
 80092f0:	2508      	movs	r5, #8
 80092f2:	429c      	cmp	r4, r3
 80092f4:	d905      	bls.n	8009302 <__hexnan+0x8a>
 80092f6:	1f27      	subs	r7, r4, #4
 80092f8:	2500      	movs	r5, #0
 80092fa:	003c      	movs	r4, r7
 80092fc:	9b03      	ldr	r3, [sp, #12]
 80092fe:	603d      	str	r5, [r7, #0]
 8009300:	9307      	str	r3, [sp, #28]
 8009302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009304:	9305      	str	r3, [sp, #20]
 8009306:	e7d5      	b.n	80092b4 <__hexnan+0x3c>
 8009308:	9b04      	ldr	r3, [sp, #16]
 800930a:	2b29      	cmp	r3, #41	; 0x29
 800930c:	d159      	bne.n	80093c2 <__hexnan+0x14a>
 800930e:	9b05      	ldr	r3, [sp, #20]
 8009310:	9a08      	ldr	r2, [sp, #32]
 8009312:	3302      	adds	r3, #2
 8009314:	6013      	str	r3, [r2, #0]
 8009316:	9b03      	ldr	r3, [sp, #12]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d052      	beq.n	80093c2 <__hexnan+0x14a>
 800931c:	42bc      	cmp	r4, r7
 800931e:	d206      	bcs.n	800932e <__hexnan+0xb6>
 8009320:	2d07      	cmp	r5, #7
 8009322:	dc04      	bgt.n	800932e <__hexnan+0xb6>
 8009324:	002a      	movs	r2, r5
 8009326:	0039      	movs	r1, r7
 8009328:	0020      	movs	r0, r4
 800932a:	f7ff ff7f 	bl	800922c <L_shift>
 800932e:	9b01      	ldr	r3, [sp, #4]
 8009330:	429c      	cmp	r4, r3
 8009332:	d935      	bls.n	80093a0 <__hexnan+0x128>
 8009334:	001a      	movs	r2, r3
 8009336:	0023      	movs	r3, r4
 8009338:	cb02      	ldmia	r3!, {r1}
 800933a:	c202      	stmia	r2!, {r1}
 800933c:	429e      	cmp	r6, r3
 800933e:	d2fb      	bcs.n	8009338 <__hexnan+0xc0>
 8009340:	9b02      	ldr	r3, [sp, #8]
 8009342:	1c61      	adds	r1, r4, #1
 8009344:	1eda      	subs	r2, r3, #3
 8009346:	2304      	movs	r3, #4
 8009348:	4291      	cmp	r1, r2
 800934a:	d805      	bhi.n	8009358 <__hexnan+0xe0>
 800934c:	9b02      	ldr	r3, [sp, #8]
 800934e:	3b04      	subs	r3, #4
 8009350:	1b1b      	subs	r3, r3, r4
 8009352:	089b      	lsrs	r3, r3, #2
 8009354:	3301      	adds	r3, #1
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	9a01      	ldr	r2, [sp, #4]
 800935a:	18d3      	adds	r3, r2, r3
 800935c:	2200      	movs	r2, #0
 800935e:	c304      	stmia	r3!, {r2}
 8009360:	429e      	cmp	r6, r3
 8009362:	d2fc      	bcs.n	800935e <__hexnan+0xe6>
 8009364:	6833      	ldr	r3, [r6, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d104      	bne.n	8009374 <__hexnan+0xfc>
 800936a:	9b01      	ldr	r3, [sp, #4]
 800936c:	429e      	cmp	r6, r3
 800936e:	d126      	bne.n	80093be <__hexnan+0x146>
 8009370:	2301      	movs	r3, #1
 8009372:	6033      	str	r3, [r6, #0]
 8009374:	2005      	movs	r0, #5
 8009376:	e025      	b.n	80093c4 <__hexnan+0x14c>
 8009378:	9b03      	ldr	r3, [sp, #12]
 800937a:	3501      	adds	r5, #1
 800937c:	3301      	adds	r3, #1
 800937e:	9303      	str	r3, [sp, #12]
 8009380:	2d08      	cmp	r5, #8
 8009382:	dd06      	ble.n	8009392 <__hexnan+0x11a>
 8009384:	9b01      	ldr	r3, [sp, #4]
 8009386:	429c      	cmp	r4, r3
 8009388:	d9bb      	bls.n	8009302 <__hexnan+0x8a>
 800938a:	2300      	movs	r3, #0
 800938c:	2501      	movs	r5, #1
 800938e:	3c04      	subs	r4, #4
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	220f      	movs	r2, #15
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	4010      	ands	r0, r2
 8009398:	011b      	lsls	r3, r3, #4
 800939a:	4318      	orrs	r0, r3
 800939c:	6020      	str	r0, [r4, #0]
 800939e:	e7b0      	b.n	8009302 <__hexnan+0x8a>
 80093a0:	9b06      	ldr	r3, [sp, #24]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d0de      	beq.n	8009364 <__hexnan+0xec>
 80093a6:	2120      	movs	r1, #32
 80093a8:	9a06      	ldr	r2, [sp, #24]
 80093aa:	9b02      	ldr	r3, [sp, #8]
 80093ac:	1a89      	subs	r1, r1, r2
 80093ae:	2201      	movs	r2, #1
 80093b0:	4252      	negs	r2, r2
 80093b2:	40ca      	lsrs	r2, r1
 80093b4:	3b04      	subs	r3, #4
 80093b6:	6819      	ldr	r1, [r3, #0]
 80093b8:	400a      	ands	r2, r1
 80093ba:	601a      	str	r2, [r3, #0]
 80093bc:	e7d2      	b.n	8009364 <__hexnan+0xec>
 80093be:	3e04      	subs	r6, #4
 80093c0:	e7d0      	b.n	8009364 <__hexnan+0xec>
 80093c2:	2004      	movs	r0, #4
 80093c4:	b00b      	add	sp, #44	; 0x2c
 80093c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080093c8 <_localeconv_r>:
 80093c8:	4800      	ldr	r0, [pc, #0]	; (80093cc <_localeconv_r+0x4>)
 80093ca:	4770      	bx	lr
 80093cc:	20000164 	.word	0x20000164

080093d0 <malloc>:
 80093d0:	b510      	push	{r4, lr}
 80093d2:	4b03      	ldr	r3, [pc, #12]	; (80093e0 <malloc+0x10>)
 80093d4:	0001      	movs	r1, r0
 80093d6:	6818      	ldr	r0, [r3, #0]
 80093d8:	f000 fd8c 	bl	8009ef4 <_malloc_r>
 80093dc:	bd10      	pop	{r4, pc}
 80093de:	46c0      	nop			; (mov r8, r8)
 80093e0:	2000000c 	.word	0x2000000c

080093e4 <__ascii_mbtowc>:
 80093e4:	b082      	sub	sp, #8
 80093e6:	2900      	cmp	r1, #0
 80093e8:	d100      	bne.n	80093ec <__ascii_mbtowc+0x8>
 80093ea:	a901      	add	r1, sp, #4
 80093ec:	1e10      	subs	r0, r2, #0
 80093ee:	d006      	beq.n	80093fe <__ascii_mbtowc+0x1a>
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d006      	beq.n	8009402 <__ascii_mbtowc+0x1e>
 80093f4:	7813      	ldrb	r3, [r2, #0]
 80093f6:	600b      	str	r3, [r1, #0]
 80093f8:	7810      	ldrb	r0, [r2, #0]
 80093fa:	1e43      	subs	r3, r0, #1
 80093fc:	4198      	sbcs	r0, r3
 80093fe:	b002      	add	sp, #8
 8009400:	4770      	bx	lr
 8009402:	2002      	movs	r0, #2
 8009404:	4240      	negs	r0, r0
 8009406:	e7fa      	b.n	80093fe <__ascii_mbtowc+0x1a>

08009408 <memchr>:
 8009408:	b2c9      	uxtb	r1, r1
 800940a:	1882      	adds	r2, r0, r2
 800940c:	4290      	cmp	r0, r2
 800940e:	d101      	bne.n	8009414 <memchr+0xc>
 8009410:	2000      	movs	r0, #0
 8009412:	4770      	bx	lr
 8009414:	7803      	ldrb	r3, [r0, #0]
 8009416:	428b      	cmp	r3, r1
 8009418:	d0fb      	beq.n	8009412 <memchr+0xa>
 800941a:	3001      	adds	r0, #1
 800941c:	e7f6      	b.n	800940c <memchr+0x4>

0800941e <memcpy>:
 800941e:	2300      	movs	r3, #0
 8009420:	b510      	push	{r4, lr}
 8009422:	429a      	cmp	r2, r3
 8009424:	d100      	bne.n	8009428 <memcpy+0xa>
 8009426:	bd10      	pop	{r4, pc}
 8009428:	5ccc      	ldrb	r4, [r1, r3]
 800942a:	54c4      	strb	r4, [r0, r3]
 800942c:	3301      	adds	r3, #1
 800942e:	e7f8      	b.n	8009422 <memcpy+0x4>

08009430 <_Balloc>:
 8009430:	b570      	push	{r4, r5, r6, lr}
 8009432:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009434:	0006      	movs	r6, r0
 8009436:	000c      	movs	r4, r1
 8009438:	2d00      	cmp	r5, #0
 800943a:	d10e      	bne.n	800945a <_Balloc+0x2a>
 800943c:	2010      	movs	r0, #16
 800943e:	f7ff ffc7 	bl	80093d0 <malloc>
 8009442:	1e02      	subs	r2, r0, #0
 8009444:	6270      	str	r0, [r6, #36]	; 0x24
 8009446:	d104      	bne.n	8009452 <_Balloc+0x22>
 8009448:	2166      	movs	r1, #102	; 0x66
 800944a:	4b19      	ldr	r3, [pc, #100]	; (80094b0 <_Balloc+0x80>)
 800944c:	4819      	ldr	r0, [pc, #100]	; (80094b4 <_Balloc+0x84>)
 800944e:	f000 ff61 	bl	800a314 <__assert_func>
 8009452:	6045      	str	r5, [r0, #4]
 8009454:	6085      	str	r5, [r0, #8]
 8009456:	6005      	str	r5, [r0, #0]
 8009458:	60c5      	str	r5, [r0, #12]
 800945a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800945c:	68eb      	ldr	r3, [r5, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d013      	beq.n	800948a <_Balloc+0x5a>
 8009462:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009464:	00a2      	lsls	r2, r4, #2
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	189b      	adds	r3, r3, r2
 800946a:	6818      	ldr	r0, [r3, #0]
 800946c:	2800      	cmp	r0, #0
 800946e:	d118      	bne.n	80094a2 <_Balloc+0x72>
 8009470:	2101      	movs	r1, #1
 8009472:	000d      	movs	r5, r1
 8009474:	40a5      	lsls	r5, r4
 8009476:	1d6a      	adds	r2, r5, #5
 8009478:	0030      	movs	r0, r6
 800947a:	0092      	lsls	r2, r2, #2
 800947c:	f000 fca1 	bl	8009dc2 <_calloc_r>
 8009480:	2800      	cmp	r0, #0
 8009482:	d00c      	beq.n	800949e <_Balloc+0x6e>
 8009484:	6044      	str	r4, [r0, #4]
 8009486:	6085      	str	r5, [r0, #8]
 8009488:	e00d      	b.n	80094a6 <_Balloc+0x76>
 800948a:	2221      	movs	r2, #33	; 0x21
 800948c:	2104      	movs	r1, #4
 800948e:	0030      	movs	r0, r6
 8009490:	f000 fc97 	bl	8009dc2 <_calloc_r>
 8009494:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009496:	60e8      	str	r0, [r5, #12]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1e1      	bne.n	8009462 <_Balloc+0x32>
 800949e:	2000      	movs	r0, #0
 80094a0:	bd70      	pop	{r4, r5, r6, pc}
 80094a2:	6802      	ldr	r2, [r0, #0]
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	2300      	movs	r3, #0
 80094a8:	6103      	str	r3, [r0, #16]
 80094aa:	60c3      	str	r3, [r0, #12]
 80094ac:	e7f8      	b.n	80094a0 <_Balloc+0x70>
 80094ae:	46c0      	nop			; (mov r8, r8)
 80094b0:	0800b306 	.word	0x0800b306
 80094b4:	0800b404 	.word	0x0800b404

080094b8 <_Bfree>:
 80094b8:	b570      	push	{r4, r5, r6, lr}
 80094ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094bc:	0005      	movs	r5, r0
 80094be:	000c      	movs	r4, r1
 80094c0:	2e00      	cmp	r6, #0
 80094c2:	d10e      	bne.n	80094e2 <_Bfree+0x2a>
 80094c4:	2010      	movs	r0, #16
 80094c6:	f7ff ff83 	bl	80093d0 <malloc>
 80094ca:	1e02      	subs	r2, r0, #0
 80094cc:	6268      	str	r0, [r5, #36]	; 0x24
 80094ce:	d104      	bne.n	80094da <_Bfree+0x22>
 80094d0:	218a      	movs	r1, #138	; 0x8a
 80094d2:	4b09      	ldr	r3, [pc, #36]	; (80094f8 <_Bfree+0x40>)
 80094d4:	4809      	ldr	r0, [pc, #36]	; (80094fc <_Bfree+0x44>)
 80094d6:	f000 ff1d 	bl	800a314 <__assert_func>
 80094da:	6046      	str	r6, [r0, #4]
 80094dc:	6086      	str	r6, [r0, #8]
 80094de:	6006      	str	r6, [r0, #0]
 80094e0:	60c6      	str	r6, [r0, #12]
 80094e2:	2c00      	cmp	r4, #0
 80094e4:	d007      	beq.n	80094f6 <_Bfree+0x3e>
 80094e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094e8:	6862      	ldr	r2, [r4, #4]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	0092      	lsls	r2, r2, #2
 80094ee:	189b      	adds	r3, r3, r2
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	6022      	str	r2, [r4, #0]
 80094f4:	601c      	str	r4, [r3, #0]
 80094f6:	bd70      	pop	{r4, r5, r6, pc}
 80094f8:	0800b306 	.word	0x0800b306
 80094fc:	0800b404 	.word	0x0800b404

08009500 <__multadd>:
 8009500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009502:	000e      	movs	r6, r1
 8009504:	9001      	str	r0, [sp, #4]
 8009506:	000c      	movs	r4, r1
 8009508:	001d      	movs	r5, r3
 800950a:	2000      	movs	r0, #0
 800950c:	690f      	ldr	r7, [r1, #16]
 800950e:	3614      	adds	r6, #20
 8009510:	6833      	ldr	r3, [r6, #0]
 8009512:	3001      	adds	r0, #1
 8009514:	b299      	uxth	r1, r3
 8009516:	4351      	muls	r1, r2
 8009518:	0c1b      	lsrs	r3, r3, #16
 800951a:	4353      	muls	r3, r2
 800951c:	1949      	adds	r1, r1, r5
 800951e:	0c0d      	lsrs	r5, r1, #16
 8009520:	195b      	adds	r3, r3, r5
 8009522:	0c1d      	lsrs	r5, r3, #16
 8009524:	b289      	uxth	r1, r1
 8009526:	041b      	lsls	r3, r3, #16
 8009528:	185b      	adds	r3, r3, r1
 800952a:	c608      	stmia	r6!, {r3}
 800952c:	4287      	cmp	r7, r0
 800952e:	dcef      	bgt.n	8009510 <__multadd+0x10>
 8009530:	2d00      	cmp	r5, #0
 8009532:	d022      	beq.n	800957a <__multadd+0x7a>
 8009534:	68a3      	ldr	r3, [r4, #8]
 8009536:	42bb      	cmp	r3, r7
 8009538:	dc19      	bgt.n	800956e <__multadd+0x6e>
 800953a:	6863      	ldr	r3, [r4, #4]
 800953c:	9801      	ldr	r0, [sp, #4]
 800953e:	1c59      	adds	r1, r3, #1
 8009540:	f7ff ff76 	bl	8009430 <_Balloc>
 8009544:	1e06      	subs	r6, r0, #0
 8009546:	d105      	bne.n	8009554 <__multadd+0x54>
 8009548:	0002      	movs	r2, r0
 800954a:	21b5      	movs	r1, #181	; 0xb5
 800954c:	4b0c      	ldr	r3, [pc, #48]	; (8009580 <__multadd+0x80>)
 800954e:	480d      	ldr	r0, [pc, #52]	; (8009584 <__multadd+0x84>)
 8009550:	f000 fee0 	bl	800a314 <__assert_func>
 8009554:	0021      	movs	r1, r4
 8009556:	6923      	ldr	r3, [r4, #16]
 8009558:	310c      	adds	r1, #12
 800955a:	1c9a      	adds	r2, r3, #2
 800955c:	0092      	lsls	r2, r2, #2
 800955e:	300c      	adds	r0, #12
 8009560:	f7ff ff5d 	bl	800941e <memcpy>
 8009564:	0021      	movs	r1, r4
 8009566:	9801      	ldr	r0, [sp, #4]
 8009568:	f7ff ffa6 	bl	80094b8 <_Bfree>
 800956c:	0034      	movs	r4, r6
 800956e:	1d3b      	adds	r3, r7, #4
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	18e3      	adds	r3, r4, r3
 8009574:	605d      	str	r5, [r3, #4]
 8009576:	1c7b      	adds	r3, r7, #1
 8009578:	6123      	str	r3, [r4, #16]
 800957a:	0020      	movs	r0, r4
 800957c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800957e:	46c0      	nop			; (mov r8, r8)
 8009580:	0800b378 	.word	0x0800b378
 8009584:	0800b404 	.word	0x0800b404

08009588 <__s2b>:
 8009588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800958a:	0006      	movs	r6, r0
 800958c:	0018      	movs	r0, r3
 800958e:	000c      	movs	r4, r1
 8009590:	3008      	adds	r0, #8
 8009592:	2109      	movs	r1, #9
 8009594:	9301      	str	r3, [sp, #4]
 8009596:	0015      	movs	r5, r2
 8009598:	f7f6 fe5c 	bl	8000254 <__divsi3>
 800959c:	2301      	movs	r3, #1
 800959e:	2100      	movs	r1, #0
 80095a0:	4283      	cmp	r3, r0
 80095a2:	db0a      	blt.n	80095ba <__s2b+0x32>
 80095a4:	0030      	movs	r0, r6
 80095a6:	f7ff ff43 	bl	8009430 <_Balloc>
 80095aa:	1e01      	subs	r1, r0, #0
 80095ac:	d108      	bne.n	80095c0 <__s2b+0x38>
 80095ae:	0002      	movs	r2, r0
 80095b0:	4b19      	ldr	r3, [pc, #100]	; (8009618 <__s2b+0x90>)
 80095b2:	481a      	ldr	r0, [pc, #104]	; (800961c <__s2b+0x94>)
 80095b4:	31ce      	adds	r1, #206	; 0xce
 80095b6:	f000 fead 	bl	800a314 <__assert_func>
 80095ba:	005b      	lsls	r3, r3, #1
 80095bc:	3101      	adds	r1, #1
 80095be:	e7ef      	b.n	80095a0 <__s2b+0x18>
 80095c0:	9b08      	ldr	r3, [sp, #32]
 80095c2:	6143      	str	r3, [r0, #20]
 80095c4:	2301      	movs	r3, #1
 80095c6:	6103      	str	r3, [r0, #16]
 80095c8:	2d09      	cmp	r5, #9
 80095ca:	dd18      	ble.n	80095fe <__s2b+0x76>
 80095cc:	0023      	movs	r3, r4
 80095ce:	3309      	adds	r3, #9
 80095d0:	001f      	movs	r7, r3
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	1964      	adds	r4, r4, r5
 80095d6:	783b      	ldrb	r3, [r7, #0]
 80095d8:	220a      	movs	r2, #10
 80095da:	0030      	movs	r0, r6
 80095dc:	3b30      	subs	r3, #48	; 0x30
 80095de:	f7ff ff8f 	bl	8009500 <__multadd>
 80095e2:	3701      	adds	r7, #1
 80095e4:	0001      	movs	r1, r0
 80095e6:	42a7      	cmp	r7, r4
 80095e8:	d1f5      	bne.n	80095d6 <__s2b+0x4e>
 80095ea:	002c      	movs	r4, r5
 80095ec:	9b00      	ldr	r3, [sp, #0]
 80095ee:	3c08      	subs	r4, #8
 80095f0:	191c      	adds	r4, r3, r4
 80095f2:	002f      	movs	r7, r5
 80095f4:	9b01      	ldr	r3, [sp, #4]
 80095f6:	429f      	cmp	r7, r3
 80095f8:	db04      	blt.n	8009604 <__s2b+0x7c>
 80095fa:	0008      	movs	r0, r1
 80095fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095fe:	2509      	movs	r5, #9
 8009600:	340a      	adds	r4, #10
 8009602:	e7f6      	b.n	80095f2 <__s2b+0x6a>
 8009604:	1b63      	subs	r3, r4, r5
 8009606:	5ddb      	ldrb	r3, [r3, r7]
 8009608:	220a      	movs	r2, #10
 800960a:	0030      	movs	r0, r6
 800960c:	3b30      	subs	r3, #48	; 0x30
 800960e:	f7ff ff77 	bl	8009500 <__multadd>
 8009612:	3701      	adds	r7, #1
 8009614:	0001      	movs	r1, r0
 8009616:	e7ed      	b.n	80095f4 <__s2b+0x6c>
 8009618:	0800b378 	.word	0x0800b378
 800961c:	0800b404 	.word	0x0800b404

08009620 <__hi0bits>:
 8009620:	0003      	movs	r3, r0
 8009622:	0c02      	lsrs	r2, r0, #16
 8009624:	2000      	movs	r0, #0
 8009626:	4282      	cmp	r2, r0
 8009628:	d101      	bne.n	800962e <__hi0bits+0xe>
 800962a:	041b      	lsls	r3, r3, #16
 800962c:	3010      	adds	r0, #16
 800962e:	0e1a      	lsrs	r2, r3, #24
 8009630:	d101      	bne.n	8009636 <__hi0bits+0x16>
 8009632:	3008      	adds	r0, #8
 8009634:	021b      	lsls	r3, r3, #8
 8009636:	0f1a      	lsrs	r2, r3, #28
 8009638:	d101      	bne.n	800963e <__hi0bits+0x1e>
 800963a:	3004      	adds	r0, #4
 800963c:	011b      	lsls	r3, r3, #4
 800963e:	0f9a      	lsrs	r2, r3, #30
 8009640:	d101      	bne.n	8009646 <__hi0bits+0x26>
 8009642:	3002      	adds	r0, #2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	2b00      	cmp	r3, #0
 8009648:	db03      	blt.n	8009652 <__hi0bits+0x32>
 800964a:	3001      	adds	r0, #1
 800964c:	005b      	lsls	r3, r3, #1
 800964e:	d400      	bmi.n	8009652 <__hi0bits+0x32>
 8009650:	2020      	movs	r0, #32
 8009652:	4770      	bx	lr

08009654 <__lo0bits>:
 8009654:	6803      	ldr	r3, [r0, #0]
 8009656:	0002      	movs	r2, r0
 8009658:	2107      	movs	r1, #7
 800965a:	0018      	movs	r0, r3
 800965c:	4008      	ands	r0, r1
 800965e:	420b      	tst	r3, r1
 8009660:	d00d      	beq.n	800967e <__lo0bits+0x2a>
 8009662:	3906      	subs	r1, #6
 8009664:	2000      	movs	r0, #0
 8009666:	420b      	tst	r3, r1
 8009668:	d105      	bne.n	8009676 <__lo0bits+0x22>
 800966a:	3002      	adds	r0, #2
 800966c:	4203      	tst	r3, r0
 800966e:	d003      	beq.n	8009678 <__lo0bits+0x24>
 8009670:	40cb      	lsrs	r3, r1
 8009672:	0008      	movs	r0, r1
 8009674:	6013      	str	r3, [r2, #0]
 8009676:	4770      	bx	lr
 8009678:	089b      	lsrs	r3, r3, #2
 800967a:	6013      	str	r3, [r2, #0]
 800967c:	e7fb      	b.n	8009676 <__lo0bits+0x22>
 800967e:	b299      	uxth	r1, r3
 8009680:	2900      	cmp	r1, #0
 8009682:	d101      	bne.n	8009688 <__lo0bits+0x34>
 8009684:	2010      	movs	r0, #16
 8009686:	0c1b      	lsrs	r3, r3, #16
 8009688:	b2d9      	uxtb	r1, r3
 800968a:	2900      	cmp	r1, #0
 800968c:	d101      	bne.n	8009692 <__lo0bits+0x3e>
 800968e:	3008      	adds	r0, #8
 8009690:	0a1b      	lsrs	r3, r3, #8
 8009692:	0719      	lsls	r1, r3, #28
 8009694:	d101      	bne.n	800969a <__lo0bits+0x46>
 8009696:	3004      	adds	r0, #4
 8009698:	091b      	lsrs	r3, r3, #4
 800969a:	0799      	lsls	r1, r3, #30
 800969c:	d101      	bne.n	80096a2 <__lo0bits+0x4e>
 800969e:	3002      	adds	r0, #2
 80096a0:	089b      	lsrs	r3, r3, #2
 80096a2:	07d9      	lsls	r1, r3, #31
 80096a4:	d4e9      	bmi.n	800967a <__lo0bits+0x26>
 80096a6:	3001      	adds	r0, #1
 80096a8:	085b      	lsrs	r3, r3, #1
 80096aa:	d1e6      	bne.n	800967a <__lo0bits+0x26>
 80096ac:	2020      	movs	r0, #32
 80096ae:	e7e2      	b.n	8009676 <__lo0bits+0x22>

080096b0 <__i2b>:
 80096b0:	b510      	push	{r4, lr}
 80096b2:	000c      	movs	r4, r1
 80096b4:	2101      	movs	r1, #1
 80096b6:	f7ff febb 	bl	8009430 <_Balloc>
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d106      	bne.n	80096cc <__i2b+0x1c>
 80096be:	21a0      	movs	r1, #160	; 0xa0
 80096c0:	0002      	movs	r2, r0
 80096c2:	4b04      	ldr	r3, [pc, #16]	; (80096d4 <__i2b+0x24>)
 80096c4:	4804      	ldr	r0, [pc, #16]	; (80096d8 <__i2b+0x28>)
 80096c6:	0049      	lsls	r1, r1, #1
 80096c8:	f000 fe24 	bl	800a314 <__assert_func>
 80096cc:	2301      	movs	r3, #1
 80096ce:	6144      	str	r4, [r0, #20]
 80096d0:	6103      	str	r3, [r0, #16]
 80096d2:	bd10      	pop	{r4, pc}
 80096d4:	0800b378 	.word	0x0800b378
 80096d8:	0800b404 	.word	0x0800b404

080096dc <__multiply>:
 80096dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096de:	690b      	ldr	r3, [r1, #16]
 80096e0:	0014      	movs	r4, r2
 80096e2:	6912      	ldr	r2, [r2, #16]
 80096e4:	000d      	movs	r5, r1
 80096e6:	b089      	sub	sp, #36	; 0x24
 80096e8:	4293      	cmp	r3, r2
 80096ea:	da01      	bge.n	80096f0 <__multiply+0x14>
 80096ec:	0025      	movs	r5, r4
 80096ee:	000c      	movs	r4, r1
 80096f0:	692f      	ldr	r7, [r5, #16]
 80096f2:	6926      	ldr	r6, [r4, #16]
 80096f4:	6869      	ldr	r1, [r5, #4]
 80096f6:	19bb      	adds	r3, r7, r6
 80096f8:	9302      	str	r3, [sp, #8]
 80096fa:	68ab      	ldr	r3, [r5, #8]
 80096fc:	19ba      	adds	r2, r7, r6
 80096fe:	4293      	cmp	r3, r2
 8009700:	da00      	bge.n	8009704 <__multiply+0x28>
 8009702:	3101      	adds	r1, #1
 8009704:	f7ff fe94 	bl	8009430 <_Balloc>
 8009708:	9001      	str	r0, [sp, #4]
 800970a:	2800      	cmp	r0, #0
 800970c:	d106      	bne.n	800971c <__multiply+0x40>
 800970e:	215e      	movs	r1, #94	; 0x5e
 8009710:	0002      	movs	r2, r0
 8009712:	4b48      	ldr	r3, [pc, #288]	; (8009834 <__multiply+0x158>)
 8009714:	4848      	ldr	r0, [pc, #288]	; (8009838 <__multiply+0x15c>)
 8009716:	31ff      	adds	r1, #255	; 0xff
 8009718:	f000 fdfc 	bl	800a314 <__assert_func>
 800971c:	9b01      	ldr	r3, [sp, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	3314      	adds	r3, #20
 8009722:	469c      	mov	ip, r3
 8009724:	19bb      	adds	r3, r7, r6
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4463      	add	r3, ip
 800972a:	9303      	str	r3, [sp, #12]
 800972c:	4663      	mov	r3, ip
 800972e:	9903      	ldr	r1, [sp, #12]
 8009730:	428b      	cmp	r3, r1
 8009732:	d32c      	bcc.n	800978e <__multiply+0xb2>
 8009734:	002b      	movs	r3, r5
 8009736:	0022      	movs	r2, r4
 8009738:	3314      	adds	r3, #20
 800973a:	00bf      	lsls	r7, r7, #2
 800973c:	3214      	adds	r2, #20
 800973e:	9306      	str	r3, [sp, #24]
 8009740:	00b6      	lsls	r6, r6, #2
 8009742:	19db      	adds	r3, r3, r7
 8009744:	9304      	str	r3, [sp, #16]
 8009746:	1993      	adds	r3, r2, r6
 8009748:	9307      	str	r3, [sp, #28]
 800974a:	2304      	movs	r3, #4
 800974c:	9305      	str	r3, [sp, #20]
 800974e:	002b      	movs	r3, r5
 8009750:	9904      	ldr	r1, [sp, #16]
 8009752:	3315      	adds	r3, #21
 8009754:	9200      	str	r2, [sp, #0]
 8009756:	4299      	cmp	r1, r3
 8009758:	d305      	bcc.n	8009766 <__multiply+0x8a>
 800975a:	1b4b      	subs	r3, r1, r5
 800975c:	3b15      	subs	r3, #21
 800975e:	089b      	lsrs	r3, r3, #2
 8009760:	3301      	adds	r3, #1
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	9305      	str	r3, [sp, #20]
 8009766:	9b07      	ldr	r3, [sp, #28]
 8009768:	9a00      	ldr	r2, [sp, #0]
 800976a:	429a      	cmp	r2, r3
 800976c:	d311      	bcc.n	8009792 <__multiply+0xb6>
 800976e:	9b02      	ldr	r3, [sp, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	dd06      	ble.n	8009782 <__multiply+0xa6>
 8009774:	9b03      	ldr	r3, [sp, #12]
 8009776:	3b04      	subs	r3, #4
 8009778:	9303      	str	r3, [sp, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	9300      	str	r3, [sp, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d053      	beq.n	800982a <__multiply+0x14e>
 8009782:	9b01      	ldr	r3, [sp, #4]
 8009784:	9a02      	ldr	r2, [sp, #8]
 8009786:	0018      	movs	r0, r3
 8009788:	611a      	str	r2, [r3, #16]
 800978a:	b009      	add	sp, #36	; 0x24
 800978c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800978e:	c304      	stmia	r3!, {r2}
 8009790:	e7cd      	b.n	800972e <__multiply+0x52>
 8009792:	9b00      	ldr	r3, [sp, #0]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	b298      	uxth	r0, r3
 8009798:	2800      	cmp	r0, #0
 800979a:	d01b      	beq.n	80097d4 <__multiply+0xf8>
 800979c:	4667      	mov	r7, ip
 800979e:	2400      	movs	r4, #0
 80097a0:	9e06      	ldr	r6, [sp, #24]
 80097a2:	ce02      	ldmia	r6!, {r1}
 80097a4:	683a      	ldr	r2, [r7, #0]
 80097a6:	b28b      	uxth	r3, r1
 80097a8:	4343      	muls	r3, r0
 80097aa:	b292      	uxth	r2, r2
 80097ac:	189b      	adds	r3, r3, r2
 80097ae:	191b      	adds	r3, r3, r4
 80097b0:	0c0c      	lsrs	r4, r1, #16
 80097b2:	4344      	muls	r4, r0
 80097b4:	683a      	ldr	r2, [r7, #0]
 80097b6:	0c11      	lsrs	r1, r2, #16
 80097b8:	1861      	adds	r1, r4, r1
 80097ba:	0c1c      	lsrs	r4, r3, #16
 80097bc:	1909      	adds	r1, r1, r4
 80097be:	0c0c      	lsrs	r4, r1, #16
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	0409      	lsls	r1, r1, #16
 80097c4:	430b      	orrs	r3, r1
 80097c6:	c708      	stmia	r7!, {r3}
 80097c8:	9b04      	ldr	r3, [sp, #16]
 80097ca:	42b3      	cmp	r3, r6
 80097cc:	d8e9      	bhi.n	80097a2 <__multiply+0xc6>
 80097ce:	4663      	mov	r3, ip
 80097d0:	9a05      	ldr	r2, [sp, #20]
 80097d2:	509c      	str	r4, [r3, r2]
 80097d4:	9b00      	ldr	r3, [sp, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	0c1e      	lsrs	r6, r3, #16
 80097da:	d020      	beq.n	800981e <__multiply+0x142>
 80097dc:	4663      	mov	r3, ip
 80097de:	002c      	movs	r4, r5
 80097e0:	4660      	mov	r0, ip
 80097e2:	2700      	movs	r7, #0
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3414      	adds	r4, #20
 80097e8:	6822      	ldr	r2, [r4, #0]
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	b291      	uxth	r1, r2
 80097ee:	4371      	muls	r1, r6
 80097f0:	6802      	ldr	r2, [r0, #0]
 80097f2:	0c12      	lsrs	r2, r2, #16
 80097f4:	1889      	adds	r1, r1, r2
 80097f6:	19cf      	adds	r7, r1, r7
 80097f8:	0439      	lsls	r1, r7, #16
 80097fa:	430b      	orrs	r3, r1
 80097fc:	6003      	str	r3, [r0, #0]
 80097fe:	cc02      	ldmia	r4!, {r1}
 8009800:	6843      	ldr	r3, [r0, #4]
 8009802:	0c09      	lsrs	r1, r1, #16
 8009804:	4371      	muls	r1, r6
 8009806:	b29b      	uxth	r3, r3
 8009808:	0c3f      	lsrs	r7, r7, #16
 800980a:	18cb      	adds	r3, r1, r3
 800980c:	9a04      	ldr	r2, [sp, #16]
 800980e:	19db      	adds	r3, r3, r7
 8009810:	0c1f      	lsrs	r7, r3, #16
 8009812:	3004      	adds	r0, #4
 8009814:	42a2      	cmp	r2, r4
 8009816:	d8e7      	bhi.n	80097e8 <__multiply+0x10c>
 8009818:	4662      	mov	r2, ip
 800981a:	9905      	ldr	r1, [sp, #20]
 800981c:	5053      	str	r3, [r2, r1]
 800981e:	9b00      	ldr	r3, [sp, #0]
 8009820:	3304      	adds	r3, #4
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	2304      	movs	r3, #4
 8009826:	449c      	add	ip, r3
 8009828:	e79d      	b.n	8009766 <__multiply+0x8a>
 800982a:	9b02      	ldr	r3, [sp, #8]
 800982c:	3b01      	subs	r3, #1
 800982e:	9302      	str	r3, [sp, #8]
 8009830:	e79d      	b.n	800976e <__multiply+0x92>
 8009832:	46c0      	nop			; (mov r8, r8)
 8009834:	0800b378 	.word	0x0800b378
 8009838:	0800b404 	.word	0x0800b404

0800983c <__pow5mult>:
 800983c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800983e:	2303      	movs	r3, #3
 8009840:	0015      	movs	r5, r2
 8009842:	0007      	movs	r7, r0
 8009844:	000e      	movs	r6, r1
 8009846:	401a      	ands	r2, r3
 8009848:	421d      	tst	r5, r3
 800984a:	d008      	beq.n	800985e <__pow5mult+0x22>
 800984c:	4925      	ldr	r1, [pc, #148]	; (80098e4 <__pow5mult+0xa8>)
 800984e:	3a01      	subs	r2, #1
 8009850:	0092      	lsls	r2, r2, #2
 8009852:	5852      	ldr	r2, [r2, r1]
 8009854:	2300      	movs	r3, #0
 8009856:	0031      	movs	r1, r6
 8009858:	f7ff fe52 	bl	8009500 <__multadd>
 800985c:	0006      	movs	r6, r0
 800985e:	10ad      	asrs	r5, r5, #2
 8009860:	d03d      	beq.n	80098de <__pow5mult+0xa2>
 8009862:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009864:	2c00      	cmp	r4, #0
 8009866:	d10f      	bne.n	8009888 <__pow5mult+0x4c>
 8009868:	2010      	movs	r0, #16
 800986a:	f7ff fdb1 	bl	80093d0 <malloc>
 800986e:	1e02      	subs	r2, r0, #0
 8009870:	6278      	str	r0, [r7, #36]	; 0x24
 8009872:	d105      	bne.n	8009880 <__pow5mult+0x44>
 8009874:	21d7      	movs	r1, #215	; 0xd7
 8009876:	4b1c      	ldr	r3, [pc, #112]	; (80098e8 <__pow5mult+0xac>)
 8009878:	481c      	ldr	r0, [pc, #112]	; (80098ec <__pow5mult+0xb0>)
 800987a:	0049      	lsls	r1, r1, #1
 800987c:	f000 fd4a 	bl	800a314 <__assert_func>
 8009880:	6044      	str	r4, [r0, #4]
 8009882:	6084      	str	r4, [r0, #8]
 8009884:	6004      	str	r4, [r0, #0]
 8009886:	60c4      	str	r4, [r0, #12]
 8009888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988a:	689c      	ldr	r4, [r3, #8]
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	2c00      	cmp	r4, #0
 8009890:	d108      	bne.n	80098a4 <__pow5mult+0x68>
 8009892:	0038      	movs	r0, r7
 8009894:	4916      	ldr	r1, [pc, #88]	; (80098f0 <__pow5mult+0xb4>)
 8009896:	f7ff ff0b 	bl	80096b0 <__i2b>
 800989a:	9b01      	ldr	r3, [sp, #4]
 800989c:	0004      	movs	r4, r0
 800989e:	6098      	str	r0, [r3, #8]
 80098a0:	2300      	movs	r3, #0
 80098a2:	6003      	str	r3, [r0, #0]
 80098a4:	2301      	movs	r3, #1
 80098a6:	421d      	tst	r5, r3
 80098a8:	d00a      	beq.n	80098c0 <__pow5mult+0x84>
 80098aa:	0031      	movs	r1, r6
 80098ac:	0022      	movs	r2, r4
 80098ae:	0038      	movs	r0, r7
 80098b0:	f7ff ff14 	bl	80096dc <__multiply>
 80098b4:	0031      	movs	r1, r6
 80098b6:	9001      	str	r0, [sp, #4]
 80098b8:	0038      	movs	r0, r7
 80098ba:	f7ff fdfd 	bl	80094b8 <_Bfree>
 80098be:	9e01      	ldr	r6, [sp, #4]
 80098c0:	106d      	asrs	r5, r5, #1
 80098c2:	d00c      	beq.n	80098de <__pow5mult+0xa2>
 80098c4:	6820      	ldr	r0, [r4, #0]
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d107      	bne.n	80098da <__pow5mult+0x9e>
 80098ca:	0022      	movs	r2, r4
 80098cc:	0021      	movs	r1, r4
 80098ce:	0038      	movs	r0, r7
 80098d0:	f7ff ff04 	bl	80096dc <__multiply>
 80098d4:	2300      	movs	r3, #0
 80098d6:	6020      	str	r0, [r4, #0]
 80098d8:	6003      	str	r3, [r0, #0]
 80098da:	0004      	movs	r4, r0
 80098dc:	e7e2      	b.n	80098a4 <__pow5mult+0x68>
 80098de:	0030      	movs	r0, r6
 80098e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098e2:	46c0      	nop			; (mov r8, r8)
 80098e4:	0800b550 	.word	0x0800b550
 80098e8:	0800b306 	.word	0x0800b306
 80098ec:	0800b404 	.word	0x0800b404
 80098f0:	00000271 	.word	0x00000271

080098f4 <__lshift>:
 80098f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098f6:	000c      	movs	r4, r1
 80098f8:	0017      	movs	r7, r2
 80098fa:	6923      	ldr	r3, [r4, #16]
 80098fc:	1155      	asrs	r5, r2, #5
 80098fe:	b087      	sub	sp, #28
 8009900:	18eb      	adds	r3, r5, r3
 8009902:	9302      	str	r3, [sp, #8]
 8009904:	3301      	adds	r3, #1
 8009906:	9301      	str	r3, [sp, #4]
 8009908:	6849      	ldr	r1, [r1, #4]
 800990a:	68a3      	ldr	r3, [r4, #8]
 800990c:	9004      	str	r0, [sp, #16]
 800990e:	9a01      	ldr	r2, [sp, #4]
 8009910:	4293      	cmp	r3, r2
 8009912:	db10      	blt.n	8009936 <__lshift+0x42>
 8009914:	9804      	ldr	r0, [sp, #16]
 8009916:	f7ff fd8b 	bl	8009430 <_Balloc>
 800991a:	2300      	movs	r3, #0
 800991c:	0002      	movs	r2, r0
 800991e:	0006      	movs	r6, r0
 8009920:	0019      	movs	r1, r3
 8009922:	3214      	adds	r2, #20
 8009924:	4298      	cmp	r0, r3
 8009926:	d10c      	bne.n	8009942 <__lshift+0x4e>
 8009928:	21da      	movs	r1, #218	; 0xda
 800992a:	0002      	movs	r2, r0
 800992c:	4b26      	ldr	r3, [pc, #152]	; (80099c8 <__lshift+0xd4>)
 800992e:	4827      	ldr	r0, [pc, #156]	; (80099cc <__lshift+0xd8>)
 8009930:	31ff      	adds	r1, #255	; 0xff
 8009932:	f000 fcef 	bl	800a314 <__assert_func>
 8009936:	3101      	adds	r1, #1
 8009938:	005b      	lsls	r3, r3, #1
 800993a:	e7e8      	b.n	800990e <__lshift+0x1a>
 800993c:	0098      	lsls	r0, r3, #2
 800993e:	5011      	str	r1, [r2, r0]
 8009940:	3301      	adds	r3, #1
 8009942:	42ab      	cmp	r3, r5
 8009944:	dbfa      	blt.n	800993c <__lshift+0x48>
 8009946:	43eb      	mvns	r3, r5
 8009948:	17db      	asrs	r3, r3, #31
 800994a:	401d      	ands	r5, r3
 800994c:	211f      	movs	r1, #31
 800994e:	0023      	movs	r3, r4
 8009950:	0038      	movs	r0, r7
 8009952:	00ad      	lsls	r5, r5, #2
 8009954:	1955      	adds	r5, r2, r5
 8009956:	6922      	ldr	r2, [r4, #16]
 8009958:	3314      	adds	r3, #20
 800995a:	0092      	lsls	r2, r2, #2
 800995c:	4008      	ands	r0, r1
 800995e:	4684      	mov	ip, r0
 8009960:	189a      	adds	r2, r3, r2
 8009962:	420f      	tst	r7, r1
 8009964:	d02a      	beq.n	80099bc <__lshift+0xc8>
 8009966:	3101      	adds	r1, #1
 8009968:	1a09      	subs	r1, r1, r0
 800996a:	9105      	str	r1, [sp, #20]
 800996c:	2100      	movs	r1, #0
 800996e:	9503      	str	r5, [sp, #12]
 8009970:	4667      	mov	r7, ip
 8009972:	6818      	ldr	r0, [r3, #0]
 8009974:	40b8      	lsls	r0, r7
 8009976:	4301      	orrs	r1, r0
 8009978:	9803      	ldr	r0, [sp, #12]
 800997a:	c002      	stmia	r0!, {r1}
 800997c:	cb02      	ldmia	r3!, {r1}
 800997e:	9003      	str	r0, [sp, #12]
 8009980:	9805      	ldr	r0, [sp, #20]
 8009982:	40c1      	lsrs	r1, r0
 8009984:	429a      	cmp	r2, r3
 8009986:	d8f3      	bhi.n	8009970 <__lshift+0x7c>
 8009988:	0020      	movs	r0, r4
 800998a:	3015      	adds	r0, #21
 800998c:	2304      	movs	r3, #4
 800998e:	4282      	cmp	r2, r0
 8009990:	d304      	bcc.n	800999c <__lshift+0xa8>
 8009992:	1b13      	subs	r3, r2, r4
 8009994:	3b15      	subs	r3, #21
 8009996:	089b      	lsrs	r3, r3, #2
 8009998:	3301      	adds	r3, #1
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	50e9      	str	r1, [r5, r3]
 800999e:	2900      	cmp	r1, #0
 80099a0:	d002      	beq.n	80099a8 <__lshift+0xb4>
 80099a2:	9b02      	ldr	r3, [sp, #8]
 80099a4:	3302      	adds	r3, #2
 80099a6:	9301      	str	r3, [sp, #4]
 80099a8:	9b01      	ldr	r3, [sp, #4]
 80099aa:	9804      	ldr	r0, [sp, #16]
 80099ac:	3b01      	subs	r3, #1
 80099ae:	0021      	movs	r1, r4
 80099b0:	6133      	str	r3, [r6, #16]
 80099b2:	f7ff fd81 	bl	80094b8 <_Bfree>
 80099b6:	0030      	movs	r0, r6
 80099b8:	b007      	add	sp, #28
 80099ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099bc:	cb02      	ldmia	r3!, {r1}
 80099be:	c502      	stmia	r5!, {r1}
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d8fb      	bhi.n	80099bc <__lshift+0xc8>
 80099c4:	e7f0      	b.n	80099a8 <__lshift+0xb4>
 80099c6:	46c0      	nop			; (mov r8, r8)
 80099c8:	0800b378 	.word	0x0800b378
 80099cc:	0800b404 	.word	0x0800b404

080099d0 <__mcmp>:
 80099d0:	6902      	ldr	r2, [r0, #16]
 80099d2:	690b      	ldr	r3, [r1, #16]
 80099d4:	b530      	push	{r4, r5, lr}
 80099d6:	0004      	movs	r4, r0
 80099d8:	1ad0      	subs	r0, r2, r3
 80099da:	429a      	cmp	r2, r3
 80099dc:	d10d      	bne.n	80099fa <__mcmp+0x2a>
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	3414      	adds	r4, #20
 80099e2:	3114      	adds	r1, #20
 80099e4:	18e2      	adds	r2, r4, r3
 80099e6:	18c9      	adds	r1, r1, r3
 80099e8:	3a04      	subs	r2, #4
 80099ea:	3904      	subs	r1, #4
 80099ec:	6815      	ldr	r5, [r2, #0]
 80099ee:	680b      	ldr	r3, [r1, #0]
 80099f0:	429d      	cmp	r5, r3
 80099f2:	d003      	beq.n	80099fc <__mcmp+0x2c>
 80099f4:	2001      	movs	r0, #1
 80099f6:	429d      	cmp	r5, r3
 80099f8:	d303      	bcc.n	8009a02 <__mcmp+0x32>
 80099fa:	bd30      	pop	{r4, r5, pc}
 80099fc:	4294      	cmp	r4, r2
 80099fe:	d3f3      	bcc.n	80099e8 <__mcmp+0x18>
 8009a00:	e7fb      	b.n	80099fa <__mcmp+0x2a>
 8009a02:	4240      	negs	r0, r0
 8009a04:	e7f9      	b.n	80099fa <__mcmp+0x2a>
	...

08009a08 <__mdiff>:
 8009a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a0a:	000e      	movs	r6, r1
 8009a0c:	0007      	movs	r7, r0
 8009a0e:	0011      	movs	r1, r2
 8009a10:	0030      	movs	r0, r6
 8009a12:	b087      	sub	sp, #28
 8009a14:	0014      	movs	r4, r2
 8009a16:	f7ff ffdb 	bl	80099d0 <__mcmp>
 8009a1a:	1e05      	subs	r5, r0, #0
 8009a1c:	d110      	bne.n	8009a40 <__mdiff+0x38>
 8009a1e:	0001      	movs	r1, r0
 8009a20:	0038      	movs	r0, r7
 8009a22:	f7ff fd05 	bl	8009430 <_Balloc>
 8009a26:	1e02      	subs	r2, r0, #0
 8009a28:	d104      	bne.n	8009a34 <__mdiff+0x2c>
 8009a2a:	4b40      	ldr	r3, [pc, #256]	; (8009b2c <__mdiff+0x124>)
 8009a2c:	4940      	ldr	r1, [pc, #256]	; (8009b30 <__mdiff+0x128>)
 8009a2e:	4841      	ldr	r0, [pc, #260]	; (8009b34 <__mdiff+0x12c>)
 8009a30:	f000 fc70 	bl	800a314 <__assert_func>
 8009a34:	2301      	movs	r3, #1
 8009a36:	6145      	str	r5, [r0, #20]
 8009a38:	6103      	str	r3, [r0, #16]
 8009a3a:	0010      	movs	r0, r2
 8009a3c:	b007      	add	sp, #28
 8009a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a40:	2301      	movs	r3, #1
 8009a42:	9301      	str	r3, [sp, #4]
 8009a44:	2800      	cmp	r0, #0
 8009a46:	db04      	blt.n	8009a52 <__mdiff+0x4a>
 8009a48:	0023      	movs	r3, r4
 8009a4a:	0034      	movs	r4, r6
 8009a4c:	001e      	movs	r6, r3
 8009a4e:	2300      	movs	r3, #0
 8009a50:	9301      	str	r3, [sp, #4]
 8009a52:	0038      	movs	r0, r7
 8009a54:	6861      	ldr	r1, [r4, #4]
 8009a56:	f7ff fceb 	bl	8009430 <_Balloc>
 8009a5a:	1e02      	subs	r2, r0, #0
 8009a5c:	d103      	bne.n	8009a66 <__mdiff+0x5e>
 8009a5e:	2190      	movs	r1, #144	; 0x90
 8009a60:	4b32      	ldr	r3, [pc, #200]	; (8009b2c <__mdiff+0x124>)
 8009a62:	0089      	lsls	r1, r1, #2
 8009a64:	e7e3      	b.n	8009a2e <__mdiff+0x26>
 8009a66:	9b01      	ldr	r3, [sp, #4]
 8009a68:	2700      	movs	r7, #0
 8009a6a:	60c3      	str	r3, [r0, #12]
 8009a6c:	6920      	ldr	r0, [r4, #16]
 8009a6e:	3414      	adds	r4, #20
 8009a70:	9401      	str	r4, [sp, #4]
 8009a72:	9b01      	ldr	r3, [sp, #4]
 8009a74:	0084      	lsls	r4, r0, #2
 8009a76:	191b      	adds	r3, r3, r4
 8009a78:	0034      	movs	r4, r6
 8009a7a:	9302      	str	r3, [sp, #8]
 8009a7c:	6933      	ldr	r3, [r6, #16]
 8009a7e:	3414      	adds	r4, #20
 8009a80:	0099      	lsls	r1, r3, #2
 8009a82:	1863      	adds	r3, r4, r1
 8009a84:	9303      	str	r3, [sp, #12]
 8009a86:	0013      	movs	r3, r2
 8009a88:	3314      	adds	r3, #20
 8009a8a:	469c      	mov	ip, r3
 8009a8c:	9305      	str	r3, [sp, #20]
 8009a8e:	9b01      	ldr	r3, [sp, #4]
 8009a90:	9304      	str	r3, [sp, #16]
 8009a92:	9b04      	ldr	r3, [sp, #16]
 8009a94:	cc02      	ldmia	r4!, {r1}
 8009a96:	cb20      	ldmia	r3!, {r5}
 8009a98:	9304      	str	r3, [sp, #16]
 8009a9a:	b2ab      	uxth	r3, r5
 8009a9c:	19df      	adds	r7, r3, r7
 8009a9e:	b28b      	uxth	r3, r1
 8009aa0:	1afb      	subs	r3, r7, r3
 8009aa2:	0c09      	lsrs	r1, r1, #16
 8009aa4:	0c2d      	lsrs	r5, r5, #16
 8009aa6:	1a6d      	subs	r5, r5, r1
 8009aa8:	1419      	asrs	r1, r3, #16
 8009aaa:	186d      	adds	r5, r5, r1
 8009aac:	4661      	mov	r1, ip
 8009aae:	142f      	asrs	r7, r5, #16
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	042d      	lsls	r5, r5, #16
 8009ab4:	432b      	orrs	r3, r5
 8009ab6:	c108      	stmia	r1!, {r3}
 8009ab8:	9b03      	ldr	r3, [sp, #12]
 8009aba:	468c      	mov	ip, r1
 8009abc:	42a3      	cmp	r3, r4
 8009abe:	d8e8      	bhi.n	8009a92 <__mdiff+0x8a>
 8009ac0:	0031      	movs	r1, r6
 8009ac2:	9c03      	ldr	r4, [sp, #12]
 8009ac4:	3115      	adds	r1, #21
 8009ac6:	2304      	movs	r3, #4
 8009ac8:	428c      	cmp	r4, r1
 8009aca:	d304      	bcc.n	8009ad6 <__mdiff+0xce>
 8009acc:	1ba3      	subs	r3, r4, r6
 8009ace:	3b15      	subs	r3, #21
 8009ad0:	089b      	lsrs	r3, r3, #2
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	9901      	ldr	r1, [sp, #4]
 8009ad8:	18cc      	adds	r4, r1, r3
 8009ada:	9905      	ldr	r1, [sp, #20]
 8009adc:	0026      	movs	r6, r4
 8009ade:	18cb      	adds	r3, r1, r3
 8009ae0:	469c      	mov	ip, r3
 8009ae2:	9902      	ldr	r1, [sp, #8]
 8009ae4:	428e      	cmp	r6, r1
 8009ae6:	d310      	bcc.n	8009b0a <__mdiff+0x102>
 8009ae8:	9e02      	ldr	r6, [sp, #8]
 8009aea:	1ee1      	subs	r1, r4, #3
 8009aec:	2500      	movs	r5, #0
 8009aee:	428e      	cmp	r6, r1
 8009af0:	d304      	bcc.n	8009afc <__mdiff+0xf4>
 8009af2:	0031      	movs	r1, r6
 8009af4:	3103      	adds	r1, #3
 8009af6:	1b0c      	subs	r4, r1, r4
 8009af8:	08a4      	lsrs	r4, r4, #2
 8009afa:	00a5      	lsls	r5, r4, #2
 8009afc:	195b      	adds	r3, r3, r5
 8009afe:	3b04      	subs	r3, #4
 8009b00:	6819      	ldr	r1, [r3, #0]
 8009b02:	2900      	cmp	r1, #0
 8009b04:	d00f      	beq.n	8009b26 <__mdiff+0x11e>
 8009b06:	6110      	str	r0, [r2, #16]
 8009b08:	e797      	b.n	8009a3a <__mdiff+0x32>
 8009b0a:	ce02      	ldmia	r6!, {r1}
 8009b0c:	b28d      	uxth	r5, r1
 8009b0e:	19ed      	adds	r5, r5, r7
 8009b10:	0c0f      	lsrs	r7, r1, #16
 8009b12:	1429      	asrs	r1, r5, #16
 8009b14:	1879      	adds	r1, r7, r1
 8009b16:	140f      	asrs	r7, r1, #16
 8009b18:	b2ad      	uxth	r5, r5
 8009b1a:	0409      	lsls	r1, r1, #16
 8009b1c:	430d      	orrs	r5, r1
 8009b1e:	4661      	mov	r1, ip
 8009b20:	c120      	stmia	r1!, {r5}
 8009b22:	468c      	mov	ip, r1
 8009b24:	e7dd      	b.n	8009ae2 <__mdiff+0xda>
 8009b26:	3801      	subs	r0, #1
 8009b28:	e7e9      	b.n	8009afe <__mdiff+0xf6>
 8009b2a:	46c0      	nop			; (mov r8, r8)
 8009b2c:	0800b378 	.word	0x0800b378
 8009b30:	00000232 	.word	0x00000232
 8009b34:	0800b404 	.word	0x0800b404

08009b38 <__ulp>:
 8009b38:	4b0f      	ldr	r3, [pc, #60]	; (8009b78 <__ulp+0x40>)
 8009b3a:	4019      	ands	r1, r3
 8009b3c:	4b0f      	ldr	r3, [pc, #60]	; (8009b7c <__ulp+0x44>)
 8009b3e:	18c9      	adds	r1, r1, r3
 8009b40:	2900      	cmp	r1, #0
 8009b42:	dd04      	ble.n	8009b4e <__ulp+0x16>
 8009b44:	2200      	movs	r2, #0
 8009b46:	000b      	movs	r3, r1
 8009b48:	0010      	movs	r0, r2
 8009b4a:	0019      	movs	r1, r3
 8009b4c:	4770      	bx	lr
 8009b4e:	4249      	negs	r1, r1
 8009b50:	2200      	movs	r2, #0
 8009b52:	2300      	movs	r3, #0
 8009b54:	1509      	asrs	r1, r1, #20
 8009b56:	2913      	cmp	r1, #19
 8009b58:	dc04      	bgt.n	8009b64 <__ulp+0x2c>
 8009b5a:	2080      	movs	r0, #128	; 0x80
 8009b5c:	0300      	lsls	r0, r0, #12
 8009b5e:	4108      	asrs	r0, r1
 8009b60:	0003      	movs	r3, r0
 8009b62:	e7f1      	b.n	8009b48 <__ulp+0x10>
 8009b64:	3914      	subs	r1, #20
 8009b66:	2001      	movs	r0, #1
 8009b68:	291e      	cmp	r1, #30
 8009b6a:	dc02      	bgt.n	8009b72 <__ulp+0x3a>
 8009b6c:	2080      	movs	r0, #128	; 0x80
 8009b6e:	0600      	lsls	r0, r0, #24
 8009b70:	40c8      	lsrs	r0, r1
 8009b72:	0002      	movs	r2, r0
 8009b74:	e7e8      	b.n	8009b48 <__ulp+0x10>
 8009b76:	46c0      	nop			; (mov r8, r8)
 8009b78:	7ff00000 	.word	0x7ff00000
 8009b7c:	fcc00000 	.word	0xfcc00000

08009b80 <__b2d>:
 8009b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b82:	0006      	movs	r6, r0
 8009b84:	6903      	ldr	r3, [r0, #16]
 8009b86:	3614      	adds	r6, #20
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	18f3      	adds	r3, r6, r3
 8009b8c:	1f1d      	subs	r5, r3, #4
 8009b8e:	682c      	ldr	r4, [r5, #0]
 8009b90:	000f      	movs	r7, r1
 8009b92:	0020      	movs	r0, r4
 8009b94:	9301      	str	r3, [sp, #4]
 8009b96:	f7ff fd43 	bl	8009620 <__hi0bits>
 8009b9a:	2320      	movs	r3, #32
 8009b9c:	1a1b      	subs	r3, r3, r0
 8009b9e:	491f      	ldr	r1, [pc, #124]	; (8009c1c <__b2d+0x9c>)
 8009ba0:	603b      	str	r3, [r7, #0]
 8009ba2:	280a      	cmp	r0, #10
 8009ba4:	dc16      	bgt.n	8009bd4 <__b2d+0x54>
 8009ba6:	230b      	movs	r3, #11
 8009ba8:	0027      	movs	r7, r4
 8009baa:	1a1b      	subs	r3, r3, r0
 8009bac:	40df      	lsrs	r7, r3
 8009bae:	4339      	orrs	r1, r7
 8009bb0:	469c      	mov	ip, r3
 8009bb2:	000b      	movs	r3, r1
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	42ae      	cmp	r6, r5
 8009bb8:	d202      	bcs.n	8009bc0 <__b2d+0x40>
 8009bba:	9901      	ldr	r1, [sp, #4]
 8009bbc:	3908      	subs	r1, #8
 8009bbe:	6809      	ldr	r1, [r1, #0]
 8009bc0:	3015      	adds	r0, #21
 8009bc2:	4084      	lsls	r4, r0
 8009bc4:	4660      	mov	r0, ip
 8009bc6:	40c1      	lsrs	r1, r0
 8009bc8:	430c      	orrs	r4, r1
 8009bca:	0022      	movs	r2, r4
 8009bcc:	0010      	movs	r0, r2
 8009bce:	0019      	movs	r1, r3
 8009bd0:	b003      	add	sp, #12
 8009bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bd4:	2700      	movs	r7, #0
 8009bd6:	42ae      	cmp	r6, r5
 8009bd8:	d202      	bcs.n	8009be0 <__b2d+0x60>
 8009bda:	9d01      	ldr	r5, [sp, #4]
 8009bdc:	3d08      	subs	r5, #8
 8009bde:	682f      	ldr	r7, [r5, #0]
 8009be0:	230b      	movs	r3, #11
 8009be2:	425b      	negs	r3, r3
 8009be4:	469c      	mov	ip, r3
 8009be6:	4484      	add	ip, r0
 8009be8:	280b      	cmp	r0, #11
 8009bea:	d013      	beq.n	8009c14 <__b2d+0x94>
 8009bec:	4663      	mov	r3, ip
 8009bee:	2020      	movs	r0, #32
 8009bf0:	409c      	lsls	r4, r3
 8009bf2:	1ac0      	subs	r0, r0, r3
 8009bf4:	003b      	movs	r3, r7
 8009bf6:	40c3      	lsrs	r3, r0
 8009bf8:	431c      	orrs	r4, r3
 8009bfa:	4321      	orrs	r1, r4
 8009bfc:	000b      	movs	r3, r1
 8009bfe:	2100      	movs	r1, #0
 8009c00:	42b5      	cmp	r5, r6
 8009c02:	d901      	bls.n	8009c08 <__b2d+0x88>
 8009c04:	3d04      	subs	r5, #4
 8009c06:	6829      	ldr	r1, [r5, #0]
 8009c08:	4664      	mov	r4, ip
 8009c0a:	40c1      	lsrs	r1, r0
 8009c0c:	40a7      	lsls	r7, r4
 8009c0e:	430f      	orrs	r7, r1
 8009c10:	003a      	movs	r2, r7
 8009c12:	e7db      	b.n	8009bcc <__b2d+0x4c>
 8009c14:	4321      	orrs	r1, r4
 8009c16:	000b      	movs	r3, r1
 8009c18:	e7fa      	b.n	8009c10 <__b2d+0x90>
 8009c1a:	46c0      	nop			; (mov r8, r8)
 8009c1c:	3ff00000 	.word	0x3ff00000

08009c20 <__d2b>:
 8009c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c22:	2101      	movs	r1, #1
 8009c24:	0014      	movs	r4, r2
 8009c26:	001e      	movs	r6, r3
 8009c28:	9f08      	ldr	r7, [sp, #32]
 8009c2a:	f7ff fc01 	bl	8009430 <_Balloc>
 8009c2e:	1e05      	subs	r5, r0, #0
 8009c30:	d105      	bne.n	8009c3e <__d2b+0x1e>
 8009c32:	0002      	movs	r2, r0
 8009c34:	4b26      	ldr	r3, [pc, #152]	; (8009cd0 <__d2b+0xb0>)
 8009c36:	4927      	ldr	r1, [pc, #156]	; (8009cd4 <__d2b+0xb4>)
 8009c38:	4827      	ldr	r0, [pc, #156]	; (8009cd8 <__d2b+0xb8>)
 8009c3a:	f000 fb6b 	bl	800a314 <__assert_func>
 8009c3e:	0333      	lsls	r3, r6, #12
 8009c40:	0076      	lsls	r6, r6, #1
 8009c42:	0b1b      	lsrs	r3, r3, #12
 8009c44:	0d76      	lsrs	r6, r6, #21
 8009c46:	d124      	bne.n	8009c92 <__d2b+0x72>
 8009c48:	9301      	str	r3, [sp, #4]
 8009c4a:	2c00      	cmp	r4, #0
 8009c4c:	d027      	beq.n	8009c9e <__d2b+0x7e>
 8009c4e:	4668      	mov	r0, sp
 8009c50:	9400      	str	r4, [sp, #0]
 8009c52:	f7ff fcff 	bl	8009654 <__lo0bits>
 8009c56:	9c00      	ldr	r4, [sp, #0]
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d01e      	beq.n	8009c9a <__d2b+0x7a>
 8009c5c:	9b01      	ldr	r3, [sp, #4]
 8009c5e:	2120      	movs	r1, #32
 8009c60:	001a      	movs	r2, r3
 8009c62:	1a09      	subs	r1, r1, r0
 8009c64:	408a      	lsls	r2, r1
 8009c66:	40c3      	lsrs	r3, r0
 8009c68:	4322      	orrs	r2, r4
 8009c6a:	616a      	str	r2, [r5, #20]
 8009c6c:	9301      	str	r3, [sp, #4]
 8009c6e:	9c01      	ldr	r4, [sp, #4]
 8009c70:	61ac      	str	r4, [r5, #24]
 8009c72:	1e63      	subs	r3, r4, #1
 8009c74:	419c      	sbcs	r4, r3
 8009c76:	3401      	adds	r4, #1
 8009c78:	612c      	str	r4, [r5, #16]
 8009c7a:	2e00      	cmp	r6, #0
 8009c7c:	d018      	beq.n	8009cb0 <__d2b+0x90>
 8009c7e:	4b17      	ldr	r3, [pc, #92]	; (8009cdc <__d2b+0xbc>)
 8009c80:	18f6      	adds	r6, r6, r3
 8009c82:	2335      	movs	r3, #53	; 0x35
 8009c84:	1836      	adds	r6, r6, r0
 8009c86:	1a18      	subs	r0, r3, r0
 8009c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c8a:	603e      	str	r6, [r7, #0]
 8009c8c:	6018      	str	r0, [r3, #0]
 8009c8e:	0028      	movs	r0, r5
 8009c90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c92:	2280      	movs	r2, #128	; 0x80
 8009c94:	0352      	lsls	r2, r2, #13
 8009c96:	4313      	orrs	r3, r2
 8009c98:	e7d6      	b.n	8009c48 <__d2b+0x28>
 8009c9a:	616c      	str	r4, [r5, #20]
 8009c9c:	e7e7      	b.n	8009c6e <__d2b+0x4e>
 8009c9e:	a801      	add	r0, sp, #4
 8009ca0:	f7ff fcd8 	bl	8009654 <__lo0bits>
 8009ca4:	2401      	movs	r4, #1
 8009ca6:	9b01      	ldr	r3, [sp, #4]
 8009ca8:	612c      	str	r4, [r5, #16]
 8009caa:	616b      	str	r3, [r5, #20]
 8009cac:	3020      	adds	r0, #32
 8009cae:	e7e4      	b.n	8009c7a <__d2b+0x5a>
 8009cb0:	4b0b      	ldr	r3, [pc, #44]	; (8009ce0 <__d2b+0xc0>)
 8009cb2:	18c0      	adds	r0, r0, r3
 8009cb4:	4b0b      	ldr	r3, [pc, #44]	; (8009ce4 <__d2b+0xc4>)
 8009cb6:	6038      	str	r0, [r7, #0]
 8009cb8:	18e3      	adds	r3, r4, r3
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	18eb      	adds	r3, r5, r3
 8009cbe:	6958      	ldr	r0, [r3, #20]
 8009cc0:	f7ff fcae 	bl	8009620 <__hi0bits>
 8009cc4:	0164      	lsls	r4, r4, #5
 8009cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc8:	1a24      	subs	r4, r4, r0
 8009cca:	601c      	str	r4, [r3, #0]
 8009ccc:	e7df      	b.n	8009c8e <__d2b+0x6e>
 8009cce:	46c0      	nop			; (mov r8, r8)
 8009cd0:	0800b378 	.word	0x0800b378
 8009cd4:	0000030a 	.word	0x0000030a
 8009cd8:	0800b404 	.word	0x0800b404
 8009cdc:	fffffbcd 	.word	0xfffffbcd
 8009ce0:	fffffbce 	.word	0xfffffbce
 8009ce4:	3fffffff 	.word	0x3fffffff

08009ce8 <__ratio>:
 8009ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cea:	b087      	sub	sp, #28
 8009cec:	000f      	movs	r7, r1
 8009cee:	a904      	add	r1, sp, #16
 8009cf0:	0006      	movs	r6, r0
 8009cf2:	f7ff ff45 	bl	8009b80 <__b2d>
 8009cf6:	9000      	str	r0, [sp, #0]
 8009cf8:	9101      	str	r1, [sp, #4]
 8009cfa:	9c00      	ldr	r4, [sp, #0]
 8009cfc:	9d01      	ldr	r5, [sp, #4]
 8009cfe:	0038      	movs	r0, r7
 8009d00:	a905      	add	r1, sp, #20
 8009d02:	f7ff ff3d 	bl	8009b80 <__b2d>
 8009d06:	9002      	str	r0, [sp, #8]
 8009d08:	9103      	str	r1, [sp, #12]
 8009d0a:	9a02      	ldr	r2, [sp, #8]
 8009d0c:	9b03      	ldr	r3, [sp, #12]
 8009d0e:	6931      	ldr	r1, [r6, #16]
 8009d10:	6938      	ldr	r0, [r7, #16]
 8009d12:	9e05      	ldr	r6, [sp, #20]
 8009d14:	1a08      	subs	r0, r1, r0
 8009d16:	9904      	ldr	r1, [sp, #16]
 8009d18:	0140      	lsls	r0, r0, #5
 8009d1a:	1b89      	subs	r1, r1, r6
 8009d1c:	1841      	adds	r1, r0, r1
 8009d1e:	0508      	lsls	r0, r1, #20
 8009d20:	2900      	cmp	r1, #0
 8009d22:	dd07      	ble.n	8009d34 <__ratio+0x4c>
 8009d24:	9901      	ldr	r1, [sp, #4]
 8009d26:	1845      	adds	r5, r0, r1
 8009d28:	0020      	movs	r0, r4
 8009d2a:	0029      	movs	r1, r5
 8009d2c:	f7f7 fa8c 	bl	8001248 <__aeabi_ddiv>
 8009d30:	b007      	add	sp, #28
 8009d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d34:	9903      	ldr	r1, [sp, #12]
 8009d36:	1a0b      	subs	r3, r1, r0
 8009d38:	e7f6      	b.n	8009d28 <__ratio+0x40>

08009d3a <__copybits>:
 8009d3a:	b570      	push	{r4, r5, r6, lr}
 8009d3c:	0014      	movs	r4, r2
 8009d3e:	0005      	movs	r5, r0
 8009d40:	3901      	subs	r1, #1
 8009d42:	6913      	ldr	r3, [r2, #16]
 8009d44:	1149      	asrs	r1, r1, #5
 8009d46:	3101      	adds	r1, #1
 8009d48:	0089      	lsls	r1, r1, #2
 8009d4a:	3414      	adds	r4, #20
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	1841      	adds	r1, r0, r1
 8009d50:	18e3      	adds	r3, r4, r3
 8009d52:	42a3      	cmp	r3, r4
 8009d54:	d80d      	bhi.n	8009d72 <__copybits+0x38>
 8009d56:	0014      	movs	r4, r2
 8009d58:	3411      	adds	r4, #17
 8009d5a:	2500      	movs	r5, #0
 8009d5c:	429c      	cmp	r4, r3
 8009d5e:	d803      	bhi.n	8009d68 <__copybits+0x2e>
 8009d60:	1a9b      	subs	r3, r3, r2
 8009d62:	3b11      	subs	r3, #17
 8009d64:	089b      	lsrs	r3, r3, #2
 8009d66:	009d      	lsls	r5, r3, #2
 8009d68:	2300      	movs	r3, #0
 8009d6a:	1940      	adds	r0, r0, r5
 8009d6c:	4281      	cmp	r1, r0
 8009d6e:	d803      	bhi.n	8009d78 <__copybits+0x3e>
 8009d70:	bd70      	pop	{r4, r5, r6, pc}
 8009d72:	cc40      	ldmia	r4!, {r6}
 8009d74:	c540      	stmia	r5!, {r6}
 8009d76:	e7ec      	b.n	8009d52 <__copybits+0x18>
 8009d78:	c008      	stmia	r0!, {r3}
 8009d7a:	e7f7      	b.n	8009d6c <__copybits+0x32>

08009d7c <__any_on>:
 8009d7c:	0002      	movs	r2, r0
 8009d7e:	6900      	ldr	r0, [r0, #16]
 8009d80:	b510      	push	{r4, lr}
 8009d82:	3214      	adds	r2, #20
 8009d84:	114b      	asrs	r3, r1, #5
 8009d86:	4298      	cmp	r0, r3
 8009d88:	db13      	blt.n	8009db2 <__any_on+0x36>
 8009d8a:	dd0c      	ble.n	8009da6 <__any_on+0x2a>
 8009d8c:	241f      	movs	r4, #31
 8009d8e:	0008      	movs	r0, r1
 8009d90:	4020      	ands	r0, r4
 8009d92:	4221      	tst	r1, r4
 8009d94:	d007      	beq.n	8009da6 <__any_on+0x2a>
 8009d96:	0099      	lsls	r1, r3, #2
 8009d98:	588c      	ldr	r4, [r1, r2]
 8009d9a:	0021      	movs	r1, r4
 8009d9c:	40c1      	lsrs	r1, r0
 8009d9e:	4081      	lsls	r1, r0
 8009da0:	2001      	movs	r0, #1
 8009da2:	428c      	cmp	r4, r1
 8009da4:	d104      	bne.n	8009db0 <__any_on+0x34>
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	18d3      	adds	r3, r2, r3
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d803      	bhi.n	8009db6 <__any_on+0x3a>
 8009dae:	2000      	movs	r0, #0
 8009db0:	bd10      	pop	{r4, pc}
 8009db2:	0003      	movs	r3, r0
 8009db4:	e7f7      	b.n	8009da6 <__any_on+0x2a>
 8009db6:	3b04      	subs	r3, #4
 8009db8:	6819      	ldr	r1, [r3, #0]
 8009dba:	2900      	cmp	r1, #0
 8009dbc:	d0f5      	beq.n	8009daa <__any_on+0x2e>
 8009dbe:	2001      	movs	r0, #1
 8009dc0:	e7f6      	b.n	8009db0 <__any_on+0x34>

08009dc2 <_calloc_r>:
 8009dc2:	b570      	push	{r4, r5, r6, lr}
 8009dc4:	0c13      	lsrs	r3, r2, #16
 8009dc6:	0c0d      	lsrs	r5, r1, #16
 8009dc8:	d11e      	bne.n	8009e08 <_calloc_r+0x46>
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10c      	bne.n	8009de8 <_calloc_r+0x26>
 8009dce:	b289      	uxth	r1, r1
 8009dd0:	b294      	uxth	r4, r2
 8009dd2:	434c      	muls	r4, r1
 8009dd4:	0021      	movs	r1, r4
 8009dd6:	f000 f88d 	bl	8009ef4 <_malloc_r>
 8009dda:	1e05      	subs	r5, r0, #0
 8009ddc:	d01b      	beq.n	8009e16 <_calloc_r+0x54>
 8009dde:	0022      	movs	r2, r4
 8009de0:	2100      	movs	r1, #0
 8009de2:	f7fc fb61 	bl	80064a8 <memset>
 8009de6:	e016      	b.n	8009e16 <_calloc_r+0x54>
 8009de8:	1c1d      	adds	r5, r3, #0
 8009dea:	1c0b      	adds	r3, r1, #0
 8009dec:	b292      	uxth	r2, r2
 8009dee:	b289      	uxth	r1, r1
 8009df0:	b29c      	uxth	r4, r3
 8009df2:	4351      	muls	r1, r2
 8009df4:	b2ab      	uxth	r3, r5
 8009df6:	4363      	muls	r3, r4
 8009df8:	0c0c      	lsrs	r4, r1, #16
 8009dfa:	191c      	adds	r4, r3, r4
 8009dfc:	0c22      	lsrs	r2, r4, #16
 8009dfe:	d107      	bne.n	8009e10 <_calloc_r+0x4e>
 8009e00:	0424      	lsls	r4, r4, #16
 8009e02:	b289      	uxth	r1, r1
 8009e04:	430c      	orrs	r4, r1
 8009e06:	e7e5      	b.n	8009dd4 <_calloc_r+0x12>
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d101      	bne.n	8009e10 <_calloc_r+0x4e>
 8009e0c:	1c13      	adds	r3, r2, #0
 8009e0e:	e7ed      	b.n	8009dec <_calloc_r+0x2a>
 8009e10:	230c      	movs	r3, #12
 8009e12:	2500      	movs	r5, #0
 8009e14:	6003      	str	r3, [r0, #0]
 8009e16:	0028      	movs	r0, r5
 8009e18:	bd70      	pop	{r4, r5, r6, pc}
	...

08009e1c <_free_r>:
 8009e1c:	b570      	push	{r4, r5, r6, lr}
 8009e1e:	0005      	movs	r5, r0
 8009e20:	2900      	cmp	r1, #0
 8009e22:	d010      	beq.n	8009e46 <_free_r+0x2a>
 8009e24:	1f0c      	subs	r4, r1, #4
 8009e26:	6823      	ldr	r3, [r4, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	da00      	bge.n	8009e2e <_free_r+0x12>
 8009e2c:	18e4      	adds	r4, r4, r3
 8009e2e:	0028      	movs	r0, r5
 8009e30:	f000 fab2 	bl	800a398 <__malloc_lock>
 8009e34:	4a1d      	ldr	r2, [pc, #116]	; (8009eac <_free_r+0x90>)
 8009e36:	6813      	ldr	r3, [r2, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d105      	bne.n	8009e48 <_free_r+0x2c>
 8009e3c:	6063      	str	r3, [r4, #4]
 8009e3e:	6014      	str	r4, [r2, #0]
 8009e40:	0028      	movs	r0, r5
 8009e42:	f000 fab1 	bl	800a3a8 <__malloc_unlock>
 8009e46:	bd70      	pop	{r4, r5, r6, pc}
 8009e48:	42a3      	cmp	r3, r4
 8009e4a:	d908      	bls.n	8009e5e <_free_r+0x42>
 8009e4c:	6821      	ldr	r1, [r4, #0]
 8009e4e:	1860      	adds	r0, r4, r1
 8009e50:	4283      	cmp	r3, r0
 8009e52:	d1f3      	bne.n	8009e3c <_free_r+0x20>
 8009e54:	6818      	ldr	r0, [r3, #0]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	1841      	adds	r1, r0, r1
 8009e5a:	6021      	str	r1, [r4, #0]
 8009e5c:	e7ee      	b.n	8009e3c <_free_r+0x20>
 8009e5e:	001a      	movs	r2, r3
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <_free_r+0x4e>
 8009e66:	42a3      	cmp	r3, r4
 8009e68:	d9f9      	bls.n	8009e5e <_free_r+0x42>
 8009e6a:	6811      	ldr	r1, [r2, #0]
 8009e6c:	1850      	adds	r0, r2, r1
 8009e6e:	42a0      	cmp	r0, r4
 8009e70:	d10b      	bne.n	8009e8a <_free_r+0x6e>
 8009e72:	6820      	ldr	r0, [r4, #0]
 8009e74:	1809      	adds	r1, r1, r0
 8009e76:	1850      	adds	r0, r2, r1
 8009e78:	6011      	str	r1, [r2, #0]
 8009e7a:	4283      	cmp	r3, r0
 8009e7c:	d1e0      	bne.n	8009e40 <_free_r+0x24>
 8009e7e:	6818      	ldr	r0, [r3, #0]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	1841      	adds	r1, r0, r1
 8009e84:	6011      	str	r1, [r2, #0]
 8009e86:	6053      	str	r3, [r2, #4]
 8009e88:	e7da      	b.n	8009e40 <_free_r+0x24>
 8009e8a:	42a0      	cmp	r0, r4
 8009e8c:	d902      	bls.n	8009e94 <_free_r+0x78>
 8009e8e:	230c      	movs	r3, #12
 8009e90:	602b      	str	r3, [r5, #0]
 8009e92:	e7d5      	b.n	8009e40 <_free_r+0x24>
 8009e94:	6821      	ldr	r1, [r4, #0]
 8009e96:	1860      	adds	r0, r4, r1
 8009e98:	4283      	cmp	r3, r0
 8009e9a:	d103      	bne.n	8009ea4 <_free_r+0x88>
 8009e9c:	6818      	ldr	r0, [r3, #0]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	1841      	adds	r1, r0, r1
 8009ea2:	6021      	str	r1, [r4, #0]
 8009ea4:	6063      	str	r3, [r4, #4]
 8009ea6:	6054      	str	r4, [r2, #4]
 8009ea8:	e7ca      	b.n	8009e40 <_free_r+0x24>
 8009eaa:	46c0      	nop			; (mov r8, r8)
 8009eac:	20000314 	.word	0x20000314

08009eb0 <sbrk_aligned>:
 8009eb0:	b570      	push	{r4, r5, r6, lr}
 8009eb2:	4e0f      	ldr	r6, [pc, #60]	; (8009ef0 <sbrk_aligned+0x40>)
 8009eb4:	000d      	movs	r5, r1
 8009eb6:	6831      	ldr	r1, [r6, #0]
 8009eb8:	0004      	movs	r4, r0
 8009eba:	2900      	cmp	r1, #0
 8009ebc:	d102      	bne.n	8009ec4 <sbrk_aligned+0x14>
 8009ebe:	f000 f9f7 	bl	800a2b0 <_sbrk_r>
 8009ec2:	6030      	str	r0, [r6, #0]
 8009ec4:	0029      	movs	r1, r5
 8009ec6:	0020      	movs	r0, r4
 8009ec8:	f000 f9f2 	bl	800a2b0 <_sbrk_r>
 8009ecc:	1c43      	adds	r3, r0, #1
 8009ece:	d00a      	beq.n	8009ee6 <sbrk_aligned+0x36>
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	1cc5      	adds	r5, r0, #3
 8009ed4:	439d      	bics	r5, r3
 8009ed6:	42a8      	cmp	r0, r5
 8009ed8:	d007      	beq.n	8009eea <sbrk_aligned+0x3a>
 8009eda:	1a29      	subs	r1, r5, r0
 8009edc:	0020      	movs	r0, r4
 8009ede:	f000 f9e7 	bl	800a2b0 <_sbrk_r>
 8009ee2:	1c43      	adds	r3, r0, #1
 8009ee4:	d101      	bne.n	8009eea <sbrk_aligned+0x3a>
 8009ee6:	2501      	movs	r5, #1
 8009ee8:	426d      	negs	r5, r5
 8009eea:	0028      	movs	r0, r5
 8009eec:	bd70      	pop	{r4, r5, r6, pc}
 8009eee:	46c0      	nop			; (mov r8, r8)
 8009ef0:	20000318 	.word	0x20000318

08009ef4 <_malloc_r>:
 8009ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ef6:	2203      	movs	r2, #3
 8009ef8:	1ccb      	adds	r3, r1, #3
 8009efa:	4393      	bics	r3, r2
 8009efc:	3308      	adds	r3, #8
 8009efe:	0006      	movs	r6, r0
 8009f00:	001f      	movs	r7, r3
 8009f02:	2b0c      	cmp	r3, #12
 8009f04:	d232      	bcs.n	8009f6c <_malloc_r+0x78>
 8009f06:	270c      	movs	r7, #12
 8009f08:	42b9      	cmp	r1, r7
 8009f0a:	d831      	bhi.n	8009f70 <_malloc_r+0x7c>
 8009f0c:	0030      	movs	r0, r6
 8009f0e:	f000 fa43 	bl	800a398 <__malloc_lock>
 8009f12:	4d32      	ldr	r5, [pc, #200]	; (8009fdc <_malloc_r+0xe8>)
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	001c      	movs	r4, r3
 8009f18:	2c00      	cmp	r4, #0
 8009f1a:	d12e      	bne.n	8009f7a <_malloc_r+0x86>
 8009f1c:	0039      	movs	r1, r7
 8009f1e:	0030      	movs	r0, r6
 8009f20:	f7ff ffc6 	bl	8009eb0 <sbrk_aligned>
 8009f24:	0004      	movs	r4, r0
 8009f26:	1c43      	adds	r3, r0, #1
 8009f28:	d11e      	bne.n	8009f68 <_malloc_r+0x74>
 8009f2a:	682c      	ldr	r4, [r5, #0]
 8009f2c:	0025      	movs	r5, r4
 8009f2e:	2d00      	cmp	r5, #0
 8009f30:	d14a      	bne.n	8009fc8 <_malloc_r+0xd4>
 8009f32:	6823      	ldr	r3, [r4, #0]
 8009f34:	0029      	movs	r1, r5
 8009f36:	18e3      	adds	r3, r4, r3
 8009f38:	0030      	movs	r0, r6
 8009f3a:	9301      	str	r3, [sp, #4]
 8009f3c:	f000 f9b8 	bl	800a2b0 <_sbrk_r>
 8009f40:	9b01      	ldr	r3, [sp, #4]
 8009f42:	4283      	cmp	r3, r0
 8009f44:	d143      	bne.n	8009fce <_malloc_r+0xda>
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	3703      	adds	r7, #3
 8009f4a:	1aff      	subs	r7, r7, r3
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	439f      	bics	r7, r3
 8009f50:	3708      	adds	r7, #8
 8009f52:	2f0c      	cmp	r7, #12
 8009f54:	d200      	bcs.n	8009f58 <_malloc_r+0x64>
 8009f56:	270c      	movs	r7, #12
 8009f58:	0039      	movs	r1, r7
 8009f5a:	0030      	movs	r0, r6
 8009f5c:	f7ff ffa8 	bl	8009eb0 <sbrk_aligned>
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	d034      	beq.n	8009fce <_malloc_r+0xda>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	19df      	adds	r7, r3, r7
 8009f68:	6027      	str	r7, [r4, #0]
 8009f6a:	e013      	b.n	8009f94 <_malloc_r+0xa0>
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	dacb      	bge.n	8009f08 <_malloc_r+0x14>
 8009f70:	230c      	movs	r3, #12
 8009f72:	2500      	movs	r5, #0
 8009f74:	6033      	str	r3, [r6, #0]
 8009f76:	0028      	movs	r0, r5
 8009f78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f7a:	6822      	ldr	r2, [r4, #0]
 8009f7c:	1bd1      	subs	r1, r2, r7
 8009f7e:	d420      	bmi.n	8009fc2 <_malloc_r+0xce>
 8009f80:	290b      	cmp	r1, #11
 8009f82:	d917      	bls.n	8009fb4 <_malloc_r+0xc0>
 8009f84:	19e2      	adds	r2, r4, r7
 8009f86:	6027      	str	r7, [r4, #0]
 8009f88:	42a3      	cmp	r3, r4
 8009f8a:	d111      	bne.n	8009fb0 <_malloc_r+0xbc>
 8009f8c:	602a      	str	r2, [r5, #0]
 8009f8e:	6863      	ldr	r3, [r4, #4]
 8009f90:	6011      	str	r1, [r2, #0]
 8009f92:	6053      	str	r3, [r2, #4]
 8009f94:	0030      	movs	r0, r6
 8009f96:	0025      	movs	r5, r4
 8009f98:	f000 fa06 	bl	800a3a8 <__malloc_unlock>
 8009f9c:	2207      	movs	r2, #7
 8009f9e:	350b      	adds	r5, #11
 8009fa0:	1d23      	adds	r3, r4, #4
 8009fa2:	4395      	bics	r5, r2
 8009fa4:	1aea      	subs	r2, r5, r3
 8009fa6:	429d      	cmp	r5, r3
 8009fa8:	d0e5      	beq.n	8009f76 <_malloc_r+0x82>
 8009faa:	1b5b      	subs	r3, r3, r5
 8009fac:	50a3      	str	r3, [r4, r2]
 8009fae:	e7e2      	b.n	8009f76 <_malloc_r+0x82>
 8009fb0:	605a      	str	r2, [r3, #4]
 8009fb2:	e7ec      	b.n	8009f8e <_malloc_r+0x9a>
 8009fb4:	6862      	ldr	r2, [r4, #4]
 8009fb6:	42a3      	cmp	r3, r4
 8009fb8:	d101      	bne.n	8009fbe <_malloc_r+0xca>
 8009fba:	602a      	str	r2, [r5, #0]
 8009fbc:	e7ea      	b.n	8009f94 <_malloc_r+0xa0>
 8009fbe:	605a      	str	r2, [r3, #4]
 8009fc0:	e7e8      	b.n	8009f94 <_malloc_r+0xa0>
 8009fc2:	0023      	movs	r3, r4
 8009fc4:	6864      	ldr	r4, [r4, #4]
 8009fc6:	e7a7      	b.n	8009f18 <_malloc_r+0x24>
 8009fc8:	002c      	movs	r4, r5
 8009fca:	686d      	ldr	r5, [r5, #4]
 8009fcc:	e7af      	b.n	8009f2e <_malloc_r+0x3a>
 8009fce:	230c      	movs	r3, #12
 8009fd0:	0030      	movs	r0, r6
 8009fd2:	6033      	str	r3, [r6, #0]
 8009fd4:	f000 f9e8 	bl	800a3a8 <__malloc_unlock>
 8009fd8:	e7cd      	b.n	8009f76 <_malloc_r+0x82>
 8009fda:	46c0      	nop			; (mov r8, r8)
 8009fdc:	20000314 	.word	0x20000314

08009fe0 <__ssputs_r>:
 8009fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fe2:	688e      	ldr	r6, [r1, #8]
 8009fe4:	b085      	sub	sp, #20
 8009fe6:	0007      	movs	r7, r0
 8009fe8:	000c      	movs	r4, r1
 8009fea:	9203      	str	r2, [sp, #12]
 8009fec:	9301      	str	r3, [sp, #4]
 8009fee:	429e      	cmp	r6, r3
 8009ff0:	d83c      	bhi.n	800a06c <__ssputs_r+0x8c>
 8009ff2:	2390      	movs	r3, #144	; 0x90
 8009ff4:	898a      	ldrh	r2, [r1, #12]
 8009ff6:	00db      	lsls	r3, r3, #3
 8009ff8:	421a      	tst	r2, r3
 8009ffa:	d034      	beq.n	800a066 <__ssputs_r+0x86>
 8009ffc:	6909      	ldr	r1, [r1, #16]
 8009ffe:	6823      	ldr	r3, [r4, #0]
 800a000:	6960      	ldr	r0, [r4, #20]
 800a002:	1a5b      	subs	r3, r3, r1
 800a004:	9302      	str	r3, [sp, #8]
 800a006:	2303      	movs	r3, #3
 800a008:	4343      	muls	r3, r0
 800a00a:	0fdd      	lsrs	r5, r3, #31
 800a00c:	18ed      	adds	r5, r5, r3
 800a00e:	9b01      	ldr	r3, [sp, #4]
 800a010:	9802      	ldr	r0, [sp, #8]
 800a012:	3301      	adds	r3, #1
 800a014:	181b      	adds	r3, r3, r0
 800a016:	106d      	asrs	r5, r5, #1
 800a018:	42ab      	cmp	r3, r5
 800a01a:	d900      	bls.n	800a01e <__ssputs_r+0x3e>
 800a01c:	001d      	movs	r5, r3
 800a01e:	0553      	lsls	r3, r2, #21
 800a020:	d532      	bpl.n	800a088 <__ssputs_r+0xa8>
 800a022:	0029      	movs	r1, r5
 800a024:	0038      	movs	r0, r7
 800a026:	f7ff ff65 	bl	8009ef4 <_malloc_r>
 800a02a:	1e06      	subs	r6, r0, #0
 800a02c:	d109      	bne.n	800a042 <__ssputs_r+0x62>
 800a02e:	230c      	movs	r3, #12
 800a030:	603b      	str	r3, [r7, #0]
 800a032:	2340      	movs	r3, #64	; 0x40
 800a034:	2001      	movs	r0, #1
 800a036:	89a2      	ldrh	r2, [r4, #12]
 800a038:	4240      	negs	r0, r0
 800a03a:	4313      	orrs	r3, r2
 800a03c:	81a3      	strh	r3, [r4, #12]
 800a03e:	b005      	add	sp, #20
 800a040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a042:	9a02      	ldr	r2, [sp, #8]
 800a044:	6921      	ldr	r1, [r4, #16]
 800a046:	f7ff f9ea 	bl	800941e <memcpy>
 800a04a:	89a3      	ldrh	r3, [r4, #12]
 800a04c:	4a14      	ldr	r2, [pc, #80]	; (800a0a0 <__ssputs_r+0xc0>)
 800a04e:	401a      	ands	r2, r3
 800a050:	2380      	movs	r3, #128	; 0x80
 800a052:	4313      	orrs	r3, r2
 800a054:	81a3      	strh	r3, [r4, #12]
 800a056:	9b02      	ldr	r3, [sp, #8]
 800a058:	6126      	str	r6, [r4, #16]
 800a05a:	18f6      	adds	r6, r6, r3
 800a05c:	6026      	str	r6, [r4, #0]
 800a05e:	6165      	str	r5, [r4, #20]
 800a060:	9e01      	ldr	r6, [sp, #4]
 800a062:	1aed      	subs	r5, r5, r3
 800a064:	60a5      	str	r5, [r4, #8]
 800a066:	9b01      	ldr	r3, [sp, #4]
 800a068:	429e      	cmp	r6, r3
 800a06a:	d900      	bls.n	800a06e <__ssputs_r+0x8e>
 800a06c:	9e01      	ldr	r6, [sp, #4]
 800a06e:	0032      	movs	r2, r6
 800a070:	9903      	ldr	r1, [sp, #12]
 800a072:	6820      	ldr	r0, [r4, #0]
 800a074:	f000 f97c 	bl	800a370 <memmove>
 800a078:	68a3      	ldr	r3, [r4, #8]
 800a07a:	2000      	movs	r0, #0
 800a07c:	1b9b      	subs	r3, r3, r6
 800a07e:	60a3      	str	r3, [r4, #8]
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	199e      	adds	r6, r3, r6
 800a084:	6026      	str	r6, [r4, #0]
 800a086:	e7da      	b.n	800a03e <__ssputs_r+0x5e>
 800a088:	002a      	movs	r2, r5
 800a08a:	0038      	movs	r0, r7
 800a08c:	f000 f994 	bl	800a3b8 <_realloc_r>
 800a090:	1e06      	subs	r6, r0, #0
 800a092:	d1e0      	bne.n	800a056 <__ssputs_r+0x76>
 800a094:	0038      	movs	r0, r7
 800a096:	6921      	ldr	r1, [r4, #16]
 800a098:	f7ff fec0 	bl	8009e1c <_free_r>
 800a09c:	e7c7      	b.n	800a02e <__ssputs_r+0x4e>
 800a09e:	46c0      	nop			; (mov r8, r8)
 800a0a0:	fffffb7f 	.word	0xfffffb7f

0800a0a4 <_svfiprintf_r>:
 800a0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0a6:	b0a1      	sub	sp, #132	; 0x84
 800a0a8:	9003      	str	r0, [sp, #12]
 800a0aa:	001d      	movs	r5, r3
 800a0ac:	898b      	ldrh	r3, [r1, #12]
 800a0ae:	000f      	movs	r7, r1
 800a0b0:	0016      	movs	r6, r2
 800a0b2:	061b      	lsls	r3, r3, #24
 800a0b4:	d511      	bpl.n	800a0da <_svfiprintf_r+0x36>
 800a0b6:	690b      	ldr	r3, [r1, #16]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10e      	bne.n	800a0da <_svfiprintf_r+0x36>
 800a0bc:	2140      	movs	r1, #64	; 0x40
 800a0be:	f7ff ff19 	bl	8009ef4 <_malloc_r>
 800a0c2:	6038      	str	r0, [r7, #0]
 800a0c4:	6138      	str	r0, [r7, #16]
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	d105      	bne.n	800a0d6 <_svfiprintf_r+0x32>
 800a0ca:	230c      	movs	r3, #12
 800a0cc:	9a03      	ldr	r2, [sp, #12]
 800a0ce:	3801      	subs	r0, #1
 800a0d0:	6013      	str	r3, [r2, #0]
 800a0d2:	b021      	add	sp, #132	; 0x84
 800a0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0d6:	2340      	movs	r3, #64	; 0x40
 800a0d8:	617b      	str	r3, [r7, #20]
 800a0da:	2300      	movs	r3, #0
 800a0dc:	ac08      	add	r4, sp, #32
 800a0de:	6163      	str	r3, [r4, #20]
 800a0e0:	3320      	adds	r3, #32
 800a0e2:	7663      	strb	r3, [r4, #25]
 800a0e4:	3310      	adds	r3, #16
 800a0e6:	76a3      	strb	r3, [r4, #26]
 800a0e8:	9507      	str	r5, [sp, #28]
 800a0ea:	0035      	movs	r5, r6
 800a0ec:	782b      	ldrb	r3, [r5, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d001      	beq.n	800a0f6 <_svfiprintf_r+0x52>
 800a0f2:	2b25      	cmp	r3, #37	; 0x25
 800a0f4:	d147      	bne.n	800a186 <_svfiprintf_r+0xe2>
 800a0f6:	1bab      	subs	r3, r5, r6
 800a0f8:	9305      	str	r3, [sp, #20]
 800a0fa:	42b5      	cmp	r5, r6
 800a0fc:	d00c      	beq.n	800a118 <_svfiprintf_r+0x74>
 800a0fe:	0032      	movs	r2, r6
 800a100:	0039      	movs	r1, r7
 800a102:	9803      	ldr	r0, [sp, #12]
 800a104:	f7ff ff6c 	bl	8009fe0 <__ssputs_r>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d100      	bne.n	800a10e <_svfiprintf_r+0x6a>
 800a10c:	e0ae      	b.n	800a26c <_svfiprintf_r+0x1c8>
 800a10e:	6962      	ldr	r2, [r4, #20]
 800a110:	9b05      	ldr	r3, [sp, #20]
 800a112:	4694      	mov	ip, r2
 800a114:	4463      	add	r3, ip
 800a116:	6163      	str	r3, [r4, #20]
 800a118:	782b      	ldrb	r3, [r5, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d100      	bne.n	800a120 <_svfiprintf_r+0x7c>
 800a11e:	e0a5      	b.n	800a26c <_svfiprintf_r+0x1c8>
 800a120:	2201      	movs	r2, #1
 800a122:	2300      	movs	r3, #0
 800a124:	4252      	negs	r2, r2
 800a126:	6062      	str	r2, [r4, #4]
 800a128:	a904      	add	r1, sp, #16
 800a12a:	3254      	adds	r2, #84	; 0x54
 800a12c:	1852      	adds	r2, r2, r1
 800a12e:	1c6e      	adds	r6, r5, #1
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	60e3      	str	r3, [r4, #12]
 800a134:	60a3      	str	r3, [r4, #8]
 800a136:	7013      	strb	r3, [r2, #0]
 800a138:	65a3      	str	r3, [r4, #88]	; 0x58
 800a13a:	2205      	movs	r2, #5
 800a13c:	7831      	ldrb	r1, [r6, #0]
 800a13e:	4854      	ldr	r0, [pc, #336]	; (800a290 <_svfiprintf_r+0x1ec>)
 800a140:	f7ff f962 	bl	8009408 <memchr>
 800a144:	1c75      	adds	r5, r6, #1
 800a146:	2800      	cmp	r0, #0
 800a148:	d11f      	bne.n	800a18a <_svfiprintf_r+0xe6>
 800a14a:	6822      	ldr	r2, [r4, #0]
 800a14c:	06d3      	lsls	r3, r2, #27
 800a14e:	d504      	bpl.n	800a15a <_svfiprintf_r+0xb6>
 800a150:	2353      	movs	r3, #83	; 0x53
 800a152:	a904      	add	r1, sp, #16
 800a154:	185b      	adds	r3, r3, r1
 800a156:	2120      	movs	r1, #32
 800a158:	7019      	strb	r1, [r3, #0]
 800a15a:	0713      	lsls	r3, r2, #28
 800a15c:	d504      	bpl.n	800a168 <_svfiprintf_r+0xc4>
 800a15e:	2353      	movs	r3, #83	; 0x53
 800a160:	a904      	add	r1, sp, #16
 800a162:	185b      	adds	r3, r3, r1
 800a164:	212b      	movs	r1, #43	; 0x2b
 800a166:	7019      	strb	r1, [r3, #0]
 800a168:	7833      	ldrb	r3, [r6, #0]
 800a16a:	2b2a      	cmp	r3, #42	; 0x2a
 800a16c:	d016      	beq.n	800a19c <_svfiprintf_r+0xf8>
 800a16e:	0035      	movs	r5, r6
 800a170:	2100      	movs	r1, #0
 800a172:	200a      	movs	r0, #10
 800a174:	68e3      	ldr	r3, [r4, #12]
 800a176:	782a      	ldrb	r2, [r5, #0]
 800a178:	1c6e      	adds	r6, r5, #1
 800a17a:	3a30      	subs	r2, #48	; 0x30
 800a17c:	2a09      	cmp	r2, #9
 800a17e:	d94e      	bls.n	800a21e <_svfiprintf_r+0x17a>
 800a180:	2900      	cmp	r1, #0
 800a182:	d111      	bne.n	800a1a8 <_svfiprintf_r+0x104>
 800a184:	e017      	b.n	800a1b6 <_svfiprintf_r+0x112>
 800a186:	3501      	adds	r5, #1
 800a188:	e7b0      	b.n	800a0ec <_svfiprintf_r+0x48>
 800a18a:	4b41      	ldr	r3, [pc, #260]	; (800a290 <_svfiprintf_r+0x1ec>)
 800a18c:	6822      	ldr	r2, [r4, #0]
 800a18e:	1ac0      	subs	r0, r0, r3
 800a190:	2301      	movs	r3, #1
 800a192:	4083      	lsls	r3, r0
 800a194:	4313      	orrs	r3, r2
 800a196:	002e      	movs	r6, r5
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	e7ce      	b.n	800a13a <_svfiprintf_r+0x96>
 800a19c:	9b07      	ldr	r3, [sp, #28]
 800a19e:	1d19      	adds	r1, r3, #4
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	9107      	str	r1, [sp, #28]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	db01      	blt.n	800a1ac <_svfiprintf_r+0x108>
 800a1a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1aa:	e004      	b.n	800a1b6 <_svfiprintf_r+0x112>
 800a1ac:	425b      	negs	r3, r3
 800a1ae:	60e3      	str	r3, [r4, #12]
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	782b      	ldrb	r3, [r5, #0]
 800a1b8:	2b2e      	cmp	r3, #46	; 0x2e
 800a1ba:	d10a      	bne.n	800a1d2 <_svfiprintf_r+0x12e>
 800a1bc:	786b      	ldrb	r3, [r5, #1]
 800a1be:	2b2a      	cmp	r3, #42	; 0x2a
 800a1c0:	d135      	bne.n	800a22e <_svfiprintf_r+0x18a>
 800a1c2:	9b07      	ldr	r3, [sp, #28]
 800a1c4:	3502      	adds	r5, #2
 800a1c6:	1d1a      	adds	r2, r3, #4
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	9207      	str	r2, [sp, #28]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	db2b      	blt.n	800a228 <_svfiprintf_r+0x184>
 800a1d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d2:	4e30      	ldr	r6, [pc, #192]	; (800a294 <_svfiprintf_r+0x1f0>)
 800a1d4:	2203      	movs	r2, #3
 800a1d6:	0030      	movs	r0, r6
 800a1d8:	7829      	ldrb	r1, [r5, #0]
 800a1da:	f7ff f915 	bl	8009408 <memchr>
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	d006      	beq.n	800a1f0 <_svfiprintf_r+0x14c>
 800a1e2:	2340      	movs	r3, #64	; 0x40
 800a1e4:	1b80      	subs	r0, r0, r6
 800a1e6:	4083      	lsls	r3, r0
 800a1e8:	6822      	ldr	r2, [r4, #0]
 800a1ea:	3501      	adds	r5, #1
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	6023      	str	r3, [r4, #0]
 800a1f0:	7829      	ldrb	r1, [r5, #0]
 800a1f2:	2206      	movs	r2, #6
 800a1f4:	4828      	ldr	r0, [pc, #160]	; (800a298 <_svfiprintf_r+0x1f4>)
 800a1f6:	1c6e      	adds	r6, r5, #1
 800a1f8:	7621      	strb	r1, [r4, #24]
 800a1fa:	f7ff f905 	bl	8009408 <memchr>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d03c      	beq.n	800a27c <_svfiprintf_r+0x1d8>
 800a202:	4b26      	ldr	r3, [pc, #152]	; (800a29c <_svfiprintf_r+0x1f8>)
 800a204:	2b00      	cmp	r3, #0
 800a206:	d125      	bne.n	800a254 <_svfiprintf_r+0x1b0>
 800a208:	2207      	movs	r2, #7
 800a20a:	9b07      	ldr	r3, [sp, #28]
 800a20c:	3307      	adds	r3, #7
 800a20e:	4393      	bics	r3, r2
 800a210:	3308      	adds	r3, #8
 800a212:	9307      	str	r3, [sp, #28]
 800a214:	6963      	ldr	r3, [r4, #20]
 800a216:	9a04      	ldr	r2, [sp, #16]
 800a218:	189b      	adds	r3, r3, r2
 800a21a:	6163      	str	r3, [r4, #20]
 800a21c:	e765      	b.n	800a0ea <_svfiprintf_r+0x46>
 800a21e:	4343      	muls	r3, r0
 800a220:	0035      	movs	r5, r6
 800a222:	2101      	movs	r1, #1
 800a224:	189b      	adds	r3, r3, r2
 800a226:	e7a6      	b.n	800a176 <_svfiprintf_r+0xd2>
 800a228:	2301      	movs	r3, #1
 800a22a:	425b      	negs	r3, r3
 800a22c:	e7d0      	b.n	800a1d0 <_svfiprintf_r+0x12c>
 800a22e:	2300      	movs	r3, #0
 800a230:	200a      	movs	r0, #10
 800a232:	001a      	movs	r2, r3
 800a234:	3501      	adds	r5, #1
 800a236:	6063      	str	r3, [r4, #4]
 800a238:	7829      	ldrb	r1, [r5, #0]
 800a23a:	1c6e      	adds	r6, r5, #1
 800a23c:	3930      	subs	r1, #48	; 0x30
 800a23e:	2909      	cmp	r1, #9
 800a240:	d903      	bls.n	800a24a <_svfiprintf_r+0x1a6>
 800a242:	2b00      	cmp	r3, #0
 800a244:	d0c5      	beq.n	800a1d2 <_svfiprintf_r+0x12e>
 800a246:	9209      	str	r2, [sp, #36]	; 0x24
 800a248:	e7c3      	b.n	800a1d2 <_svfiprintf_r+0x12e>
 800a24a:	4342      	muls	r2, r0
 800a24c:	0035      	movs	r5, r6
 800a24e:	2301      	movs	r3, #1
 800a250:	1852      	adds	r2, r2, r1
 800a252:	e7f1      	b.n	800a238 <_svfiprintf_r+0x194>
 800a254:	ab07      	add	r3, sp, #28
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	003a      	movs	r2, r7
 800a25a:	0021      	movs	r1, r4
 800a25c:	4b10      	ldr	r3, [pc, #64]	; (800a2a0 <_svfiprintf_r+0x1fc>)
 800a25e:	9803      	ldr	r0, [sp, #12]
 800a260:	f7fc f9d4 	bl	800660c <_printf_float>
 800a264:	9004      	str	r0, [sp, #16]
 800a266:	9b04      	ldr	r3, [sp, #16]
 800a268:	3301      	adds	r3, #1
 800a26a:	d1d3      	bne.n	800a214 <_svfiprintf_r+0x170>
 800a26c:	89bb      	ldrh	r3, [r7, #12]
 800a26e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a270:	065b      	lsls	r3, r3, #25
 800a272:	d400      	bmi.n	800a276 <_svfiprintf_r+0x1d2>
 800a274:	e72d      	b.n	800a0d2 <_svfiprintf_r+0x2e>
 800a276:	2001      	movs	r0, #1
 800a278:	4240      	negs	r0, r0
 800a27a:	e72a      	b.n	800a0d2 <_svfiprintf_r+0x2e>
 800a27c:	ab07      	add	r3, sp, #28
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	003a      	movs	r2, r7
 800a282:	0021      	movs	r1, r4
 800a284:	4b06      	ldr	r3, [pc, #24]	; (800a2a0 <_svfiprintf_r+0x1fc>)
 800a286:	9803      	ldr	r0, [sp, #12]
 800a288:	f7fc fc72 	bl	8006b70 <_printf_i>
 800a28c:	e7ea      	b.n	800a264 <_svfiprintf_r+0x1c0>
 800a28e:	46c0      	nop			; (mov r8, r8)
 800a290:	0800b55c 	.word	0x0800b55c
 800a294:	0800b562 	.word	0x0800b562
 800a298:	0800b566 	.word	0x0800b566
 800a29c:	0800660d 	.word	0x0800660d
 800a2a0:	08009fe1 	.word	0x08009fe1

0800a2a4 <nan>:
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	4901      	ldr	r1, [pc, #4]	; (800a2ac <nan+0x8>)
 800a2a8:	4770      	bx	lr
 800a2aa:	46c0      	nop			; (mov r8, r8)
 800a2ac:	7ff80000 	.word	0x7ff80000

0800a2b0 <_sbrk_r>:
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	b570      	push	{r4, r5, r6, lr}
 800a2b4:	4d06      	ldr	r5, [pc, #24]	; (800a2d0 <_sbrk_r+0x20>)
 800a2b6:	0004      	movs	r4, r0
 800a2b8:	0008      	movs	r0, r1
 800a2ba:	602b      	str	r3, [r5, #0]
 800a2bc:	f7f9 fd50 	bl	8003d60 <_sbrk>
 800a2c0:	1c43      	adds	r3, r0, #1
 800a2c2:	d103      	bne.n	800a2cc <_sbrk_r+0x1c>
 800a2c4:	682b      	ldr	r3, [r5, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d000      	beq.n	800a2cc <_sbrk_r+0x1c>
 800a2ca:	6023      	str	r3, [r4, #0]
 800a2cc:	bd70      	pop	{r4, r5, r6, pc}
 800a2ce:	46c0      	nop			; (mov r8, r8)
 800a2d0:	2000031c 	.word	0x2000031c

0800a2d4 <strncmp>:
 800a2d4:	b530      	push	{r4, r5, lr}
 800a2d6:	0005      	movs	r5, r0
 800a2d8:	1e10      	subs	r0, r2, #0
 800a2da:	d008      	beq.n	800a2ee <strncmp+0x1a>
 800a2dc:	2400      	movs	r4, #0
 800a2de:	3a01      	subs	r2, #1
 800a2e0:	5d2b      	ldrb	r3, [r5, r4]
 800a2e2:	5d08      	ldrb	r0, [r1, r4]
 800a2e4:	4283      	cmp	r3, r0
 800a2e6:	d101      	bne.n	800a2ec <strncmp+0x18>
 800a2e8:	4294      	cmp	r4, r2
 800a2ea:	d101      	bne.n	800a2f0 <strncmp+0x1c>
 800a2ec:	1a18      	subs	r0, r3, r0
 800a2ee:	bd30      	pop	{r4, r5, pc}
 800a2f0:	3401      	adds	r4, #1
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1f4      	bne.n	800a2e0 <strncmp+0xc>
 800a2f6:	e7f9      	b.n	800a2ec <strncmp+0x18>

0800a2f8 <__ascii_wctomb>:
 800a2f8:	0003      	movs	r3, r0
 800a2fa:	1e08      	subs	r0, r1, #0
 800a2fc:	d005      	beq.n	800a30a <__ascii_wctomb+0x12>
 800a2fe:	2aff      	cmp	r2, #255	; 0xff
 800a300:	d904      	bls.n	800a30c <__ascii_wctomb+0x14>
 800a302:	228a      	movs	r2, #138	; 0x8a
 800a304:	2001      	movs	r0, #1
 800a306:	601a      	str	r2, [r3, #0]
 800a308:	4240      	negs	r0, r0
 800a30a:	4770      	bx	lr
 800a30c:	2001      	movs	r0, #1
 800a30e:	700a      	strb	r2, [r1, #0]
 800a310:	e7fb      	b.n	800a30a <__ascii_wctomb+0x12>
	...

0800a314 <__assert_func>:
 800a314:	b530      	push	{r4, r5, lr}
 800a316:	0014      	movs	r4, r2
 800a318:	001a      	movs	r2, r3
 800a31a:	4b09      	ldr	r3, [pc, #36]	; (800a340 <__assert_func+0x2c>)
 800a31c:	0005      	movs	r5, r0
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	b085      	sub	sp, #20
 800a322:	68d8      	ldr	r0, [r3, #12]
 800a324:	4b07      	ldr	r3, [pc, #28]	; (800a344 <__assert_func+0x30>)
 800a326:	2c00      	cmp	r4, #0
 800a328:	d101      	bne.n	800a32e <__assert_func+0x1a>
 800a32a:	4b07      	ldr	r3, [pc, #28]	; (800a348 <__assert_func+0x34>)
 800a32c:	001c      	movs	r4, r3
 800a32e:	9301      	str	r3, [sp, #4]
 800a330:	9100      	str	r1, [sp, #0]
 800a332:	002b      	movs	r3, r5
 800a334:	4905      	ldr	r1, [pc, #20]	; (800a34c <__assert_func+0x38>)
 800a336:	9402      	str	r4, [sp, #8]
 800a338:	f000 f80a 	bl	800a350 <fiprintf>
 800a33c:	f000 fa9a 	bl	800a874 <abort>
 800a340:	2000000c 	.word	0x2000000c
 800a344:	0800b56d 	.word	0x0800b56d
 800a348:	0800b5a8 	.word	0x0800b5a8
 800a34c:	0800b57a 	.word	0x0800b57a

0800a350 <fiprintf>:
 800a350:	b40e      	push	{r1, r2, r3}
 800a352:	b503      	push	{r0, r1, lr}
 800a354:	0001      	movs	r1, r0
 800a356:	ab03      	add	r3, sp, #12
 800a358:	4804      	ldr	r0, [pc, #16]	; (800a36c <fiprintf+0x1c>)
 800a35a:	cb04      	ldmia	r3!, {r2}
 800a35c:	6800      	ldr	r0, [r0, #0]
 800a35e:	9301      	str	r3, [sp, #4]
 800a360:	f000 f880 	bl	800a464 <_vfiprintf_r>
 800a364:	b002      	add	sp, #8
 800a366:	bc08      	pop	{r3}
 800a368:	b003      	add	sp, #12
 800a36a:	4718      	bx	r3
 800a36c:	2000000c 	.word	0x2000000c

0800a370 <memmove>:
 800a370:	b510      	push	{r4, lr}
 800a372:	4288      	cmp	r0, r1
 800a374:	d902      	bls.n	800a37c <memmove+0xc>
 800a376:	188b      	adds	r3, r1, r2
 800a378:	4298      	cmp	r0, r3
 800a37a:	d303      	bcc.n	800a384 <memmove+0x14>
 800a37c:	2300      	movs	r3, #0
 800a37e:	e007      	b.n	800a390 <memmove+0x20>
 800a380:	5c8b      	ldrb	r3, [r1, r2]
 800a382:	5483      	strb	r3, [r0, r2]
 800a384:	3a01      	subs	r2, #1
 800a386:	d2fb      	bcs.n	800a380 <memmove+0x10>
 800a388:	bd10      	pop	{r4, pc}
 800a38a:	5ccc      	ldrb	r4, [r1, r3]
 800a38c:	54c4      	strb	r4, [r0, r3]
 800a38e:	3301      	adds	r3, #1
 800a390:	429a      	cmp	r2, r3
 800a392:	d1fa      	bne.n	800a38a <memmove+0x1a>
 800a394:	e7f8      	b.n	800a388 <memmove+0x18>
	...

0800a398 <__malloc_lock>:
 800a398:	b510      	push	{r4, lr}
 800a39a:	4802      	ldr	r0, [pc, #8]	; (800a3a4 <__malloc_lock+0xc>)
 800a39c:	f000 fc41 	bl	800ac22 <__retarget_lock_acquire_recursive>
 800a3a0:	bd10      	pop	{r4, pc}
 800a3a2:	46c0      	nop			; (mov r8, r8)
 800a3a4:	20000320 	.word	0x20000320

0800a3a8 <__malloc_unlock>:
 800a3a8:	b510      	push	{r4, lr}
 800a3aa:	4802      	ldr	r0, [pc, #8]	; (800a3b4 <__malloc_unlock+0xc>)
 800a3ac:	f000 fc3a 	bl	800ac24 <__retarget_lock_release_recursive>
 800a3b0:	bd10      	pop	{r4, pc}
 800a3b2:	46c0      	nop			; (mov r8, r8)
 800a3b4:	20000320 	.word	0x20000320

0800a3b8 <_realloc_r>:
 800a3b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3ba:	0007      	movs	r7, r0
 800a3bc:	000e      	movs	r6, r1
 800a3be:	0014      	movs	r4, r2
 800a3c0:	2900      	cmp	r1, #0
 800a3c2:	d105      	bne.n	800a3d0 <_realloc_r+0x18>
 800a3c4:	0011      	movs	r1, r2
 800a3c6:	f7ff fd95 	bl	8009ef4 <_malloc_r>
 800a3ca:	0005      	movs	r5, r0
 800a3cc:	0028      	movs	r0, r5
 800a3ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a3d0:	2a00      	cmp	r2, #0
 800a3d2:	d103      	bne.n	800a3dc <_realloc_r+0x24>
 800a3d4:	f7ff fd22 	bl	8009e1c <_free_r>
 800a3d8:	0025      	movs	r5, r4
 800a3da:	e7f7      	b.n	800a3cc <_realloc_r+0x14>
 800a3dc:	f000 fc90 	bl	800ad00 <_malloc_usable_size_r>
 800a3e0:	9001      	str	r0, [sp, #4]
 800a3e2:	4284      	cmp	r4, r0
 800a3e4:	d803      	bhi.n	800a3ee <_realloc_r+0x36>
 800a3e6:	0035      	movs	r5, r6
 800a3e8:	0843      	lsrs	r3, r0, #1
 800a3ea:	42a3      	cmp	r3, r4
 800a3ec:	d3ee      	bcc.n	800a3cc <_realloc_r+0x14>
 800a3ee:	0021      	movs	r1, r4
 800a3f0:	0038      	movs	r0, r7
 800a3f2:	f7ff fd7f 	bl	8009ef4 <_malloc_r>
 800a3f6:	1e05      	subs	r5, r0, #0
 800a3f8:	d0e8      	beq.n	800a3cc <_realloc_r+0x14>
 800a3fa:	9b01      	ldr	r3, [sp, #4]
 800a3fc:	0022      	movs	r2, r4
 800a3fe:	429c      	cmp	r4, r3
 800a400:	d900      	bls.n	800a404 <_realloc_r+0x4c>
 800a402:	001a      	movs	r2, r3
 800a404:	0031      	movs	r1, r6
 800a406:	0028      	movs	r0, r5
 800a408:	f7ff f809 	bl	800941e <memcpy>
 800a40c:	0031      	movs	r1, r6
 800a40e:	0038      	movs	r0, r7
 800a410:	f7ff fd04 	bl	8009e1c <_free_r>
 800a414:	e7da      	b.n	800a3cc <_realloc_r+0x14>

0800a416 <__sfputc_r>:
 800a416:	6893      	ldr	r3, [r2, #8]
 800a418:	b510      	push	{r4, lr}
 800a41a:	3b01      	subs	r3, #1
 800a41c:	6093      	str	r3, [r2, #8]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	da04      	bge.n	800a42c <__sfputc_r+0x16>
 800a422:	6994      	ldr	r4, [r2, #24]
 800a424:	42a3      	cmp	r3, r4
 800a426:	db07      	blt.n	800a438 <__sfputc_r+0x22>
 800a428:	290a      	cmp	r1, #10
 800a42a:	d005      	beq.n	800a438 <__sfputc_r+0x22>
 800a42c:	6813      	ldr	r3, [r2, #0]
 800a42e:	1c58      	adds	r0, r3, #1
 800a430:	6010      	str	r0, [r2, #0]
 800a432:	7019      	strb	r1, [r3, #0]
 800a434:	0008      	movs	r0, r1
 800a436:	bd10      	pop	{r4, pc}
 800a438:	f000 f94e 	bl	800a6d8 <__swbuf_r>
 800a43c:	0001      	movs	r1, r0
 800a43e:	e7f9      	b.n	800a434 <__sfputc_r+0x1e>

0800a440 <__sfputs_r>:
 800a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a442:	0006      	movs	r6, r0
 800a444:	000f      	movs	r7, r1
 800a446:	0014      	movs	r4, r2
 800a448:	18d5      	adds	r5, r2, r3
 800a44a:	42ac      	cmp	r4, r5
 800a44c:	d101      	bne.n	800a452 <__sfputs_r+0x12>
 800a44e:	2000      	movs	r0, #0
 800a450:	e007      	b.n	800a462 <__sfputs_r+0x22>
 800a452:	7821      	ldrb	r1, [r4, #0]
 800a454:	003a      	movs	r2, r7
 800a456:	0030      	movs	r0, r6
 800a458:	f7ff ffdd 	bl	800a416 <__sfputc_r>
 800a45c:	3401      	adds	r4, #1
 800a45e:	1c43      	adds	r3, r0, #1
 800a460:	d1f3      	bne.n	800a44a <__sfputs_r+0xa>
 800a462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a464 <_vfiprintf_r>:
 800a464:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a466:	b0a1      	sub	sp, #132	; 0x84
 800a468:	0006      	movs	r6, r0
 800a46a:	000c      	movs	r4, r1
 800a46c:	001f      	movs	r7, r3
 800a46e:	9203      	str	r2, [sp, #12]
 800a470:	2800      	cmp	r0, #0
 800a472:	d004      	beq.n	800a47e <_vfiprintf_r+0x1a>
 800a474:	6983      	ldr	r3, [r0, #24]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d101      	bne.n	800a47e <_vfiprintf_r+0x1a>
 800a47a:	f000 fb31 	bl	800aae0 <__sinit>
 800a47e:	4b8e      	ldr	r3, [pc, #568]	; (800a6b8 <_vfiprintf_r+0x254>)
 800a480:	429c      	cmp	r4, r3
 800a482:	d11c      	bne.n	800a4be <_vfiprintf_r+0x5a>
 800a484:	6874      	ldr	r4, [r6, #4]
 800a486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a488:	07db      	lsls	r3, r3, #31
 800a48a:	d405      	bmi.n	800a498 <_vfiprintf_r+0x34>
 800a48c:	89a3      	ldrh	r3, [r4, #12]
 800a48e:	059b      	lsls	r3, r3, #22
 800a490:	d402      	bmi.n	800a498 <_vfiprintf_r+0x34>
 800a492:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a494:	f000 fbc5 	bl	800ac22 <__retarget_lock_acquire_recursive>
 800a498:	89a3      	ldrh	r3, [r4, #12]
 800a49a:	071b      	lsls	r3, r3, #28
 800a49c:	d502      	bpl.n	800a4a4 <_vfiprintf_r+0x40>
 800a49e:	6923      	ldr	r3, [r4, #16]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d11d      	bne.n	800a4e0 <_vfiprintf_r+0x7c>
 800a4a4:	0021      	movs	r1, r4
 800a4a6:	0030      	movs	r0, r6
 800a4a8:	f000 f96c 	bl	800a784 <__swsetup_r>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d017      	beq.n	800a4e0 <_vfiprintf_r+0x7c>
 800a4b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4b2:	07db      	lsls	r3, r3, #31
 800a4b4:	d50d      	bpl.n	800a4d2 <_vfiprintf_r+0x6e>
 800a4b6:	2001      	movs	r0, #1
 800a4b8:	4240      	negs	r0, r0
 800a4ba:	b021      	add	sp, #132	; 0x84
 800a4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4be:	4b7f      	ldr	r3, [pc, #508]	; (800a6bc <_vfiprintf_r+0x258>)
 800a4c0:	429c      	cmp	r4, r3
 800a4c2:	d101      	bne.n	800a4c8 <_vfiprintf_r+0x64>
 800a4c4:	68b4      	ldr	r4, [r6, #8]
 800a4c6:	e7de      	b.n	800a486 <_vfiprintf_r+0x22>
 800a4c8:	4b7d      	ldr	r3, [pc, #500]	; (800a6c0 <_vfiprintf_r+0x25c>)
 800a4ca:	429c      	cmp	r4, r3
 800a4cc:	d1db      	bne.n	800a486 <_vfiprintf_r+0x22>
 800a4ce:	68f4      	ldr	r4, [r6, #12]
 800a4d0:	e7d9      	b.n	800a486 <_vfiprintf_r+0x22>
 800a4d2:	89a3      	ldrh	r3, [r4, #12]
 800a4d4:	059b      	lsls	r3, r3, #22
 800a4d6:	d4ee      	bmi.n	800a4b6 <_vfiprintf_r+0x52>
 800a4d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4da:	f000 fba3 	bl	800ac24 <__retarget_lock_release_recursive>
 800a4de:	e7ea      	b.n	800a4b6 <_vfiprintf_r+0x52>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	ad08      	add	r5, sp, #32
 800a4e4:	616b      	str	r3, [r5, #20]
 800a4e6:	3320      	adds	r3, #32
 800a4e8:	766b      	strb	r3, [r5, #25]
 800a4ea:	3310      	adds	r3, #16
 800a4ec:	76ab      	strb	r3, [r5, #26]
 800a4ee:	9707      	str	r7, [sp, #28]
 800a4f0:	9f03      	ldr	r7, [sp, #12]
 800a4f2:	783b      	ldrb	r3, [r7, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d001      	beq.n	800a4fc <_vfiprintf_r+0x98>
 800a4f8:	2b25      	cmp	r3, #37	; 0x25
 800a4fa:	d14e      	bne.n	800a59a <_vfiprintf_r+0x136>
 800a4fc:	9b03      	ldr	r3, [sp, #12]
 800a4fe:	1afb      	subs	r3, r7, r3
 800a500:	9305      	str	r3, [sp, #20]
 800a502:	9b03      	ldr	r3, [sp, #12]
 800a504:	429f      	cmp	r7, r3
 800a506:	d00d      	beq.n	800a524 <_vfiprintf_r+0xc0>
 800a508:	9b05      	ldr	r3, [sp, #20]
 800a50a:	0021      	movs	r1, r4
 800a50c:	0030      	movs	r0, r6
 800a50e:	9a03      	ldr	r2, [sp, #12]
 800a510:	f7ff ff96 	bl	800a440 <__sfputs_r>
 800a514:	1c43      	adds	r3, r0, #1
 800a516:	d100      	bne.n	800a51a <_vfiprintf_r+0xb6>
 800a518:	e0b5      	b.n	800a686 <_vfiprintf_r+0x222>
 800a51a:	696a      	ldr	r2, [r5, #20]
 800a51c:	9b05      	ldr	r3, [sp, #20]
 800a51e:	4694      	mov	ip, r2
 800a520:	4463      	add	r3, ip
 800a522:	616b      	str	r3, [r5, #20]
 800a524:	783b      	ldrb	r3, [r7, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d100      	bne.n	800a52c <_vfiprintf_r+0xc8>
 800a52a:	e0ac      	b.n	800a686 <_vfiprintf_r+0x222>
 800a52c:	2201      	movs	r2, #1
 800a52e:	1c7b      	adds	r3, r7, #1
 800a530:	9303      	str	r3, [sp, #12]
 800a532:	2300      	movs	r3, #0
 800a534:	4252      	negs	r2, r2
 800a536:	606a      	str	r2, [r5, #4]
 800a538:	a904      	add	r1, sp, #16
 800a53a:	3254      	adds	r2, #84	; 0x54
 800a53c:	1852      	adds	r2, r2, r1
 800a53e:	602b      	str	r3, [r5, #0]
 800a540:	60eb      	str	r3, [r5, #12]
 800a542:	60ab      	str	r3, [r5, #8]
 800a544:	7013      	strb	r3, [r2, #0]
 800a546:	65ab      	str	r3, [r5, #88]	; 0x58
 800a548:	9b03      	ldr	r3, [sp, #12]
 800a54a:	2205      	movs	r2, #5
 800a54c:	7819      	ldrb	r1, [r3, #0]
 800a54e:	485d      	ldr	r0, [pc, #372]	; (800a6c4 <_vfiprintf_r+0x260>)
 800a550:	f7fe ff5a 	bl	8009408 <memchr>
 800a554:	9b03      	ldr	r3, [sp, #12]
 800a556:	1c5f      	adds	r7, r3, #1
 800a558:	2800      	cmp	r0, #0
 800a55a:	d120      	bne.n	800a59e <_vfiprintf_r+0x13a>
 800a55c:	682a      	ldr	r2, [r5, #0]
 800a55e:	06d3      	lsls	r3, r2, #27
 800a560:	d504      	bpl.n	800a56c <_vfiprintf_r+0x108>
 800a562:	2353      	movs	r3, #83	; 0x53
 800a564:	a904      	add	r1, sp, #16
 800a566:	185b      	adds	r3, r3, r1
 800a568:	2120      	movs	r1, #32
 800a56a:	7019      	strb	r1, [r3, #0]
 800a56c:	0713      	lsls	r3, r2, #28
 800a56e:	d504      	bpl.n	800a57a <_vfiprintf_r+0x116>
 800a570:	2353      	movs	r3, #83	; 0x53
 800a572:	a904      	add	r1, sp, #16
 800a574:	185b      	adds	r3, r3, r1
 800a576:	212b      	movs	r1, #43	; 0x2b
 800a578:	7019      	strb	r1, [r3, #0]
 800a57a:	9b03      	ldr	r3, [sp, #12]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	2b2a      	cmp	r3, #42	; 0x2a
 800a580:	d016      	beq.n	800a5b0 <_vfiprintf_r+0x14c>
 800a582:	2100      	movs	r1, #0
 800a584:	68eb      	ldr	r3, [r5, #12]
 800a586:	9f03      	ldr	r7, [sp, #12]
 800a588:	783a      	ldrb	r2, [r7, #0]
 800a58a:	1c78      	adds	r0, r7, #1
 800a58c:	3a30      	subs	r2, #48	; 0x30
 800a58e:	4684      	mov	ip, r0
 800a590:	2a09      	cmp	r2, #9
 800a592:	d94f      	bls.n	800a634 <_vfiprintf_r+0x1d0>
 800a594:	2900      	cmp	r1, #0
 800a596:	d111      	bne.n	800a5bc <_vfiprintf_r+0x158>
 800a598:	e017      	b.n	800a5ca <_vfiprintf_r+0x166>
 800a59a:	3701      	adds	r7, #1
 800a59c:	e7a9      	b.n	800a4f2 <_vfiprintf_r+0x8e>
 800a59e:	4b49      	ldr	r3, [pc, #292]	; (800a6c4 <_vfiprintf_r+0x260>)
 800a5a0:	682a      	ldr	r2, [r5, #0]
 800a5a2:	1ac0      	subs	r0, r0, r3
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	4083      	lsls	r3, r0
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	602b      	str	r3, [r5, #0]
 800a5ac:	9703      	str	r7, [sp, #12]
 800a5ae:	e7cb      	b.n	800a548 <_vfiprintf_r+0xe4>
 800a5b0:	9b07      	ldr	r3, [sp, #28]
 800a5b2:	1d19      	adds	r1, r3, #4
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	9107      	str	r1, [sp, #28]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	db01      	blt.n	800a5c0 <_vfiprintf_r+0x15c>
 800a5bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5be:	e004      	b.n	800a5ca <_vfiprintf_r+0x166>
 800a5c0:	425b      	negs	r3, r3
 800a5c2:	60eb      	str	r3, [r5, #12]
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	602b      	str	r3, [r5, #0]
 800a5ca:	783b      	ldrb	r3, [r7, #0]
 800a5cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a5ce:	d10a      	bne.n	800a5e6 <_vfiprintf_r+0x182>
 800a5d0:	787b      	ldrb	r3, [r7, #1]
 800a5d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a5d4:	d137      	bne.n	800a646 <_vfiprintf_r+0x1e2>
 800a5d6:	9b07      	ldr	r3, [sp, #28]
 800a5d8:	3702      	adds	r7, #2
 800a5da:	1d1a      	adds	r2, r3, #4
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	9207      	str	r2, [sp, #28]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	db2d      	blt.n	800a640 <_vfiprintf_r+0x1dc>
 800a5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a5e6:	2203      	movs	r2, #3
 800a5e8:	7839      	ldrb	r1, [r7, #0]
 800a5ea:	4837      	ldr	r0, [pc, #220]	; (800a6c8 <_vfiprintf_r+0x264>)
 800a5ec:	f7fe ff0c 	bl	8009408 <memchr>
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	d007      	beq.n	800a604 <_vfiprintf_r+0x1a0>
 800a5f4:	4b34      	ldr	r3, [pc, #208]	; (800a6c8 <_vfiprintf_r+0x264>)
 800a5f6:	682a      	ldr	r2, [r5, #0]
 800a5f8:	1ac0      	subs	r0, r0, r3
 800a5fa:	2340      	movs	r3, #64	; 0x40
 800a5fc:	4083      	lsls	r3, r0
 800a5fe:	4313      	orrs	r3, r2
 800a600:	3701      	adds	r7, #1
 800a602:	602b      	str	r3, [r5, #0]
 800a604:	7839      	ldrb	r1, [r7, #0]
 800a606:	1c7b      	adds	r3, r7, #1
 800a608:	2206      	movs	r2, #6
 800a60a:	4830      	ldr	r0, [pc, #192]	; (800a6cc <_vfiprintf_r+0x268>)
 800a60c:	9303      	str	r3, [sp, #12]
 800a60e:	7629      	strb	r1, [r5, #24]
 800a610:	f7fe fefa 	bl	8009408 <memchr>
 800a614:	2800      	cmp	r0, #0
 800a616:	d045      	beq.n	800a6a4 <_vfiprintf_r+0x240>
 800a618:	4b2d      	ldr	r3, [pc, #180]	; (800a6d0 <_vfiprintf_r+0x26c>)
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d127      	bne.n	800a66e <_vfiprintf_r+0x20a>
 800a61e:	2207      	movs	r2, #7
 800a620:	9b07      	ldr	r3, [sp, #28]
 800a622:	3307      	adds	r3, #7
 800a624:	4393      	bics	r3, r2
 800a626:	3308      	adds	r3, #8
 800a628:	9307      	str	r3, [sp, #28]
 800a62a:	696b      	ldr	r3, [r5, #20]
 800a62c:	9a04      	ldr	r2, [sp, #16]
 800a62e:	189b      	adds	r3, r3, r2
 800a630:	616b      	str	r3, [r5, #20]
 800a632:	e75d      	b.n	800a4f0 <_vfiprintf_r+0x8c>
 800a634:	210a      	movs	r1, #10
 800a636:	434b      	muls	r3, r1
 800a638:	4667      	mov	r7, ip
 800a63a:	189b      	adds	r3, r3, r2
 800a63c:	3909      	subs	r1, #9
 800a63e:	e7a3      	b.n	800a588 <_vfiprintf_r+0x124>
 800a640:	2301      	movs	r3, #1
 800a642:	425b      	negs	r3, r3
 800a644:	e7ce      	b.n	800a5e4 <_vfiprintf_r+0x180>
 800a646:	2300      	movs	r3, #0
 800a648:	001a      	movs	r2, r3
 800a64a:	3701      	adds	r7, #1
 800a64c:	606b      	str	r3, [r5, #4]
 800a64e:	7839      	ldrb	r1, [r7, #0]
 800a650:	1c78      	adds	r0, r7, #1
 800a652:	3930      	subs	r1, #48	; 0x30
 800a654:	4684      	mov	ip, r0
 800a656:	2909      	cmp	r1, #9
 800a658:	d903      	bls.n	800a662 <_vfiprintf_r+0x1fe>
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d0c3      	beq.n	800a5e6 <_vfiprintf_r+0x182>
 800a65e:	9209      	str	r2, [sp, #36]	; 0x24
 800a660:	e7c1      	b.n	800a5e6 <_vfiprintf_r+0x182>
 800a662:	230a      	movs	r3, #10
 800a664:	435a      	muls	r2, r3
 800a666:	4667      	mov	r7, ip
 800a668:	1852      	adds	r2, r2, r1
 800a66a:	3b09      	subs	r3, #9
 800a66c:	e7ef      	b.n	800a64e <_vfiprintf_r+0x1ea>
 800a66e:	ab07      	add	r3, sp, #28
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	0022      	movs	r2, r4
 800a674:	0029      	movs	r1, r5
 800a676:	0030      	movs	r0, r6
 800a678:	4b16      	ldr	r3, [pc, #88]	; (800a6d4 <_vfiprintf_r+0x270>)
 800a67a:	f7fb ffc7 	bl	800660c <_printf_float>
 800a67e:	9004      	str	r0, [sp, #16]
 800a680:	9b04      	ldr	r3, [sp, #16]
 800a682:	3301      	adds	r3, #1
 800a684:	d1d1      	bne.n	800a62a <_vfiprintf_r+0x1c6>
 800a686:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a688:	07db      	lsls	r3, r3, #31
 800a68a:	d405      	bmi.n	800a698 <_vfiprintf_r+0x234>
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	059b      	lsls	r3, r3, #22
 800a690:	d402      	bmi.n	800a698 <_vfiprintf_r+0x234>
 800a692:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a694:	f000 fac6 	bl	800ac24 <__retarget_lock_release_recursive>
 800a698:	89a3      	ldrh	r3, [r4, #12]
 800a69a:	065b      	lsls	r3, r3, #25
 800a69c:	d500      	bpl.n	800a6a0 <_vfiprintf_r+0x23c>
 800a69e:	e70a      	b.n	800a4b6 <_vfiprintf_r+0x52>
 800a6a0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a6a2:	e70a      	b.n	800a4ba <_vfiprintf_r+0x56>
 800a6a4:	ab07      	add	r3, sp, #28
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	0022      	movs	r2, r4
 800a6aa:	0029      	movs	r1, r5
 800a6ac:	0030      	movs	r0, r6
 800a6ae:	4b09      	ldr	r3, [pc, #36]	; (800a6d4 <_vfiprintf_r+0x270>)
 800a6b0:	f7fc fa5e 	bl	8006b70 <_printf_i>
 800a6b4:	e7e3      	b.n	800a67e <_vfiprintf_r+0x21a>
 800a6b6:	46c0      	nop			; (mov r8, r8)
 800a6b8:	0800b5cc 	.word	0x0800b5cc
 800a6bc:	0800b5ec 	.word	0x0800b5ec
 800a6c0:	0800b5ac 	.word	0x0800b5ac
 800a6c4:	0800b55c 	.word	0x0800b55c
 800a6c8:	0800b562 	.word	0x0800b562
 800a6cc:	0800b566 	.word	0x0800b566
 800a6d0:	0800660d 	.word	0x0800660d
 800a6d4:	0800a441 	.word	0x0800a441

0800a6d8 <__swbuf_r>:
 800a6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6da:	0005      	movs	r5, r0
 800a6dc:	000e      	movs	r6, r1
 800a6de:	0014      	movs	r4, r2
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	d004      	beq.n	800a6ee <__swbuf_r+0x16>
 800a6e4:	6983      	ldr	r3, [r0, #24]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d101      	bne.n	800a6ee <__swbuf_r+0x16>
 800a6ea:	f000 f9f9 	bl	800aae0 <__sinit>
 800a6ee:	4b22      	ldr	r3, [pc, #136]	; (800a778 <__swbuf_r+0xa0>)
 800a6f0:	429c      	cmp	r4, r3
 800a6f2:	d12e      	bne.n	800a752 <__swbuf_r+0x7a>
 800a6f4:	686c      	ldr	r4, [r5, #4]
 800a6f6:	69a3      	ldr	r3, [r4, #24]
 800a6f8:	60a3      	str	r3, [r4, #8]
 800a6fa:	89a3      	ldrh	r3, [r4, #12]
 800a6fc:	071b      	lsls	r3, r3, #28
 800a6fe:	d532      	bpl.n	800a766 <__swbuf_r+0x8e>
 800a700:	6923      	ldr	r3, [r4, #16]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d02f      	beq.n	800a766 <__swbuf_r+0x8e>
 800a706:	6823      	ldr	r3, [r4, #0]
 800a708:	6922      	ldr	r2, [r4, #16]
 800a70a:	b2f7      	uxtb	r7, r6
 800a70c:	1a98      	subs	r0, r3, r2
 800a70e:	6963      	ldr	r3, [r4, #20]
 800a710:	b2f6      	uxtb	r6, r6
 800a712:	4283      	cmp	r3, r0
 800a714:	dc05      	bgt.n	800a722 <__swbuf_r+0x4a>
 800a716:	0021      	movs	r1, r4
 800a718:	0028      	movs	r0, r5
 800a71a:	f000 f93f 	bl	800a99c <_fflush_r>
 800a71e:	2800      	cmp	r0, #0
 800a720:	d127      	bne.n	800a772 <__swbuf_r+0x9a>
 800a722:	68a3      	ldr	r3, [r4, #8]
 800a724:	3001      	adds	r0, #1
 800a726:	3b01      	subs	r3, #1
 800a728:	60a3      	str	r3, [r4, #8]
 800a72a:	6823      	ldr	r3, [r4, #0]
 800a72c:	1c5a      	adds	r2, r3, #1
 800a72e:	6022      	str	r2, [r4, #0]
 800a730:	701f      	strb	r7, [r3, #0]
 800a732:	6963      	ldr	r3, [r4, #20]
 800a734:	4283      	cmp	r3, r0
 800a736:	d004      	beq.n	800a742 <__swbuf_r+0x6a>
 800a738:	89a3      	ldrh	r3, [r4, #12]
 800a73a:	07db      	lsls	r3, r3, #31
 800a73c:	d507      	bpl.n	800a74e <__swbuf_r+0x76>
 800a73e:	2e0a      	cmp	r6, #10
 800a740:	d105      	bne.n	800a74e <__swbuf_r+0x76>
 800a742:	0021      	movs	r1, r4
 800a744:	0028      	movs	r0, r5
 800a746:	f000 f929 	bl	800a99c <_fflush_r>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	d111      	bne.n	800a772 <__swbuf_r+0x9a>
 800a74e:	0030      	movs	r0, r6
 800a750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a752:	4b0a      	ldr	r3, [pc, #40]	; (800a77c <__swbuf_r+0xa4>)
 800a754:	429c      	cmp	r4, r3
 800a756:	d101      	bne.n	800a75c <__swbuf_r+0x84>
 800a758:	68ac      	ldr	r4, [r5, #8]
 800a75a:	e7cc      	b.n	800a6f6 <__swbuf_r+0x1e>
 800a75c:	4b08      	ldr	r3, [pc, #32]	; (800a780 <__swbuf_r+0xa8>)
 800a75e:	429c      	cmp	r4, r3
 800a760:	d1c9      	bne.n	800a6f6 <__swbuf_r+0x1e>
 800a762:	68ec      	ldr	r4, [r5, #12]
 800a764:	e7c7      	b.n	800a6f6 <__swbuf_r+0x1e>
 800a766:	0021      	movs	r1, r4
 800a768:	0028      	movs	r0, r5
 800a76a:	f000 f80b 	bl	800a784 <__swsetup_r>
 800a76e:	2800      	cmp	r0, #0
 800a770:	d0c9      	beq.n	800a706 <__swbuf_r+0x2e>
 800a772:	2601      	movs	r6, #1
 800a774:	4276      	negs	r6, r6
 800a776:	e7ea      	b.n	800a74e <__swbuf_r+0x76>
 800a778:	0800b5cc 	.word	0x0800b5cc
 800a77c:	0800b5ec 	.word	0x0800b5ec
 800a780:	0800b5ac 	.word	0x0800b5ac

0800a784 <__swsetup_r>:
 800a784:	4b37      	ldr	r3, [pc, #220]	; (800a864 <__swsetup_r+0xe0>)
 800a786:	b570      	push	{r4, r5, r6, lr}
 800a788:	681d      	ldr	r5, [r3, #0]
 800a78a:	0006      	movs	r6, r0
 800a78c:	000c      	movs	r4, r1
 800a78e:	2d00      	cmp	r5, #0
 800a790:	d005      	beq.n	800a79e <__swsetup_r+0x1a>
 800a792:	69ab      	ldr	r3, [r5, #24]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d102      	bne.n	800a79e <__swsetup_r+0x1a>
 800a798:	0028      	movs	r0, r5
 800a79a:	f000 f9a1 	bl	800aae0 <__sinit>
 800a79e:	4b32      	ldr	r3, [pc, #200]	; (800a868 <__swsetup_r+0xe4>)
 800a7a0:	429c      	cmp	r4, r3
 800a7a2:	d10f      	bne.n	800a7c4 <__swsetup_r+0x40>
 800a7a4:	686c      	ldr	r4, [r5, #4]
 800a7a6:	230c      	movs	r3, #12
 800a7a8:	5ee2      	ldrsh	r2, [r4, r3]
 800a7aa:	b293      	uxth	r3, r2
 800a7ac:	0711      	lsls	r1, r2, #28
 800a7ae:	d42d      	bmi.n	800a80c <__swsetup_r+0x88>
 800a7b0:	06d9      	lsls	r1, r3, #27
 800a7b2:	d411      	bmi.n	800a7d8 <__swsetup_r+0x54>
 800a7b4:	2309      	movs	r3, #9
 800a7b6:	2001      	movs	r0, #1
 800a7b8:	6033      	str	r3, [r6, #0]
 800a7ba:	3337      	adds	r3, #55	; 0x37
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	81a3      	strh	r3, [r4, #12]
 800a7c0:	4240      	negs	r0, r0
 800a7c2:	bd70      	pop	{r4, r5, r6, pc}
 800a7c4:	4b29      	ldr	r3, [pc, #164]	; (800a86c <__swsetup_r+0xe8>)
 800a7c6:	429c      	cmp	r4, r3
 800a7c8:	d101      	bne.n	800a7ce <__swsetup_r+0x4a>
 800a7ca:	68ac      	ldr	r4, [r5, #8]
 800a7cc:	e7eb      	b.n	800a7a6 <__swsetup_r+0x22>
 800a7ce:	4b28      	ldr	r3, [pc, #160]	; (800a870 <__swsetup_r+0xec>)
 800a7d0:	429c      	cmp	r4, r3
 800a7d2:	d1e8      	bne.n	800a7a6 <__swsetup_r+0x22>
 800a7d4:	68ec      	ldr	r4, [r5, #12]
 800a7d6:	e7e6      	b.n	800a7a6 <__swsetup_r+0x22>
 800a7d8:	075b      	lsls	r3, r3, #29
 800a7da:	d513      	bpl.n	800a804 <__swsetup_r+0x80>
 800a7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7de:	2900      	cmp	r1, #0
 800a7e0:	d008      	beq.n	800a7f4 <__swsetup_r+0x70>
 800a7e2:	0023      	movs	r3, r4
 800a7e4:	3344      	adds	r3, #68	; 0x44
 800a7e6:	4299      	cmp	r1, r3
 800a7e8:	d002      	beq.n	800a7f0 <__swsetup_r+0x6c>
 800a7ea:	0030      	movs	r0, r6
 800a7ec:	f7ff fb16 	bl	8009e1c <_free_r>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	6363      	str	r3, [r4, #52]	; 0x34
 800a7f4:	2224      	movs	r2, #36	; 0x24
 800a7f6:	89a3      	ldrh	r3, [r4, #12]
 800a7f8:	4393      	bics	r3, r2
 800a7fa:	81a3      	strh	r3, [r4, #12]
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	6063      	str	r3, [r4, #4]
 800a800:	6923      	ldr	r3, [r4, #16]
 800a802:	6023      	str	r3, [r4, #0]
 800a804:	2308      	movs	r3, #8
 800a806:	89a2      	ldrh	r2, [r4, #12]
 800a808:	4313      	orrs	r3, r2
 800a80a:	81a3      	strh	r3, [r4, #12]
 800a80c:	6923      	ldr	r3, [r4, #16]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d10b      	bne.n	800a82a <__swsetup_r+0xa6>
 800a812:	21a0      	movs	r1, #160	; 0xa0
 800a814:	2280      	movs	r2, #128	; 0x80
 800a816:	89a3      	ldrh	r3, [r4, #12]
 800a818:	0089      	lsls	r1, r1, #2
 800a81a:	0092      	lsls	r2, r2, #2
 800a81c:	400b      	ands	r3, r1
 800a81e:	4293      	cmp	r3, r2
 800a820:	d003      	beq.n	800a82a <__swsetup_r+0xa6>
 800a822:	0021      	movs	r1, r4
 800a824:	0030      	movs	r0, r6
 800a826:	f000 fa27 	bl	800ac78 <__smakebuf_r>
 800a82a:	220c      	movs	r2, #12
 800a82c:	5ea3      	ldrsh	r3, [r4, r2]
 800a82e:	2001      	movs	r0, #1
 800a830:	001a      	movs	r2, r3
 800a832:	b299      	uxth	r1, r3
 800a834:	4002      	ands	r2, r0
 800a836:	4203      	tst	r3, r0
 800a838:	d00f      	beq.n	800a85a <__swsetup_r+0xd6>
 800a83a:	2200      	movs	r2, #0
 800a83c:	60a2      	str	r2, [r4, #8]
 800a83e:	6962      	ldr	r2, [r4, #20]
 800a840:	4252      	negs	r2, r2
 800a842:	61a2      	str	r2, [r4, #24]
 800a844:	2000      	movs	r0, #0
 800a846:	6922      	ldr	r2, [r4, #16]
 800a848:	4282      	cmp	r2, r0
 800a84a:	d1ba      	bne.n	800a7c2 <__swsetup_r+0x3e>
 800a84c:	060a      	lsls	r2, r1, #24
 800a84e:	d5b8      	bpl.n	800a7c2 <__swsetup_r+0x3e>
 800a850:	2240      	movs	r2, #64	; 0x40
 800a852:	4313      	orrs	r3, r2
 800a854:	81a3      	strh	r3, [r4, #12]
 800a856:	3801      	subs	r0, #1
 800a858:	e7b3      	b.n	800a7c2 <__swsetup_r+0x3e>
 800a85a:	0788      	lsls	r0, r1, #30
 800a85c:	d400      	bmi.n	800a860 <__swsetup_r+0xdc>
 800a85e:	6962      	ldr	r2, [r4, #20]
 800a860:	60a2      	str	r2, [r4, #8]
 800a862:	e7ef      	b.n	800a844 <__swsetup_r+0xc0>
 800a864:	2000000c 	.word	0x2000000c
 800a868:	0800b5cc 	.word	0x0800b5cc
 800a86c:	0800b5ec 	.word	0x0800b5ec
 800a870:	0800b5ac 	.word	0x0800b5ac

0800a874 <abort>:
 800a874:	2006      	movs	r0, #6
 800a876:	b510      	push	{r4, lr}
 800a878:	f000 fa74 	bl	800ad64 <raise>
 800a87c:	2001      	movs	r0, #1
 800a87e:	f7f9 f9fe 	bl	8003c7e <_exit>
	...

0800a884 <__sflush_r>:
 800a884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a886:	898b      	ldrh	r3, [r1, #12]
 800a888:	0005      	movs	r5, r0
 800a88a:	000c      	movs	r4, r1
 800a88c:	071a      	lsls	r2, r3, #28
 800a88e:	d45f      	bmi.n	800a950 <__sflush_r+0xcc>
 800a890:	684a      	ldr	r2, [r1, #4]
 800a892:	2a00      	cmp	r2, #0
 800a894:	dc04      	bgt.n	800a8a0 <__sflush_r+0x1c>
 800a896:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a898:	2a00      	cmp	r2, #0
 800a89a:	dc01      	bgt.n	800a8a0 <__sflush_r+0x1c>
 800a89c:	2000      	movs	r0, #0
 800a89e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a8a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a8a2:	2f00      	cmp	r7, #0
 800a8a4:	d0fa      	beq.n	800a89c <__sflush_r+0x18>
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	2180      	movs	r1, #128	; 0x80
 800a8aa:	682e      	ldr	r6, [r5, #0]
 800a8ac:	602a      	str	r2, [r5, #0]
 800a8ae:	001a      	movs	r2, r3
 800a8b0:	0149      	lsls	r1, r1, #5
 800a8b2:	400a      	ands	r2, r1
 800a8b4:	420b      	tst	r3, r1
 800a8b6:	d034      	beq.n	800a922 <__sflush_r+0x9e>
 800a8b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8ba:	89a3      	ldrh	r3, [r4, #12]
 800a8bc:	075b      	lsls	r3, r3, #29
 800a8be:	d506      	bpl.n	800a8ce <__sflush_r+0x4a>
 800a8c0:	6863      	ldr	r3, [r4, #4]
 800a8c2:	1ac0      	subs	r0, r0, r3
 800a8c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <__sflush_r+0x4a>
 800a8ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8cc:	1ac0      	subs	r0, r0, r3
 800a8ce:	0002      	movs	r2, r0
 800a8d0:	6a21      	ldr	r1, [r4, #32]
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	0028      	movs	r0, r5
 800a8d6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a8d8:	47b8      	blx	r7
 800a8da:	89a1      	ldrh	r1, [r4, #12]
 800a8dc:	1c43      	adds	r3, r0, #1
 800a8de:	d106      	bne.n	800a8ee <__sflush_r+0x6a>
 800a8e0:	682b      	ldr	r3, [r5, #0]
 800a8e2:	2b1d      	cmp	r3, #29
 800a8e4:	d831      	bhi.n	800a94a <__sflush_r+0xc6>
 800a8e6:	4a2c      	ldr	r2, [pc, #176]	; (800a998 <__sflush_r+0x114>)
 800a8e8:	40da      	lsrs	r2, r3
 800a8ea:	07d3      	lsls	r3, r2, #31
 800a8ec:	d52d      	bpl.n	800a94a <__sflush_r+0xc6>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	6063      	str	r3, [r4, #4]
 800a8f2:	6923      	ldr	r3, [r4, #16]
 800a8f4:	6023      	str	r3, [r4, #0]
 800a8f6:	04cb      	lsls	r3, r1, #19
 800a8f8:	d505      	bpl.n	800a906 <__sflush_r+0x82>
 800a8fa:	1c43      	adds	r3, r0, #1
 800a8fc:	d102      	bne.n	800a904 <__sflush_r+0x80>
 800a8fe:	682b      	ldr	r3, [r5, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d100      	bne.n	800a906 <__sflush_r+0x82>
 800a904:	6560      	str	r0, [r4, #84]	; 0x54
 800a906:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a908:	602e      	str	r6, [r5, #0]
 800a90a:	2900      	cmp	r1, #0
 800a90c:	d0c6      	beq.n	800a89c <__sflush_r+0x18>
 800a90e:	0023      	movs	r3, r4
 800a910:	3344      	adds	r3, #68	; 0x44
 800a912:	4299      	cmp	r1, r3
 800a914:	d002      	beq.n	800a91c <__sflush_r+0x98>
 800a916:	0028      	movs	r0, r5
 800a918:	f7ff fa80 	bl	8009e1c <_free_r>
 800a91c:	2000      	movs	r0, #0
 800a91e:	6360      	str	r0, [r4, #52]	; 0x34
 800a920:	e7bd      	b.n	800a89e <__sflush_r+0x1a>
 800a922:	2301      	movs	r3, #1
 800a924:	0028      	movs	r0, r5
 800a926:	6a21      	ldr	r1, [r4, #32]
 800a928:	47b8      	blx	r7
 800a92a:	1c43      	adds	r3, r0, #1
 800a92c:	d1c5      	bne.n	800a8ba <__sflush_r+0x36>
 800a92e:	682b      	ldr	r3, [r5, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d0c2      	beq.n	800a8ba <__sflush_r+0x36>
 800a934:	2b1d      	cmp	r3, #29
 800a936:	d001      	beq.n	800a93c <__sflush_r+0xb8>
 800a938:	2b16      	cmp	r3, #22
 800a93a:	d101      	bne.n	800a940 <__sflush_r+0xbc>
 800a93c:	602e      	str	r6, [r5, #0]
 800a93e:	e7ad      	b.n	800a89c <__sflush_r+0x18>
 800a940:	2340      	movs	r3, #64	; 0x40
 800a942:	89a2      	ldrh	r2, [r4, #12]
 800a944:	4313      	orrs	r3, r2
 800a946:	81a3      	strh	r3, [r4, #12]
 800a948:	e7a9      	b.n	800a89e <__sflush_r+0x1a>
 800a94a:	2340      	movs	r3, #64	; 0x40
 800a94c:	430b      	orrs	r3, r1
 800a94e:	e7fa      	b.n	800a946 <__sflush_r+0xc2>
 800a950:	690f      	ldr	r7, [r1, #16]
 800a952:	2f00      	cmp	r7, #0
 800a954:	d0a2      	beq.n	800a89c <__sflush_r+0x18>
 800a956:	680a      	ldr	r2, [r1, #0]
 800a958:	600f      	str	r7, [r1, #0]
 800a95a:	1bd2      	subs	r2, r2, r7
 800a95c:	9201      	str	r2, [sp, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	079b      	lsls	r3, r3, #30
 800a962:	d100      	bne.n	800a966 <__sflush_r+0xe2>
 800a964:	694a      	ldr	r2, [r1, #20]
 800a966:	60a2      	str	r2, [r4, #8]
 800a968:	9b01      	ldr	r3, [sp, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	dc00      	bgt.n	800a970 <__sflush_r+0xec>
 800a96e:	e795      	b.n	800a89c <__sflush_r+0x18>
 800a970:	003a      	movs	r2, r7
 800a972:	0028      	movs	r0, r5
 800a974:	9b01      	ldr	r3, [sp, #4]
 800a976:	6a21      	ldr	r1, [r4, #32]
 800a978:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a97a:	47b0      	blx	r6
 800a97c:	2800      	cmp	r0, #0
 800a97e:	dc06      	bgt.n	800a98e <__sflush_r+0x10a>
 800a980:	2340      	movs	r3, #64	; 0x40
 800a982:	2001      	movs	r0, #1
 800a984:	89a2      	ldrh	r2, [r4, #12]
 800a986:	4240      	negs	r0, r0
 800a988:	4313      	orrs	r3, r2
 800a98a:	81a3      	strh	r3, [r4, #12]
 800a98c:	e787      	b.n	800a89e <__sflush_r+0x1a>
 800a98e:	9b01      	ldr	r3, [sp, #4]
 800a990:	183f      	adds	r7, r7, r0
 800a992:	1a1b      	subs	r3, r3, r0
 800a994:	9301      	str	r3, [sp, #4]
 800a996:	e7e7      	b.n	800a968 <__sflush_r+0xe4>
 800a998:	20400001 	.word	0x20400001

0800a99c <_fflush_r>:
 800a99c:	690b      	ldr	r3, [r1, #16]
 800a99e:	b570      	push	{r4, r5, r6, lr}
 800a9a0:	0005      	movs	r5, r0
 800a9a2:	000c      	movs	r4, r1
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d102      	bne.n	800a9ae <_fflush_r+0x12>
 800a9a8:	2500      	movs	r5, #0
 800a9aa:	0028      	movs	r0, r5
 800a9ac:	bd70      	pop	{r4, r5, r6, pc}
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d004      	beq.n	800a9bc <_fflush_r+0x20>
 800a9b2:	6983      	ldr	r3, [r0, #24]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <_fflush_r+0x20>
 800a9b8:	f000 f892 	bl	800aae0 <__sinit>
 800a9bc:	4b14      	ldr	r3, [pc, #80]	; (800aa10 <_fflush_r+0x74>)
 800a9be:	429c      	cmp	r4, r3
 800a9c0:	d11b      	bne.n	800a9fa <_fflush_r+0x5e>
 800a9c2:	686c      	ldr	r4, [r5, #4]
 800a9c4:	220c      	movs	r2, #12
 800a9c6:	5ea3      	ldrsh	r3, [r4, r2]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d0ed      	beq.n	800a9a8 <_fflush_r+0xc>
 800a9cc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9ce:	07d2      	lsls	r2, r2, #31
 800a9d0:	d404      	bmi.n	800a9dc <_fflush_r+0x40>
 800a9d2:	059b      	lsls	r3, r3, #22
 800a9d4:	d402      	bmi.n	800a9dc <_fflush_r+0x40>
 800a9d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9d8:	f000 f923 	bl	800ac22 <__retarget_lock_acquire_recursive>
 800a9dc:	0028      	movs	r0, r5
 800a9de:	0021      	movs	r1, r4
 800a9e0:	f7ff ff50 	bl	800a884 <__sflush_r>
 800a9e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9e6:	0005      	movs	r5, r0
 800a9e8:	07db      	lsls	r3, r3, #31
 800a9ea:	d4de      	bmi.n	800a9aa <_fflush_r+0xe>
 800a9ec:	89a3      	ldrh	r3, [r4, #12]
 800a9ee:	059b      	lsls	r3, r3, #22
 800a9f0:	d4db      	bmi.n	800a9aa <_fflush_r+0xe>
 800a9f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9f4:	f000 f916 	bl	800ac24 <__retarget_lock_release_recursive>
 800a9f8:	e7d7      	b.n	800a9aa <_fflush_r+0xe>
 800a9fa:	4b06      	ldr	r3, [pc, #24]	; (800aa14 <_fflush_r+0x78>)
 800a9fc:	429c      	cmp	r4, r3
 800a9fe:	d101      	bne.n	800aa04 <_fflush_r+0x68>
 800aa00:	68ac      	ldr	r4, [r5, #8]
 800aa02:	e7df      	b.n	800a9c4 <_fflush_r+0x28>
 800aa04:	4b04      	ldr	r3, [pc, #16]	; (800aa18 <_fflush_r+0x7c>)
 800aa06:	429c      	cmp	r4, r3
 800aa08:	d1dc      	bne.n	800a9c4 <_fflush_r+0x28>
 800aa0a:	68ec      	ldr	r4, [r5, #12]
 800aa0c:	e7da      	b.n	800a9c4 <_fflush_r+0x28>
 800aa0e:	46c0      	nop			; (mov r8, r8)
 800aa10:	0800b5cc 	.word	0x0800b5cc
 800aa14:	0800b5ec 	.word	0x0800b5ec
 800aa18:	0800b5ac 	.word	0x0800b5ac

0800aa1c <std>:
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	b510      	push	{r4, lr}
 800aa20:	0004      	movs	r4, r0
 800aa22:	6003      	str	r3, [r0, #0]
 800aa24:	6043      	str	r3, [r0, #4]
 800aa26:	6083      	str	r3, [r0, #8]
 800aa28:	8181      	strh	r1, [r0, #12]
 800aa2a:	6643      	str	r3, [r0, #100]	; 0x64
 800aa2c:	0019      	movs	r1, r3
 800aa2e:	81c2      	strh	r2, [r0, #14]
 800aa30:	6103      	str	r3, [r0, #16]
 800aa32:	6143      	str	r3, [r0, #20]
 800aa34:	6183      	str	r3, [r0, #24]
 800aa36:	2208      	movs	r2, #8
 800aa38:	305c      	adds	r0, #92	; 0x5c
 800aa3a:	f7fb fd35 	bl	80064a8 <memset>
 800aa3e:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <std+0x38>)
 800aa40:	6224      	str	r4, [r4, #32]
 800aa42:	6263      	str	r3, [r4, #36]	; 0x24
 800aa44:	4b04      	ldr	r3, [pc, #16]	; (800aa58 <std+0x3c>)
 800aa46:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa48:	4b04      	ldr	r3, [pc, #16]	; (800aa5c <std+0x40>)
 800aa4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa4c:	4b04      	ldr	r3, [pc, #16]	; (800aa60 <std+0x44>)
 800aa4e:	6323      	str	r3, [r4, #48]	; 0x30
 800aa50:	bd10      	pop	{r4, pc}
 800aa52:	46c0      	nop			; (mov r8, r8)
 800aa54:	0800ada5 	.word	0x0800ada5
 800aa58:	0800adcd 	.word	0x0800adcd
 800aa5c:	0800ae05 	.word	0x0800ae05
 800aa60:	0800ae31 	.word	0x0800ae31

0800aa64 <_cleanup_r>:
 800aa64:	b510      	push	{r4, lr}
 800aa66:	4902      	ldr	r1, [pc, #8]	; (800aa70 <_cleanup_r+0xc>)
 800aa68:	f000 f8ba 	bl	800abe0 <_fwalk_reent>
 800aa6c:	bd10      	pop	{r4, pc}
 800aa6e:	46c0      	nop			; (mov r8, r8)
 800aa70:	0800a99d 	.word	0x0800a99d

0800aa74 <__sfmoreglue>:
 800aa74:	b570      	push	{r4, r5, r6, lr}
 800aa76:	2568      	movs	r5, #104	; 0x68
 800aa78:	1e4a      	subs	r2, r1, #1
 800aa7a:	4355      	muls	r5, r2
 800aa7c:	000e      	movs	r6, r1
 800aa7e:	0029      	movs	r1, r5
 800aa80:	3174      	adds	r1, #116	; 0x74
 800aa82:	f7ff fa37 	bl	8009ef4 <_malloc_r>
 800aa86:	1e04      	subs	r4, r0, #0
 800aa88:	d008      	beq.n	800aa9c <__sfmoreglue+0x28>
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	002a      	movs	r2, r5
 800aa8e:	6001      	str	r1, [r0, #0]
 800aa90:	6046      	str	r6, [r0, #4]
 800aa92:	300c      	adds	r0, #12
 800aa94:	60a0      	str	r0, [r4, #8]
 800aa96:	3268      	adds	r2, #104	; 0x68
 800aa98:	f7fb fd06 	bl	80064a8 <memset>
 800aa9c:	0020      	movs	r0, r4
 800aa9e:	bd70      	pop	{r4, r5, r6, pc}

0800aaa0 <__sfp_lock_acquire>:
 800aaa0:	b510      	push	{r4, lr}
 800aaa2:	4802      	ldr	r0, [pc, #8]	; (800aaac <__sfp_lock_acquire+0xc>)
 800aaa4:	f000 f8bd 	bl	800ac22 <__retarget_lock_acquire_recursive>
 800aaa8:	bd10      	pop	{r4, pc}
 800aaaa:	46c0      	nop			; (mov r8, r8)
 800aaac:	20000321 	.word	0x20000321

0800aab0 <__sfp_lock_release>:
 800aab0:	b510      	push	{r4, lr}
 800aab2:	4802      	ldr	r0, [pc, #8]	; (800aabc <__sfp_lock_release+0xc>)
 800aab4:	f000 f8b6 	bl	800ac24 <__retarget_lock_release_recursive>
 800aab8:	bd10      	pop	{r4, pc}
 800aaba:	46c0      	nop			; (mov r8, r8)
 800aabc:	20000321 	.word	0x20000321

0800aac0 <__sinit_lock_acquire>:
 800aac0:	b510      	push	{r4, lr}
 800aac2:	4802      	ldr	r0, [pc, #8]	; (800aacc <__sinit_lock_acquire+0xc>)
 800aac4:	f000 f8ad 	bl	800ac22 <__retarget_lock_acquire_recursive>
 800aac8:	bd10      	pop	{r4, pc}
 800aaca:	46c0      	nop			; (mov r8, r8)
 800aacc:	20000322 	.word	0x20000322

0800aad0 <__sinit_lock_release>:
 800aad0:	b510      	push	{r4, lr}
 800aad2:	4802      	ldr	r0, [pc, #8]	; (800aadc <__sinit_lock_release+0xc>)
 800aad4:	f000 f8a6 	bl	800ac24 <__retarget_lock_release_recursive>
 800aad8:	bd10      	pop	{r4, pc}
 800aada:	46c0      	nop			; (mov r8, r8)
 800aadc:	20000322 	.word	0x20000322

0800aae0 <__sinit>:
 800aae0:	b513      	push	{r0, r1, r4, lr}
 800aae2:	0004      	movs	r4, r0
 800aae4:	f7ff ffec 	bl	800aac0 <__sinit_lock_acquire>
 800aae8:	69a3      	ldr	r3, [r4, #24]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d002      	beq.n	800aaf4 <__sinit+0x14>
 800aaee:	f7ff ffef 	bl	800aad0 <__sinit_lock_release>
 800aaf2:	bd13      	pop	{r0, r1, r4, pc}
 800aaf4:	64a3      	str	r3, [r4, #72]	; 0x48
 800aaf6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800aaf8:	6523      	str	r3, [r4, #80]	; 0x50
 800aafa:	4b13      	ldr	r3, [pc, #76]	; (800ab48 <__sinit+0x68>)
 800aafc:	4a13      	ldr	r2, [pc, #76]	; (800ab4c <__sinit+0x6c>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab02:	9301      	str	r3, [sp, #4]
 800ab04:	42a3      	cmp	r3, r4
 800ab06:	d101      	bne.n	800ab0c <__sinit+0x2c>
 800ab08:	2301      	movs	r3, #1
 800ab0a:	61a3      	str	r3, [r4, #24]
 800ab0c:	0020      	movs	r0, r4
 800ab0e:	f000 f81f 	bl	800ab50 <__sfp>
 800ab12:	6060      	str	r0, [r4, #4]
 800ab14:	0020      	movs	r0, r4
 800ab16:	f000 f81b 	bl	800ab50 <__sfp>
 800ab1a:	60a0      	str	r0, [r4, #8]
 800ab1c:	0020      	movs	r0, r4
 800ab1e:	f000 f817 	bl	800ab50 <__sfp>
 800ab22:	2200      	movs	r2, #0
 800ab24:	2104      	movs	r1, #4
 800ab26:	60e0      	str	r0, [r4, #12]
 800ab28:	6860      	ldr	r0, [r4, #4]
 800ab2a:	f7ff ff77 	bl	800aa1c <std>
 800ab2e:	2201      	movs	r2, #1
 800ab30:	2109      	movs	r1, #9
 800ab32:	68a0      	ldr	r0, [r4, #8]
 800ab34:	f7ff ff72 	bl	800aa1c <std>
 800ab38:	2202      	movs	r2, #2
 800ab3a:	2112      	movs	r1, #18
 800ab3c:	68e0      	ldr	r0, [r4, #12]
 800ab3e:	f7ff ff6d 	bl	800aa1c <std>
 800ab42:	2301      	movs	r3, #1
 800ab44:	61a3      	str	r3, [r4, #24]
 800ab46:	e7d2      	b.n	800aaee <__sinit+0xe>
 800ab48:	0800b168 	.word	0x0800b168
 800ab4c:	0800aa65 	.word	0x0800aa65

0800ab50 <__sfp>:
 800ab50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab52:	0007      	movs	r7, r0
 800ab54:	f7ff ffa4 	bl	800aaa0 <__sfp_lock_acquire>
 800ab58:	4b1f      	ldr	r3, [pc, #124]	; (800abd8 <__sfp+0x88>)
 800ab5a:	681e      	ldr	r6, [r3, #0]
 800ab5c:	69b3      	ldr	r3, [r6, #24]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d102      	bne.n	800ab68 <__sfp+0x18>
 800ab62:	0030      	movs	r0, r6
 800ab64:	f7ff ffbc 	bl	800aae0 <__sinit>
 800ab68:	3648      	adds	r6, #72	; 0x48
 800ab6a:	68b4      	ldr	r4, [r6, #8]
 800ab6c:	6873      	ldr	r3, [r6, #4]
 800ab6e:	3b01      	subs	r3, #1
 800ab70:	d504      	bpl.n	800ab7c <__sfp+0x2c>
 800ab72:	6833      	ldr	r3, [r6, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d022      	beq.n	800abbe <__sfp+0x6e>
 800ab78:	6836      	ldr	r6, [r6, #0]
 800ab7a:	e7f6      	b.n	800ab6a <__sfp+0x1a>
 800ab7c:	220c      	movs	r2, #12
 800ab7e:	5ea5      	ldrsh	r5, [r4, r2]
 800ab80:	2d00      	cmp	r5, #0
 800ab82:	d11a      	bne.n	800abba <__sfp+0x6a>
 800ab84:	0020      	movs	r0, r4
 800ab86:	4b15      	ldr	r3, [pc, #84]	; (800abdc <__sfp+0x8c>)
 800ab88:	3058      	adds	r0, #88	; 0x58
 800ab8a:	60e3      	str	r3, [r4, #12]
 800ab8c:	6665      	str	r5, [r4, #100]	; 0x64
 800ab8e:	f000 f847 	bl	800ac20 <__retarget_lock_init_recursive>
 800ab92:	f7ff ff8d 	bl	800aab0 <__sfp_lock_release>
 800ab96:	0020      	movs	r0, r4
 800ab98:	2208      	movs	r2, #8
 800ab9a:	0029      	movs	r1, r5
 800ab9c:	6025      	str	r5, [r4, #0]
 800ab9e:	60a5      	str	r5, [r4, #8]
 800aba0:	6065      	str	r5, [r4, #4]
 800aba2:	6125      	str	r5, [r4, #16]
 800aba4:	6165      	str	r5, [r4, #20]
 800aba6:	61a5      	str	r5, [r4, #24]
 800aba8:	305c      	adds	r0, #92	; 0x5c
 800abaa:	f7fb fc7d 	bl	80064a8 <memset>
 800abae:	6365      	str	r5, [r4, #52]	; 0x34
 800abb0:	63a5      	str	r5, [r4, #56]	; 0x38
 800abb2:	64a5      	str	r5, [r4, #72]	; 0x48
 800abb4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800abb6:	0020      	movs	r0, r4
 800abb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abba:	3468      	adds	r4, #104	; 0x68
 800abbc:	e7d7      	b.n	800ab6e <__sfp+0x1e>
 800abbe:	2104      	movs	r1, #4
 800abc0:	0038      	movs	r0, r7
 800abc2:	f7ff ff57 	bl	800aa74 <__sfmoreglue>
 800abc6:	1e04      	subs	r4, r0, #0
 800abc8:	6030      	str	r0, [r6, #0]
 800abca:	d1d5      	bne.n	800ab78 <__sfp+0x28>
 800abcc:	f7ff ff70 	bl	800aab0 <__sfp_lock_release>
 800abd0:	230c      	movs	r3, #12
 800abd2:	603b      	str	r3, [r7, #0]
 800abd4:	e7ef      	b.n	800abb6 <__sfp+0x66>
 800abd6:	46c0      	nop			; (mov r8, r8)
 800abd8:	0800b168 	.word	0x0800b168
 800abdc:	ffff0001 	.word	0xffff0001

0800abe0 <_fwalk_reent>:
 800abe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abe2:	0004      	movs	r4, r0
 800abe4:	0006      	movs	r6, r0
 800abe6:	2700      	movs	r7, #0
 800abe8:	9101      	str	r1, [sp, #4]
 800abea:	3448      	adds	r4, #72	; 0x48
 800abec:	6863      	ldr	r3, [r4, #4]
 800abee:	68a5      	ldr	r5, [r4, #8]
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	9b00      	ldr	r3, [sp, #0]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	d504      	bpl.n	800ac04 <_fwalk_reent+0x24>
 800abfa:	6824      	ldr	r4, [r4, #0]
 800abfc:	2c00      	cmp	r4, #0
 800abfe:	d1f5      	bne.n	800abec <_fwalk_reent+0xc>
 800ac00:	0038      	movs	r0, r7
 800ac02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac04:	89ab      	ldrh	r3, [r5, #12]
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d908      	bls.n	800ac1c <_fwalk_reent+0x3c>
 800ac0a:	220e      	movs	r2, #14
 800ac0c:	5eab      	ldrsh	r3, [r5, r2]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	d004      	beq.n	800ac1c <_fwalk_reent+0x3c>
 800ac12:	0029      	movs	r1, r5
 800ac14:	0030      	movs	r0, r6
 800ac16:	9b01      	ldr	r3, [sp, #4]
 800ac18:	4798      	blx	r3
 800ac1a:	4307      	orrs	r7, r0
 800ac1c:	3568      	adds	r5, #104	; 0x68
 800ac1e:	e7e8      	b.n	800abf2 <_fwalk_reent+0x12>

0800ac20 <__retarget_lock_init_recursive>:
 800ac20:	4770      	bx	lr

0800ac22 <__retarget_lock_acquire_recursive>:
 800ac22:	4770      	bx	lr

0800ac24 <__retarget_lock_release_recursive>:
 800ac24:	4770      	bx	lr
	...

0800ac28 <__swhatbuf_r>:
 800ac28:	b570      	push	{r4, r5, r6, lr}
 800ac2a:	000e      	movs	r6, r1
 800ac2c:	001d      	movs	r5, r3
 800ac2e:	230e      	movs	r3, #14
 800ac30:	5ec9      	ldrsh	r1, [r1, r3]
 800ac32:	0014      	movs	r4, r2
 800ac34:	b096      	sub	sp, #88	; 0x58
 800ac36:	2900      	cmp	r1, #0
 800ac38:	da08      	bge.n	800ac4c <__swhatbuf_r+0x24>
 800ac3a:	220c      	movs	r2, #12
 800ac3c:	5eb3      	ldrsh	r3, [r6, r2]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	602a      	str	r2, [r5, #0]
 800ac42:	061b      	lsls	r3, r3, #24
 800ac44:	d411      	bmi.n	800ac6a <__swhatbuf_r+0x42>
 800ac46:	2380      	movs	r3, #128	; 0x80
 800ac48:	00db      	lsls	r3, r3, #3
 800ac4a:	e00f      	b.n	800ac6c <__swhatbuf_r+0x44>
 800ac4c:	466a      	mov	r2, sp
 800ac4e:	f000 f91b 	bl	800ae88 <_fstat_r>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	dbf1      	blt.n	800ac3a <__swhatbuf_r+0x12>
 800ac56:	23f0      	movs	r3, #240	; 0xf0
 800ac58:	9901      	ldr	r1, [sp, #4]
 800ac5a:	021b      	lsls	r3, r3, #8
 800ac5c:	4019      	ands	r1, r3
 800ac5e:	4b05      	ldr	r3, [pc, #20]	; (800ac74 <__swhatbuf_r+0x4c>)
 800ac60:	18c9      	adds	r1, r1, r3
 800ac62:	424b      	negs	r3, r1
 800ac64:	4159      	adcs	r1, r3
 800ac66:	6029      	str	r1, [r5, #0]
 800ac68:	e7ed      	b.n	800ac46 <__swhatbuf_r+0x1e>
 800ac6a:	2340      	movs	r3, #64	; 0x40
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	6023      	str	r3, [r4, #0]
 800ac70:	b016      	add	sp, #88	; 0x58
 800ac72:	bd70      	pop	{r4, r5, r6, pc}
 800ac74:	ffffe000 	.word	0xffffe000

0800ac78 <__smakebuf_r>:
 800ac78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac7a:	2602      	movs	r6, #2
 800ac7c:	898b      	ldrh	r3, [r1, #12]
 800ac7e:	0005      	movs	r5, r0
 800ac80:	000c      	movs	r4, r1
 800ac82:	4233      	tst	r3, r6
 800ac84:	d006      	beq.n	800ac94 <__smakebuf_r+0x1c>
 800ac86:	0023      	movs	r3, r4
 800ac88:	3347      	adds	r3, #71	; 0x47
 800ac8a:	6023      	str	r3, [r4, #0]
 800ac8c:	6123      	str	r3, [r4, #16]
 800ac8e:	2301      	movs	r3, #1
 800ac90:	6163      	str	r3, [r4, #20]
 800ac92:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ac94:	466a      	mov	r2, sp
 800ac96:	ab01      	add	r3, sp, #4
 800ac98:	f7ff ffc6 	bl	800ac28 <__swhatbuf_r>
 800ac9c:	9900      	ldr	r1, [sp, #0]
 800ac9e:	0007      	movs	r7, r0
 800aca0:	0028      	movs	r0, r5
 800aca2:	f7ff f927 	bl	8009ef4 <_malloc_r>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d108      	bne.n	800acbc <__smakebuf_r+0x44>
 800acaa:	220c      	movs	r2, #12
 800acac:	5ea3      	ldrsh	r3, [r4, r2]
 800acae:	059a      	lsls	r2, r3, #22
 800acb0:	d4ef      	bmi.n	800ac92 <__smakebuf_r+0x1a>
 800acb2:	2203      	movs	r2, #3
 800acb4:	4393      	bics	r3, r2
 800acb6:	431e      	orrs	r6, r3
 800acb8:	81a6      	strh	r6, [r4, #12]
 800acba:	e7e4      	b.n	800ac86 <__smakebuf_r+0xe>
 800acbc:	4b0f      	ldr	r3, [pc, #60]	; (800acfc <__smakebuf_r+0x84>)
 800acbe:	62ab      	str	r3, [r5, #40]	; 0x28
 800acc0:	2380      	movs	r3, #128	; 0x80
 800acc2:	89a2      	ldrh	r2, [r4, #12]
 800acc4:	6020      	str	r0, [r4, #0]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	81a3      	strh	r3, [r4, #12]
 800acca:	9b00      	ldr	r3, [sp, #0]
 800accc:	6120      	str	r0, [r4, #16]
 800acce:	6163      	str	r3, [r4, #20]
 800acd0:	9b01      	ldr	r3, [sp, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00d      	beq.n	800acf2 <__smakebuf_r+0x7a>
 800acd6:	0028      	movs	r0, r5
 800acd8:	230e      	movs	r3, #14
 800acda:	5ee1      	ldrsh	r1, [r4, r3]
 800acdc:	f000 f8e6 	bl	800aeac <_isatty_r>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d006      	beq.n	800acf2 <__smakebuf_r+0x7a>
 800ace4:	2203      	movs	r2, #3
 800ace6:	89a3      	ldrh	r3, [r4, #12]
 800ace8:	4393      	bics	r3, r2
 800acea:	001a      	movs	r2, r3
 800acec:	2301      	movs	r3, #1
 800acee:	4313      	orrs	r3, r2
 800acf0:	81a3      	strh	r3, [r4, #12]
 800acf2:	89a0      	ldrh	r0, [r4, #12]
 800acf4:	4307      	orrs	r7, r0
 800acf6:	81a7      	strh	r7, [r4, #12]
 800acf8:	e7cb      	b.n	800ac92 <__smakebuf_r+0x1a>
 800acfa:	46c0      	nop			; (mov r8, r8)
 800acfc:	0800aa65 	.word	0x0800aa65

0800ad00 <_malloc_usable_size_r>:
 800ad00:	1f0b      	subs	r3, r1, #4
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	1f18      	subs	r0, r3, #4
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	da01      	bge.n	800ad0e <_malloc_usable_size_r+0xe>
 800ad0a:	580b      	ldr	r3, [r1, r0]
 800ad0c:	18c0      	adds	r0, r0, r3
 800ad0e:	4770      	bx	lr

0800ad10 <_raise_r>:
 800ad10:	b570      	push	{r4, r5, r6, lr}
 800ad12:	0004      	movs	r4, r0
 800ad14:	000d      	movs	r5, r1
 800ad16:	291f      	cmp	r1, #31
 800ad18:	d904      	bls.n	800ad24 <_raise_r+0x14>
 800ad1a:	2316      	movs	r3, #22
 800ad1c:	6003      	str	r3, [r0, #0]
 800ad1e:	2001      	movs	r0, #1
 800ad20:	4240      	negs	r0, r0
 800ad22:	bd70      	pop	{r4, r5, r6, pc}
 800ad24:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d004      	beq.n	800ad34 <_raise_r+0x24>
 800ad2a:	008a      	lsls	r2, r1, #2
 800ad2c:	189b      	adds	r3, r3, r2
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	2a00      	cmp	r2, #0
 800ad32:	d108      	bne.n	800ad46 <_raise_r+0x36>
 800ad34:	0020      	movs	r0, r4
 800ad36:	f000 f831 	bl	800ad9c <_getpid_r>
 800ad3a:	002a      	movs	r2, r5
 800ad3c:	0001      	movs	r1, r0
 800ad3e:	0020      	movs	r0, r4
 800ad40:	f000 f81a 	bl	800ad78 <_kill_r>
 800ad44:	e7ed      	b.n	800ad22 <_raise_r+0x12>
 800ad46:	2000      	movs	r0, #0
 800ad48:	2a01      	cmp	r2, #1
 800ad4a:	d0ea      	beq.n	800ad22 <_raise_r+0x12>
 800ad4c:	1c51      	adds	r1, r2, #1
 800ad4e:	d103      	bne.n	800ad58 <_raise_r+0x48>
 800ad50:	2316      	movs	r3, #22
 800ad52:	3001      	adds	r0, #1
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	e7e4      	b.n	800ad22 <_raise_r+0x12>
 800ad58:	2400      	movs	r4, #0
 800ad5a:	0028      	movs	r0, r5
 800ad5c:	601c      	str	r4, [r3, #0]
 800ad5e:	4790      	blx	r2
 800ad60:	0020      	movs	r0, r4
 800ad62:	e7de      	b.n	800ad22 <_raise_r+0x12>

0800ad64 <raise>:
 800ad64:	b510      	push	{r4, lr}
 800ad66:	4b03      	ldr	r3, [pc, #12]	; (800ad74 <raise+0x10>)
 800ad68:	0001      	movs	r1, r0
 800ad6a:	6818      	ldr	r0, [r3, #0]
 800ad6c:	f7ff ffd0 	bl	800ad10 <_raise_r>
 800ad70:	bd10      	pop	{r4, pc}
 800ad72:	46c0      	nop			; (mov r8, r8)
 800ad74:	2000000c 	.word	0x2000000c

0800ad78 <_kill_r>:
 800ad78:	2300      	movs	r3, #0
 800ad7a:	b570      	push	{r4, r5, r6, lr}
 800ad7c:	4d06      	ldr	r5, [pc, #24]	; (800ad98 <_kill_r+0x20>)
 800ad7e:	0004      	movs	r4, r0
 800ad80:	0008      	movs	r0, r1
 800ad82:	0011      	movs	r1, r2
 800ad84:	602b      	str	r3, [r5, #0]
 800ad86:	f7f8 ff6a 	bl	8003c5e <_kill>
 800ad8a:	1c43      	adds	r3, r0, #1
 800ad8c:	d103      	bne.n	800ad96 <_kill_r+0x1e>
 800ad8e:	682b      	ldr	r3, [r5, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d000      	beq.n	800ad96 <_kill_r+0x1e>
 800ad94:	6023      	str	r3, [r4, #0]
 800ad96:	bd70      	pop	{r4, r5, r6, pc}
 800ad98:	2000031c 	.word	0x2000031c

0800ad9c <_getpid_r>:
 800ad9c:	b510      	push	{r4, lr}
 800ad9e:	f7f8 ff58 	bl	8003c52 <_getpid>
 800ada2:	bd10      	pop	{r4, pc}

0800ada4 <__sread>:
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	000c      	movs	r4, r1
 800ada8:	250e      	movs	r5, #14
 800adaa:	5f49      	ldrsh	r1, [r1, r5]
 800adac:	f000 f8a4 	bl	800aef8 <_read_r>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	db03      	blt.n	800adbc <__sread+0x18>
 800adb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800adb6:	181b      	adds	r3, r3, r0
 800adb8:	6563      	str	r3, [r4, #84]	; 0x54
 800adba:	bd70      	pop	{r4, r5, r6, pc}
 800adbc:	89a3      	ldrh	r3, [r4, #12]
 800adbe:	4a02      	ldr	r2, [pc, #8]	; (800adc8 <__sread+0x24>)
 800adc0:	4013      	ands	r3, r2
 800adc2:	81a3      	strh	r3, [r4, #12]
 800adc4:	e7f9      	b.n	800adba <__sread+0x16>
 800adc6:	46c0      	nop			; (mov r8, r8)
 800adc8:	ffffefff 	.word	0xffffefff

0800adcc <__swrite>:
 800adcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adce:	001f      	movs	r7, r3
 800add0:	898b      	ldrh	r3, [r1, #12]
 800add2:	0005      	movs	r5, r0
 800add4:	000c      	movs	r4, r1
 800add6:	0016      	movs	r6, r2
 800add8:	05db      	lsls	r3, r3, #23
 800adda:	d505      	bpl.n	800ade8 <__swrite+0x1c>
 800addc:	230e      	movs	r3, #14
 800adde:	5ec9      	ldrsh	r1, [r1, r3]
 800ade0:	2200      	movs	r2, #0
 800ade2:	2302      	movs	r3, #2
 800ade4:	f000 f874 	bl	800aed0 <_lseek_r>
 800ade8:	89a3      	ldrh	r3, [r4, #12]
 800adea:	4a05      	ldr	r2, [pc, #20]	; (800ae00 <__swrite+0x34>)
 800adec:	0028      	movs	r0, r5
 800adee:	4013      	ands	r3, r2
 800adf0:	81a3      	strh	r3, [r4, #12]
 800adf2:	0032      	movs	r2, r6
 800adf4:	230e      	movs	r3, #14
 800adf6:	5ee1      	ldrsh	r1, [r4, r3]
 800adf8:	003b      	movs	r3, r7
 800adfa:	f000 f81f 	bl	800ae3c <_write_r>
 800adfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae00:	ffffefff 	.word	0xffffefff

0800ae04 <__sseek>:
 800ae04:	b570      	push	{r4, r5, r6, lr}
 800ae06:	000c      	movs	r4, r1
 800ae08:	250e      	movs	r5, #14
 800ae0a:	5f49      	ldrsh	r1, [r1, r5]
 800ae0c:	f000 f860 	bl	800aed0 <_lseek_r>
 800ae10:	89a3      	ldrh	r3, [r4, #12]
 800ae12:	1c42      	adds	r2, r0, #1
 800ae14:	d103      	bne.n	800ae1e <__sseek+0x1a>
 800ae16:	4a05      	ldr	r2, [pc, #20]	; (800ae2c <__sseek+0x28>)
 800ae18:	4013      	ands	r3, r2
 800ae1a:	81a3      	strh	r3, [r4, #12]
 800ae1c:	bd70      	pop	{r4, r5, r6, pc}
 800ae1e:	2280      	movs	r2, #128	; 0x80
 800ae20:	0152      	lsls	r2, r2, #5
 800ae22:	4313      	orrs	r3, r2
 800ae24:	81a3      	strh	r3, [r4, #12]
 800ae26:	6560      	str	r0, [r4, #84]	; 0x54
 800ae28:	e7f8      	b.n	800ae1c <__sseek+0x18>
 800ae2a:	46c0      	nop			; (mov r8, r8)
 800ae2c:	ffffefff 	.word	0xffffefff

0800ae30 <__sclose>:
 800ae30:	b510      	push	{r4, lr}
 800ae32:	230e      	movs	r3, #14
 800ae34:	5ec9      	ldrsh	r1, [r1, r3]
 800ae36:	f000 f815 	bl	800ae64 <_close_r>
 800ae3a:	bd10      	pop	{r4, pc}

0800ae3c <_write_r>:
 800ae3c:	b570      	push	{r4, r5, r6, lr}
 800ae3e:	0004      	movs	r4, r0
 800ae40:	0008      	movs	r0, r1
 800ae42:	0011      	movs	r1, r2
 800ae44:	001a      	movs	r2, r3
 800ae46:	2300      	movs	r3, #0
 800ae48:	4d05      	ldr	r5, [pc, #20]	; (800ae60 <_write_r+0x24>)
 800ae4a:	602b      	str	r3, [r5, #0]
 800ae4c:	f7f8 ff40 	bl	8003cd0 <_write>
 800ae50:	1c43      	adds	r3, r0, #1
 800ae52:	d103      	bne.n	800ae5c <_write_r+0x20>
 800ae54:	682b      	ldr	r3, [r5, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d000      	beq.n	800ae5c <_write_r+0x20>
 800ae5a:	6023      	str	r3, [r4, #0]
 800ae5c:	bd70      	pop	{r4, r5, r6, pc}
 800ae5e:	46c0      	nop			; (mov r8, r8)
 800ae60:	2000031c 	.word	0x2000031c

0800ae64 <_close_r>:
 800ae64:	2300      	movs	r3, #0
 800ae66:	b570      	push	{r4, r5, r6, lr}
 800ae68:	4d06      	ldr	r5, [pc, #24]	; (800ae84 <_close_r+0x20>)
 800ae6a:	0004      	movs	r4, r0
 800ae6c:	0008      	movs	r0, r1
 800ae6e:	602b      	str	r3, [r5, #0]
 800ae70:	f7f8 ff4a 	bl	8003d08 <_close>
 800ae74:	1c43      	adds	r3, r0, #1
 800ae76:	d103      	bne.n	800ae80 <_close_r+0x1c>
 800ae78:	682b      	ldr	r3, [r5, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d000      	beq.n	800ae80 <_close_r+0x1c>
 800ae7e:	6023      	str	r3, [r4, #0]
 800ae80:	bd70      	pop	{r4, r5, r6, pc}
 800ae82:	46c0      	nop			; (mov r8, r8)
 800ae84:	2000031c 	.word	0x2000031c

0800ae88 <_fstat_r>:
 800ae88:	2300      	movs	r3, #0
 800ae8a:	b570      	push	{r4, r5, r6, lr}
 800ae8c:	4d06      	ldr	r5, [pc, #24]	; (800aea8 <_fstat_r+0x20>)
 800ae8e:	0004      	movs	r4, r0
 800ae90:	0008      	movs	r0, r1
 800ae92:	0011      	movs	r1, r2
 800ae94:	602b      	str	r3, [r5, #0]
 800ae96:	f7f8 ff41 	bl	8003d1c <_fstat>
 800ae9a:	1c43      	adds	r3, r0, #1
 800ae9c:	d103      	bne.n	800aea6 <_fstat_r+0x1e>
 800ae9e:	682b      	ldr	r3, [r5, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d000      	beq.n	800aea6 <_fstat_r+0x1e>
 800aea4:	6023      	str	r3, [r4, #0]
 800aea6:	bd70      	pop	{r4, r5, r6, pc}
 800aea8:	2000031c 	.word	0x2000031c

0800aeac <_isatty_r>:
 800aeac:	2300      	movs	r3, #0
 800aeae:	b570      	push	{r4, r5, r6, lr}
 800aeb0:	4d06      	ldr	r5, [pc, #24]	; (800aecc <_isatty_r+0x20>)
 800aeb2:	0004      	movs	r4, r0
 800aeb4:	0008      	movs	r0, r1
 800aeb6:	602b      	str	r3, [r5, #0]
 800aeb8:	f7f8 ff3e 	bl	8003d38 <_isatty>
 800aebc:	1c43      	adds	r3, r0, #1
 800aebe:	d103      	bne.n	800aec8 <_isatty_r+0x1c>
 800aec0:	682b      	ldr	r3, [r5, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d000      	beq.n	800aec8 <_isatty_r+0x1c>
 800aec6:	6023      	str	r3, [r4, #0]
 800aec8:	bd70      	pop	{r4, r5, r6, pc}
 800aeca:	46c0      	nop			; (mov r8, r8)
 800aecc:	2000031c 	.word	0x2000031c

0800aed0 <_lseek_r>:
 800aed0:	b570      	push	{r4, r5, r6, lr}
 800aed2:	0004      	movs	r4, r0
 800aed4:	0008      	movs	r0, r1
 800aed6:	0011      	movs	r1, r2
 800aed8:	001a      	movs	r2, r3
 800aeda:	2300      	movs	r3, #0
 800aedc:	4d05      	ldr	r5, [pc, #20]	; (800aef4 <_lseek_r+0x24>)
 800aede:	602b      	str	r3, [r5, #0]
 800aee0:	f7f8 ff33 	bl	8003d4a <_lseek>
 800aee4:	1c43      	adds	r3, r0, #1
 800aee6:	d103      	bne.n	800aef0 <_lseek_r+0x20>
 800aee8:	682b      	ldr	r3, [r5, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d000      	beq.n	800aef0 <_lseek_r+0x20>
 800aeee:	6023      	str	r3, [r4, #0]
 800aef0:	bd70      	pop	{r4, r5, r6, pc}
 800aef2:	46c0      	nop			; (mov r8, r8)
 800aef4:	2000031c 	.word	0x2000031c

0800aef8 <_read_r>:
 800aef8:	b570      	push	{r4, r5, r6, lr}
 800aefa:	0004      	movs	r4, r0
 800aefc:	0008      	movs	r0, r1
 800aefe:	0011      	movs	r1, r2
 800af00:	001a      	movs	r2, r3
 800af02:	2300      	movs	r3, #0
 800af04:	4d05      	ldr	r5, [pc, #20]	; (800af1c <_read_r+0x24>)
 800af06:	602b      	str	r3, [r5, #0]
 800af08:	f7f8 fec5 	bl	8003c96 <_read>
 800af0c:	1c43      	adds	r3, r0, #1
 800af0e:	d103      	bne.n	800af18 <_read_r+0x20>
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d000      	beq.n	800af18 <_read_r+0x20>
 800af16:	6023      	str	r3, [r4, #0]
 800af18:	bd70      	pop	{r4, r5, r6, pc}
 800af1a:	46c0      	nop			; (mov r8, r8)
 800af1c:	2000031c 	.word	0x2000031c

0800af20 <_init>:
 800af20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af22:	46c0      	nop			; (mov r8, r8)
 800af24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af26:	bc08      	pop	{r3}
 800af28:	469e      	mov	lr, r3
 800af2a:	4770      	bx	lr

0800af2c <_fini>:
 800af2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2e:	46c0      	nop			; (mov r8, r8)
 800af30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af32:	bc08      	pop	{r3}
 800af34:	469e      	mov	lr, r3
 800af36:	4770      	bx	lr
